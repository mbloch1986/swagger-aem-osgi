#import "OAIConfigmgrApi.h"
#import "OAIQueryParamCollection.h"
#import "OAIApiClient.h"
#import "OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo.h"
#import "OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo.h"
#import "OAIAnalyticsComponentQueryCacheServiceInfo.h"
#import "OAIApacheSlingHealthCheckResultHTMLSerializerInfo.h"
#import "OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo.h"
#import "OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo.h"
#import "OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo.h"
#import "OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo.h"
#import "OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo.h"
#import "OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo.h"
#import "OAIComAdobeCqAccountApiAccountManagementServiceInfo.h"
#import "OAIComAdobeCqAccountImplAccountManagementServletInfo.h"
#import "OAIComAdobeCqAddressImplLocationLocationListServletInfo.h"
#import "OAIComAdobeCqAuditPurgeDamInfo.h"
#import "OAIComAdobeCqAuditPurgePagesInfo.h"
#import "OAIComAdobeCqAuditPurgeReplicationInfo.h"
#import "OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo.h"
#import "OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo.h"
#import "OAIComAdobeCqCdnRewriterImplCDNRewriterInfo.h"
#import "OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo.h"
#import "OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo.h"
#import "OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo.h"
#import "OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo.h"
#import "OAIComAdobeCqCommerceImplAssetVideoHandlerInfo.h"
#import "OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo.h"
#import "OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo.h"
#import "OAIComAdobeCqCommercePimImplPageEventListenerInfo.h"
#import "OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo.h"
#import "OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo.h"
#import "OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo.h"
#import "OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo.h"
#import "OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo.h"
#import "OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo.h"
#import "OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo.h"
#import "OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo.h"
#import "OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo.h"
#import "OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo.h"
#import "OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo.h"
#import "OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo.h"
#import "OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo.h"
#import "OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo.h"
#import "OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo.h"
#import "OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo.h"
#import "OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo.h"
#import "OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo.h"
#import "OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo.h"
#import "OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo.h"
#import "OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo.h"
#import "OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo.h"
#import "OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo.h"
#import "OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo.h"
#import "OAIComAdobeCqHcContentPackagesHealthCheckInfo.h"
#import "OAIComAdobeCqHistoryImplHistoryRequestFilterInfo.h"
#import "OAIComAdobeCqHistoryImplHistoryServiceImplInfo.h"
#import "OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo.h"
#import "OAIComAdobeCqProjectsImplServletProjectImageServletInfo.h"
#import "OAIComAdobeCqProjectsPurgeSchedulerInfo.h"
#import "OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo.h"
#import "OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo.h"
#import "OAIComAdobeCqScreensDeviceImplDeviceServiceInfo.h"
#import "OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo.h"
#import "OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo.h"
#import "OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo.h"
#import "OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo.h"
#import "OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo.h"
#import "OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo.h"
#import "OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo.h"
#import "OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo.h"
#import "OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo.h"
#import "OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo.h"
#import "OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo.h"
#import "OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo.h"
#import "OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo.h"
#import "OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo.h"
#import "OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo.h"
#import "OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo.h"
#import "OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo.h"
#import "OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo.h"
#import "OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo.h"
#import "OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo.h"
#import "OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo.h"
#import "OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo.h"
#import "OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo.h"
#import "OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo.h"
#import "OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo.h"
#import "OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo.h"
#import "OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo.h"
#import "OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo.h"
#import "OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo.h"
#import "OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo.h"
#import "OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo.h"
#import "OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo.h"
#import "OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo.h"
#import "OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo.h"
#import "OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo.h"
#import "OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo.h"
#import "OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo.h"
#import "OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo.h"
#import "OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo.h"
#import "OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo.h"
#import "OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo.h"
#import "OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo.h"
#import "OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo.h"
#import "OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo.h"
#import "OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo.h"
#import "OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo.h"
#import "OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo.h"
#import "OAIComAdobeCqSocialGroupImplGroupServiceImplInfo.h"
#import "OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo.h"
#import "OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo.h"
#import "OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo.h"
#import "OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo.h"
#import "OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo.h"
#import "OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo.h"
#import "OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo.h"
#import "OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo.h"
#import "OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo.h"
#import "OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo.h"
#import "OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo.h"
#import "OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo.h"
#import "OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo.h"
#import "OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo.h"
#import "OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo.h"
#import "OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo.h"
#import "OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo.h"
#import "OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo.h"
#import "OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo.h"
#import "OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo.h"
#import "OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo.h"
#import "OAIComAdobeCqSocialScoringImplScoringEventListenerInfo.h"
#import "OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo.h"
#import "OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo.h"
#import "OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo.h"
#import "OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo.h"
#import "OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo.h"
#import "OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo.h"
#import "OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo.h"
#import "OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo.h"
#import "OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo.h"
#import "OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo.h"
#import "OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo.h"
#import "OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo.h"
#import "OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo.h"
#import "OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo.h"
#import "OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo.h"
#import "OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo.h"
#import "OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo.h"
#import "OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo.h"
#import "OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo.h"
#import "OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo.h"
#import "OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo.h"
#import "OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo.h"
#import "OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo.h"
#import "OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo.h"
#import "OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo.h"
#import "OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo.h"
#import "OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo.h"
#import "OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo.h"
#import "OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo.h"
#import "OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo.h"
#import "OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo.h"
#import "OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo.h"
#import "OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo.h"
#import "OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo.h"
#import "OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo.h"
#import "OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo.h"
#import "OAIComAdobeFormsCommonServletTempCleanUpTaskInfo.h"
#import "OAIComAdobeGraniteAcpPlatformPlatformServletInfo.h"
#import "OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo.h"
#import "OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo.h"
#import "OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo.h"
#import "OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo.h"
#import "OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo.h"
#import "OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo.h"
#import "OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo.h"
#import "OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo.h"
#import "OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo.h"
#import "OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo.h"
#import "OAIComAdobeGraniteAuthImsInfo.h"
#import "OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo.h"
#import "OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo.h"
#import "OAIComAdobeGraniteAuthOauthProviderInfo.h"
#import "OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo.h"
#import "OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo.h"
#import "OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo.h"
#import "OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo.h"
#import "OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo.h"
#import "OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo.h"
#import "OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo.h"
#import "OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo.h"
#import "OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo.h"
#import "OAIComAdobeGraniteContexthubImplContextHubImplInfo.h"
#import "OAIComAdobeGraniteCorsImplCORSPolicyImplInfo.h"
#import "OAIComAdobeGraniteCsrfImplCSRFFilterInfo.h"
#import "OAIComAdobeGraniteCsrfImplCSRFServletInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo.h"
#import "OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo.h"
#import "OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo.h"
#import "OAIComAdobeGraniteFragsImplRandomFeatureInfo.h"
#import "OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo.h"
#import "OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo.h"
#import "OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo.h"
#import "OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo.h"
#import "OAIComAdobeGraniteInfocollectorInfoCollectorInfo.h"
#import "OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo.h"
#import "OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo.h"
#import "OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo.h"
#import "OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo.h"
#import "OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo.h"
#import "OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo.h"
#import "OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo.h"
#import "OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo.h"
#import "OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo.h"
#import "OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo.h"
#import "OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo.h"
#import "OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo.h"
#import "OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo.h"
#import "OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo.h"
#import "OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo.h"
#import "OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo.h"
#import "OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo.h"
#import "OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo.h"
#import "OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo.h"
#import "OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo.h"
#import "OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo.h"
#import "OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo.h"
#import "OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo.h"
#import "OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo.h"
#import "OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo.h"
#import "OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo.h"
#import "OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo.h"
#import "OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo.h"
#import "OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo.h"
#import "OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo.h"
#import "OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo.h"
#import "OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo.h"
#import "OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo.h"
#import "OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo.h"
#import "OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo.h"
#import "OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo.h"
#import "OAIComAdobeGraniteRestImplServletDefaultGETServletInfo.h"
#import "OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo.h"
#import "OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo.h"
#import "OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo.h"
#import "OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo.h"
#import "OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo.h"
#import "OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo.h"
#import "OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo.h"
#import "OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo.h"
#import "OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo.h"
#import "OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo.h"
#import "OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo.h"
#import "OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo.h"
#import "OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo.h"
#import "OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo.h"
#import "OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo.h"
#import "OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo.h"
#import "OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo.h"
#import "OAIComAdobeGraniteWorkflowPurgeSchedulerInfo.h"
#import "OAIComAdobeOctopusNcommBootstrapInfo.h"
#import "OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo.h"
#import "OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo.h"
#import "OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo.h"
#import "OAIComDayCommonsHttpclientInfo.h"
#import "OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo.h"
#import "OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo.h"
#import "OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo.h"
#import "OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo.h"
#import "OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo.h"
#import "OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo.h"
#import "OAIComDayCqAuthImplCugCugSupportImplInfo.h"
#import "OAIComDayCqAuthImplLoginSelectorHandlerInfo.h"
#import "OAIComDayCqCommonsImplExternalizerImplInfo.h"
#import "OAIComDayCqCommonsServletsRootMappingServletInfo.h"
#import "OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo.h"
#import "OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo.h"
#import "OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo.h"
#import "OAIComDayCqContentsyncImplContentSyncManagerImplInfo.h"
#import "OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo.h"
#import "OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo.h"
#import "OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo.h"
#import "OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo.h"
#import "OAIComDayCqDamCoreImplAssetMoveListenerInfo.h"
#import "OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo.h"
#import "OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo.h"
#import "OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo.h"
#import "OAIComDayCqDamCoreImplDamChangeEventListenerInfo.h"
#import "OAIComDayCqDamCoreImplDamEventPurgeServiceInfo.h"
#import "OAIComDayCqDamCoreImplDamEventRecorderImplInfo.h"
#import "OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo.h"
#import "OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo.h"
#import "OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo.h"
#import "OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo.h"
#import "OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo.h"
#import "OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo.h"
#import "OAIComDayCqDamCoreImplHandlerJpegHandlerInfo.h"
#import "OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo.h"
#import "OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo.h"
#import "OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo.h"
#import "OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo.h"
#import "OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo.h"
#import "OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo.h"
#import "OAIComDayCqDamCoreImplLightboxLightboxServletInfo.h"
#import "OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo.h"
#import "OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo.h"
#import "OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo.h"
#import "OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo.h"
#import "OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo.h"
#import "OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo.h"
#import "OAIComDayCqDamCoreImplRenditionMakerImplInfo.h"
#import "OAIComDayCqDamCoreImplReportsReportExportServiceInfo.h"
#import "OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo.h"
#import "OAIComDayCqDamCoreImplServletAssetDownloadServletInfo.h"
#import "OAIComDayCqDamCoreImplServletAssetStatusServletInfo.h"
#import "OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo.h"
#import "OAIComDayCqDamCoreImplServletBatchMetadataServletInfo.h"
#import "OAIComDayCqDamCoreImplServletBinaryProviderServletInfo.h"
#import "OAIComDayCqDamCoreImplServletCollectionServletInfo.h"
#import "OAIComDayCqDamCoreImplServletCollectionsServletInfo.h"
#import "OAIComDayCqDamCoreImplServletCompanionServletInfo.h"
#import "OAIComDayCqDamCoreImplServletCreateAssetServletInfo.h"
#import "OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo.h"
#import "OAIComDayCqDamCoreImplServletGuidLookupFilterInfo.h"
#import "OAIComDayCqDamCoreImplServletHealthCheckServletInfo.h"
#import "OAIComDayCqDamCoreImplServletMetadataGetServletInfo.h"
#import "OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo.h"
#import "OAIComDayCqDamCoreImplServletResourceCollectionServletInfo.h"
#import "OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo.h"
#import "OAIComDayCqDamCoreImplUnzipUnzipConfigInfo.h"
#import "OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo.h"
#import "OAIComDayCqDamCoreProcessExtractMetadataProcessInfo.h"
#import "OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo.h"
#import "OAIComDayCqDamHandlerFfmpegLocatorImplInfo.h"
#import "OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo.h"
#import "OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo.h"
#import "OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo.h"
#import "OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo.h"
#import "OAIComDayCqDamIdsImplIDSJobProcessorInfo.h"
#import "OAIComDayCqDamIdsImplIDSPoolManagerImplInfo.h"
#import "OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo.h"
#import "OAIComDayCqDamInddImplServletSnippetCreationServletInfo.h"
#import "OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo.h"
#import "OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo.h"
#import "OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo.h"
#import "OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo.h"
#import "OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo.h"
#import "OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo.h"
#import "OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo.h"
#import "OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo.h"
#import "OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo.h"
#import "OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo.h"
#import "OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo.h"
#import "OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo.h"
#import "OAIComDayCqDamScene7ImplScene7APIClientImplInfo.h"
#import "OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo.h"
#import "OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo.h"
#import "OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo.h"
#import "OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo.h"
#import "OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo.h"
#import "OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo.h"
#import "OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo.h"
#import "OAIComDayCqDamVideoImplServletVideoTestServletInfo.h"
#import "OAIComDayCqExtwidgetServletsImageSpriteServletInfo.h"
#import "OAIComDayCqImageInternalFontFontHelperInfo.h"
#import "OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo.h"
#import "OAIComDayCqMailerDefaultMailServiceInfo.h"
#import "OAIComDayCqMailerImplCqMailingServiceInfo.h"
#import "OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo.h"
#import "OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo.h"
#import "OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo.h"
#import "OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo.h"
#import "OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo.h"
#import "OAIComDayCqMcmImplMCMConfigurationInfo.h"
#import "OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo.h"
#import "OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo.h"
#import "OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo.h"
#import "OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo.h"
#import "OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo.h"
#import "OAIComDayCqNotificationImplNotificationServiceImplInfo.h"
#import "OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo.h"
#import "OAIComDayCqPollingImporterImplManagedPollConfigImplInfo.h"
#import "OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo.h"
#import "OAIComDayCqPollingImporterImplPollingImporterImplInfo.h"
#import "OAIComDayCqReplicationAuditReplicationEventListenerInfo.h"
#import "OAIComDayCqReplicationContentStaticContentBuilderInfo.h"
#import "OAIComDayCqReplicationImplAgentManagerImplInfo.h"
#import "OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo.h"
#import "OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo.h"
#import "OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo.h"
#import "OAIComDayCqReplicationImplReplicationReceiverImplInfo.h"
#import "OAIComDayCqReplicationImplReplicatorImplInfo.h"
#import "OAIComDayCqReplicationImplReverseReplicatorInfo.h"
#import "OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo.h"
#import "OAIComDayCqReplicationImplTransportHttpInfo.h"
#import "OAIComDayCqReportingImplCacheCacheImplInfo.h"
#import "OAIComDayCqReportingImplConfigServiceImplInfo.h"
#import "OAIComDayCqReportingImplRLogAnalyzerInfo.h"
#import "OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo.h"
#import "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo.h"
#import "OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo.h"
#import "OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo.h"
#import "OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo.h"
#import "OAIComDayCqSearchImplBuilderQueryBuilderImplInfo.h"
#import "OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo.h"
#import "OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo.h"
#import "OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo.h"
#import "OAIComDayCqSecurityACLSetupInfo.h"
#import "OAIComDayCqStatisticsImplStatisticsServiceImplInfo.h"
#import "OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo.h"
#import "OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo.h"
#import "OAIComDayCqTaggingImplTagGarbageCollectorInfo.h"
#import "OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo.h"
#import "OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo.h"
#import "OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo.h"
#import "OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo.h"
#import "OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo.h"
#import "OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo.h"
#import "OAIComDayCqWcmCoreImplEventPagePostProcessorInfo.h"
#import "OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo.h"
#import "OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo.h"
#import "OAIComDayCqWcmCoreImplLanguageManagerImplInfo.h"
#import "OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo.h"
#import "OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo.h"
#import "OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo.h"
#import "OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo.h"
#import "OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo.h"
#import "OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo.h"
#import "OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo.h"
#import "OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo.h"
#import "OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo.h"
#import "OAIComDayCqWcmCoreImplServletsThumbnailServletInfo.h"
#import "OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo.h"
#import "OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo.h"
#import "OAIComDayCqWcmCoreImplVersionManagerImplInfo.h"
#import "OAIComDayCqWcmCoreImplVersionPurgeTaskInfo.h"
#import "OAIComDayCqWcmCoreImplWCMDebugFilterInfo.h"
#import "OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo.h"
#import "OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo.h"
#import "OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo.h"
#import "OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo.h"
#import "OAIComDayCqWcmCoreWCMRequestFilterInfo.h"
#import "OAIComDayCqWcmDesignimporterDesignPackageImporterInfo.h"
#import "OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo.h"
#import "OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo.h"
#import "OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo.h"
#import "OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo.h"
#import "OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo.h"
#import "OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo.h"
#import "OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo.h"
#import "OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo.h"
#import "OAIComDayCqWcmFoundationFormsImplMailServletInfo.h"
#import "OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo.h"
#import "OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo.h"
#import "OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo.h"
#import "OAIComDayCqWcmFoundationImplPageRedirectServletInfo.h"
#import "OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo.h"
#import "OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo.h"
#import "OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo.h"
#import "OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo.h"
#import "OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo.h"
#import "OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo.h"
#import "OAIComDayCqWcmMsmImplRolloutManagerImplInfo.h"
#import "OAIComDayCqWcmMsmImplServletsAuditLogServletInfo.h"
#import "OAIComDayCqWcmNotificationEmailImplEmailChannelInfo.h"
#import "OAIComDayCqWcmNotificationImplNotificationManagerImplInfo.h"
#import "OAIComDayCqWcmScriptingImplBVPManagerInfo.h"
#import "OAIComDayCqWcmUndoUndoConfigInfo.h"
#import "OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo.h"
#import "OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo.h"
#import "OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo.h"
#import "OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo.h"
#import "OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo.h"
#import "OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo.h"
#import "OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo.h"
#import "OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo.h"
#import "OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo.h"
#import "OAIGuideLocalizationServiceInfo.h"
#import "OAIMessagingUserComponentFactoryInfo.h"
#import "OAIOrgApacheAriesJmxFrameworkStateConfigInfo.h"
#import "OAIOrgApacheFelixEventadminImplEventAdminInfo.h"
#import "OAIOrgApacheFelixHttpInfo.h"
#import "OAIOrgApacheFelixHttpSslfilterSslFilterInfo.h"
#import "OAIOrgApacheFelixJaasConfigurationFactoryInfo.h"
#import "OAIOrgApacheFelixJaasConfigurationSpiInfo.h"
#import "OAIOrgApacheFelixScrScrServiceInfo.h"
#import "OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo.h"
#import "OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo.h"
#import "OAIOrgApacheFelixSystemreadyImplServicesCheckInfo.h"
#import "OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo.h"
#import "OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo.h"
#import "OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo.h"
#import "OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo.h"
#import "OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo.h"
#import "OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo.h"
#import "OAIOrgApacheHttpProxyconfiguratorInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo.h"
#import "OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo.h"
#import "OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo.h"
#import "OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo.h"
#import "OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo.h"
#import "OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo.h"
#import "OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo.h"
#import "OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo.h"
#import "OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo.h"
#import "OAIOrgApacheSlingAuthCoreImplLogoutServletInfo.h"
#import "OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo.h"
#import "OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo.h"
#import "OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo.h"
#import "OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo.h"
#import "OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo.h"
#import "OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo.h"
#import "OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo.h"
#import "OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo.h"
#import "OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo.h"
#import "OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo.h"
#import "OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo.h"
#import "OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo.h"
#import "OAIOrgApacheSlingCommonsLogLogManagerInfo.h"
#import "OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo.h"
#import "OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo.h"
#import "OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo.h"
#import "OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo.h"
#import "OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo.h"
#import "OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo.h"
#import "OAIOrgApacheSlingDatasourceDataSourceFactoryInfo.h"
#import "OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo.h"
#import "OAIOrgApacheSlingDiscoveryOakConfigInfo.h"
#import "OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo.h"
#import "OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo.h"
#import "OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo.h"
#import "OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo.h"
#import "OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo.h"
#import "OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo.h"
#import "OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo.h"
#import "OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo.h"
#import "OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo.h"
#import "OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo.h"
#import "OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo.h"
#import "OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo.h"
#import "OAIOrgApacheSlingEngineImplLogRequestLoggerInfo.h"
#import "OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo.h"
#import "OAIOrgApacheSlingEngineImplSlingMainServletInfo.h"
#import "OAIOrgApacheSlingEngineParametersInfo.h"
#import "OAIOrgApacheSlingEventImplEventingThreadPoolInfo.h"
#import "OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo.h"
#import "OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo.h"
#import "OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo.h"
#import "OAIOrgApacheSlingEventJobsQueueConfigurationInfo.h"
#import "OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo.h"
#import "OAIOrgApacheSlingFeatureflagsFeatureInfo.h"
#import "OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo.h"
#import "OAIOrgApacheSlingHapiImplHApiUtilImplInfo.h"
#import "OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo.h"
#import "OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo.h"
#import "OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo.h"
#import "OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo.h"
#import "OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo.h"
#import "OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo.h"
#import "OAIOrgApacheSlingI18nImplI18NFilterInfo.h"
#import "OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo.h"
#import "OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo.h"
#import "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo.h"
#import "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo.h"
#import "OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo.h"
#import "OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo.h"
#import "OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo.h"
#import "OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo.h"
#import "OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo.h"
#import "OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo.h"
#import "OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo.h"
#import "OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo.h"
#import "OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo.h"
#import "OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo.h"
#import "OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo.h"
#import "OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo.h"
#import "OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo.h"
#import "OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo.h"
#import "OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo.h"
#import "OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo.h"
#import "OAIOrgApacheSlingResourcemergerPickerOverridingInfo.h"
#import "OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo.h"
#import "OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo.h"
#import "OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo.h"
#import "OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo.h"
#import "OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo.h"
#import "OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo.h"
#import "OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo.h"
#import "OAIOrgApacheSlingSecurityImplReferrerFilterInfo.h"
#import "OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo.h"
#import "OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo.h"
#import "OAIOrgApacheSlingServletsGetDefaultGetServletInfo.h"
#import "OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo.h"
#import "OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo.h"
#import "OAIOrgApacheSlingServletsPostImplSlingPostServletInfo.h"
#import "OAIOrgApacheSlingServletsResolverSlingServletResolverInfo.h"
#import "OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo.h"
#import "OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo.h"
#import "OAIOrgApacheSlingTenantInternalTenantProviderImplInfo.h"
#import "OAIOrgApacheSlingTracerInternalLogTracerInfo.h"
#import "OAIOrgApacheSlingXssImplXSSFilterImplInfo.h"


@interface OAIConfigmgrApi ()

@property (nonatomic, strong, readwrite) NSMutableDictionary *mutableDefaultHeaders;

@end

@implementation OAIConfigmgrApi

NSString* kOAIConfigmgrApiErrorDomain = @"OAIConfigmgrApiErrorDomain";
NSInteger kOAIConfigmgrApiMissingParamErrorCode = 234513;

@synthesize apiClient = _apiClient;

#pragma mark - Initialize methods

- (instancetype) init {
    return [self initWithApiClient:[OAIApiClient sharedClient]];
}


-(instancetype) initWithApiClient:(OAIApiClient *)apiClient {
    self = [super init];
    if (self) {
        _apiClient = apiClient;
        _mutableDefaultHeaders = [NSMutableDictionary dictionary];
    }
    return self;
}

#pragma mark -

-(NSString*) defaultHeaderForKey:(NSString*)key {
    return self.mutableDefaultHeaders[key];
}

-(void) setDefaultHeaderValue:(NSString*) value forKey:(NSString*)key {
    [self.mutableDefaultHeaders setValue:value forKey:key];
}

-(NSDictionary *)defaultHeaders {
    return self.mutableDefaultHeaders;
}

#pragma mark - Api Methods

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param showPlaceholder  (optional)
///
///  @param maximumCacheEntries  (optional)
///
///  @param afScriptingCompatversion  (optional)
///
///  @param makeFileNameUnique  (optional)
///
///  @param generatingCompliantData  (optional)
///
///  @returns OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo*
///
-(NSURLSessionTask*) adaptiveFormAndInteractiveCommunicationWebChannelConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    showPlaceholder: (NSNumber*) showPlaceholder
    maximumCacheEntries: (NSNumber*) maximumCacheEntries
    afScriptingCompatversion: (NSString*) afScriptingCompatversion
    makeFileNameUnique: (NSNumber*) makeFileNameUnique
    generatingCompliantData: (NSNumber*) generatingCompliantData
    completionHandler: (void (^)(OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (showPlaceholder != nil) {
        queryParams[@"showPlaceholder"] = [showPlaceholder isEqual:@(YES)] ? @"true" : @"false";
    }
    if (maximumCacheEntries != nil) {
        queryParams[@"maximumCacheEntries"] = maximumCacheEntries;
    }
    if (afScriptingCompatversion != nil) {
        queryParams[@"af.scripting.compatversion"] = afScriptingCompatversion;
    }
    if (makeFileNameUnique != nil) {
        queryParams[@"makeFileNameUnique"] = [makeFileNameUnique isEqual:@(YES)] ? @"true" : @"false";
    }
    if (generatingCompliantData != nil) {
        queryParams[@"generatingCompliantData"] = [generatingCompliantData isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIAdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fontList  (optional)
///
///  @returns OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo*
///
-(NSURLSessionTask*) adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fontList: (NSArray<NSString*>*) fontList
    completionHandler: (void (^)(OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fontList != nil) {
        queryParams[@"fontList"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fontList format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIAdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsComponentQueryCacheSize  (optional)
///
///  @returns OAIAnalyticsComponentQueryCacheServiceInfo*
///
-(NSURLSessionTask*) analyticsComponentQueryCacheServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsComponentQueryCacheSize: (NSNumber*) cqAnalyticsComponentQueryCacheSize
    completionHandler: (void (^)(OAIAnalyticsComponentQueryCacheServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/Analytics Component Query Cache Service"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsComponentQueryCacheSize != nil) {
        queryParams[@"cq.analytics.component.query.cache.size"] = cqAnalyticsComponentQueryCacheSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIAnalyticsComponentQueryCacheServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIAnalyticsComponentQueryCacheServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param styleString  (optional)
///
///  @returns OAIApacheSlingHealthCheckResultHTMLSerializerInfo*
///
-(NSURLSessionTask*) apacheSlingHealthCheckResultHTMLSerializerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    styleString: (NSString*) styleString
    completionHandler: (void (^)(OAIApacheSlingHealthCheckResultHTMLSerializerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (styleString != nil) {
        queryParams[@"styleString"] = styleString;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIApacheSlingHealthCheckResultHTMLSerializerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIApacheSlingHealthCheckResultHTMLSerializerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param formsManagerConfigIncludeOOTBTemplates  (optional)
///
///  @param formsManagerConfigIncludeDeprecatedTemplates  (optional)
///
///  @returns OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo*
///
-(NSURLSessionTask*) comAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    formsManagerConfigIncludeOOTBTemplates: (NSNumber*) formsManagerConfigIncludeOOTBTemplates
    formsManagerConfigIncludeDeprecatedTemplates: (NSNumber*) formsManagerConfigIncludeDeprecatedTemplates
    completionHandler: (void (^)(OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (formsManagerConfigIncludeOOTBTemplates != nil) {
        queryParams[@"formsManagerConfig.includeOOTBTemplates"] = [formsManagerConfigIncludeOOTBTemplates isEqual:@(YES)] ? @"true" : @"false";
    }
    if (formsManagerConfigIncludeDeprecatedTemplates != nil) {
        queryParams[@"formsManagerConfig.includeDeprecatedTemplates"] = [formsManagerConfigIncludeDeprecatedTemplates isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isTransactionRecordingEnabled  (optional)
///
///  @returns OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo*
///
-(NSURLSessionTask*) comAdobeAemTransactionCoreImplTransactionRecorderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isTransactionRecordingEnabled: (NSNumber*) isTransactionRecordingEnabled
    completionHandler: (void (^)(OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isTransactionRecordingEnabled != nil) {
        queryParams[@"isTransactionRecordingEnabled"] = [isTransactionRecordingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemTransactionCoreImplTransactionRecorderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @returns OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo*
///
-(NSURLSessionTask*) comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    completionHandler: (void (^)(OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @returns OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo*
///
-(NSURLSessionTask*) comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    completionHandler: (void (^)(OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param preUpgradeMaintenanceTasks  (optional)
///
///  @param preUpgradeHcTags  (optional)
///
///  @returns OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo*
///
-(NSURLSessionTask*) comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    preUpgradeMaintenanceTasks: (NSArray<NSString*>*) preUpgradeMaintenanceTasks
    preUpgradeHcTags: (NSArray<NSString*>*) preUpgradeHcTags
    completionHandler: (void (^)(OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (preUpgradeMaintenanceTasks != nil) {
        queryParams[@"pre-upgrade.maintenance.tasks"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: preUpgradeMaintenanceTasks format: @"multi"];
    }
    if (preUpgradeHcTags != nil) {
        queryParams[@"pre-upgrade.hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: preUpgradeHcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param rootPath  (optional)
///
///  @param fixInconsistencies  (optional)
///
///  @returns OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo*
///
-(NSURLSessionTask*) comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    rootPath: (NSString*) rootPath
    fixInconsistencies: (NSNumber*) fixInconsistencies
    completionHandler: (void (^)(OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (rootPath != nil) {
        queryParams[@"root.path"] = rootPath;
    }
    if (fixInconsistencies != nil) {
        queryParams[@"fix.inconsistencies"] = [fixInconsistencies isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAccountmanagerTokenValidityPeriod  (optional)
///
///  @param cqAccountmanagerConfigRequestnewaccountMail  (optional)
///
///  @param cqAccountmanagerConfigRequestnewpwdMail  (optional)
///
///  @returns OAIComAdobeCqAccountApiAccountManagementServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqAccountApiAccountManagementServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAccountmanagerTokenValidityPeriod: (NSNumber*) cqAccountmanagerTokenValidityPeriod
    cqAccountmanagerConfigRequestnewaccountMail: (NSString*) cqAccountmanagerConfigRequestnewaccountMail
    cqAccountmanagerConfigRequestnewpwdMail: (NSString*) cqAccountmanagerConfigRequestnewpwdMail
    completionHandler: (void (^)(OAIComAdobeCqAccountApiAccountManagementServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAccountmanagerTokenValidityPeriod != nil) {
        queryParams[@"cq.accountmanager.token.validity.period"] = cqAccountmanagerTokenValidityPeriod;
    }
    if (cqAccountmanagerConfigRequestnewaccountMail != nil) {
        queryParams[@"cq.accountmanager.config.requestnewaccount.mail"] = cqAccountmanagerConfigRequestnewaccountMail;
    }
    if (cqAccountmanagerConfigRequestnewpwdMail != nil) {
        queryParams[@"cq.accountmanager.config.requestnewpwd.mail"] = cqAccountmanagerConfigRequestnewpwdMail;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAccountApiAccountManagementServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAccountApiAccountManagementServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAccountmanagerConfigInformnewaccountMail  (optional)
///
///  @param cqAccountmanagerConfigInformnewpwdMail  (optional)
///
///  @returns OAIComAdobeCqAccountImplAccountManagementServletInfo*
///
-(NSURLSessionTask*) comAdobeCqAccountImplAccountManagementServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAccountmanagerConfigInformnewaccountMail: (NSString*) cqAccountmanagerConfigInformnewaccountMail
    cqAccountmanagerConfigInformnewpwdMail: (NSString*) cqAccountmanagerConfigInformnewpwdMail
    completionHandler: (void (^)(OAIComAdobeCqAccountImplAccountManagementServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAccountmanagerConfigInformnewaccountMail != nil) {
        queryParams[@"cq.accountmanager.config.informnewaccount.mail"] = cqAccountmanagerConfigInformnewaccountMail;
    }
    if (cqAccountmanagerConfigInformnewpwdMail != nil) {
        queryParams[@"cq.accountmanager.config.informnewpwd.mail"] = cqAccountmanagerConfigInformnewpwdMail;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAccountImplAccountManagementServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAccountImplAccountManagementServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAddressLocationDefaultMaxResults  (optional)
///
///  @returns OAIComAdobeCqAddressImplLocationLocationListServletInfo*
///
-(NSURLSessionTask*) comAdobeCqAddressImplLocationLocationListServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAddressLocationDefaultMaxResults: (NSNumber*) cqAddressLocationDefaultMaxResults
    completionHandler: (void (^)(OAIComAdobeCqAddressImplLocationLocationListServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAddressLocationDefaultMaxResults != nil) {
        queryParams[@"cq.address.location.default.maxResults"] = cqAddressLocationDefaultMaxResults;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAddressImplLocationLocationListServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAddressImplLocationLocationListServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param auditlogRuleName  (optional)
///
///  @param auditlogRuleContentpath  (optional)
///
///  @param auditlogRuleMinimumage  (optional)
///
///  @param auditlogRuleTypes  (optional)
///
///  @returns OAIComAdobeCqAuditPurgeDamInfo*
///
-(NSURLSessionTask*) comAdobeCqAuditPurgeDamWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    auditlogRuleName: (NSString*) auditlogRuleName
    auditlogRuleContentpath: (NSString*) auditlogRuleContentpath
    auditlogRuleMinimumage: (NSNumber*) auditlogRuleMinimumage
    auditlogRuleTypes: (NSString*) auditlogRuleTypes
    completionHandler: (void (^)(OAIComAdobeCqAuditPurgeDamInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.audit.purge.Dam"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (auditlogRuleName != nil) {
        queryParams[@"auditlog.rule.name"] = auditlogRuleName;
    }
    if (auditlogRuleContentpath != nil) {
        queryParams[@"auditlog.rule.contentpath"] = auditlogRuleContentpath;
    }
    if (auditlogRuleMinimumage != nil) {
        queryParams[@"auditlog.rule.minimumage"] = auditlogRuleMinimumage;
    }
    if (auditlogRuleTypes != nil) {
        queryParams[@"auditlog.rule.types"] = auditlogRuleTypes;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAuditPurgeDamInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAuditPurgeDamInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param auditlogRuleName  (optional)
///
///  @param auditlogRuleContentpath  (optional)
///
///  @param auditlogRuleMinimumage  (optional)
///
///  @param auditlogRuleTypes  (optional)
///
///  @returns OAIComAdobeCqAuditPurgePagesInfo*
///
-(NSURLSessionTask*) comAdobeCqAuditPurgePagesWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    auditlogRuleName: (NSString*) auditlogRuleName
    auditlogRuleContentpath: (NSString*) auditlogRuleContentpath
    auditlogRuleMinimumage: (NSNumber*) auditlogRuleMinimumage
    auditlogRuleTypes: (NSString*) auditlogRuleTypes
    completionHandler: (void (^)(OAIComAdobeCqAuditPurgePagesInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.audit.purge.Pages"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (auditlogRuleName != nil) {
        queryParams[@"auditlog.rule.name"] = auditlogRuleName;
    }
    if (auditlogRuleContentpath != nil) {
        queryParams[@"auditlog.rule.contentpath"] = auditlogRuleContentpath;
    }
    if (auditlogRuleMinimumage != nil) {
        queryParams[@"auditlog.rule.minimumage"] = auditlogRuleMinimumage;
    }
    if (auditlogRuleTypes != nil) {
        queryParams[@"auditlog.rule.types"] = auditlogRuleTypes;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAuditPurgePagesInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAuditPurgePagesInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param auditlogRuleName  (optional)
///
///  @param auditlogRuleContentpath  (optional)
///
///  @param auditlogRuleMinimumage  (optional)
///
///  @param auditlogRuleTypes  (optional)
///
///  @returns OAIComAdobeCqAuditPurgeReplicationInfo*
///
-(NSURLSessionTask*) comAdobeCqAuditPurgeReplicationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    auditlogRuleName: (NSString*) auditlogRuleName
    auditlogRuleContentpath: (NSString*) auditlogRuleContentpath
    auditlogRuleMinimumage: (NSNumber*) auditlogRuleMinimumage
    auditlogRuleTypes: (NSString*) auditlogRuleTypes
    completionHandler: (void (^)(OAIComAdobeCqAuditPurgeReplicationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.audit.purge.Replication"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (auditlogRuleName != nil) {
        queryParams[@"auditlog.rule.name"] = auditlogRuleName;
    }
    if (auditlogRuleContentpath != nil) {
        queryParams[@"auditlog.rule.contentpath"] = auditlogRuleContentpath;
    }
    if (auditlogRuleMinimumage != nil) {
        queryParams[@"auditlog.rule.minimumage"] = auditlogRuleMinimumage;
    }
    if (auditlogRuleTypes != nil) {
        queryParams[@"auditlog.rule.types"] = auditlogRuleTypes;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqAuditPurgeReplicationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqAuditPurgeReplicationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param keypairId  (optional)
///
///  @param keypairAlias  (optional)
///
///  @param cdnrewriterAttributes  (optional)
///
///  @param cdnRewriterDistributionDomain  (optional)
///
///  @returns OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo*
///
-(NSURLSessionTask*) comAdobeCqCdnRewriterImplAWSCloudFrontRewriterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    keypairId: (NSString*) keypairId
    keypairAlias: (NSString*) keypairAlias
    cdnrewriterAttributes: (NSArray<NSString*>*) cdnrewriterAttributes
    cdnRewriterDistributionDomain: (NSString*) cdnRewriterDistributionDomain
    completionHandler: (void (^)(OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (keypairId != nil) {
        queryParams[@"keypair.id"] = keypairId;
    }
    if (keypairAlias != nil) {
        queryParams[@"keypair.alias"] = keypairAlias;
    }
    if (cdnrewriterAttributes != nil) {
        queryParams[@"cdnrewriter.attributes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cdnrewriterAttributes format: @"multi"];
    }
    if (cdnRewriterDistributionDomain != nil) {
        queryParams[@"cdn.rewriter.distribution.domain"] = cdnRewriterDistributionDomain;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cdnConfigDistributionDomain  (optional)
///
///  @param cdnConfigEnableRewriting  (optional)
///
///  @param cdnConfigPathPrefixes  (optional)
///
///  @param cdnConfigCdnttl  (optional)
///
///  @param cdnConfigApplicationProtocol  (optional)
///
///  @returns OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqCdnRewriterImplCDNConfigServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cdnConfigDistributionDomain: (NSString*) cdnConfigDistributionDomain
    cdnConfigEnableRewriting: (NSNumber*) cdnConfigEnableRewriting
    cdnConfigPathPrefixes: (NSArray<NSString*>*) cdnConfigPathPrefixes
    cdnConfigCdnttl: (NSNumber*) cdnConfigCdnttl
    cdnConfigApplicationProtocol: (NSString*) cdnConfigApplicationProtocol
    completionHandler: (void (^)(OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cdnConfigDistributionDomain != nil) {
        queryParams[@"cdn.config.distribution.domain"] = cdnConfigDistributionDomain;
    }
    if (cdnConfigEnableRewriting != nil) {
        queryParams[@"cdn.config.enable.rewriting"] = [cdnConfigEnableRewriting isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cdnConfigPathPrefixes != nil) {
        queryParams[@"cdn.config.path.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cdnConfigPathPrefixes format: @"multi"];
    }
    if (cdnConfigCdnttl != nil) {
        queryParams[@"cdn.config.cdnttl"] = cdnConfigCdnttl;
    }
    if (cdnConfigApplicationProtocol != nil) {
        queryParams[@"cdn.config.application.protocol"] = cdnConfigApplicationProtocol;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param cdnrewriterAttributes  (optional)
///
///  @param cdnRewriterDistributionDomain  (optional)
///
///  @returns OAIComAdobeCqCdnRewriterImplCDNRewriterInfo*
///
-(NSURLSessionTask*) comAdobeCqCdnRewriterImplCDNRewriterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    cdnrewriterAttributes: (NSArray<NSString*>*) cdnrewriterAttributes
    cdnRewriterDistributionDomain: (NSString*) cdnRewriterDistributionDomain
    completionHandler: (void (^)(OAIComAdobeCqCdnRewriterImplCDNRewriterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (cdnrewriterAttributes != nil) {
        queryParams[@"cdnrewriter.attributes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cdnrewriterAttributes format: @"multi"];
    }
    if (cdnRewriterDistributionDomain != nil) {
        queryParams[@"cdn.rewriter.distribution.domain"] = cdnRewriterDistributionDomain;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCdnRewriterImplCDNRewriterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCdnRewriterImplCDNRewriterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param flushAgents  (optional)
///
///  @returns OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo*
///
-(NSURLSessionTask*) comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    flushAgents: (NSArray<NSString*>*) flushAgents
    completionHandler: (void (^)(OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (flushAgents != nil) {
        queryParams[@"flush.agents"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: flushAgents format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommerceAssetHandlerActive  (optional)
///
///  @param cqCommerceAssetHandlerName  (optional)
///
///  @returns OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqCommerceImplAssetDynamicImageHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommerceAssetHandlerActive: (NSNumber*) cqCommerceAssetHandlerActive
    cqCommerceAssetHandlerName: (NSString*) cqCommerceAssetHandlerName
    completionHandler: (void (^)(OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommerceAssetHandlerActive != nil) {
        queryParams[@"cq.commerce.asset.handler.active"] = [cqCommerceAssetHandlerActive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqCommerceAssetHandlerName != nil) {
        queryParams[@"cq.commerce.asset.handler.name"] = cqCommerceAssetHandlerName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommerceImplAssetDynamicImageHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommerceAssetHandlerFallback  (optional)
///
///  @returns OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeCqCommerceImplAssetProductAssetHandlerProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommerceAssetHandlerFallback: (NSString*) cqCommerceAssetHandlerFallback
    completionHandler: (void (^)(OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommerceAssetHandlerFallback != nil) {
        queryParams[@"cq.commerce.asset.handler.fallback"] = cqCommerceAssetHandlerFallback;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommerceAssetHandlerActive  (optional)
///
///  @param cqCommerceAssetHandlerName  (optional)
///
///  @returns OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqCommerceImplAssetStaticImageHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommerceAssetHandlerActive: (NSNumber*) cqCommerceAssetHandlerActive
    cqCommerceAssetHandlerName: (NSString*) cqCommerceAssetHandlerName
    completionHandler: (void (^)(OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommerceAssetHandlerActive != nil) {
        queryParams[@"cq.commerce.asset.handler.active"] = [cqCommerceAssetHandlerActive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqCommerceAssetHandlerName != nil) {
        queryParams[@"cq.commerce.asset.handler.name"] = cqCommerceAssetHandlerName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommerceImplAssetStaticImageHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommerceAssetHandlerActive  (optional)
///
///  @param cqCommerceAssetHandlerName  (optional)
///
///  @returns OAIComAdobeCqCommerceImplAssetVideoHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqCommerceImplAssetVideoHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommerceAssetHandlerActive: (NSNumber*) cqCommerceAssetHandlerActive
    cqCommerceAssetHandlerName: (NSString*) cqCommerceAssetHandlerName
    completionHandler: (void (^)(OAIComAdobeCqCommerceImplAssetVideoHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommerceAssetHandlerActive != nil) {
        queryParams[@"cq.commerce.asset.handler.active"] = [cqCommerceAssetHandlerActive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqCommerceAssetHandlerName != nil) {
        queryParams[@"cq.commerce.asset.handler.name"] = cqCommerceAssetHandlerName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommerceImplAssetVideoHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommerceImplAssetVideoHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommercePromotionRoot  (optional)
///
///  @returns OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqCommerceImplPromotionPromotionManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommercePromotionRoot: (NSString*) cqCommercePromotionRoot
    completionHandler: (void (^)(OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommercePromotionRoot != nil) {
        queryParams[@"cq.commerce.promotion.root"] = cqCommercePromotionRoot;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommerceImplPromotionPromotionManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommerceCataloggeneratorBucketsize  (optional)
///
///  @param cqCommerceCataloggeneratorBucketname  (optional)
///
///  @param cqCommerceCataloggeneratorExcludedtemplateproperties  (optional)
///
///  @returns OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo*
///
-(NSURLSessionTask*) comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommerceCataloggeneratorBucketsize: (NSNumber*) cqCommerceCataloggeneratorBucketsize
    cqCommerceCataloggeneratorBucketname: (NSString*) cqCommerceCataloggeneratorBucketname
    cqCommerceCataloggeneratorExcludedtemplateproperties: (NSArray<NSString*>*) cqCommerceCataloggeneratorExcludedtemplateproperties
    completionHandler: (void (^)(OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommerceCataloggeneratorBucketsize != nil) {
        queryParams[@"cq.commerce.cataloggenerator.bucketsize"] = cqCommerceCataloggeneratorBucketsize;
    }
    if (cqCommerceCataloggeneratorBucketname != nil) {
        queryParams[@"cq.commerce.cataloggenerator.bucketname"] = cqCommerceCataloggeneratorBucketname;
    }
    if (cqCommerceCataloggeneratorExcludedtemplateproperties != nil) {
        queryParams[@"cq.commerce.cataloggenerator.excludedtemplateproperties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqCommerceCataloggeneratorExcludedtemplateproperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqCommercePageeventlistenerEnabled  (optional)
///
///  @returns OAIComAdobeCqCommercePimImplPageEventListenerInfo*
///
-(NSURLSessionTask*) comAdobeCqCommercePimImplPageEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqCommercePageeventlistenerEnabled: (NSNumber*) cqCommercePageeventlistenerEnabled
    completionHandler: (void (^)(OAIComAdobeCqCommercePimImplPageEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqCommercePageeventlistenerEnabled != nil) {
        queryParams[@"cq.commerce.pageeventlistener.enabled"] = [cqCommercePageeventlistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommercePimImplPageEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommercePimImplPageEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param feedGeneratorAlgorithm  (optional)
///
///  @returns OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqCommercePimImplProductfeedProductFeedServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    feedGeneratorAlgorithm: (NSString*) feedGeneratorAlgorithm
    completionHandler: (void (^)(OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (feedGeneratorAlgorithm != nil) {
        queryParams[@"Feed generator algorithm"] = feedGeneratorAlgorithm;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param reportingservicesUrl  (optional)
///
///  @returns OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqContentinsightImplReportingServicesSettingsProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    reportingservicesUrl: (NSString*) reportingservicesUrl
    completionHandler: (void (^)(OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (reportingservicesUrl != nil) {
        queryParams[@"reportingservices.url"] = reportingservicesUrl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param brightedgeUrl  (optional)
///
///  @returns OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo*
///
-(NSURLSessionTask*) comAdobeCqContentinsightImplServletsBrightEdgeProxyServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    brightedgeUrl: (NSString*) brightedgeUrl
    completionHandler: (void (^)(OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (brightedgeUrl != nil) {
        queryParams[@"brightedge.url"] = brightedgeUrl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param reportingservicesProxyWhitelist  (optional)
///
///  @returns OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo*
///
-(NSURLSessionTask*) comAdobeCqContentinsightImplServletsReportingServicesProxyServleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    reportingservicesProxyWhitelist: (NSArray<NSString*>*) reportingservicesProxyWhitelist
    completionHandler: (void (^)(OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (reportingservicesProxyWhitelist != nil) {
        queryParams[@"reportingservices.proxy.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: reportingservicesProxyWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param damCfmComponentResourceType  (optional)
///
///  @param damCfmComponentFileReferenceProp  (optional)
///
///  @param damCfmComponentElementsProp  (optional)
///
///  @param damCfmComponentVariationProp  (optional)
///
///  @returns OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDamCfmImplComponentComponentConfigImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    damCfmComponentResourceType: (NSString*) damCfmComponentResourceType
    damCfmComponentFileReferenceProp: (NSString*) damCfmComponentFileReferenceProp
    damCfmComponentElementsProp: (NSString*) damCfmComponentElementsProp
    damCfmComponentVariationProp: (NSString*) damCfmComponentVariationProp
    completionHandler: (void (^)(OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (damCfmComponentResourceType != nil) {
        queryParams[@"dam.cfm.component.resourceType"] = damCfmComponentResourceType;
    }
    if (damCfmComponentFileReferenceProp != nil) {
        queryParams[@"dam.cfm.component.fileReferenceProp"] = damCfmComponentFileReferenceProp;
    }
    if (damCfmComponentElementsProp != nil) {
        queryParams[@"dam.cfm.component.elementsProp"] = damCfmComponentElementsProp;
    }
    if (damCfmComponentVariationProp != nil) {
        queryParams[@"dam.cfm.component.variationProp"] = damCfmComponentVariationProp;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamCfmImplComponentComponentConfigImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param damCfmResourceTypes  (optional)
///
///  @param damCfmReferenceProperties  (optional)
///
///  @returns OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDamCfmImplConfFeatureConfigImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    damCfmResourceTypes: (NSArray<NSString*>*) damCfmResourceTypes
    damCfmReferenceProperties: (NSArray<NSString*>*) damCfmReferenceProperties
    completionHandler: (void (^)(OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (damCfmResourceTypes != nil) {
        queryParams[@"dam.cfm.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: damCfmResourceTypes format: @"multi"];
    }
    if (damCfmReferenceProperties != nil) {
        queryParams[@"dam.cfm.referenceProperties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: damCfmReferenceProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamCfmImplConfFeatureConfigImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pipelineType  (optional)
///
///  @returns OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo*
///
-(NSURLSessionTask*) comAdobeCqDamCfmImplContentRewriterAssetProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pipelineType: (NSString*) pipelineType
    completionHandler: (void (^)(OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pipelineType != nil) {
        queryParams[@"pipeline.type"] = pipelineType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pipelineType  (optional)
///
///  @returns OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo*
///
-(NSURLSessionTask*) comAdobeCqDamCfmImplContentRewriterParRangeFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pipelineType: (NSString*) pipelineType
    completionHandler: (void (^)(OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pipelineType != nil) {
        queryParams[@"pipeline.type"] = pipelineType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pipelineType  (optional)
///
///  @returns OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo*
///
-(NSURLSessionTask*) comAdobeCqDamCfmImplContentRewriterPayloadFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pipelineType: (NSString*) pipelineType
    completionHandler: (void (^)(OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pipelineType != nil) {
        queryParams[@"pipeline.type"] = pipelineType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxMemory  (optional)
///
///  @returns OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDamDmProcessImagePTiffManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxMemory: (NSNumber*) maxMemory
    completionHandler: (void (^)(OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxMemory != nil) {
        queryParams[@"maxMemory"] = maxMemory;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamDmProcessImagePTiffManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param dmreplicateonmodifyEnabled  (optional)
///
///  @param dmreplicateonmodifyForcesyncdeletes  (optional)
///
///  @returns OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo*
///
-(NSURLSessionTask*) comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    dmreplicateonmodifyEnabled: (NSNumber*) dmreplicateonmodifyEnabled
    dmreplicateonmodifyForcesyncdeletes: (NSNumber*) dmreplicateonmodifyForcesyncdeletes
    completionHandler: (void (^)(OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (dmreplicateonmodifyEnabled != nil) {
        queryParams[@"dmreplicateonmodify.enabled"] = [dmreplicateonmodifyEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (dmreplicateonmodifyForcesyncdeletes != nil) {
        queryParams[@"dmreplicateonmodify.forcesyncdeletes"] = [dmreplicateonmodifyForcesyncdeletes isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeDamMacSyncClientSoTimeout  (optional)
///
///  @returns OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDamMacSyncHelperImplMACSyncClientImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeDamMacSyncClientSoTimeout: (NSNumber*) comAdobeDamMacSyncClientSoTimeout
    completionHandler: (void (^)(OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeDamMacSyncClientSoTimeout != nil) {
        queryParams[@"com.adobe.dam.mac.sync.client.so.timeout"] = comAdobeDamMacSyncClientSoTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths  (optional)
///
///  @param comAdobeCqDamMacSyncDamsyncserviceSyncRenditions  (optional)
///
///  @param comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs  (optional)
///
///  @param comAdobeCqDamMacSyncDamsyncservicePlatform  (optional)
///
///  @returns OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDamMacSyncImplDAMSyncServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths: (NSArray<NSString*>*) comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths
    comAdobeCqDamMacSyncDamsyncserviceSyncRenditions: (NSNumber*) comAdobeCqDamMacSyncDamsyncserviceSyncRenditions
    comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs: (NSNumber*) comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs
    comAdobeCqDamMacSyncDamsyncservicePlatform: (NSString*) comAdobeCqDamMacSyncDamsyncservicePlatform
    completionHandler: (void (^)(OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths != nil) {
        queryParams[@"com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths format: @"multi"];
    }
    if (comAdobeCqDamMacSyncDamsyncserviceSyncRenditions != nil) {
        queryParams[@"com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions"] = [comAdobeCqDamMacSyncDamsyncserviceSyncRenditions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs != nil) {
        queryParams[@"com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms"] = comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs;
    }
    if (comAdobeCqDamMacSyncDamsyncservicePlatform != nil) {
        queryParams[@"com.adobe.cq.dam.mac.sync.damsyncservice.platform"] = comAdobeCqDamMacSyncDamsyncservicePlatform;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param nuiEnabled  (optional)
///
///  @param nuiServiceUrl  (optional)
///
///  @param nuiApiKey  (optional)
///
///  @returns OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo*
///
-(NSURLSessionTask*) comAdobeCqDamProcessorNuiImplNuiAssetProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    nuiEnabled: (NSNumber*) nuiEnabled
    nuiServiceUrl: (NSString*) nuiServiceUrl
    nuiApiKey: (NSString*) nuiApiKey
    completionHandler: (void (^)(OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (nuiEnabled != nil) {
        queryParams[@"nuiEnabled"] = [nuiEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (nuiServiceUrl != nil) {
        queryParams[@"nuiServiceUrl"] = nuiServiceUrl;
    }
    if (nuiApiKey != nil) {
        queryParams[@"nuiApiKey"] = nuiApiKey;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param tcpPort  (optional)
///
///  @param allowRemoteAccess  (optional)
///
///  @param maxRenderRgnPixels  (optional)
///
///  @param maxMessageSize  (optional)
///
///  @param randomAccessUrlTimeout  (optional)
///
///  @param workerThreads  (optional)
///
///  @returns OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo*
///
-(NSURLSessionTask*) comAdobeCqDamS7imagingImplIsImageServerComponentWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    tcpPort: (NSString*) tcpPort
    allowRemoteAccess: (NSNumber*) allowRemoteAccess
    maxRenderRgnPixels: (NSString*) maxRenderRgnPixels
    maxMessageSize: (NSString*) maxMessageSize
    randomAccessUrlTimeout: (NSNumber*) randomAccessUrlTimeout
    workerThreads: (NSNumber*) workerThreads
    completionHandler: (void (^)(OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (tcpPort != nil) {
        queryParams[@"TcpPort"] = tcpPort;
    }
    if (allowRemoteAccess != nil) {
        queryParams[@"AllowRemoteAccess"] = [allowRemoteAccess isEqual:@(YES)] ? @"true" : @"false";
    }
    if (maxRenderRgnPixels != nil) {
        queryParams[@"MaxRenderRgnPixels"] = maxRenderRgnPixels;
    }
    if (maxMessageSize != nil) {
        queryParams[@"MaxMessageSize"] = maxMessageSize;
    }
    if (randomAccessUrlTimeout != nil) {
        queryParams[@"RandomAccessUrlTimeout"] = randomAccessUrlTimeout;
    }
    if (workerThreads != nil) {
        queryParams[@"WorkerThreads"] = workerThreads;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamS7imagingImplIsImageServerComponentInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cacheEnable  (optional)
///
///  @param cacheRootPaths  (optional)
///
///  @param cacheMaxSize  (optional)
///
///  @param cacheMaxEntries  (optional)
///
///  @returns OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo*
///
-(NSURLSessionTask*) comAdobeCqDamS7imagingImplPsPlatformServerServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cacheEnable: (NSNumber*) cacheEnable
    cacheRootPaths: (NSArray<NSString*>*) cacheRootPaths
    cacheMaxSize: (NSNumber*) cacheMaxSize
    cacheMaxEntries: (NSNumber*) cacheMaxEntries
    completionHandler: (void (^)(OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cacheEnable != nil) {
        queryParams[@"cache.enable"] = [cacheEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cacheRootPaths != nil) {
        queryParams[@"cache.rootPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cacheRootPaths format: @"multi"];
    }
    if (cacheMaxSize != nil) {
        queryParams[@"cache.maxSize"] = cacheMaxSize;
    }
    if (cacheMaxEntries != nil) {
        queryParams[@"cache.maxEntries"] = cacheMaxEntries;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamS7imagingImplPsPlatformServerServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param pathPrefix  (optional)
///
///  @param createVersion  (optional)
///
///  @returns OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqDamWebdavImplIoAssetIOHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    pathPrefix: (NSString*) pathPrefix
    createVersion: (NSNumber*) createVersion
    completionHandler: (void (^)(OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (pathPrefix != nil) {
        queryParams[@"pathPrefix"] = pathPrefix;
    }
    if (createVersion != nil) {
        queryParams[@"createVersion"] = [createVersion isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamWebdavImplIoAssetIOHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamWebdavVersionLinkingEnable  (optional)
///
///  @param cqDamWebdavVersionLinkingSchedulerPeriod  (optional)
///
///  @param cqDamWebdavVersionLinkingStagingTimeout  (optional)
///
///  @returns OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo*
///
-(NSURLSessionTask*) comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamWebdavVersionLinkingEnable: (NSNumber*) cqDamWebdavVersionLinkingEnable
    cqDamWebdavVersionLinkingSchedulerPeriod: (NSNumber*) cqDamWebdavVersionLinkingSchedulerPeriod
    cqDamWebdavVersionLinkingStagingTimeout: (NSNumber*) cqDamWebdavVersionLinkingStagingTimeout
    completionHandler: (void (^)(OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamWebdavVersionLinkingEnable != nil) {
        queryParams[@"cq.dam.webdav.version.linking.enable"] = [cqDamWebdavVersionLinkingEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamWebdavVersionLinkingSchedulerPeriod != nil) {
        queryParams[@"cq.dam.webdav.version.linking.scheduler.period"] = cqDamWebdavVersionLinkingSchedulerPeriod;
    }
    if (cqDamWebdavVersionLinkingStagingTimeout != nil) {
        queryParams[@"cq.dam.webdav.version.linking.staging.timeout"] = cqDamWebdavVersionLinkingStagingTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters  (optional)
///
///  @returns OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqDamWebdavImplIoSpecialFilesHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters: (NSArray<NSString*>*) comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters
    completionHandler: (void (^)(OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters != nil) {
        queryParams[@"com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param firewallDeserializationWhitelist  (optional)
///
///  @param firewallDeserializationBlacklist  (optional)
///
///  @param firewallDeserializationDiagnostics  (optional)
///
///  @returns OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDeserfwImplDeserializationFirewallImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    firewallDeserializationWhitelist: (NSArray<NSString*>*) firewallDeserializationWhitelist
    firewallDeserializationBlacklist: (NSArray<NSString*>*) firewallDeserializationBlacklist
    firewallDeserializationDiagnostics: (NSString*) firewallDeserializationDiagnostics
    completionHandler: (void (^)(OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (firewallDeserializationWhitelist != nil) {
        queryParams[@"firewall.deserialization.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: firewallDeserializationWhitelist format: @"multi"];
    }
    if (firewallDeserializationBlacklist != nil) {
        queryParams[@"firewall.deserialization.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: firewallDeserializationBlacklist format: @"multi"];
    }
    if (firewallDeserializationDiagnostics != nil) {
        queryParams[@"firewall.deserialization.diagnostics"] = firewallDeserializationDiagnostics;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDeserfwImplDeserializationFirewallImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @returns OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDtmImplServiceDTMWebServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    connectionTimeout: (NSNumber*) connectionTimeout
    socketTimeout: (NSNumber*) socketTimeout
    completionHandler: (void (^)(OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (connectionTimeout != nil) {
        queryParams[@"connection.timeout"] = connectionTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socket.timeout"] = socketTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDtmImplServiceDTMWebServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param dtmStagingIpWhitelist  (optional)
///
///  @param dtmProductionIpWhitelist  (optional)
///
///  @returns OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo*
///
-(NSURLSessionTask*) comAdobeCqDtmImplServletsDTMDeployHookServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    dtmStagingIpWhitelist: (NSArray<NSString*>*) dtmStagingIpWhitelist
    dtmProductionIpWhitelist: (NSArray<NSString*>*) dtmProductionIpWhitelist
    completionHandler: (void (^)(OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (dtmStagingIpWhitelist != nil) {
        queryParams[@"dtm.staging.ip.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: dtmStagingIpWhitelist format: @"multi"];
    }
    if (dtmProductionIpWhitelist != nil) {
        queryParams[@"dtm.production.ip.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: dtmProductionIpWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDtmImplServletsDTMDeployHookServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param endpointUri  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @returns OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqDtmReactorImplServiceWebServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    endpointUri: (NSString*) endpointUri
    connectionTimeout: (NSNumber*) connectionTimeout
    socketTimeout: (NSNumber*) socketTimeout
    completionHandler: (void (^)(OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (endpointUri != nil) {
        queryParams[@"endpointUri"] = endpointUri;
    }
    if (connectionTimeout != nil) {
        queryParams[@"connectionTimeout"] = connectionTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socketTimeout"] = socketTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqDtmReactorImplServiceWebServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param disabledForGroups  (optional)
///
///  @returns OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo*
///
-(NSURLSessionTask*) comAdobeCqExperiencelogImplExperienceLogConfigServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    disabledForGroups: (NSArray<NSString*>*) disabledForGroups
    completionHandler: (void (^)(OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (disabledForGroups != nil) {
        queryParams[@"disabledForGroups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: disabledForGroups format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqExperiencelogImplExperienceLogConfigServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @param packageNames  (optional)
///
///  @returns OAIComAdobeCqHcContentPackagesHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeCqHcContentPackagesHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    packageNames: (NSArray<NSString*>*) packageNames
    completionHandler: (void (^)(OAIComAdobeCqHcContentPackagesHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    if (packageNames != nil) {
        queryParams[@"package.names"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqHcContentPackagesHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqHcContentPackagesHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param historyRequestFilterExcludedSelectors  (optional)
///
///  @param historyRequestFilterExcludedExtensions  (optional)
///
///  @returns OAIComAdobeCqHistoryImplHistoryRequestFilterInfo*
///
-(NSURLSessionTask*) comAdobeCqHistoryImplHistoryRequestFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    historyRequestFilterExcludedSelectors: (NSArray<NSString*>*) historyRequestFilterExcludedSelectors
    historyRequestFilterExcludedExtensions: (NSArray<NSString*>*) historyRequestFilterExcludedExtensions
    completionHandler: (void (^)(OAIComAdobeCqHistoryImplHistoryRequestFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (historyRequestFilterExcludedSelectors != nil) {
        queryParams[@"history.requestFilter.excludedSelectors"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: historyRequestFilterExcludedSelectors format: @"multi"];
    }
    if (historyRequestFilterExcludedExtensions != nil) {
        queryParams[@"history.requestFilter.excludedExtensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: historyRequestFilterExcludedExtensions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqHistoryImplHistoryRequestFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqHistoryImplHistoryRequestFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param historyServiceResourceTypes  (optional)
///
///  @param historyServicePathFilter  (optional)
///
///  @returns OAIComAdobeCqHistoryImplHistoryServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqHistoryImplHistoryServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    historyServiceResourceTypes: (NSArray<NSString*>*) historyServiceResourceTypes
    historyServicePathFilter: (NSArray<NSString*>*) historyServicePathFilter
    completionHandler: (void (^)(OAIComAdobeCqHistoryImplHistoryServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (historyServiceResourceTypes != nil) {
        queryParams[@"history.service.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: historyServiceResourceTypes format: @"multi"];
    }
    if (historyServicePathFilter != nil) {
        queryParams[@"history.service.pathFilter"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: historyServicePathFilter format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqHistoryImplHistoryServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqHistoryImplHistoryServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param inboxImplTypeproviderRegistrypaths  (optional)
///
///  @param inboxImplTypeproviderLegacypaths  (optional)
///
///  @param inboxImplTypeproviderDefaulturlFailureitem  (optional)
///
///  @param inboxImplTypeproviderDefaulturlWorkitem  (optional)
///
///  @param inboxImplTypeproviderDefaulturlTask  (optional)
///
///  @returns OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqInboxImplTypeproviderItemTypeProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    inboxImplTypeproviderRegistrypaths: (NSArray<NSString*>*) inboxImplTypeproviderRegistrypaths
    inboxImplTypeproviderLegacypaths: (NSArray<NSString*>*) inboxImplTypeproviderLegacypaths
    inboxImplTypeproviderDefaulturlFailureitem: (NSString*) inboxImplTypeproviderDefaulturlFailureitem
    inboxImplTypeproviderDefaulturlWorkitem: (NSString*) inboxImplTypeproviderDefaulturlWorkitem
    inboxImplTypeproviderDefaulturlTask: (NSString*) inboxImplTypeproviderDefaulturlTask
    completionHandler: (void (^)(OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (inboxImplTypeproviderRegistrypaths != nil) {
        queryParams[@"inbox.impl.typeprovider.registrypaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: inboxImplTypeproviderRegistrypaths format: @"multi"];
    }
    if (inboxImplTypeproviderLegacypaths != nil) {
        queryParams[@"inbox.impl.typeprovider.legacypaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: inboxImplTypeproviderLegacypaths format: @"multi"];
    }
    if (inboxImplTypeproviderDefaulturlFailureitem != nil) {
        queryParams[@"inbox.impl.typeprovider.defaulturl.failureitem"] = inboxImplTypeproviderDefaulturlFailureitem;
    }
    if (inboxImplTypeproviderDefaulturlWorkitem != nil) {
        queryParams[@"inbox.impl.typeprovider.defaulturl.workitem"] = inboxImplTypeproviderDefaulturlWorkitem;
    }
    if (inboxImplTypeproviderDefaulturlTask != nil) {
        queryParams[@"inbox.impl.typeprovider.defaulturl.task"] = inboxImplTypeproviderDefaulturlTask;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqInboxImplTypeproviderItemTypeProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param imageQuality  (optional)
///
///  @param imageSupportedResolutions  (optional)
///
///  @returns OAIComAdobeCqProjectsImplServletProjectImageServletInfo*
///
-(NSURLSessionTask*) comAdobeCqProjectsImplServletProjectImageServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    imageQuality: (NSString*) imageQuality
    imageSupportedResolutions: (NSString*) imageSupportedResolutions
    completionHandler: (void (^)(OAIComAdobeCqProjectsImplServletProjectImageServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (imageQuality != nil) {
        queryParams[@"image.quality"] = imageQuality;
    }
    if (imageSupportedResolutions != nil) {
        queryParams[@"image.supported.resolutions"] = imageSupportedResolutions;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqProjectsImplServletProjectImageServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqProjectsImplServletProjectImageServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param scheduledpurgeName  (optional)
///
///  @param scheduledpurgePurgeActive  (optional)
///
///  @param scheduledpurgeTemplates  (optional)
///
///  @param scheduledpurgePurgeGroups  (optional)
///
///  @param scheduledpurgePurgeAssets  (optional)
///
///  @param scheduledpurgeTerminateRunningWorkflows  (optional)
///
///  @param scheduledpurgeDaysold  (optional)
///
///  @param scheduledpurgeSaveThreshold  (optional)
///
///  @returns OAIComAdobeCqProjectsPurgeSchedulerInfo*
///
-(NSURLSessionTask*) comAdobeCqProjectsPurgeSchedulerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    scheduledpurgeName: (NSString*) scheduledpurgeName
    scheduledpurgePurgeActive: (NSNumber*) scheduledpurgePurgeActive
    scheduledpurgeTemplates: (NSArray<NSString*>*) scheduledpurgeTemplates
    scheduledpurgePurgeGroups: (NSNumber*) scheduledpurgePurgeGroups
    scheduledpurgePurgeAssets: (NSNumber*) scheduledpurgePurgeAssets
    scheduledpurgeTerminateRunningWorkflows: (NSNumber*) scheduledpurgeTerminateRunningWorkflows
    scheduledpurgeDaysold: (NSNumber*) scheduledpurgeDaysold
    scheduledpurgeSaveThreshold: (NSNumber*) scheduledpurgeSaveThreshold
    completionHandler: (void (^)(OAIComAdobeCqProjectsPurgeSchedulerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (scheduledpurgeName != nil) {
        queryParams[@"scheduledpurge.name"] = scheduledpurgeName;
    }
    if (scheduledpurgePurgeActive != nil) {
        queryParams[@"scheduledpurge.purgeActive"] = [scheduledpurgePurgeActive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (scheduledpurgeTemplates != nil) {
        queryParams[@"scheduledpurge.templates"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: scheduledpurgeTemplates format: @"multi"];
    }
    if (scheduledpurgePurgeGroups != nil) {
        queryParams[@"scheduledpurge.purgeGroups"] = [scheduledpurgePurgeGroups isEqual:@(YES)] ? @"true" : @"false";
    }
    if (scheduledpurgePurgeAssets != nil) {
        queryParams[@"scheduledpurge.purgeAssets"] = [scheduledpurgePurgeAssets isEqual:@(YES)] ? @"true" : @"false";
    }
    if (scheduledpurgeTerminateRunningWorkflows != nil) {
        queryParams[@"scheduledpurge.terminateRunningWorkflows"] = [scheduledpurgeTerminateRunningWorkflows isEqual:@(YES)] ? @"true" : @"false";
    }
    if (scheduledpurgeDaysold != nil) {
        queryParams[@"scheduledpurge.daysold"] = scheduledpurgeDaysold;
    }
    if (scheduledpurgeSaveThreshold != nil) {
        queryParams[@"scheduledpurge.saveThreshold"] = scheduledpurgeSaveThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqProjectsPurgeSchedulerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqProjectsPurgeSchedulerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param includePaths  (optional)
///
///  @param exporterUser  (optional)
///
///  @returns OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScheduledExporterImplScheduledExporterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    includePaths: (NSArray<NSString*>*) includePaths
    exporterUser: (NSString*) exporterUser
    completionHandler: (void (^)(OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (includePaths != nil) {
        queryParams[@"include.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: includePaths format: @"multi"];
    }
    if (exporterUser != nil) {
        queryParams[@"exporter.user"] = exporterUser;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScheduledExporterImplScheduledExporterImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeCqScreensAnalyticsImplUrl  (optional)
///
///  @param comAdobeCqScreensAnalyticsImplApikey  (optional)
///
///  @param comAdobeCqScreensAnalyticsImplProject  (optional)
///
///  @param comAdobeCqScreensAnalyticsImplEnvironment  (optional)
///
///  @param comAdobeCqScreensAnalyticsImplSendFrequency  (optional)
///
///  @returns OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeCqScreensAnalyticsImplUrl: (NSString*) comAdobeCqScreensAnalyticsImplUrl
    comAdobeCqScreensAnalyticsImplApikey: (NSString*) comAdobeCqScreensAnalyticsImplApikey
    comAdobeCqScreensAnalyticsImplProject: (NSString*) comAdobeCqScreensAnalyticsImplProject
    comAdobeCqScreensAnalyticsImplEnvironment: (NSString*) comAdobeCqScreensAnalyticsImplEnvironment
    comAdobeCqScreensAnalyticsImplSendFrequency: (NSNumber*) comAdobeCqScreensAnalyticsImplSendFrequency
    completionHandler: (void (^)(OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeCqScreensAnalyticsImplUrl != nil) {
        queryParams[@"com.adobe.cq.screens.analytics.impl.url"] = comAdobeCqScreensAnalyticsImplUrl;
    }
    if (comAdobeCqScreensAnalyticsImplApikey != nil) {
        queryParams[@"com.adobe.cq.screens.analytics.impl.apikey"] = comAdobeCqScreensAnalyticsImplApikey;
    }
    if (comAdobeCqScreensAnalyticsImplProject != nil) {
        queryParams[@"com.adobe.cq.screens.analytics.impl.project"] = comAdobeCqScreensAnalyticsImplProject;
    }
    if (comAdobeCqScreensAnalyticsImplEnvironment != nil) {
        queryParams[@"com.adobe.cq.screens.analytics.impl.environment"] = comAdobeCqScreensAnalyticsImplEnvironment;
    }
    if (comAdobeCqScreensAnalyticsImplSendFrequency != nil) {
        queryParams[@"com.adobe.cq.screens.analytics.impl.sendFrequency"] = comAdobeCqScreensAnalyticsImplSendFrequency;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeAemScreensPlayerPingfrequency  (optional)
///
///  @param comAdobeAemScreensDevicePaswordSpecialchars  (optional)
///
///  @param comAdobeAemScreensDevicePaswordMinlowercasechars  (optional)
///
///  @param comAdobeAemScreensDevicePaswordMinuppercasechars  (optional)
///
///  @param comAdobeAemScreensDevicePaswordMinnumberchars  (optional)
///
///  @param comAdobeAemScreensDevicePaswordMinspecialchars  (optional)
///
///  @param comAdobeAemScreensDevicePaswordMinlength  (optional)
///
///  @returns OAIComAdobeCqScreensDeviceImplDeviceServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensDeviceImplDeviceServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeAemScreensPlayerPingfrequency: (NSNumber*) comAdobeAemScreensPlayerPingfrequency
    comAdobeAemScreensDevicePaswordSpecialchars: (NSString*) comAdobeAemScreensDevicePaswordSpecialchars
    comAdobeAemScreensDevicePaswordMinlowercasechars: (NSNumber*) comAdobeAemScreensDevicePaswordMinlowercasechars
    comAdobeAemScreensDevicePaswordMinuppercasechars: (NSNumber*) comAdobeAemScreensDevicePaswordMinuppercasechars
    comAdobeAemScreensDevicePaswordMinnumberchars: (NSNumber*) comAdobeAemScreensDevicePaswordMinnumberchars
    comAdobeAemScreensDevicePaswordMinspecialchars: (NSNumber*) comAdobeAemScreensDevicePaswordMinspecialchars
    comAdobeAemScreensDevicePaswordMinlength: (NSNumber*) comAdobeAemScreensDevicePaswordMinlength
    completionHandler: (void (^)(OAIComAdobeCqScreensDeviceImplDeviceServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeAemScreensPlayerPingfrequency != nil) {
        queryParams[@"com.adobe.aem.screens.player.pingfrequency"] = comAdobeAemScreensPlayerPingfrequency;
    }
    if (comAdobeAemScreensDevicePaswordSpecialchars != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.specialchars"] = comAdobeAemScreensDevicePaswordSpecialchars;
    }
    if (comAdobeAemScreensDevicePaswordMinlowercasechars != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.minlowercasechars"] = comAdobeAemScreensDevicePaswordMinlowercasechars;
    }
    if (comAdobeAemScreensDevicePaswordMinuppercasechars != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.minuppercasechars"] = comAdobeAemScreensDevicePaswordMinuppercasechars;
    }
    if (comAdobeAemScreensDevicePaswordMinnumberchars != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.minnumberchars"] = comAdobeAemScreensDevicePaswordMinnumberchars;
    }
    if (comAdobeAemScreensDevicePaswordMinspecialchars != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.minspecialchars"] = comAdobeAemScreensDevicePaswordMinspecialchars;
    }
    if (comAdobeAemScreensDevicePaswordMinlength != nil) {
        queryParams[@"com.adobe.aem.screens.device.pasword.minlength"] = comAdobeAemScreensDevicePaswordMinlength;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensDeviceImplDeviceServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensDeviceImplDeviceServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param deviceRegistrationTimeout  (optional)
///
///  @returns OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    deviceRegistrationTimeout: (NSNumber*) deviceRegistrationTimeout
    completionHandler: (void (^)(OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (deviceRegistrationTimeout != nil) {
        queryParams[@"deviceRegistrationTimeout"] = deviceRegistrationTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqPagesupdatehandlerImageresourcetypes  (optional)
///
///  @param cqPagesupdatehandlerProductresourcetypes  (optional)
///
///  @param cqPagesupdatehandlerVideoresourcetypes  (optional)
///
///  @param cqPagesupdatehandlerDynamicsequenceresourcetypes  (optional)
///
///  @param cqPagesupdatehandlerPreviewmodepaths  (optional)
///
///  @returns OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensImplHandlerChannelsUpdateHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqPagesupdatehandlerImageresourcetypes: (NSArray<NSString*>*) cqPagesupdatehandlerImageresourcetypes
    cqPagesupdatehandlerProductresourcetypes: (NSArray<NSString*>*) cqPagesupdatehandlerProductresourcetypes
    cqPagesupdatehandlerVideoresourcetypes: (NSArray<NSString*>*) cqPagesupdatehandlerVideoresourcetypes
    cqPagesupdatehandlerDynamicsequenceresourcetypes: (NSArray<NSString*>*) cqPagesupdatehandlerDynamicsequenceresourcetypes
    cqPagesupdatehandlerPreviewmodepaths: (NSArray<NSString*>*) cqPagesupdatehandlerPreviewmodepaths
    completionHandler: (void (^)(OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqPagesupdatehandlerImageresourcetypes != nil) {
        queryParams[@"cq.pagesupdatehandler.imageresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerImageresourcetypes format: @"multi"];
    }
    if (cqPagesupdatehandlerProductresourcetypes != nil) {
        queryParams[@"cq.pagesupdatehandler.productresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerProductresourcetypes format: @"multi"];
    }
    if (cqPagesupdatehandlerVideoresourcetypes != nil) {
        queryParams[@"cq.pagesupdatehandler.videoresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerVideoresourcetypes format: @"multi"];
    }
    if (cqPagesupdatehandlerDynamicsequenceresourcetypes != nil) {
        queryParams[@"cq.pagesupdatehandler.dynamicsequenceresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerDynamicsequenceresourcetypes format: @"multi"];
    }
    if (cqPagesupdatehandlerPreviewmodepaths != nil) {
        queryParams[@"cq.pagesupdatehandler.previewmodepaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerPreviewmodepaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @returns OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    completionHandler: (void (^)(OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeAemScreensImplRemoteRequestTimeout  (optional)
///
///  @returns OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensImplRemoteImplDistributedHttpClientImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeAemScreensImplRemoteRequestTimeout: (NSNumber*) comAdobeAemScreensImplRemoteRequestTimeout
    completionHandler: (void (^)(OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeAemScreensImplRemoteRequestTimeout != nil) {
        queryParams[@"com.adobe.aem.screens.impl.remote.request_timeout"] = comAdobeAemScreensImplRemoteRequestTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param screensChannelsPropertiesToRemove  (optional)
///
///  @returns OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensImplScreensChannelPostProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    screensChannelsPropertiesToRemove: (NSArray<NSString*>*) screensChannelsPropertiesToRemove
    completionHandler: (void (^)(OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (screensChannelsPropertiesToRemove != nil) {
        queryParams[@"screens.channels.properties.to.remove"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: screensChannelsPropertiesToRemove format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensImplScreensChannelPostProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername  (optional)
///
///  @param comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword  (optional)
///
///  @returns OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath: (NSArray<NSString*>*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency: (NSString*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout: (NSNumber*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients: (NSString*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver: (NSString*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport: (NSNumber*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls: (NSNumber*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername: (NSString*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername
    comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword: (NSString*) comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword
    completionHandler: (void (^)(OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath format: @"multi"];
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls"] = [comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls isEqual:@(YES)] ? @"true" : @"false";
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername;
    }
    if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword != nil) {
        queryParams[@"com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password"] = comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param globalSize  (optional)
///
///  @param maxDiskUsage  (optional)
///
///  @param persistenceEnabled  (optional)
///
///  @param threadPoolMaxSize  (optional)
///
///  @param scheduledThreadPoolMaxSize  (optional)
///
///  @param gracefulShutdownTimeout  (optional)
///
///  @param queues  (optional)
///
///  @param topics  (optional)
///
///  @param addressesMaxDeliveryAttempts  (optional)
///
///  @param addressesExpiryDelay  (optional)
///
///  @param addressesAddressFullMessagePolicy  (optional)
///
///  @param addressesMaxSizeBytes  (optional)
///
///  @param addressesPageSizeBytes  (optional)
///
///  @param addressesPageCacheMaxSize  (optional)
///
///  @param clusterUser  (optional)
///
///  @param clusterPassword  (optional)
///
///  @param clusterCallTimeout  (optional)
///
///  @param clusterCallFailoverTimeout  (optional)
///
///  @param clusterClientFailureCheckPeriod  (optional)
///
///  @param clusterNotificationAttempts  (optional)
///
///  @param clusterNotificationInterval  (optional)
///
///  @param idCacheSize  (optional)
///
///  @param clusterConfirmationWindowSize  (optional)
///
///  @param clusterConnectionTtl  (optional)
///
///  @param clusterDuplicateDetection  (optional)
///
///  @param clusterInitialConnectAttempts  (optional)
///
///  @param clusterMaxRetryInterval  (optional)
///
///  @param clusterMinLargeMessageSize  (optional)
///
///  @param clusterProducerWindowSize  (optional)
///
///  @param clusterReconnectAttempts  (optional)
///
///  @param clusterRetryInterval  (optional)
///
///  @param clusterRetryIntervalMultiplier  (optional)
///
///  @returns OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensMqActivemqImplArtemisJMSProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    globalSize: (NSNumber*) globalSize
    maxDiskUsage: (NSNumber*) maxDiskUsage
    persistenceEnabled: (NSNumber*) persistenceEnabled
    threadPoolMaxSize: (NSNumber*) threadPoolMaxSize
    scheduledThreadPoolMaxSize: (NSNumber*) scheduledThreadPoolMaxSize
    gracefulShutdownTimeout: (NSNumber*) gracefulShutdownTimeout
    queues: (NSArray<NSString*>*) queues
    topics: (NSArray<NSString*>*) topics
    addressesMaxDeliveryAttempts: (NSNumber*) addressesMaxDeliveryAttempts
    addressesExpiryDelay: (NSNumber*) addressesExpiryDelay
    addressesAddressFullMessagePolicy: (NSString*) addressesAddressFullMessagePolicy
    addressesMaxSizeBytes: (NSNumber*) addressesMaxSizeBytes
    addressesPageSizeBytes: (NSNumber*) addressesPageSizeBytes
    addressesPageCacheMaxSize: (NSNumber*) addressesPageCacheMaxSize
    clusterUser: (NSString*) clusterUser
    clusterPassword: (NSString*) clusterPassword
    clusterCallTimeout: (NSNumber*) clusterCallTimeout
    clusterCallFailoverTimeout: (NSNumber*) clusterCallFailoverTimeout
    clusterClientFailureCheckPeriod: (NSNumber*) clusterClientFailureCheckPeriod
    clusterNotificationAttempts: (NSNumber*) clusterNotificationAttempts
    clusterNotificationInterval: (NSNumber*) clusterNotificationInterval
    idCacheSize: (NSNumber*) idCacheSize
    clusterConfirmationWindowSize: (NSNumber*) clusterConfirmationWindowSize
    clusterConnectionTtl: (NSNumber*) clusterConnectionTtl
    clusterDuplicateDetection: (NSNumber*) clusterDuplicateDetection
    clusterInitialConnectAttempts: (NSNumber*) clusterInitialConnectAttempts
    clusterMaxRetryInterval: (NSNumber*) clusterMaxRetryInterval
    clusterMinLargeMessageSize: (NSNumber*) clusterMinLargeMessageSize
    clusterProducerWindowSize: (NSNumber*) clusterProducerWindowSize
    clusterReconnectAttempts: (NSNumber*) clusterReconnectAttempts
    clusterRetryInterval: (NSNumber*) clusterRetryInterval
    clusterRetryIntervalMultiplier: (NSNumber*) clusterRetryIntervalMultiplier
    completionHandler: (void (^)(OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (globalSize != nil) {
        queryParams[@"global.size"] = globalSize;
    }
    if (maxDiskUsage != nil) {
        queryParams[@"max.disk.usage"] = maxDiskUsage;
    }
    if (persistenceEnabled != nil) {
        queryParams[@"persistence.enabled"] = [persistenceEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (threadPoolMaxSize != nil) {
        queryParams[@"thread.pool.max.size"] = threadPoolMaxSize;
    }
    if (scheduledThreadPoolMaxSize != nil) {
        queryParams[@"scheduled.thread.pool.max.size"] = scheduledThreadPoolMaxSize;
    }
    if (gracefulShutdownTimeout != nil) {
        queryParams[@"graceful.shutdown.timeout"] = gracefulShutdownTimeout;
    }
    if (queues != nil) {
        queryParams[@"queues"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: queues format: @"multi"];
    }
    if (topics != nil) {
        queryParams[@"topics"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: topics format: @"multi"];
    }
    if (addressesMaxDeliveryAttempts != nil) {
        queryParams[@"addresses.max.delivery.attempts"] = addressesMaxDeliveryAttempts;
    }
    if (addressesExpiryDelay != nil) {
        queryParams[@"addresses.expiry.delay"] = addressesExpiryDelay;
    }
    if (addressesAddressFullMessagePolicy != nil) {
        queryParams[@"addresses.address.full.message.policy"] = addressesAddressFullMessagePolicy;
    }
    if (addressesMaxSizeBytes != nil) {
        queryParams[@"addresses.max.size.bytes"] = addressesMaxSizeBytes;
    }
    if (addressesPageSizeBytes != nil) {
        queryParams[@"addresses.page.size.bytes"] = addressesPageSizeBytes;
    }
    if (addressesPageCacheMaxSize != nil) {
        queryParams[@"addresses.page.cache.max.size"] = addressesPageCacheMaxSize;
    }
    if (clusterUser != nil) {
        queryParams[@"cluster.user"] = clusterUser;
    }
    if (clusterPassword != nil) {
        queryParams[@"cluster.password"] = clusterPassword;
    }
    if (clusterCallTimeout != nil) {
        queryParams[@"cluster.call.timeout"] = clusterCallTimeout;
    }
    if (clusterCallFailoverTimeout != nil) {
        queryParams[@"cluster.call.failover.timeout"] = clusterCallFailoverTimeout;
    }
    if (clusterClientFailureCheckPeriod != nil) {
        queryParams[@"cluster.client.failure.check.period"] = clusterClientFailureCheckPeriod;
    }
    if (clusterNotificationAttempts != nil) {
        queryParams[@"cluster.notification.attempts"] = clusterNotificationAttempts;
    }
    if (clusterNotificationInterval != nil) {
        queryParams[@"cluster.notification.interval"] = clusterNotificationInterval;
    }
    if (idCacheSize != nil) {
        queryParams[@"id.cache.size"] = idCacheSize;
    }
    if (clusterConfirmationWindowSize != nil) {
        queryParams[@"cluster.confirmation.window.size"] = clusterConfirmationWindowSize;
    }
    if (clusterConnectionTtl != nil) {
        queryParams[@"cluster.connection.ttl"] = clusterConnectionTtl;
    }
    if (clusterDuplicateDetection != nil) {
        queryParams[@"cluster.duplicate.detection"] = [clusterDuplicateDetection isEqual:@(YES)] ? @"true" : @"false";
    }
    if (clusterInitialConnectAttempts != nil) {
        queryParams[@"cluster.initial.connect.attempts"] = clusterInitialConnectAttempts;
    }
    if (clusterMaxRetryInterval != nil) {
        queryParams[@"cluster.max.retry.interval"] = clusterMaxRetryInterval;
    }
    if (clusterMinLargeMessageSize != nil) {
        queryParams[@"cluster.min.large.message.size"] = clusterMinLargeMessageSize;
    }
    if (clusterProducerWindowSize != nil) {
        queryParams[@"cluster.producer.window.size"] = clusterProducerWindowSize;
    }
    if (clusterReconnectAttempts != nil) {
        queryParams[@"cluster.reconnect.attempts"] = clusterReconnectAttempts;
    }
    if (clusterRetryInterval != nil) {
        queryParams[@"cluster.retry.interval"] = clusterRetryInterval;
    }
    if (clusterRetryIntervalMultiplier != nil) {
        queryParams[@"cluster.retry.interval.multiplier"] = clusterRetryIntervalMultiplier;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath  (optional)
///
///  @param comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency  (optional)
///
///  @returns OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath: (NSArray<NSString*>*) comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath
    comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency: (NSString*) comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency
    completionHandler: (void (^)(OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath != nil) {
        queryParams[@"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath format: @"multi"];
    }
    if (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency != nil) {
        queryParams[@"com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency"] = comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disableSmartSync  (optional)
///
///  @returns OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensOfflinecontentImplOfflineContentServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disableSmartSync: (NSNumber*) disableSmartSync
    completionHandler: (void (^)(OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disableSmartSync != nil) {
        queryParams[@"disableSmartSync"] = [disableSmartSync isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enableDataTriggeredContent  (optional)
///
///  @returns OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo*
///
-(NSURLSessionTask*) comAdobeCqScreensSegmentationImplSegmentationFeatureFlagWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enableDataTriggeredContent: (NSNumber*) enableDataTriggeredContent
    completionHandler: (void (^)(OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enableDataTriggeredContent != nil) {
        queryParams[@"enableDataTriggeredContent"] = [enableDataTriggeredContent isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo*
///
-(NSURLSessionTask*) comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param dispatcherAddress  (optional)
///
///  @param dispatcherFilterAllowed  (optional)
///
///  @param dispatcherFilterBlocked  (optional)
///
///  @returns OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    dispatcherAddress: (NSString*) dispatcherAddress
    dispatcherFilterAllowed: (NSArray<NSString*>*) dispatcherFilterAllowed
    dispatcherFilterBlocked: (NSArray<NSString*>*) dispatcherFilterBlocked
    completionHandler: (void (^)(OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (dispatcherAddress != nil) {
        queryParams[@"dispatcher.address"] = dispatcherAddress;
    }
    if (dispatcherFilterAllowed != nil) {
        queryParams[@"dispatcher.filter.allowed"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: dispatcherFilterAllowed format: @"multi"];
    }
    if (dispatcherFilterBlocked != nil) {
        queryParams[@"dispatcher.filter.blocked"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: dispatcherFilterBlocked format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeCqSecurityHcPackagesImplExampleContentHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param webserverAddress  (optional)
///
///  @returns OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeCqSecurityHcWebserverImplClickjackingHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    webserverAddress: (NSString*) webserverAddress
    completionHandler: (void (^)(OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (webserverAddress != nil) {
        queryParams[@"webserver.address"] = webserverAddress;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enable  (optional)
///
///  @param ttl1  (optional)
///
///  @param ttl2  (optional)
///
///  @returns OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialAccountverificationImplAccountManagementConfigImWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enable: (NSNumber*) enable
    ttl1: (NSNumber*) ttl1
    ttl2: (NSNumber*) ttl2
    completionHandler: (void (^)(OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enable != nil) {
        queryParams[@"enable"] = [enable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (ttl1 != nil) {
        queryParams[@"ttl1"] = ttl1;
    }
    if (ttl2 != nil) {
        queryParams[@"ttl2"] = ttl2;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsClientImplSocialActivityComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param accepted  (optional)
///
///  @param ranked  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsListenerImplModerationEventExtenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    accepted: (NSNumber*) accepted
    ranked: (NSNumber*) ranked
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (accepted != nil) {
        queryParams[@"accepted"] = [accepted isEqual:@(YES)] ? @"true" : @"false";
    }
    if (ranked != nil) {
        queryParams[@"ranked"] = ranked;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param ranking  (optional)
///
///  @param enable  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    ranking: (NSNumber*) ranking
    enable: (NSNumber*) enable
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (ranking != nil) {
        queryParams[@"ranking"] = ranking;
    }
    if (enable != nil) {
        queryParams[@"enable"] = [enable isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param streamPath  (optional)
///
///  @param streamName  (optional)
///
///  @returns OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialActivitystreamsListenerImplResourceActivityStreWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    streamPath: (NSString*) streamPath
    streamName: (NSString*) streamName
    completionHandler: (void (^)(OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (streamPath != nil) {
        queryParams[@"streamPath"] = streamPath;
    }
    if (streamName != nil) {
        queryParams[@"streamName"] = streamName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxRetry  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxRetry: (NSNumber*) maxRetry
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxRetry != nil) {
        queryParams[@"MaxRetry"] = maxRetry;
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @param extensionOrder  (optional)
///
///  @returns OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCalendarClientOperationextensionsEventAttachmenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    attachmentTypeBlacklist: (NSString*) attachmentTypeBlacklist
    extensionOrder: (NSNumber*) extensionOrder
    completionHandler: (void (^)(OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = attachmentTypeBlacklist;
    }
    if (extensionOrder != nil) {
        queryParams[@"extension.order"] = extensionOrder;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param timezonesExpirytime  (optional)
///
///  @returns OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCalendarServletsTimeZoneServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    timezonesExpirytime: (NSNumber*) timezonesExpirytime
    completionHandler: (void (^)(OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (timezonesExpirytime != nil) {
        queryParams[@"timezones.expirytime"] = timezonesExpirytime;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCalendarServletsTimeZoneServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param ranking  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    ranking: (NSNumber*) ranking
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (ranking != nil) {
        queryParams[@"ranking"] = ranking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param numUserLimit  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    numUserLimit: (NSNumber*) numUserLimit
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (numUserLimit != nil) {
        queryParams[@"numUserLimit"] = numUserLimit;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enableScheduledPostsSearch  (optional)
///
///  @param numberOfMinutes  (optional)
///
///  @param maxSearchLimit  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enableScheduledPostsSearch: (NSNumber*) enableScheduledPostsSearch
    numberOfMinutes: (NSNumber*) numberOfMinutes
    maxSearchLimit: (NSNumber*) maxSearchLimit
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enableScheduledPostsSearch != nil) {
        queryParams[@"enableScheduledPostsSearch"] = [enableScheduledPostsSearch isEqual:@(YES)] ? @"true" : @"false";
    }
    if (numberOfMinutes != nil) {
        queryParams[@"numberOfMinutes"] = numberOfMinutes;
    }
    if (maxSearchLimit != nil) {
        queryParams[@"maxSearchLimit"] = maxSearchLimit;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param corsEnabling  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsCorsCORSAuthenticationFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    corsEnabling: (NSNumber*) corsEnabling
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (corsEnabling != nil) {
        queryParams[@"cors.enabling"] = [corsEnabling isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param contextPath  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    contextPath: (NSString*) contextPath
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (contextPath != nil) {
        queryParams[@"context.path"] = contextPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param patternTime  (optional)
///
///  @param patternNewline  (optional)
///
///  @param patternDayOfMonth  (optional)
///
///  @param patternMonth  (optional)
///
///  @param patternYear  (optional)
///
///  @param patternDate  (optional)
///
///  @param patternDateTime  (optional)
///
///  @param patternEmail  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    patternTime: (NSString*) patternTime
    patternNewline: (NSString*) patternNewline
    patternDayOfMonth: (NSString*) patternDayOfMonth
    patternMonth: (NSString*) patternMonth
    patternYear: (NSString*) patternYear
    patternDate: (NSString*) patternDate
    patternDateTime: (NSString*) patternDateTime
    patternEmail: (NSString*) patternEmail
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (patternTime != nil) {
        queryParams[@"pattern.time"] = patternTime;
    }
    if (patternNewline != nil) {
        queryParams[@"pattern.newline"] = patternNewline;
    }
    if (patternDayOfMonth != nil) {
        queryParams[@"pattern.dayOfMonth"] = patternDayOfMonth;
    }
    if (patternMonth != nil) {
        queryParams[@"pattern.month"] = patternMonth;
    }
    if (patternYear != nil) {
        queryParams[@"pattern.year"] = patternYear;
    }
    if (patternDate != nil) {
        queryParams[@"pattern.date"] = patternDate;
    }
    if (patternDateTime != nil) {
        queryParams[@"pattern.dateTime"] = patternDateTime;
    }
    if (patternEmail != nil) {
        queryParams[@"pattern.email"] = patternEmail;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param emailName  (optional)
///
///  @param emailCreatePostFromReply  (optional)
///
///  @param emailAddCommentIdTo  (optional)
///
///  @param emailSubjectMaximumLength  (optional)
///
///  @param emailReplyToAddress  (optional)
///
///  @param emailReplyToDelimiter  (optional)
///
///  @param emailTrackerIdPrefixInSubject  (optional)
///
///  @param emailTrackerIdPrefixInBody  (optional)
///
///  @param emailAsHTML  (optional)
///
///  @param emailDefaultUserName  (optional)
///
///  @param emailTemplatesRootPath  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    emailName: (NSString*) emailName
    emailCreatePostFromReply: (NSNumber*) emailCreatePostFromReply
    emailAddCommentIdTo: (NSString*) emailAddCommentIdTo
    emailSubjectMaximumLength: (NSNumber*) emailSubjectMaximumLength
    emailReplyToAddress: (NSString*) emailReplyToAddress
    emailReplyToDelimiter: (NSString*) emailReplyToDelimiter
    emailTrackerIdPrefixInSubject: (NSString*) emailTrackerIdPrefixInSubject
    emailTrackerIdPrefixInBody: (NSString*) emailTrackerIdPrefixInBody
    emailAsHTML: (NSNumber*) emailAsHTML
    emailDefaultUserName: (NSString*) emailDefaultUserName
    emailTemplatesRootPath: (NSString*) emailTemplatesRootPath
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (emailName != nil) {
        queryParams[@"email.name"] = emailName;
    }
    if (emailCreatePostFromReply != nil) {
        queryParams[@"email.createPostFromReply"] = [emailCreatePostFromReply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (emailAddCommentIdTo != nil) {
        queryParams[@"email.addCommentIdTo"] = emailAddCommentIdTo;
    }
    if (emailSubjectMaximumLength != nil) {
        queryParams[@"email.subjectMaximumLength"] = emailSubjectMaximumLength;
    }
    if (emailReplyToAddress != nil) {
        queryParams[@"email.replyToAddress"] = emailReplyToAddress;
    }
    if (emailReplyToDelimiter != nil) {
        queryParams[@"email.replyToDelimiter"] = emailReplyToDelimiter;
    }
    if (emailTrackerIdPrefixInSubject != nil) {
        queryParams[@"email.trackerIdPrefixInSubject"] = emailTrackerIdPrefixInSubject;
    }
    if (emailTrackerIdPrefixInBody != nil) {
        queryParams[@"email.trackerIdPrefixInBody"] = emailTrackerIdPrefixInBody;
    }
    if (emailAsHTML != nil) {
        queryParams[@"email.asHTML"] = [emailAsHTML isEqual:@(YES)] ? @"true" : @"false";
    }
    if (emailDefaultUserName != nil) {
        queryParams[@"email.defaultUserName"] = emailDefaultUserName;
    }
    if (emailTemplatesRootPath != nil) {
        queryParams[@"email.templates.rootPath"] = emailTemplatesRootPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param connectProtocol  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    connectProtocol: (NSString*) connectProtocol
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (connectProtocol != nil) {
        queryParams[@"connectProtocol"] = connectProtocol;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @param priorityOrder  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    priorityOrder: (NSNumber*) priorityOrder
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priorityOrder  (optional)
///
///  @param replyEmailPatterns  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priorityOrder: (NSNumber*) priorityOrder
    replyEmailPatterns: (NSArray<NSString*>*) replyEmailPatterns
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priorityOrder != nil) {
        queryParams[@"priorityOrder"] = priorityOrder;
    }
    if (replyEmailPatterns != nil) {
        queryParams[@"replyEmailPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replyEmailPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param numberOfDays  (optional)
///
///  @param ageOfFile  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    numberOfDays: (NSNumber*) numberOfDays
    ageOfFile: (NSNumber*) ageOfFile
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (numberOfDays != nil) {
        queryParams[@"numberOfDays"] = numberOfDays;
    }
    if (ageOfFile != nil) {
        queryParams[@"ageOfFile"] = ageOfFile;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @param verbs  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    verbs: (NSArray<NSString*>*) verbs
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (verbs != nil) {
        queryParams[@"verbs"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: verbs format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enable  (optional)
///
///  @param uGCLimit  (optional)
///
///  @param ugcLimitDuration  (optional)
///
///  @param domains  (optional)
///
///  @param toList  (optional)
///
///  @returns OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enable: (NSNumber*) enable
    uGCLimit: (NSNumber*) uGCLimit
    ugcLimitDuration: (NSNumber*) ugcLimitDuration
    domains: (NSArray<NSString*>*) domains
    toList: (NSArray<NSString*>*) toList
    completionHandler: (void (^)(OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enable != nil) {
        queryParams[@"enable"] = [enable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (uGCLimit != nil) {
        queryParams[@"UGCLimit"] = uGCLimit;
    }
    if (ugcLimitDuration != nil) {
        queryParams[@"ugcLimitDuration"] = ugcLimitDuration;
    }
    if (domains != nil) {
        queryParams[@"domains"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: domains format: @"multi"];
    }
    if (toList != nil) {
        queryParams[@"toList"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: toList format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @param oauthCloudConfigRoot  (optional)
///
///  @param providerConfigRoot  (optional)
///
///  @param providerConfigCreateTagsEnabled  (optional)
///
///  @param providerConfigUserFolder  (optional)
///
///  @param providerConfigFacebookFetchFields  (optional)
///
///  @param providerConfigFacebookFields  (optional)
///
///  @param providerConfigRefreshUserdataEnabled  (optional)
///
///  @returns OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialConnectOauthImplFacebookProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    oauthCloudConfigRoot: (NSString*) oauthCloudConfigRoot
    providerConfigRoot: (NSString*) providerConfigRoot
    providerConfigCreateTagsEnabled: (NSNumber*) providerConfigCreateTagsEnabled
    providerConfigUserFolder: (NSString*) providerConfigUserFolder
    providerConfigFacebookFetchFields: (NSNumber*) providerConfigFacebookFetchFields
    providerConfigFacebookFields: (NSArray<NSString*>*) providerConfigFacebookFields
    providerConfigRefreshUserdataEnabled: (NSNumber*) providerConfigRefreshUserdataEnabled
    completionHandler: (void (^)(OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    if (oauthCloudConfigRoot != nil) {
        queryParams[@"oauth.cloud.config.root"] = oauthCloudConfigRoot;
    }
    if (providerConfigRoot != nil) {
        queryParams[@"provider.config.root"] = providerConfigRoot;
    }
    if (providerConfigCreateTagsEnabled != nil) {
        queryParams[@"provider.config.create.tags.enabled"] = [providerConfigCreateTagsEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (providerConfigUserFolder != nil) {
        queryParams[@"provider.config.user.folder"] = providerConfigUserFolder;
    }
    if (providerConfigFacebookFetchFields != nil) {
        queryParams[@"provider.config.facebook.fetch.fields"] = [providerConfigFacebookFetchFields isEqual:@(YES)] ? @"true" : @"false";
    }
    if (providerConfigFacebookFields != nil) {
        queryParams[@"provider.config.facebook.fields"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: providerConfigFacebookFields format: @"multi"];
    }
    if (providerConfigRefreshUserdataEnabled != nil) {
        queryParams[@"provider.config.refresh.userdata.enabled"] = [providerConfigRefreshUserdataEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSArray<NSString*>*) path
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: path format: @"multi"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param facebook  (optional)
///
///  @param twitter  (optional)
///
///  @param providerConfigUserFolder  (optional)
///
///  @returns OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    facebook: (NSArray<NSString*>*) facebook
    twitter: (NSArray<NSString*>*) twitter
    providerConfigUserFolder: (NSString*) providerConfigUserFolder
    completionHandler: (void (^)(OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (facebook != nil) {
        queryParams[@"facebook"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: facebook format: @"multi"];
    }
    if (twitter != nil) {
        queryParams[@"twitter"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: twitter format: @"multi"];
    }
    if (providerConfigUserFolder != nil) {
        queryParams[@"provider.config.user.folder"] = providerConfigUserFolder;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @param oauthCloudConfigRoot  (optional)
///
///  @param providerConfigRoot  (optional)
///
///  @param providerConfigUserFolder  (optional)
///
///  @param providerConfigTwitterEnableParams  (optional)
///
///  @param providerConfigTwitterParams  (optional)
///
///  @param providerConfigRefreshUserdataEnabled  (optional)
///
///  @returns OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialConnectOauthImplTwitterProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    oauthCloudConfigRoot: (NSString*) oauthCloudConfigRoot
    providerConfigRoot: (NSString*) providerConfigRoot
    providerConfigUserFolder: (NSString*) providerConfigUserFolder
    providerConfigTwitterEnableParams: (NSNumber*) providerConfigTwitterEnableParams
    providerConfigTwitterParams: (NSArray<NSString*>*) providerConfigTwitterParams
    providerConfigRefreshUserdataEnabled: (NSNumber*) providerConfigRefreshUserdataEnabled
    completionHandler: (void (^)(OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    if (oauthCloudConfigRoot != nil) {
        queryParams[@"oauth.cloud.config.root"] = oauthCloudConfigRoot;
    }
    if (providerConfigRoot != nil) {
        queryParams[@"provider.config.root"] = providerConfigRoot;
    }
    if (providerConfigUserFolder != nil) {
        queryParams[@"provider.config.user.folder"] = providerConfigUserFolder;
    }
    if (providerConfigTwitterEnableParams != nil) {
        queryParams[@"provider.config.twitter.enable.params"] = [providerConfigTwitterEnableParams isEqual:@(YES)] ? @"true" : @"false";
    }
    if (providerConfigTwitterParams != nil) {
        queryParams[@"provider.config.twitter.params"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: providerConfigTwitterParams format: @"multi"];
    }
    if (providerConfigRefreshUserdataEnabled != nil) {
        queryParams[@"provider.config.refresh.userdata.enabled"] = [providerConfigRefreshUserdataEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSocialContentFragmentsServicesEnabled  (optional)
///
///  @param cqSocialContentFragmentsServicesWaitTimeSeconds  (optional)
///
///  @returns OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSocialContentFragmentsServicesEnabled: (NSNumber*) cqSocialContentFragmentsServicesEnabled
    cqSocialContentFragmentsServicesWaitTimeSeconds: (NSNumber*) cqSocialContentFragmentsServicesWaitTimeSeconds
    completionHandler: (void (^)(OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSocialContentFragmentsServicesEnabled != nil) {
        queryParams[@"cq.social.content.fragments.services.enabled"] = [cqSocialContentFragmentsServicesEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqSocialContentFragmentsServicesWaitTimeSeconds != nil) {
        queryParams[@"cq.social.content.fragments.services.waitTimeSeconds"] = cqSocialContentFragmentsServicesWaitTimeSeconds;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param versionId  (optional)
///
///  @param cacheOn  (optional)
///
///  @param concurrencyLevel  (optional)
///
///  @param cacheStartSize  (optional)
///
///  @param cacheTtl  (optional)
///
///  @param cacheSize  (optional)
///
///  @param timeLimit  (optional)
///
///  @returns OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialDatastoreAsImplASResourceProviderFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    versionId: (NSString*) versionId
    cacheOn: (NSNumber*) cacheOn
    concurrencyLevel: (NSNumber*) concurrencyLevel
    cacheStartSize: (NSNumber*) cacheStartSize
    cacheTtl: (NSNumber*) cacheTtl
    cacheSize: (NSNumber*) cacheSize
    timeLimit: (NSNumber*) timeLimit
    completionHandler: (void (^)(OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (versionId != nil) {
        queryParams[@"version.id"] = versionId;
    }
    if (cacheOn != nil) {
        queryParams[@"cache.on"] = [cacheOn isEqual:@(YES)] ? @"true" : @"false";
    }
    if (concurrencyLevel != nil) {
        queryParams[@"concurrency.level"] = concurrencyLevel;
    }
    if (cacheStartSize != nil) {
        queryParams[@"cache.start.size"] = cacheStartSize;
    }
    if (cacheTtl != nil) {
        queryParams[@"cache.ttl"] = cacheTtl;
    }
    if (cacheSize != nil) {
        queryParams[@"cache.size"] = cacheSize;
    }
    if (timeLimit != nil) {
        queryParams[@"time.limit"] = timeLimit;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param solrZkTimeout  (optional)
///
///  @param solrCommit  (optional)
///
///  @param cacheOn  (optional)
///
///  @param concurrencyLevel  (optional)
///
///  @param cacheStartSize  (optional)
///
///  @param cacheTtl  (optional)
///
///  @param cacheSize  (optional)
///
///  @returns OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    solrZkTimeout: (NSString*) solrZkTimeout
    solrCommit: (NSString*) solrCommit
    cacheOn: (NSNumber*) cacheOn
    concurrencyLevel: (NSNumber*) concurrencyLevel
    cacheStartSize: (NSNumber*) cacheStartSize
    cacheTtl: (NSNumber*) cacheTtl
    cacheSize: (NSNumber*) cacheSize
    completionHandler: (void (^)(OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (solrZkTimeout != nil) {
        queryParams[@"solr.zk.timeout"] = solrZkTimeout;
    }
    if (solrCommit != nil) {
        queryParams[@"solr.commit"] = solrCommit;
    }
    if (cacheOn != nil) {
        queryParams[@"cache.on"] = [cacheOn isEqual:@(YES)] ? @"true" : @"false";
    }
    if (concurrencyLevel != nil) {
        queryParams[@"concurrency.level"] = concurrencyLevel;
    }
    if (cacheStartSize != nil) {
        queryParams[@"cache.start.size"] = cacheStartSize;
    }
    if (cacheTtl != nil) {
        queryParams[@"cache.ttl"] = cacheTtl;
    }
    if (cacheSize != nil) {
        queryParams[@"cache.size"] = cacheSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param solrZkTimeout  (optional)
///
///  @param solrCommit  (optional)
///
///  @param cacheOn  (optional)
///
///  @param concurrencyLevel  (optional)
///
///  @param cacheStartSize  (optional)
///
///  @param cacheTtl  (optional)
///
///  @param cacheSize  (optional)
///
///  @returns OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    solrZkTimeout: (NSString*) solrZkTimeout
    solrCommit: (NSString*) solrCommit
    cacheOn: (NSNumber*) cacheOn
    concurrencyLevel: (NSNumber*) concurrencyLevel
    cacheStartSize: (NSNumber*) cacheStartSize
    cacheTtl: (NSNumber*) cacheTtl
    cacheSize: (NSNumber*) cacheSize
    completionHandler: (void (^)(OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (solrZkTimeout != nil) {
        queryParams[@"solr.zk.timeout"] = solrZkTimeout;
    }
    if (solrCommit != nil) {
        queryParams[@"solr.commit"] = solrCommit;
    }
    if (cacheOn != nil) {
        queryParams[@"cache.on"] = [cacheOn isEqual:@(YES)] ? @"true" : @"false";
    }
    if (concurrencyLevel != nil) {
        queryParams[@"concurrency.level"] = concurrencyLevel;
    }
    if (cacheStartSize != nil) {
        queryParams[@"cache.start.size"] = cacheStartSize;
    }
    if (cacheTtl != nil) {
        queryParams[@"cache.ttl"] = cacheTtl;
    }
    if (cacheSize != nil) {
        queryParams[@"cache.size"] = cacheSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isMemberCheck  (optional)
///
///  @returns OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isMemberCheck: (NSNumber*) isMemberCheck
    completionHandler: (void (^)(OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isMemberCheck != nil) {
        queryParams[@"isMemberCheck"] = [isMemberCheck isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isMemberCheck  (optional)
///
///  @returns OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isMemberCheck: (NSNumber*) isMemberCheck
    completionHandler: (void (^)(OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isMemberCheck != nil) {
        queryParams[@"isMemberCheck"] = [isMemberCheck isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialEnablementResourceEndpointsImplEnablementResouWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialEnablementServicesImplAuthorMarkerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param slingServletExtensions  (optional)
///
///  @returns OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletSelectors: (NSString*) slingServletSelectors
    slingServletExtensions: (NSString*) slingServletExtensions
    completionHandler: (void (^)(OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    if (slingServletExtensions != nil) {
        queryParams[@"sling.servlet.extensions"] = slingServletExtensions;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialForumClientEndpointsImplForumOperationsServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param extensionOrder  (optional)
///
///  @param flushForumontopic  (optional)
///
///  @returns OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialForumDispatcherImplFlushOperationsWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    extensionOrder: (NSNumber*) extensionOrder
    flushForumontopic: (NSNumber*) flushForumontopic
    completionHandler: (void (^)(OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (extensionOrder != nil) {
        queryParams[@"extension.order"] = extensionOrder;
    }
    if (flushForumontopic != nil) {
        queryParams[@"flush.forumontopic"] = [flushForumontopic isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialForumDispatcherImplFlushOperationsInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param groupListingPaginationEnable  (optional)
///
///  @param groupListingLazyloadingEnable  (optional)
///
///  @param pageSize  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    groupListingPaginationEnable: (NSNumber*) groupListingPaginationEnable
    groupListingLazyloadingEnable: (NSNumber*) groupListingLazyloadingEnable
    pageSize: (NSNumber*) pageSize
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (groupListingPaginationEnable != nil) {
        queryParams[@"group.listing.pagination.enable"] = [groupListingPaginationEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (groupListingLazyloadingEnable != nil) {
        queryParams[@"group.listing.lazyloading.enable"] = [groupListingLazyloadingEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (pageSize != nil) {
        queryParams[@"page.size"] = pageSize;
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxWaitTime  (optional)
///
///  @param minWaitBetweenRetries  (optional)
///
///  @returns OAIComAdobeCqSocialGroupImplGroupServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialGroupImplGroupServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxWaitTime: (NSNumber*) maxWaitTime
    minWaitBetweenRetries: (NSNumber*) minWaitBetweenRetries
    completionHandler: (void (^)(OAIComAdobeCqSocialGroupImplGroupServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxWaitTime != nil) {
        queryParams[@"maxWaitTime"] = maxWaitTime;
    }
    if (minWaitBetweenRetries != nil) {
        queryParams[@"minWaitBetweenRetries"] = minWaitBetweenRetries;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialGroupImplGroupServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialGroupImplGroupServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param parameterGuavaCacheEnabled  (optional)
///
///  @param parameterGuavaCacheParams  (optional)
///
///  @param parameterGuavaCacheReload  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialHandlebarsGuavaTemplateCacheImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    parameterGuavaCacheEnabled: (NSNumber*) parameterGuavaCacheEnabled
    parameterGuavaCacheParams: (NSString*) parameterGuavaCacheParams
    parameterGuavaCacheReload: (NSNumber*) parameterGuavaCacheReload
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (parameterGuavaCacheEnabled != nil) {
        queryParams[@"parameter.guava.cache.enabled"] = [parameterGuavaCacheEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (parameterGuavaCacheParams != nil) {
        queryParams[@"parameter.guava.cache.params"] = parameterGuavaCacheParams;
    }
    if (parameterGuavaCacheReload != nil) {
        queryParams[@"parameter.guava.cache.reload"] = [parameterGuavaCacheReload isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param everyoneLimit  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    everyoneLimit: (NSNumber*) everyoneLimit
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (everyoneLimit != nil) {
        queryParams[@"everyoneLimit"] = everyoneLimit;
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param messageProperties  (optional)
///
///  @param messageBoxSizeLimit  (optional)
///
///  @param messageCountLimit  (optional)
///
///  @param notifyFailure  (optional)
///
///  @param failureMessageFrom  (optional)
///
///  @param failureTemplatePath  (optional)
///
///  @param maxRetries  (optional)
///
///  @param minWaitBetweenRetries  (optional)
///
///  @param countUpdatePoolSize  (optional)
///
///  @param inboxPath  (optional)
///
///  @param sentitemsPath  (optional)
///
///  @param supportAttachments  (optional)
///
///  @param supportGroupMessaging  (optional)
///
///  @param maxTotalRecipients  (optional)
///
///  @param batchSize  (optional)
///
///  @param maxTotalAttachmentSize  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @param allowedAttachmentTypes  (optional)
///
///  @param serviceSelector  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    messageProperties: (NSArray<NSString*>*) messageProperties
    messageBoxSizeLimit: (NSNumber*) messageBoxSizeLimit
    messageCountLimit: (NSNumber*) messageCountLimit
    notifyFailure: (NSNumber*) notifyFailure
    failureMessageFrom: (NSString*) failureMessageFrom
    failureTemplatePath: (NSString*) failureTemplatePath
    maxRetries: (NSNumber*) maxRetries
    minWaitBetweenRetries: (NSNumber*) minWaitBetweenRetries
    countUpdatePoolSize: (NSNumber*) countUpdatePoolSize
    inboxPath: (NSString*) inboxPath
    sentitemsPath: (NSString*) sentitemsPath
    supportAttachments: (NSNumber*) supportAttachments
    supportGroupMessaging: (NSNumber*) supportGroupMessaging
    maxTotalRecipients: (NSNumber*) maxTotalRecipients
    batchSize: (NSNumber*) batchSize
    maxTotalAttachmentSize: (NSNumber*) maxTotalAttachmentSize
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    allowedAttachmentTypes: (NSArray<NSString*>*) allowedAttachmentTypes
    serviceSelector: (NSString*) serviceSelector
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (messageProperties != nil) {
        queryParams[@"message.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: messageProperties format: @"multi"];
    }
    if (messageBoxSizeLimit != nil) {
        queryParams[@"messageBoxSizeLimit"] = messageBoxSizeLimit;
    }
    if (messageCountLimit != nil) {
        queryParams[@"messageCountLimit"] = messageCountLimit;
    }
    if (notifyFailure != nil) {
        queryParams[@"notifyFailure"] = [notifyFailure isEqual:@(YES)] ? @"true" : @"false";
    }
    if (failureMessageFrom != nil) {
        queryParams[@"failureMessageFrom"] = failureMessageFrom;
    }
    if (failureTemplatePath != nil) {
        queryParams[@"failureTemplatePath"] = failureTemplatePath;
    }
    if (maxRetries != nil) {
        queryParams[@"maxRetries"] = maxRetries;
    }
    if (minWaitBetweenRetries != nil) {
        queryParams[@"minWaitBetweenRetries"] = minWaitBetweenRetries;
    }
    if (countUpdatePoolSize != nil) {
        queryParams[@"countUpdatePoolSize"] = countUpdatePoolSize;
    }
    if (inboxPath != nil) {
        queryParams[@"inbox.path"] = inboxPath;
    }
    if (sentitemsPath != nil) {
        queryParams[@"sentitems.path"] = sentitemsPath;
    }
    if (supportAttachments != nil) {
        queryParams[@"supportAttachments"] = [supportAttachments isEqual:@(YES)] ? @"true" : @"false";
    }
    if (supportGroupMessaging != nil) {
        queryParams[@"supportGroupMessaging"] = [supportGroupMessaging isEqual:@(YES)] ? @"true" : @"false";
    }
    if (maxTotalRecipients != nil) {
        queryParams[@"maxTotalRecipients"] = maxTotalRecipients;
    }
    if (batchSize != nil) {
        queryParams[@"batchSize"] = batchSize;
    }
    if (maxTotalAttachmentSize != nil) {
        queryParams[@"maxTotalAttachmentSize"] = maxTotalAttachmentSize;
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    if (allowedAttachmentTypes != nil) {
        queryParams[@"allowedAttachmentTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedAttachmentTypes format: @"multi"];
    }
    if (serviceSelector != nil) {
        queryParams[@"serviceSelector"] = serviceSelector;
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param resourceTypeFilters  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    resourceTypeFilters: (NSArray<NSString*>*) resourceTypeFilters
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (resourceTypeFilters != nil) {
        queryParams[@"resourceType.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceTypeFilters format: @"multi"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialModerationDashboardApiModerationDashboardSocialWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param resourceTypeFilters  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialModerationDashboardInternalImplFilterGroupSociWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    resourceTypeFilters: (NSArray<NSString*>*) resourceTypeFilters
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (resourceTypeFilters != nil) {
        queryParams[@"resourceType.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceTypeFilters format: @"multi"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @returns OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialNotificationsImplMentionsRouterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    completionHandler: (void (^)(OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialNotificationsImplMentionsRouterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxUnreadNotificationCount  (optional)
///
///  @returns OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialNotificationsImplNotificationManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxUnreadNotificationCount: (NSNumber*) maxUnreadNotificationCount
    completionHandler: (void (^)(OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxUnreadNotificationCount != nil) {
        queryParams[@"max.unread.notification.count"] = maxUnreadNotificationCount;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialNotificationsImplNotificationManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @returns OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialNotificationsImplNotificationsRouterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    completionHandler: (void (^)(OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialNotificationsImplNotificationsRouterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSocialReportingAnalyticsPollingImporterInterval  (optional)
///
///  @param cqSocialReportingAnalyticsPollingImporterPageSize  (optional)
///
///  @returns OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSocialReportingAnalyticsPollingImporterInterval: (NSNumber*) cqSocialReportingAnalyticsPollingImporterInterval
    cqSocialReportingAnalyticsPollingImporterPageSize: (NSNumber*) cqSocialReportingAnalyticsPollingImporterPageSize
    completionHandler: (void (^)(OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSocialReportingAnalyticsPollingImporterInterval != nil) {
        queryParams[@"cq.social.reporting.analytics.polling.importer.interval"] = cqSocialReportingAnalyticsPollingImporterInterval;
    }
    if (cqSocialReportingAnalyticsPollingImporterPageSize != nil) {
        queryParams[@"cq.social.reporting.analytics.polling.importer.pageSize"] = cqSocialReportingAnalyticsPollingImporterPageSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param reportFetchDelay  (optional)
///
///  @returns OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    reportFetchDelay: (NSNumber*) reportFetchDelay
    completionHandler: (void (^)(OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (reportFetchDelay != nil) {
        queryParams[@"report.fetch.delay"] = reportFetchDelay;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSocialConsoleAnalyticsSitesMapping  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSocialConsoleAnalyticsSitesMapping: (NSArray<NSString*>*) cqSocialConsoleAnalyticsSitesMapping
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSocialConsoleAnalyticsSitesMapping != nil) {
        queryParams[@"cq.social.console.analytics.sites.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqSocialConsoleAnalyticsSitesMapping format: @"multi"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param attachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    attachmentTypeBlacklist: (NSArray<NSString*>*) attachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (attachmentTypeBlacklist != nil) {
        queryParams[@"attachmentTypeBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: attachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param slingServletExtensions  (optional)
///
///  @returns OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialScfCoreOperationsImplSocialOperationsServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletSelectors: (NSString*) slingServletSelectors
    slingServletExtensions: (NSString*) slingServletExtensions
    completionHandler: (void (^)(OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    if (slingServletExtensions != nil) {
        queryParams[@"sling.servlet.extensions"] = slingServletExtensions;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param slingServletExtensions  (optional)
///
///  @returns OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialScfEndpointsImplDefaultSocialGetServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletSelectors: (NSArray<NSString*>*) slingServletSelectors
    slingServletExtensions: (NSString*) slingServletExtensions
    completionHandler: (void (^)(OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletSelectors format: @"multi"];
    }
    if (slingServletExtensions != nil) {
        queryParams[@"sling.servlet.extensions"] = slingServletExtensions;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @returns OAIComAdobeCqSocialScoringImplScoringEventListenerInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialScoringImplScoringEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    completionHandler: (void (^)(OAIComAdobeCqSocialScoringImplScoringEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialScoringImplScoringEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialScoringImplScoringEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enableFallback  (optional)
///
///  @returns OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enableFallback: (NSNumber*) enableFallback
    completionHandler: (void (^)(OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enableFallback != nil) {
        queryParams[@"enableFallback"] = [enableFallback isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fieldWhitelist  (optional)
///
///  @param sitePathFilters  (optional)
///
///  @param sitePackageGroup  (optional)
///
///  @returns OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSiteEndpointsImplSiteOperationServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fieldWhitelist: (NSArray<NSString*>*) fieldWhitelist
    sitePathFilters: (NSArray<NSString*>*) sitePathFilters
    sitePackageGroup: (NSString*) sitePackageGroup
    completionHandler: (void (^)(OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fieldWhitelist != nil) {
        queryParams[@"fieldWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fieldWhitelist format: @"multi"];
    }
    if (sitePathFilters != nil) {
        queryParams[@"sitePathFilters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: sitePathFilters format: @"multi"];
    }
    if (sitePackageGroup != nil) {
        queryParams[@"sitePackageGroup"] = sitePackageGroup;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSocialConsoleAnalyticsComponents  (optional)
///
///  @returns OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSocialConsoleAnalyticsComponents: (NSArray<NSString*>*) cqSocialConsoleAnalyticsComponents
    completionHandler: (void (^)(OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSocialConsoleAnalyticsComponents != nil) {
        queryParams[@"cq.social.console.analytics.components"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqSocialConsoleAnalyticsComponents format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param componentsUsingTags  (optional)
///
///  @returns OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSiteImplSiteConfiguratorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    componentsUsingTags: (NSArray<NSString*>*) componentsUsingTags
    completionHandler: (void (^)(OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (componentsUsingTags != nil) {
        queryParams[@"componentsUsingTags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: componentsUsingTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSiteImplSiteConfiguratorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param srpType  (optional)
///
///  @returns OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSrpImplSocialSolrConnectorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    srpType: (NSString*) srpType
    completionHandler: (void (^)(OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (srpType != nil) {
        queryParams[@"srp.type"] = srpType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSrpImplSocialSolrConnectorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param agentName  (optional)
///
///  @param diffPath  (optional)
///
///  @param propertyNames  (optional)
///
///  @returns OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSyncImplDiffChangesObserverWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    agentName: (NSString*) agentName
    diffPath: (NSString*) diffPath
    propertyNames: (NSString*) propertyNames
    completionHandler: (void (^)(OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (agentName != nil) {
        queryParams[@"agentName"] = agentName;
    }
    if (diffPath != nil) {
        queryParams[@"diffPath"] = diffPath;
    }
    if (propertyNames != nil) {
        queryParams[@"propertyNames"] = propertyNames;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSyncImplDiffChangesObserverInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param nodetypes  (optional)
///
///  @param ignorableprops  (optional)
///
///  @param ignorablenodes  (optional)
///
///  @param enabled  (optional)
///
///  @param distfolders  (optional)
///
///  @returns OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSyncImplGroupSyncListenerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    nodetypes: (NSArray<NSString*>*) nodetypes
    ignorableprops: (NSArray<NSString*>*) ignorableprops
    ignorablenodes: (NSString*) ignorablenodes
    enabled: (NSNumber*) enabled
    distfolders: (NSString*) distfolders
    completionHandler: (void (^)(OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (nodetypes != nil) {
        queryParams[@"nodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: nodetypes format: @"multi"];
    }
    if (ignorableprops != nil) {
        queryParams[@"ignorableprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignorableprops format: @"multi"];
    }
    if (ignorablenodes != nil) {
        queryParams[@"ignorablenodes"] = ignorablenodes;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (distfolders != nil) {
        queryParams[@"distfolders"] = distfolders;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSyncImplGroupSyncListenerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param activeRunModes  (optional)
///
///  @returns OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSyncImplPublisherSyncServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    activeRunModes: (NSArray<NSString*>*) activeRunModes
    completionHandler: (void (^)(OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (activeRunModes != nil) {
        queryParams[@"activeRunModes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: activeRunModes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param nodetypes  (optional)
///
///  @param ignorableprops  (optional)
///
///  @param ignorablenodes  (optional)
///
///  @param enabled  (optional)
///
///  @param distfolders  (optional)
///
///  @returns OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialSyncImplUserSyncListenerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    nodetypes: (NSArray<NSString*>*) nodetypes
    ignorableprops: (NSArray<NSString*>*) ignorableprops
    ignorablenodes: (NSArray<NSString*>*) ignorablenodes
    enabled: (NSNumber*) enabled
    distfolders: (NSArray<NSString*>*) distfolders
    completionHandler: (void (^)(OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (nodetypes != nil) {
        queryParams[@"nodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: nodetypes format: @"multi"];
    }
    if (ignorableprops != nil) {
        queryParams[@"ignorableprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignorableprops format: @"multi"];
    }
    if (ignorablenodes != nil) {
        queryParams[@"ignorablenodes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignorablenodes format: @"multi"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (distfolders != nil) {
        queryParams[@"distfolders"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: distfolders format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialSyncImplUserSyncListenerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param translateLanguage  (optional)
///
///  @param translateDisplay  (optional)
///
///  @param translateAttribution  (optional)
///
///  @param translateCaching  (optional)
///
///  @param translateSmartRendering  (optional)
///
///  @param translateCachingDuration  (optional)
///
///  @param translateSessionSaveInterval  (optional)
///
///  @param translateSessionSaveBatchLimit  (optional)
///
///  @returns OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialTranslationImplTranslationServiceConfigManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    translateLanguage: (NSString*) translateLanguage
    translateDisplay: (NSString*) translateDisplay
    translateAttribution: (NSNumber*) translateAttribution
    translateCaching: (NSString*) translateCaching
    translateSmartRendering: (NSString*) translateSmartRendering
    translateCachingDuration: (NSString*) translateCachingDuration
    translateSessionSaveInterval: (NSString*) translateSessionSaveInterval
    translateSessionSaveBatchLimit: (NSString*) translateSessionSaveBatchLimit
    completionHandler: (void (^)(OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (translateLanguage != nil) {
        queryParams[@"translate.language"] = translateLanguage;
    }
    if (translateDisplay != nil) {
        queryParams[@"translate.display"] = translateDisplay;
    }
    if (translateAttribution != nil) {
        queryParams[@"translate.attribution"] = [translateAttribution isEqual:@(YES)] ? @"true" : @"false";
    }
    if (translateCaching != nil) {
        queryParams[@"translate.caching"] = translateCaching;
    }
    if (translateSmartRendering != nil) {
        queryParams[@"translate.smart.rendering"] = translateSmartRendering;
    }
    if (translateCachingDuration != nil) {
        queryParams[@"translate.caching.duration"] = translateCachingDuration;
    }
    if (translateSessionSaveInterval != nil) {
        queryParams[@"translate.session.save.interval"] = translateSessionSaveInterval;
    }
    if (translateSessionSaveBatchLimit != nil) {
        queryParams[@"translate.session.save.batchLimit"] = translateSessionSaveBatchLimit;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @param eventFilter  (optional)
///
///  @param translateListenerType  (optional)
///
///  @param translatePropertyList  (optional)
///
///  @param poolSize  (optional)
///
///  @param maxPoolSize  (optional)
///
///  @param queueSize  (optional)
///
///  @param keepAliveTime  (optional)
///
///  @returns OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialTranslationImplUGCLanguageDetectorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSString*) eventTopics
    eventFilter: (NSString*) eventFilter
    translateListenerType: (NSArray<NSString*>*) translateListenerType
    translatePropertyList: (NSArray<NSString*>*) translatePropertyList
    poolSize: (NSNumber*) poolSize
    maxPoolSize: (NSNumber*) maxPoolSize
    queueSize: (NSNumber*) queueSize
    keepAliveTime: (NSNumber*) keepAliveTime
    completionHandler: (void (^)(OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = eventTopics;
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (translateListenerType != nil) {
        queryParams[@"translate.listener.type"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: translateListenerType format: @"multi"];
    }
    if (translatePropertyList != nil) {
        queryParams[@"translate.property.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: translatePropertyList format: @"multi"];
    }
    if (poolSize != nil) {
        queryParams[@"poolSize"] = poolSize;
    }
    if (maxPoolSize != nil) {
        queryParams[@"maxPoolSize"] = maxPoolSize;
    }
    if (queueSize != nil) {
        queryParams[@"queueSize"] = queueSize;
    }
    if (keepAliveTime != nil) {
        queryParams[@"keepAliveTime"] = keepAliveTime;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param threadPoolSize  (optional)
///
///  @param delayTime  (optional)
///
///  @param workerSleepTime  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    threadPoolSize: (NSNumber*) threadPoolSize
    delayTime: (NSNumber*) delayTime
    workerSleepTime: (NSNumber*) workerSleepTime
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (threadPoolSize != nil) {
        queryParams[@"threadPoolSize"] = threadPoolSize;
    }
    if (delayTime != nil) {
        queryParams[@"delayTime"] = delayTime;
    }
    if (workerSleepTime != nil) {
        queryParams[@"workerSleepTime"] = workerSleepTime;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param poolSize  (optional)
///
///  @param maxPoolSize  (optional)
///
///  @param queueSize  (optional)
///
///  @param keepAliveTime  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    poolSize: (NSNumber*) poolSize
    maxPoolSize: (NSNumber*) maxPoolSize
    queueSize: (NSNumber*) queueSize
    keepAliveTime: (NSNumber*) keepAliveTime
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (poolSize != nil) {
        queryParams[@"poolSize"] = poolSize;
    }
    if (maxPoolSize != nil) {
        queryParams[@"maxPoolSize"] = maxPoolSize;
    }
    if (queueSize != nil) {
        queryParams[@"queueSize"] = queueSize;
    }
    if (keepAliveTime != nil) {
        queryParams[@"keepAliveTime"] = keepAliveTime;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isPrimaryPublisher  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseImplPublisherConfigurationImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isPrimaryPublisher: (NSNumber*) isPrimaryPublisher
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isPrimaryPublisher != nil) {
        queryParams[@"isPrimaryPublisher"] = [isPrimaryPublisher isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param legacyCloudUGCPathMapping  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseImplSocialUtilsImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    legacyCloudUGCPathMapping: (NSNumber*) legacyCloudUGCPathMapping
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (legacyCloudUGCPathMapping != nil) {
        queryParams[@"legacyCloudUGCPathMapping"] = [legacyCloudUGCPathMapping isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param automoderationSequence  (optional)
///
///  @param automoderationOnfailurestop  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseModerationImplAutoModerationImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    automoderationSequence: (NSArray<NSString*>*) automoderationSequence
    automoderationOnfailurestop: (NSNumber*) automoderationOnfailurestop
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (automoderationSequence != nil) {
        queryParams[@"automoderation.sequence"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: automoderationSequence format: @"multi"];
    }
    if (automoderationOnfailurestop != nil) {
        queryParams[@"automoderation.onfailurestop"] = [automoderationOnfailurestop isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param watchwordsPositive  (optional)
///
///  @param watchwordsNegative  (optional)
///
///  @param watchwordsPath  (optional)
///
///  @param sentimentPath  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseModerationImplSentimentProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    watchwordsPositive: (NSArray<NSString*>*) watchwordsPositive
    watchwordsNegative: (NSArray<NSString*>*) watchwordsNegative
    watchwordsPath: (NSString*) watchwordsPath
    sentimentPath: (NSString*) sentimentPath
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (watchwordsPositive != nil) {
        queryParams[@"watchwords.positive"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: watchwordsPositive format: @"multi"];
    }
    if (watchwordsNegative != nil) {
        queryParams[@"watchwords.negative"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: watchwordsNegative format: @"multi"];
    }
    if (watchwordsPath != nil) {
        queryParams[@"watchwords.path"] = watchwordsPath;
    }
    if (sentimentPath != nil) {
        queryParams[@"sentiment.path"] = sentimentPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultAttachmentTypeBlacklist  (optional)
///
///  @param baselineAttachmentTypeBlacklist  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultAttachmentTypeBlacklist: (NSArray<NSString*>*) defaultAttachmentTypeBlacklist
    baselineAttachmentTypeBlacklist: (NSArray<NSString*>*) baselineAttachmentTypeBlacklist
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultAttachmentTypeBlacklist != nil) {
        queryParams[@"default.attachment.type.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: defaultAttachmentTypeBlacklist format: @"multi"];
    }
    if (baselineAttachmentTypeBlacklist != nil) {
        queryParams[@"baseline.attachment.type.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: baselineAttachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param parameterWhitelist  (optional)
///
///  @param parameterWhitelistPrefixes  (optional)
///
///  @param binaryParameterWhitelist  (optional)
///
///  @param modifierWhitelist  (optional)
///
///  @param operationWhitelist  (optional)
///
///  @param operationWhitelistPrefixes  (optional)
///
///  @param typehintWhitelist  (optional)
///
///  @param resourcetypeWhitelist  (optional)
///
///  @returns OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    parameterWhitelist: (NSArray<NSString*>*) parameterWhitelist
    parameterWhitelistPrefixes: (NSArray<NSString*>*) parameterWhitelistPrefixes
    binaryParameterWhitelist: (NSArray<NSString*>*) binaryParameterWhitelist
    modifierWhitelist: (NSArray<NSString*>*) modifierWhitelist
    operationWhitelist: (NSArray<NSString*>*) operationWhitelist
    operationWhitelistPrefixes: (NSArray<NSString*>*) operationWhitelistPrefixes
    typehintWhitelist: (NSArray<NSString*>*) typehintWhitelist
    resourcetypeWhitelist: (NSArray<NSString*>*) resourcetypeWhitelist
    completionHandler: (void (^)(OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (parameterWhitelist != nil) {
        queryParams[@"parameter.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parameterWhitelist format: @"multi"];
    }
    if (parameterWhitelistPrefixes != nil) {
        queryParams[@"parameter.whitelist.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parameterWhitelistPrefixes format: @"multi"];
    }
    if (binaryParameterWhitelist != nil) {
        queryParams[@"binary.parameter.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: binaryParameterWhitelist format: @"multi"];
    }
    if (modifierWhitelist != nil) {
        queryParams[@"modifier.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: modifierWhitelist format: @"multi"];
    }
    if (operationWhitelist != nil) {
        queryParams[@"operation.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: operationWhitelist format: @"multi"];
    }
    if (operationWhitelistPrefixes != nil) {
        queryParams[@"operation.whitelist.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: operationWhitelistPrefixes format: @"multi"];
    }
    if (typehintWhitelist != nil) {
        queryParams[@"typehint.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: typehintWhitelist format: @"multi"];
    }
    if (resourcetypeWhitelist != nil) {
        queryParams[@"resourcetype.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourcetypeWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletExtensions  (optional)
///
///  @param slingServletPaths  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @returns OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletExtensions: (NSString*) slingServletExtensions
    slingServletPaths: (NSString*) slingServletPaths
    slingServletMethods: (NSString*) slingServletMethods
    completionHandler: (void (^)(OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletExtensions != nil) {
        queryParams[@"sling.servlet.extensions"] = slingServletExtensions;
    }
    if (slingServletPaths != nil) {
        queryParams[@"sling.servlet.paths"] = slingServletPaths;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enable  (optional)
///
///  @param agentConfiguration  (optional)
///
///  @param contextPath  (optional)
///
///  @param disabledCipherSuites  (optional)
///
///  @param enabledCipherSuites  (optional)
///
///  @returns OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo*
///
-(NSURLSessionTask*) comAdobeCqSocialUserImplTransportHttpToPublisherWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enable: (NSNumber*) enable
    agentConfiguration: (NSArray<NSString*>*) agentConfiguration
    contextPath: (NSString*) contextPath
    disabledCipherSuites: (NSArray<NSString*>*) disabledCipherSuites
    enabledCipherSuites: (NSArray<NSString*>*) enabledCipherSuites
    completionHandler: (void (^)(OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enable != nil) {
        queryParams[@"enable"] = [enable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (agentConfiguration != nil) {
        queryParams[@"agent.configuration"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: agentConfiguration format: @"multi"];
    }
    if (contextPath != nil) {
        queryParams[@"context.path"] = contextPath;
    }
    if (disabledCipherSuites != nil) {
        queryParams[@"disabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: disabledCipherSuites format: @"multi"];
    }
    if (enabledCipherSuites != nil) {
        queryParams[@"enabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: enabledCipherSuites format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqSocialUserImplTransportHttpToPublisherInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param resourceTypes  (optional)
///
///  @returns OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo*
///
-(NSURLSessionTask*) comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    resourceTypes: (NSArray<NSString*>*) resourceTypes
    completionHandler: (void (^)(OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (resourceTypes != nil) {
        queryParams[@"resource.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param deletePathRegexps  (optional)
///
///  @param deleteSql2Query  (optional)
///
///  @returns OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo*
///
-(NSURLSessionTask*) comAdobeCqUpgradesCleanupImplUpgradeContentCleanupWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    deletePathRegexps: (NSArray<NSString*>*) deletePathRegexps
    deleteSql2Query: (NSString*) deleteSql2Query
    completionHandler: (void (^)(OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (deletePathRegexps != nil) {
        queryParams[@"delete.path.regexps"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: deletePathRegexps format: @"multi"];
    }
    if (deleteSql2Query != nil) {
        queryParams[@"delete.sql2.query"] = deleteSql2Query;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param deleteNameRegexps  (optional)
///
///  @returns OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo*
///
-(NSURLSessionTask*) comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    deleteNameRegexps: (NSArray<NSString*>*) deleteNameRegexps
    completionHandler: (void (^)(OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (deleteNameRegexps != nil) {
        queryParams[@"delete.name.regexps"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: deleteNameRegexps format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param threshold  (optional)
///
///  @param jobTopicName  (optional)
///
///  @param emailEnabled  (optional)
///
///  @returns OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    threshold: (NSNumber*) threshold
    jobTopicName: (NSString*) jobTopicName
    emailEnabled: (NSNumber*) emailEnabled
    completionHandler: (void (^)(OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (threshold != nil) {
        queryParams[@"threshold"] = threshold;
    }
    if (jobTopicName != nil) {
        queryParams[@"jobTopicName"] = jobTopicName;
    }
    if (emailEnabled != nil) {
        queryParams[@"emailEnabled"] = [emailEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param jobPurgeThreshold  (optional)
///
///  @param jobPurgeMaxJobs  (optional)
///
///  @returns OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    jobPurgeThreshold: (NSNumber*) jobPurgeThreshold
    jobPurgeMaxJobs: (NSNumber*) jobPurgeMaxJobs
    completionHandler: (void (^)(OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (jobPurgeThreshold != nil) {
        queryParams[@"job.purge.threshold"] = jobPurgeThreshold;
    }
    if (jobPurgeMaxJobs != nil) {
        queryParams[@"job.purge.max.jobs"] = jobPurgeMaxJobs;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param threshold  (optional)
///
///  @param jobTopicName  (optional)
///
///  @param emailEnabled  (optional)
///
///  @returns OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    threshold: (NSNumber*) threshold
    jobTopicName: (NSString*) jobTopicName
    emailEnabled: (NSNumber*) emailEnabled
    completionHandler: (void (^)(OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (threshold != nil) {
        queryParams[@"threshold"] = threshold;
    }
    if (jobTopicName != nil) {
        queryParams[@"jobTopicName"] = jobTopicName;
    }
    if (emailEnabled != nil) {
        queryParams[@"emailEnabled"] = [emailEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param threshold  (optional)
///
///  @param jobTopicName  (optional)
///
///  @param emailEnabled  (optional)
///
///  @returns OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    threshold: (NSNumber*) threshold
    jobTopicName: (NSString*) jobTopicName
    emailEnabled: (NSNumber*) emailEnabled
    completionHandler: (void (^)(OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (threshold != nil) {
        queryParams[@"threshold"] = threshold;
    }
    if (jobTopicName != nil) {
        queryParams[@"jobTopicName"] = jobTopicName;
    }
    if (emailEnabled != nil) {
        queryParams[@"emailEnabled"] = [emailEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param launchesEventhandlerThreadpoolMaxsize  (optional)
///
///  @param launchesEventhandlerThreadpoolPriority  (optional)
///
///  @param launchesEventhandlerUpdatelastmodification  (optional)
///
///  @returns OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmLaunchesImplLaunchesEventHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    launchesEventhandlerThreadpoolMaxsize: (NSNumber*) launchesEventhandlerThreadpoolMaxsize
    launchesEventhandlerThreadpoolPriority: (NSString*) launchesEventhandlerThreadpoolPriority
    launchesEventhandlerUpdatelastmodification: (NSNumber*) launchesEventhandlerUpdatelastmodification
    completionHandler: (void (^)(OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (launchesEventhandlerThreadpoolMaxsize != nil) {
        queryParams[@"launches.eventhandler.threadpool.maxsize"] = launchesEventhandlerThreadpoolMaxsize;
    }
    if (launchesEventhandlerThreadpoolPriority != nil) {
        queryParams[@"launches.eventhandler.threadpool.priority"] = launchesEventhandlerThreadpoolPriority;
    }
    if (launchesEventhandlerUpdatelastmodification != nil) {
        queryParams[@"launches.eventhandler.updatelastmodification"] = [launchesEventhandlerUpdatelastmodification isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmQrcodeServletWhitelist  (optional)
///
///  @returns OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmQrcodeServletWhitelist: (NSArray<NSString*>*) cqWcmQrcodeServletWhitelist
    completionHandler: (void (^)(OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmQrcodeServletWhitelist != nil) {
        queryParams[@"cq.wcm.qrcode.servlet.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmQrcodeServletWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param size  (optional)
///
///  @returns OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmStyleInternalComponentStyleInfoCacheImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    size: (NSNumber*) size
    completionHandler: (void (^)(OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (size != nil) {
        queryParams[@"size"] = size;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param syncTranslationStateSchedulingFormat  (optional)
///
///  @param schedulingRepeatTranslationSchedulingFormat  (optional)
///
///  @param syncTranslationStateLockTimeoutInMinutes  (optional)
///
///  @param exportFormat  (optional)
///
///  @returns OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo*
///
-(NSURLSessionTask*) comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    syncTranslationStateSchedulingFormat: (NSString*) syncTranslationStateSchedulingFormat
    schedulingRepeatTranslationSchedulingFormat: (NSString*) schedulingRepeatTranslationSchedulingFormat
    syncTranslationStateLockTimeoutInMinutes: (NSString*) syncTranslationStateLockTimeoutInMinutes
    exportFormat: (NSString*) exportFormat
    completionHandler: (void (^)(OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (syncTranslationStateSchedulingFormat != nil) {
        queryParams[@"syncTranslationState.schedulingFormat"] = syncTranslationStateSchedulingFormat;
    }
    if (schedulingRepeatTranslationSchedulingFormat != nil) {
        queryParams[@"schedulingRepeatTranslation.schedulingFormat"] = schedulingRepeatTranslationSchedulingFormat;
    }
    if (syncTranslationStateLockTimeoutInMinutes != nil) {
        queryParams[@"syncTranslationState.lockTimeoutInMinutes"] = syncTranslationStateLockTimeoutInMinutes;
    }
    if (exportFormat != nil) {
        queryParams[@"export.format"] = exportFormat;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param portalOutboxes  (optional)
///
///  @param draftDataService  (optional)
///
///  @param draftMetadataService  (optional)
///
///  @param submitDataService  (optional)
///
///  @param submitMetadataService  (optional)
///
///  @param pendingSignDataService  (optional)
///
///  @param pendingSignMetadataService  (optional)
///
///  @returns OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo*
///
-(NSURLSessionTask*) comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    portalOutboxes: (NSArray<NSString*>*) portalOutboxes
    draftDataService: (NSString*) draftDataService
    draftMetadataService: (NSString*) draftMetadataService
    submitDataService: (NSString*) submitDataService
    submitMetadataService: (NSString*) submitMetadataService
    pendingSignDataService: (NSString*) pendingSignDataService
    pendingSignMetadataService: (NSString*) pendingSignMetadataService
    completionHandler: (void (^)(OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (portalOutboxes != nil) {
        queryParams[@"portal.outboxes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: portalOutboxes format: @"multi"];
    }
    if (draftDataService != nil) {
        queryParams[@"draft.data.service"] = draftDataService;
    }
    if (draftMetadataService != nil) {
        queryParams[@"draft.metadata.service"] = draftMetadataService;
    }
    if (submitDataService != nil) {
        queryParams[@"submit.data.service"] = submitDataService;
    }
    if (submitMetadataService != nil) {
        queryParams[@"submit.metadata.service"] = submitMetadataService;
    }
    if (pendingSignDataService != nil) {
        queryParams[@"pendingSign.data.service"] = pendingSignDataService;
    }
    if (pendingSignMetadataService != nil) {
        queryParams[@"pendingSign.metadata.service"] = pendingSignMetadataService;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param formportalInterval  (optional)
///
///  @returns OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo*
///
-(NSURLSessionTask*) comAdobeFdFpConfigFormsPortalSchedulerServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    formportalInterval: (NSString*) formportalInterval
    completionHandler: (void (^)(OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (formportalInterval != nil) {
        queryParams[@"formportal.interval"] = formportalInterval;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeFdFpConfigFormsPortalSchedulerServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param alloweddataFileLocations  (optional)
///
///  @returns OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo*
///
-(NSURLSessionTask*) comAdobeFormsCommonServiceImplDefaultDataProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    alloweddataFileLocations: (NSArray<NSString*>*) alloweddataFileLocations
    completionHandler: (void (^)(OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (alloweddataFileLocations != nil) {
        queryParams[@"alloweddataFileLocations"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: alloweddataFileLocations format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeFormsCommonServiceImplDefaultDataProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param tempStorageConfig  (optional)
///
///  @returns OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo*
///
-(NSURLSessionTask*) comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    tempStorageConfig: (NSString*) tempStorageConfig
    completionHandler: (void (^)(OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (tempStorageConfig != nil) {
        queryParams[@"tempStorageConfig"] = tempStorageConfig;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param durationForTemporaryStorage  (optional)
///
///  @param durationForAnonymousStorage  (optional)
///
///  @returns OAIComAdobeFormsCommonServletTempCleanUpTaskInfo*
///
-(NSURLSessionTask*) comAdobeFormsCommonServletTempCleanUpTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    durationForTemporaryStorage: (NSString*) durationForTemporaryStorage
    durationForAnonymousStorage: (NSString*) durationForAnonymousStorage
    completionHandler: (void (^)(OAIComAdobeFormsCommonServletTempCleanUpTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (durationForTemporaryStorage != nil) {
        queryParams[@"Duration for Temporary Storage"] = durationForTemporaryStorage;
    }
    if (durationForAnonymousStorage != nil) {
        queryParams[@"Duration for Anonymous Storage"] = durationForAnonymousStorage;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeFormsCommonServletTempCleanUpTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeFormsCommonServletTempCleanUpTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queryLimit  (optional)
///
///  @param fileTypeExtensionMap  (optional)
///
///  @returns OAIComAdobeGraniteAcpPlatformPlatformServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAcpPlatformPlatformServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queryLimit: (NSNumber*) queryLimit
    fileTypeExtensionMap: (NSArray<NSString*>*) fileTypeExtensionMap
    completionHandler: (void (^)(OAIComAdobeGraniteAcpPlatformPlatformServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queryLimit != nil) {
        queryParams[@"query.limit"] = queryLimit;
    }
    if (fileTypeExtensionMap != nil) {
        queryParams[@"file.type.extension.map"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fileTypeExtensionMap format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAcpPlatformPlatformServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAcpPlatformPlatformServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param aggregateRelationships  (optional)
///
///  @param aggregateDescendVirtual  (optional)
///
///  @returns OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteActivitystreamsImplActivityManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    aggregateRelationships: (NSArray<NSString*>*) aggregateRelationships
    aggregateDescendVirtual: (NSNumber*) aggregateDescendVirtual
    completionHandler: (void (^)(OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (aggregateRelationships != nil) {
        queryParams[@"aggregate.relationships"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: aggregateRelationships format: @"multi"];
    }
    if (aggregateDescendVirtual != nil) {
        queryParams[@"aggregate.descend.virtual"] = [aggregateDescendVirtual isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteActivitystreamsImplActivityManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disabled  (optional)
///
///  @returns OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAnalyzerBaseSystemStatusServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disabled: (NSNumber*) disabled
    completionHandler: (void (^)(OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disabled != nil) {
        queryParams[@"disabled"] = [disabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAnalyzerBaseSystemStatusServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disabled  (optional)
///
///  @returns OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disabled: (NSNumber*) disabled
    completionHandler: (void (^)(OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disabled != nil) {
        queryParams[@"disabled"] = [disabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeCqCdnCdnRewriter  (optional)
///
///  @param comAdobeCqCloudConfigComponents  (optional)
///
///  @param comAdobeCqCloudConfigCore  (optional)
///
///  @param comAdobeCqCloudConfigUi  (optional)
///
///  @param comAdobeCqComAdobeCqEditor  (optional)
///
///  @param comAdobeCqComAdobeCqProjectsCore  (optional)
///
///  @param comAdobeCqComAdobeCqProjectsWcmCore  (optional)
///
///  @param comAdobeCqComAdobeCqUiCommons  (optional)
///
///  @param comAdobeCqComAdobeCqWcmStyle  (optional)
///
///  @param comAdobeCqCqActivitymapIntegration  (optional)
///
///  @param comAdobeCqCqContexthubCommons  (optional)
///
///  @param comAdobeCqCqDtm  (optional)
///
///  @param comAdobeCqCqHealthcheck  (optional)
///
///  @param comAdobeCqCqMultisiteTargeting  (optional)
///
///  @param comAdobeCqCqPreUpgradeCleanup  (optional)
///
///  @param comAdobeCqCqProductInfoProvider  (optional)
///
///  @param comAdobeCqCqRestSites  (optional)
///
///  @param comAdobeCqCqSecurityHc  (optional)
///
///  @param comAdobeCqDamCqDamSvgHandler  (optional)
///
///  @param comAdobeCqDamCqScene7Imaging  (optional)
///
///  @param comAdobeCqDtmReactorCore  (optional)
///
///  @param comAdobeCqDtmReactorUi  (optional)
///
///  @param comAdobeCqExpJspelResolver  (optional)
///
///  @param comAdobeCqInboxCqInbox  (optional)
///
///  @param comAdobeCqJsonSchemaParser  (optional)
///
///  @param comAdobeCqMediaCqMediaPublishingDpsFpCore  (optional)
///
///  @param comAdobeCqMobileCqMobileCaas  (optional)
///
///  @param comAdobeCqMobileCqMobileIndexBuilder  (optional)
///
///  @param comAdobeCqMobileCqMobilePhonegapBuild  (optional)
///
///  @param comAdobeCqMyspell  (optional)
///
///  @param comAdobeCqSampleWeRetailCore  (optional)
///
///  @param comAdobeCqScreensComAdobeCqScreensDcc  (optional)
///
///  @param comAdobeCqScreensComAdobeCqScreensMqCore  (optional)
///
///  @param comAdobeCqSocialCqSocialAsProvider  (optional)
///
///  @param comAdobeCqSocialCqSocialBadgingBasicImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialBadgingImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialCalendarImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialContentFragmentsImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialEnablementImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialGraphImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialIdeationImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialJcrProvider  (optional)
///
///  @param comAdobeCqSocialCqSocialMembersImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialMsProvider  (optional)
///
///  @param comAdobeCqSocialCqSocialNotificationsChannelsWeb  (optional)
///
///  @param comAdobeCqSocialCqSocialNotificationsImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialRdbProvider  (optional)
///
///  @param comAdobeCqSocialCqSocialScfImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialScoringBasicImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialScoringImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialServiceusersImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialSrpImpl  (optional)
///
///  @param comAdobeCqSocialCqSocialUgcbaseImpl  (optional)
///
///  @param comAdobeDamCqDamCfmImpl  (optional)
///
///  @param comAdobeFormsFoundationFormsFoundationBase  (optional)
///
///  @param comAdobeGraniteApicontroller  (optional)
///
///  @param comAdobeGraniteAssetCore  (optional)
///
///  @param comAdobeGraniteAuthSso  (optional)
///
///  @param comAdobeGraniteBundlesHcImpl  (optional)
///
///  @param comAdobeGraniteCompatRouter  (optional)
///
///  @param comAdobeGraniteConf  (optional)
///
///  @param comAdobeGraniteConfUiCore  (optional)
///
///  @param comAdobeGraniteCors  (optional)
///
///  @param comAdobeGraniteCrxExplorer  (optional)
///
///  @param comAdobeGraniteCrxdeLite  (optional)
///
///  @param comAdobeGraniteCryptoConfig  (optional)
///
///  @param comAdobeGraniteCryptoExtension  (optional)
///
///  @param comAdobeGraniteCryptoFile  (optional)
///
///  @param comAdobeGraniteCryptoJcr  (optional)
///
///  @param comAdobeGraniteCsrf  (optional)
///
///  @param comAdobeGraniteDistributionCore  (optional)
///
///  @param comAdobeGraniteDropwizardMetrics  (optional)
///
///  @param comAdobeGraniteFragsImpl  (optional)
///
///  @param comAdobeGraniteGibson  (optional)
///
///  @param comAdobeGraniteInfocollector  (optional)
///
///  @param comAdobeGraniteInstallerFactoryPackages  (optional)
///
///  @param comAdobeGraniteJettySsl  (optional)
///
///  @param comAdobeGraniteJobsAsync  (optional)
///
///  @param comAdobeGraniteMaintenanceOak  (optional)
///
///  @param comAdobeGraniteMonitoringCore  (optional)
///
///  @param comAdobeGraniteQueries  (optional)
///
///  @param comAdobeGraniteReplicationHcImpl  (optional)
///
///  @param comAdobeGraniteRepositoryChecker  (optional)
///
///  @param comAdobeGraniteRepositoryHcImpl  (optional)
///
///  @param comAdobeGraniteRestAssets  (optional)
///
///  @param comAdobeGraniteSecurityUi  (optional)
///
///  @param comAdobeGraniteStartup  (optional)
///
///  @param comAdobeGraniteTagsoup  (optional)
///
///  @param comAdobeGraniteTaskmanagementCore  (optional)
///
///  @param comAdobeGraniteTaskmanagementWorkflow  (optional)
///
///  @param comAdobeGraniteUiClientlibsCompilerLess  (optional)
///
///  @param comAdobeGraniteUiClientlibsProcessorGcc  (optional)
///
///  @param comAdobeGraniteWebconsolePlugins  (optional)
///
///  @param comAdobeGraniteWorkflowConsole  (optional)
///
///  @param comAdobeXmpWorkerFilesNativeFragmentLinux  (optional)
///
///  @param comAdobeXmpWorkerFilesNativeFragmentMacosx  (optional)
///
///  @param comAdobeXmpWorkerFilesNativeFragmentWin  (optional)
///
///  @param comDayCommonsOsgiWrapperSimpleJndi  (optional)
///
///  @param comDayCqCqAuthhandler  (optional)
///
///  @param comDayCqCqCompatConfigupdate  (optional)
///
///  @param comDayCqCqLicensebranding  (optional)
///
///  @param comDayCqCqNotifcationImpl  (optional)
///
///  @param comDayCqCqReplicationAudit  (optional)
///
///  @param comDayCqCqSearchExt  (optional)
///
///  @param comDayCqDamCqDamAnnotationPrint  (optional)
///
///  @param comDayCqDamCqDamAssetUsage  (optional)
///
///  @param comDayCqDamCqDamS7dam  (optional)
///
///  @param comDayCqDamCqDamSimilaritysearch  (optional)
///
///  @param comDayCqDamDamWebdavSupport  (optional)
///
///  @param comDayCqPreUpgradeTasks  (optional)
///
///  @param comDayCqReplicationExtensions  (optional)
///
///  @param comDayCqWcmCqMsmCore  (optional)
///
///  @param comDayCqWcmCqWcmTranslation  (optional)
///
///  @param dayCommonsJrawio  (optional)
///
///  @param orgApacheAriesJmxWhiteboard  (optional)
///
///  @param orgApacheFelixHttpSslfilter  (optional)
///
///  @param orgApacheFelixOrgApacheFelixThreaddump  (optional)
///
///  @param orgApacheFelixWebconsolePluginsDs  (optional)
///
///  @param orgApacheFelixWebconsolePluginsEvent  (optional)
///
///  @param orgApacheFelixWebconsolePluginsMemoryusage  (optional)
///
///  @param orgApacheFelixWebconsolePluginsPackageadmin  (optional)
///
///  @param orgApacheJackrabbitOakAuthLdap  (optional)
///
///  @param orgApacheJackrabbitOakSegmentTar  (optional)
///
///  @param orgApacheJackrabbitOakSolrOsgi  (optional)
///
///  @param orgApacheSlingBundleresourceImpl  (optional)
///
///  @param orgApacheSlingCommonsFsclassloader  (optional)
///
///  @param orgApacheSlingCommonsLogWebconsole  (optional)
///
///  @param orgApacheSlingDatasource  (optional)
///
///  @param orgApacheSlingDiscoveryBase  (optional)
///
///  @param orgApacheSlingDiscoveryOak  (optional)
///
///  @param orgApacheSlingDiscoverySupport  (optional)
///
///  @param orgApacheSlingDistributionApi  (optional)
///
///  @param orgApacheSlingDistributionCore  (optional)
///
///  @param orgApacheSlingExtensionsWebconsolesecurityprovider  (optional)
///
///  @param orgApacheSlingHcWebconsole  (optional)
///
///  @param orgApacheSlingInstallerConsole  (optional)
///
///  @param orgApacheSlingInstallerProviderFile  (optional)
///
///  @param orgApacheSlingInstallerProviderJcr  (optional)
///
///  @param orgApacheSlingJcrDavex  (optional)
///
///  @param orgApacheSlingJcrResourcesecurity  (optional)
///
///  @param orgApacheSlingJmxProvider  (optional)
///
///  @param orgApacheSlingLaunchpadInstaller  (optional)
///
///  @param orgApacheSlingModelsImpl  (optional)
///
///  @param orgApacheSlingRepoinitParser  (optional)
///
///  @param orgApacheSlingResourceInventory  (optional)
///
///  @param orgApacheSlingResourceresolver  (optional)
///
///  @param orgApacheSlingScriptingJavascript  (optional)
///
///  @param orgApacheSlingScriptingJst  (optional)
///
///  @param orgApacheSlingScriptingSightlyJsProvider  (optional)
///
///  @param orgApacheSlingScriptingSightlyModelsProvider  (optional)
///
///  @param orgApacheSlingSecurity  (optional)
///
///  @param orgApacheSlingServletsCompat  (optional)
///
///  @param orgApacheSlingServletsGet  (optional)
///
///  @param orgApacheSlingStartupfilterDisabler  (optional)
///
///  @param orgApacheSlingTracer  (optional)
///
///  @param weRetailClientAppCore  (optional)
///
///  @returns OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo*
///
-(NSURLSessionTask*) comAdobeGraniteApicontrollerFilterResolverHookFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeCqCdnCdnRewriter: (NSString*) comAdobeCqCdnCdnRewriter
    comAdobeCqCloudConfigComponents: (NSString*) comAdobeCqCloudConfigComponents
    comAdobeCqCloudConfigCore: (NSString*) comAdobeCqCloudConfigCore
    comAdobeCqCloudConfigUi: (NSString*) comAdobeCqCloudConfigUi
    comAdobeCqComAdobeCqEditor: (NSString*) comAdobeCqComAdobeCqEditor
    comAdobeCqComAdobeCqProjectsCore: (NSString*) comAdobeCqComAdobeCqProjectsCore
    comAdobeCqComAdobeCqProjectsWcmCore: (NSString*) comAdobeCqComAdobeCqProjectsWcmCore
    comAdobeCqComAdobeCqUiCommons: (NSString*) comAdobeCqComAdobeCqUiCommons
    comAdobeCqComAdobeCqWcmStyle: (NSString*) comAdobeCqComAdobeCqWcmStyle
    comAdobeCqCqActivitymapIntegration: (NSString*) comAdobeCqCqActivitymapIntegration
    comAdobeCqCqContexthubCommons: (NSString*) comAdobeCqCqContexthubCommons
    comAdobeCqCqDtm: (NSString*) comAdobeCqCqDtm
    comAdobeCqCqHealthcheck: (NSString*) comAdobeCqCqHealthcheck
    comAdobeCqCqMultisiteTargeting: (NSString*) comAdobeCqCqMultisiteTargeting
    comAdobeCqCqPreUpgradeCleanup: (NSString*) comAdobeCqCqPreUpgradeCleanup
    comAdobeCqCqProductInfoProvider: (NSString*) comAdobeCqCqProductInfoProvider
    comAdobeCqCqRestSites: (NSString*) comAdobeCqCqRestSites
    comAdobeCqCqSecurityHc: (NSString*) comAdobeCqCqSecurityHc
    comAdobeCqDamCqDamSvgHandler: (NSString*) comAdobeCqDamCqDamSvgHandler
    comAdobeCqDamCqScene7Imaging: (NSString*) comAdobeCqDamCqScene7Imaging
    comAdobeCqDtmReactorCore: (NSString*) comAdobeCqDtmReactorCore
    comAdobeCqDtmReactorUi: (NSString*) comAdobeCqDtmReactorUi
    comAdobeCqExpJspelResolver: (NSString*) comAdobeCqExpJspelResolver
    comAdobeCqInboxCqInbox: (NSString*) comAdobeCqInboxCqInbox
    comAdobeCqJsonSchemaParser: (NSString*) comAdobeCqJsonSchemaParser
    comAdobeCqMediaCqMediaPublishingDpsFpCore: (NSString*) comAdobeCqMediaCqMediaPublishingDpsFpCore
    comAdobeCqMobileCqMobileCaas: (NSString*) comAdobeCqMobileCqMobileCaas
    comAdobeCqMobileCqMobileIndexBuilder: (NSString*) comAdobeCqMobileCqMobileIndexBuilder
    comAdobeCqMobileCqMobilePhonegapBuild: (NSString*) comAdobeCqMobileCqMobilePhonegapBuild
    comAdobeCqMyspell: (NSString*) comAdobeCqMyspell
    comAdobeCqSampleWeRetailCore: (NSString*) comAdobeCqSampleWeRetailCore
    comAdobeCqScreensComAdobeCqScreensDcc: (NSString*) comAdobeCqScreensComAdobeCqScreensDcc
    comAdobeCqScreensComAdobeCqScreensMqCore: (NSString*) comAdobeCqScreensComAdobeCqScreensMqCore
    comAdobeCqSocialCqSocialAsProvider: (NSString*) comAdobeCqSocialCqSocialAsProvider
    comAdobeCqSocialCqSocialBadgingBasicImpl: (NSString*) comAdobeCqSocialCqSocialBadgingBasicImpl
    comAdobeCqSocialCqSocialBadgingImpl: (NSString*) comAdobeCqSocialCqSocialBadgingImpl
    comAdobeCqSocialCqSocialCalendarImpl: (NSString*) comAdobeCqSocialCqSocialCalendarImpl
    comAdobeCqSocialCqSocialContentFragmentsImpl: (NSString*) comAdobeCqSocialCqSocialContentFragmentsImpl
    comAdobeCqSocialCqSocialEnablementImpl: (NSString*) comAdobeCqSocialCqSocialEnablementImpl
    comAdobeCqSocialCqSocialGraphImpl: (NSString*) comAdobeCqSocialCqSocialGraphImpl
    comAdobeCqSocialCqSocialIdeationImpl: (NSString*) comAdobeCqSocialCqSocialIdeationImpl
    comAdobeCqSocialCqSocialJcrProvider: (NSString*) comAdobeCqSocialCqSocialJcrProvider
    comAdobeCqSocialCqSocialMembersImpl: (NSString*) comAdobeCqSocialCqSocialMembersImpl
    comAdobeCqSocialCqSocialMsProvider: (NSString*) comAdobeCqSocialCqSocialMsProvider
    comAdobeCqSocialCqSocialNotificationsChannelsWeb: (NSString*) comAdobeCqSocialCqSocialNotificationsChannelsWeb
    comAdobeCqSocialCqSocialNotificationsImpl: (NSString*) comAdobeCqSocialCqSocialNotificationsImpl
    comAdobeCqSocialCqSocialRdbProvider: (NSString*) comAdobeCqSocialCqSocialRdbProvider
    comAdobeCqSocialCqSocialScfImpl: (NSString*) comAdobeCqSocialCqSocialScfImpl
    comAdobeCqSocialCqSocialScoringBasicImpl: (NSString*) comAdobeCqSocialCqSocialScoringBasicImpl
    comAdobeCqSocialCqSocialScoringImpl: (NSString*) comAdobeCqSocialCqSocialScoringImpl
    comAdobeCqSocialCqSocialServiceusersImpl: (NSString*) comAdobeCqSocialCqSocialServiceusersImpl
    comAdobeCqSocialCqSocialSrpImpl: (NSString*) comAdobeCqSocialCqSocialSrpImpl
    comAdobeCqSocialCqSocialUgcbaseImpl: (NSString*) comAdobeCqSocialCqSocialUgcbaseImpl
    comAdobeDamCqDamCfmImpl: (NSString*) comAdobeDamCqDamCfmImpl
    comAdobeFormsFoundationFormsFoundationBase: (NSString*) comAdobeFormsFoundationFormsFoundationBase
    comAdobeGraniteApicontroller: (NSString*) comAdobeGraniteApicontroller
    comAdobeGraniteAssetCore: (NSString*) comAdobeGraniteAssetCore
    comAdobeGraniteAuthSso: (NSString*) comAdobeGraniteAuthSso
    comAdobeGraniteBundlesHcImpl: (NSString*) comAdobeGraniteBundlesHcImpl
    comAdobeGraniteCompatRouter: (NSString*) comAdobeGraniteCompatRouter
    comAdobeGraniteConf: (NSString*) comAdobeGraniteConf
    comAdobeGraniteConfUiCore: (NSString*) comAdobeGraniteConfUiCore
    comAdobeGraniteCors: (NSString*) comAdobeGraniteCors
    comAdobeGraniteCrxExplorer: (NSString*) comAdobeGraniteCrxExplorer
    comAdobeGraniteCrxdeLite: (NSString*) comAdobeGraniteCrxdeLite
    comAdobeGraniteCryptoConfig: (NSString*) comAdobeGraniteCryptoConfig
    comAdobeGraniteCryptoExtension: (NSString*) comAdobeGraniteCryptoExtension
    comAdobeGraniteCryptoFile: (NSString*) comAdobeGraniteCryptoFile
    comAdobeGraniteCryptoJcr: (NSString*) comAdobeGraniteCryptoJcr
    comAdobeGraniteCsrf: (NSString*) comAdobeGraniteCsrf
    comAdobeGraniteDistributionCore: (NSString*) comAdobeGraniteDistributionCore
    comAdobeGraniteDropwizardMetrics: (NSString*) comAdobeGraniteDropwizardMetrics
    comAdobeGraniteFragsImpl: (NSString*) comAdobeGraniteFragsImpl
    comAdobeGraniteGibson: (NSString*) comAdobeGraniteGibson
    comAdobeGraniteInfocollector: (NSString*) comAdobeGraniteInfocollector
    comAdobeGraniteInstallerFactoryPackages: (NSString*) comAdobeGraniteInstallerFactoryPackages
    comAdobeGraniteJettySsl: (NSString*) comAdobeGraniteJettySsl
    comAdobeGraniteJobsAsync: (NSString*) comAdobeGraniteJobsAsync
    comAdobeGraniteMaintenanceOak: (NSString*) comAdobeGraniteMaintenanceOak
    comAdobeGraniteMonitoringCore: (NSString*) comAdobeGraniteMonitoringCore
    comAdobeGraniteQueries: (NSString*) comAdobeGraniteQueries
    comAdobeGraniteReplicationHcImpl: (NSString*) comAdobeGraniteReplicationHcImpl
    comAdobeGraniteRepositoryChecker: (NSString*) comAdobeGraniteRepositoryChecker
    comAdobeGraniteRepositoryHcImpl: (NSString*) comAdobeGraniteRepositoryHcImpl
    comAdobeGraniteRestAssets: (NSString*) comAdobeGraniteRestAssets
    comAdobeGraniteSecurityUi: (NSString*) comAdobeGraniteSecurityUi
    comAdobeGraniteStartup: (NSString*) comAdobeGraniteStartup
    comAdobeGraniteTagsoup: (NSString*) comAdobeGraniteTagsoup
    comAdobeGraniteTaskmanagementCore: (NSString*) comAdobeGraniteTaskmanagementCore
    comAdobeGraniteTaskmanagementWorkflow: (NSString*) comAdobeGraniteTaskmanagementWorkflow
    comAdobeGraniteUiClientlibsCompilerLess: (NSString*) comAdobeGraniteUiClientlibsCompilerLess
    comAdobeGraniteUiClientlibsProcessorGcc: (NSString*) comAdobeGraniteUiClientlibsProcessorGcc
    comAdobeGraniteWebconsolePlugins: (NSString*) comAdobeGraniteWebconsolePlugins
    comAdobeGraniteWorkflowConsole: (NSString*) comAdobeGraniteWorkflowConsole
    comAdobeXmpWorkerFilesNativeFragmentLinux: (NSString*) comAdobeXmpWorkerFilesNativeFragmentLinux
    comAdobeXmpWorkerFilesNativeFragmentMacosx: (NSString*) comAdobeXmpWorkerFilesNativeFragmentMacosx
    comAdobeXmpWorkerFilesNativeFragmentWin: (NSString*) comAdobeXmpWorkerFilesNativeFragmentWin
    comDayCommonsOsgiWrapperSimpleJndi: (NSString*) comDayCommonsOsgiWrapperSimpleJndi
    comDayCqCqAuthhandler: (NSString*) comDayCqCqAuthhandler
    comDayCqCqCompatConfigupdate: (NSString*) comDayCqCqCompatConfigupdate
    comDayCqCqLicensebranding: (NSString*) comDayCqCqLicensebranding
    comDayCqCqNotifcationImpl: (NSString*) comDayCqCqNotifcationImpl
    comDayCqCqReplicationAudit: (NSString*) comDayCqCqReplicationAudit
    comDayCqCqSearchExt: (NSString*) comDayCqCqSearchExt
    comDayCqDamCqDamAnnotationPrint: (NSString*) comDayCqDamCqDamAnnotationPrint
    comDayCqDamCqDamAssetUsage: (NSString*) comDayCqDamCqDamAssetUsage
    comDayCqDamCqDamS7dam: (NSString*) comDayCqDamCqDamS7dam
    comDayCqDamCqDamSimilaritysearch: (NSString*) comDayCqDamCqDamSimilaritysearch
    comDayCqDamDamWebdavSupport: (NSString*) comDayCqDamDamWebdavSupport
    comDayCqPreUpgradeTasks: (NSString*) comDayCqPreUpgradeTasks
    comDayCqReplicationExtensions: (NSString*) comDayCqReplicationExtensions
    comDayCqWcmCqMsmCore: (NSString*) comDayCqWcmCqMsmCore
    comDayCqWcmCqWcmTranslation: (NSString*) comDayCqWcmCqWcmTranslation
    dayCommonsJrawio: (NSString*) dayCommonsJrawio
    orgApacheAriesJmxWhiteboard: (NSString*) orgApacheAriesJmxWhiteboard
    orgApacheFelixHttpSslfilter: (NSString*) orgApacheFelixHttpSslfilter
    orgApacheFelixOrgApacheFelixThreaddump: (NSString*) orgApacheFelixOrgApacheFelixThreaddump
    orgApacheFelixWebconsolePluginsDs: (NSString*) orgApacheFelixWebconsolePluginsDs
    orgApacheFelixWebconsolePluginsEvent: (NSString*) orgApacheFelixWebconsolePluginsEvent
    orgApacheFelixWebconsolePluginsMemoryusage: (NSString*) orgApacheFelixWebconsolePluginsMemoryusage
    orgApacheFelixWebconsolePluginsPackageadmin: (NSString*) orgApacheFelixWebconsolePluginsPackageadmin
    orgApacheJackrabbitOakAuthLdap: (NSString*) orgApacheJackrabbitOakAuthLdap
    orgApacheJackrabbitOakSegmentTar: (NSString*) orgApacheJackrabbitOakSegmentTar
    orgApacheJackrabbitOakSolrOsgi: (NSString*) orgApacheJackrabbitOakSolrOsgi
    orgApacheSlingBundleresourceImpl: (NSString*) orgApacheSlingBundleresourceImpl
    orgApacheSlingCommonsFsclassloader: (NSString*) orgApacheSlingCommonsFsclassloader
    orgApacheSlingCommonsLogWebconsole: (NSString*) orgApacheSlingCommonsLogWebconsole
    orgApacheSlingDatasource: (NSString*) orgApacheSlingDatasource
    orgApacheSlingDiscoveryBase: (NSString*) orgApacheSlingDiscoveryBase
    orgApacheSlingDiscoveryOak: (NSString*) orgApacheSlingDiscoveryOak
    orgApacheSlingDiscoverySupport: (NSString*) orgApacheSlingDiscoverySupport
    orgApacheSlingDistributionApi: (NSString*) orgApacheSlingDistributionApi
    orgApacheSlingDistributionCore: (NSString*) orgApacheSlingDistributionCore
    orgApacheSlingExtensionsWebconsolesecurityprovider: (NSString*) orgApacheSlingExtensionsWebconsolesecurityprovider
    orgApacheSlingHcWebconsole: (NSString*) orgApacheSlingHcWebconsole
    orgApacheSlingInstallerConsole: (NSString*) orgApacheSlingInstallerConsole
    orgApacheSlingInstallerProviderFile: (NSString*) orgApacheSlingInstallerProviderFile
    orgApacheSlingInstallerProviderJcr: (NSString*) orgApacheSlingInstallerProviderJcr
    orgApacheSlingJcrDavex: (NSString*) orgApacheSlingJcrDavex
    orgApacheSlingJcrResourcesecurity: (NSString*) orgApacheSlingJcrResourcesecurity
    orgApacheSlingJmxProvider: (NSString*) orgApacheSlingJmxProvider
    orgApacheSlingLaunchpadInstaller: (NSString*) orgApacheSlingLaunchpadInstaller
    orgApacheSlingModelsImpl: (NSString*) orgApacheSlingModelsImpl
    orgApacheSlingRepoinitParser: (NSString*) orgApacheSlingRepoinitParser
    orgApacheSlingResourceInventory: (NSString*) orgApacheSlingResourceInventory
    orgApacheSlingResourceresolver: (NSString*) orgApacheSlingResourceresolver
    orgApacheSlingScriptingJavascript: (NSString*) orgApacheSlingScriptingJavascript
    orgApacheSlingScriptingJst: (NSString*) orgApacheSlingScriptingJst
    orgApacheSlingScriptingSightlyJsProvider: (NSString*) orgApacheSlingScriptingSightlyJsProvider
    orgApacheSlingScriptingSightlyModelsProvider: (NSString*) orgApacheSlingScriptingSightlyModelsProvider
    orgApacheSlingSecurity: (NSString*) orgApacheSlingSecurity
    orgApacheSlingServletsCompat: (NSString*) orgApacheSlingServletsCompat
    orgApacheSlingServletsGet: (NSString*) orgApacheSlingServletsGet
    orgApacheSlingStartupfilterDisabler: (NSString*) orgApacheSlingStartupfilterDisabler
    orgApacheSlingTracer: (NSString*) orgApacheSlingTracer
    weRetailClientAppCore: (NSString*) weRetailClientAppCore
    completionHandler: (void (^)(OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeCqCdnCdnRewriter != nil) {
        queryParams[@"com.adobe.cq.cdn.cdn-rewriter"] = comAdobeCqCdnCdnRewriter;
    }
    if (comAdobeCqCloudConfigComponents != nil) {
        queryParams[@"com.adobe.cq.cloud-config.components"] = comAdobeCqCloudConfigComponents;
    }
    if (comAdobeCqCloudConfigCore != nil) {
        queryParams[@"com.adobe.cq.cloud-config.core"] = comAdobeCqCloudConfigCore;
    }
    if (comAdobeCqCloudConfigUi != nil) {
        queryParams[@"com.adobe.cq.cloud-config.ui"] = comAdobeCqCloudConfigUi;
    }
    if (comAdobeCqComAdobeCqEditor != nil) {
        queryParams[@"com.adobe.cq.com.adobe.cq.editor"] = comAdobeCqComAdobeCqEditor;
    }
    if (comAdobeCqComAdobeCqProjectsCore != nil) {
        queryParams[@"com.adobe.cq.com.adobe.cq.projects.core"] = comAdobeCqComAdobeCqProjectsCore;
    }
    if (comAdobeCqComAdobeCqProjectsWcmCore != nil) {
        queryParams[@"com.adobe.cq.com.adobe.cq.projects.wcm.core"] = comAdobeCqComAdobeCqProjectsWcmCore;
    }
    if (comAdobeCqComAdobeCqUiCommons != nil) {
        queryParams[@"com.adobe.cq.com.adobe.cq.ui.commons"] = comAdobeCqComAdobeCqUiCommons;
    }
    if (comAdobeCqComAdobeCqWcmStyle != nil) {
        queryParams[@"com.adobe.cq.com.adobe.cq.wcm.style"] = comAdobeCqComAdobeCqWcmStyle;
    }
    if (comAdobeCqCqActivitymapIntegration != nil) {
        queryParams[@"com.adobe.cq.cq-activitymap-integration"] = comAdobeCqCqActivitymapIntegration;
    }
    if (comAdobeCqCqContexthubCommons != nil) {
        queryParams[@"com.adobe.cq.cq-contexthub-commons"] = comAdobeCqCqContexthubCommons;
    }
    if (comAdobeCqCqDtm != nil) {
        queryParams[@"com.adobe.cq.cq-dtm"] = comAdobeCqCqDtm;
    }
    if (comAdobeCqCqHealthcheck != nil) {
        queryParams[@"com.adobe.cq.cq-healthcheck"] = comAdobeCqCqHealthcheck;
    }
    if (comAdobeCqCqMultisiteTargeting != nil) {
        queryParams[@"com.adobe.cq.cq-multisite-targeting"] = comAdobeCqCqMultisiteTargeting;
    }
    if (comAdobeCqCqPreUpgradeCleanup != nil) {
        queryParams[@"com.adobe.cq.cq-pre-upgrade-cleanup"] = comAdobeCqCqPreUpgradeCleanup;
    }
    if (comAdobeCqCqProductInfoProvider != nil) {
        queryParams[@"com.adobe.cq.cq-product-info-provider"] = comAdobeCqCqProductInfoProvider;
    }
    if (comAdobeCqCqRestSites != nil) {
        queryParams[@"com.adobe.cq.cq-rest-sites"] = comAdobeCqCqRestSites;
    }
    if (comAdobeCqCqSecurityHc != nil) {
        queryParams[@"com.adobe.cq.cq-security-hc"] = comAdobeCqCqSecurityHc;
    }
    if (comAdobeCqDamCqDamSvgHandler != nil) {
        queryParams[@"com.adobe.cq.dam.cq-dam-svg-handler"] = comAdobeCqDamCqDamSvgHandler;
    }
    if (comAdobeCqDamCqScene7Imaging != nil) {
        queryParams[@"com.adobe.cq.dam.cq-scene7-imaging"] = comAdobeCqDamCqScene7Imaging;
    }
    if (comAdobeCqDtmReactorCore != nil) {
        queryParams[@"com.adobe.cq.dtm-reactor.core"] = comAdobeCqDtmReactorCore;
    }
    if (comAdobeCqDtmReactorUi != nil) {
        queryParams[@"com.adobe.cq.dtm-reactor.ui"] = comAdobeCqDtmReactorUi;
    }
    if (comAdobeCqExpJspelResolver != nil) {
        queryParams[@"com.adobe.cq.exp-jspel-resolver"] = comAdobeCqExpJspelResolver;
    }
    if (comAdobeCqInboxCqInbox != nil) {
        queryParams[@"com.adobe.cq.inbox.cq-inbox"] = comAdobeCqInboxCqInbox;
    }
    if (comAdobeCqJsonSchemaParser != nil) {
        queryParams[@"com.adobe.cq.json-schema-parser"] = comAdobeCqJsonSchemaParser;
    }
    if (comAdobeCqMediaCqMediaPublishingDpsFpCore != nil) {
        queryParams[@"com.adobe.cq.media.cq-media-publishing-dps-fp-core"] = comAdobeCqMediaCqMediaPublishingDpsFpCore;
    }
    if (comAdobeCqMobileCqMobileCaas != nil) {
        queryParams[@"com.adobe.cq.mobile.cq-mobile-caas"] = comAdobeCqMobileCqMobileCaas;
    }
    if (comAdobeCqMobileCqMobileIndexBuilder != nil) {
        queryParams[@"com.adobe.cq.mobile.cq-mobile-index-builder"] = comAdobeCqMobileCqMobileIndexBuilder;
    }
    if (comAdobeCqMobileCqMobilePhonegapBuild != nil) {
        queryParams[@"com.adobe.cq.mobile.cq-mobile-phonegap-build"] = comAdobeCqMobileCqMobilePhonegapBuild;
    }
    if (comAdobeCqMyspell != nil) {
        queryParams[@"com.adobe.cq.myspell"] = comAdobeCqMyspell;
    }
    if (comAdobeCqSampleWeRetailCore != nil) {
        queryParams[@"com.adobe.cq.sample.we.retail.core"] = comAdobeCqSampleWeRetailCore;
    }
    if (comAdobeCqScreensComAdobeCqScreensDcc != nil) {
        queryParams[@"com.adobe.cq.screens.com.adobe.cq.screens.dcc"] = comAdobeCqScreensComAdobeCqScreensDcc;
    }
    if (comAdobeCqScreensComAdobeCqScreensMqCore != nil) {
        queryParams[@"com.adobe.cq.screens.com.adobe.cq.screens.mq.core"] = comAdobeCqScreensComAdobeCqScreensMqCore;
    }
    if (comAdobeCqSocialCqSocialAsProvider != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-as-provider"] = comAdobeCqSocialCqSocialAsProvider;
    }
    if (comAdobeCqSocialCqSocialBadgingBasicImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-badging-basic-impl"] = comAdobeCqSocialCqSocialBadgingBasicImpl;
    }
    if (comAdobeCqSocialCqSocialBadgingImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-badging-impl"] = comAdobeCqSocialCqSocialBadgingImpl;
    }
    if (comAdobeCqSocialCqSocialCalendarImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-calendar-impl"] = comAdobeCqSocialCqSocialCalendarImpl;
    }
    if (comAdobeCqSocialCqSocialContentFragmentsImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-content-fragments-impl"] = comAdobeCqSocialCqSocialContentFragmentsImpl;
    }
    if (comAdobeCqSocialCqSocialEnablementImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-enablement-impl"] = comAdobeCqSocialCqSocialEnablementImpl;
    }
    if (comAdobeCqSocialCqSocialGraphImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-graph-impl"] = comAdobeCqSocialCqSocialGraphImpl;
    }
    if (comAdobeCqSocialCqSocialIdeationImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-ideation-impl"] = comAdobeCqSocialCqSocialIdeationImpl;
    }
    if (comAdobeCqSocialCqSocialJcrProvider != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-jcr-provider"] = comAdobeCqSocialCqSocialJcrProvider;
    }
    if (comAdobeCqSocialCqSocialMembersImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-members-impl"] = comAdobeCqSocialCqSocialMembersImpl;
    }
    if (comAdobeCqSocialCqSocialMsProvider != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-ms-provider"] = comAdobeCqSocialCqSocialMsProvider;
    }
    if (comAdobeCqSocialCqSocialNotificationsChannelsWeb != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-notifications-channels-web"] = comAdobeCqSocialCqSocialNotificationsChannelsWeb;
    }
    if (comAdobeCqSocialCqSocialNotificationsImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-notifications-impl"] = comAdobeCqSocialCqSocialNotificationsImpl;
    }
    if (comAdobeCqSocialCqSocialRdbProvider != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-rdb-provider"] = comAdobeCqSocialCqSocialRdbProvider;
    }
    if (comAdobeCqSocialCqSocialScfImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-scf-impl"] = comAdobeCqSocialCqSocialScfImpl;
    }
    if (comAdobeCqSocialCqSocialScoringBasicImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-scoring-basic-impl"] = comAdobeCqSocialCqSocialScoringBasicImpl;
    }
    if (comAdobeCqSocialCqSocialScoringImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-scoring-impl"] = comAdobeCqSocialCqSocialScoringImpl;
    }
    if (comAdobeCqSocialCqSocialServiceusersImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-serviceusers-impl"] = comAdobeCqSocialCqSocialServiceusersImpl;
    }
    if (comAdobeCqSocialCqSocialSrpImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-srp-impl"] = comAdobeCqSocialCqSocialSrpImpl;
    }
    if (comAdobeCqSocialCqSocialUgcbaseImpl != nil) {
        queryParams[@"com.adobe.cq.social.cq-social-ugcbase-impl"] = comAdobeCqSocialCqSocialUgcbaseImpl;
    }
    if (comAdobeDamCqDamCfmImpl != nil) {
        queryParams[@"com.adobe.dam.cq-dam-cfm-impl"] = comAdobeDamCqDamCfmImpl;
    }
    if (comAdobeFormsFoundationFormsFoundationBase != nil) {
        queryParams[@"com.adobe.forms.foundation-forms-foundation-base"] = comAdobeFormsFoundationFormsFoundationBase;
    }
    if (comAdobeGraniteApicontroller != nil) {
        queryParams[@"com.adobe.granite.apicontroller"] = comAdobeGraniteApicontroller;
    }
    if (comAdobeGraniteAssetCore != nil) {
        queryParams[@"com.adobe.granite.asset.core"] = comAdobeGraniteAssetCore;
    }
    if (comAdobeGraniteAuthSso != nil) {
        queryParams[@"com.adobe.granite.auth.sso"] = comAdobeGraniteAuthSso;
    }
    if (comAdobeGraniteBundlesHcImpl != nil) {
        queryParams[@"com.adobe.granite.bundles.hc.impl"] = comAdobeGraniteBundlesHcImpl;
    }
    if (comAdobeGraniteCompatRouter != nil) {
        queryParams[@"com.adobe.granite.compat-router"] = comAdobeGraniteCompatRouter;
    }
    if (comAdobeGraniteConf != nil) {
        queryParams[@"com.adobe.granite.conf"] = comAdobeGraniteConf;
    }
    if (comAdobeGraniteConfUiCore != nil) {
        queryParams[@"com.adobe.granite.conf.ui.core"] = comAdobeGraniteConfUiCore;
    }
    if (comAdobeGraniteCors != nil) {
        queryParams[@"com.adobe.granite.cors"] = comAdobeGraniteCors;
    }
    if (comAdobeGraniteCrxExplorer != nil) {
        queryParams[@"com.adobe.granite.crx-explorer"] = comAdobeGraniteCrxExplorer;
    }
    if (comAdobeGraniteCrxdeLite != nil) {
        queryParams[@"com.adobe.granite.crxde-lite"] = comAdobeGraniteCrxdeLite;
    }
    if (comAdobeGraniteCryptoConfig != nil) {
        queryParams[@"com.adobe.granite.crypto.config"] = comAdobeGraniteCryptoConfig;
    }
    if (comAdobeGraniteCryptoExtension != nil) {
        queryParams[@"com.adobe.granite.crypto.extension"] = comAdobeGraniteCryptoExtension;
    }
    if (comAdobeGraniteCryptoFile != nil) {
        queryParams[@"com.adobe.granite.crypto.file"] = comAdobeGraniteCryptoFile;
    }
    if (comAdobeGraniteCryptoJcr != nil) {
        queryParams[@"com.adobe.granite.crypto.jcr"] = comAdobeGraniteCryptoJcr;
    }
    if (comAdobeGraniteCsrf != nil) {
        queryParams[@"com.adobe.granite.csrf"] = comAdobeGraniteCsrf;
    }
    if (comAdobeGraniteDistributionCore != nil) {
        queryParams[@"com.adobe.granite.distribution.core"] = comAdobeGraniteDistributionCore;
    }
    if (comAdobeGraniteDropwizardMetrics != nil) {
        queryParams[@"com.adobe.granite.dropwizard.metrics"] = comAdobeGraniteDropwizardMetrics;
    }
    if (comAdobeGraniteFragsImpl != nil) {
        queryParams[@"com.adobe.granite.frags.impl"] = comAdobeGraniteFragsImpl;
    }
    if (comAdobeGraniteGibson != nil) {
        queryParams[@"com.adobe.granite.gibson"] = comAdobeGraniteGibson;
    }
    if (comAdobeGraniteInfocollector != nil) {
        queryParams[@"com.adobe.granite.infocollector"] = comAdobeGraniteInfocollector;
    }
    if (comAdobeGraniteInstallerFactoryPackages != nil) {
        queryParams[@"com.adobe.granite.installer.factory.packages"] = comAdobeGraniteInstallerFactoryPackages;
    }
    if (comAdobeGraniteJettySsl != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl"] = comAdobeGraniteJettySsl;
    }
    if (comAdobeGraniteJobsAsync != nil) {
        queryParams[@"com.adobe.granite.jobs.async"] = comAdobeGraniteJobsAsync;
    }
    if (comAdobeGraniteMaintenanceOak != nil) {
        queryParams[@"com.adobe.granite.maintenance.oak"] = comAdobeGraniteMaintenanceOak;
    }
    if (comAdobeGraniteMonitoringCore != nil) {
        queryParams[@"com.adobe.granite.monitoring.core"] = comAdobeGraniteMonitoringCore;
    }
    if (comAdobeGraniteQueries != nil) {
        queryParams[@"com.adobe.granite.queries"] = comAdobeGraniteQueries;
    }
    if (comAdobeGraniteReplicationHcImpl != nil) {
        queryParams[@"com.adobe.granite.replication.hc.impl"] = comAdobeGraniteReplicationHcImpl;
    }
    if (comAdobeGraniteRepositoryChecker != nil) {
        queryParams[@"com.adobe.granite.repository.checker"] = comAdobeGraniteRepositoryChecker;
    }
    if (comAdobeGraniteRepositoryHcImpl != nil) {
        queryParams[@"com.adobe.granite.repository.hc.impl"] = comAdobeGraniteRepositoryHcImpl;
    }
    if (comAdobeGraniteRestAssets != nil) {
        queryParams[@"com.adobe.granite.rest.assets"] = comAdobeGraniteRestAssets;
    }
    if (comAdobeGraniteSecurityUi != nil) {
        queryParams[@"com.adobe.granite.security.ui"] = comAdobeGraniteSecurityUi;
    }
    if (comAdobeGraniteStartup != nil) {
        queryParams[@"com.adobe.granite.startup"] = comAdobeGraniteStartup;
    }
    if (comAdobeGraniteTagsoup != nil) {
        queryParams[@"com.adobe.granite.tagsoup"] = comAdobeGraniteTagsoup;
    }
    if (comAdobeGraniteTaskmanagementCore != nil) {
        queryParams[@"com.adobe.granite.taskmanagement.core"] = comAdobeGraniteTaskmanagementCore;
    }
    if (comAdobeGraniteTaskmanagementWorkflow != nil) {
        queryParams[@"com.adobe.granite.taskmanagement.workflow"] = comAdobeGraniteTaskmanagementWorkflow;
    }
    if (comAdobeGraniteUiClientlibsCompilerLess != nil) {
        queryParams[@"com.adobe.granite.ui.clientlibs.compiler.less"] = comAdobeGraniteUiClientlibsCompilerLess;
    }
    if (comAdobeGraniteUiClientlibsProcessorGcc != nil) {
        queryParams[@"com.adobe.granite.ui.clientlibs.processor.gcc"] = comAdobeGraniteUiClientlibsProcessorGcc;
    }
    if (comAdobeGraniteWebconsolePlugins != nil) {
        queryParams[@"com.adobe.granite.webconsole.plugins"] = comAdobeGraniteWebconsolePlugins;
    }
    if (comAdobeGraniteWorkflowConsole != nil) {
        queryParams[@"com.adobe.granite.workflow.console"] = comAdobeGraniteWorkflowConsole;
    }
    if (comAdobeXmpWorkerFilesNativeFragmentLinux != nil) {
        queryParams[@"com.adobe.xmp.worker.files.native.fragment.linux"] = comAdobeXmpWorkerFilesNativeFragmentLinux;
    }
    if (comAdobeXmpWorkerFilesNativeFragmentMacosx != nil) {
        queryParams[@"com.adobe.xmp.worker.files.native.fragment.macosx"] = comAdobeXmpWorkerFilesNativeFragmentMacosx;
    }
    if (comAdobeXmpWorkerFilesNativeFragmentWin != nil) {
        queryParams[@"com.adobe.xmp.worker.files.native.fragment.win"] = comAdobeXmpWorkerFilesNativeFragmentWin;
    }
    if (comDayCommonsOsgiWrapperSimpleJndi != nil) {
        queryParams[@"com.day.commons.osgi.wrapper.simple-jndi"] = comDayCommonsOsgiWrapperSimpleJndi;
    }
    if (comDayCqCqAuthhandler != nil) {
        queryParams[@"com.day.cq.cq-authhandler"] = comDayCqCqAuthhandler;
    }
    if (comDayCqCqCompatConfigupdate != nil) {
        queryParams[@"com.day.cq.cq-compat-configupdate"] = comDayCqCqCompatConfigupdate;
    }
    if (comDayCqCqLicensebranding != nil) {
        queryParams[@"com.day.cq.cq-licensebranding"] = comDayCqCqLicensebranding;
    }
    if (comDayCqCqNotifcationImpl != nil) {
        queryParams[@"com.day.cq.cq-notifcation-impl"] = comDayCqCqNotifcationImpl;
    }
    if (comDayCqCqReplicationAudit != nil) {
        queryParams[@"com.day.cq.cq-replication-audit"] = comDayCqCqReplicationAudit;
    }
    if (comDayCqCqSearchExt != nil) {
        queryParams[@"com.day.cq.cq-search-ext"] = comDayCqCqSearchExt;
    }
    if (comDayCqDamCqDamAnnotationPrint != nil) {
        queryParams[@"com.day.cq.dam.cq-dam-annotation-print"] = comDayCqDamCqDamAnnotationPrint;
    }
    if (comDayCqDamCqDamAssetUsage != nil) {
        queryParams[@"com.day.cq.dam.cq-dam-asset-usage"] = comDayCqDamCqDamAssetUsage;
    }
    if (comDayCqDamCqDamS7dam != nil) {
        queryParams[@"com.day.cq.dam.cq-dam-s7dam"] = comDayCqDamCqDamS7dam;
    }
    if (comDayCqDamCqDamSimilaritysearch != nil) {
        queryParams[@"com.day.cq.dam.cq-dam-similaritysearch"] = comDayCqDamCqDamSimilaritysearch;
    }
    if (comDayCqDamDamWebdavSupport != nil) {
        queryParams[@"com.day.cq.dam.dam-webdav-support"] = comDayCqDamDamWebdavSupport;
    }
    if (comDayCqPreUpgradeTasks != nil) {
        queryParams[@"com.day.cq.pre-upgrade-tasks"] = comDayCqPreUpgradeTasks;
    }
    if (comDayCqReplicationExtensions != nil) {
        queryParams[@"com.day.cq.replication.extensions"] = comDayCqReplicationExtensions;
    }
    if (comDayCqWcmCqMsmCore != nil) {
        queryParams[@"com.day.cq.wcm.cq-msm-core"] = comDayCqWcmCqMsmCore;
    }
    if (comDayCqWcmCqWcmTranslation != nil) {
        queryParams[@"com.day.cq.wcm.cq-wcm-translation"] = comDayCqWcmCqWcmTranslation;
    }
    if (dayCommonsJrawio != nil) {
        queryParams[@"day-commons-jrawio"] = dayCommonsJrawio;
    }
    if (orgApacheAriesJmxWhiteboard != nil) {
        queryParams[@"org.apache.aries.jmx.whiteboard"] = orgApacheAriesJmxWhiteboard;
    }
    if (orgApacheFelixHttpSslfilter != nil) {
        queryParams[@"org.apache.felix.http.sslfilter"] = orgApacheFelixHttpSslfilter;
    }
    if (orgApacheFelixOrgApacheFelixThreaddump != nil) {
        queryParams[@"org.apache.felix.org.apache.felix.threaddump"] = orgApacheFelixOrgApacheFelixThreaddump;
    }
    if (orgApacheFelixWebconsolePluginsDs != nil) {
        queryParams[@"org.apache.felix.webconsole.plugins.ds"] = orgApacheFelixWebconsolePluginsDs;
    }
    if (orgApacheFelixWebconsolePluginsEvent != nil) {
        queryParams[@"org.apache.felix.webconsole.plugins.event"] = orgApacheFelixWebconsolePluginsEvent;
    }
    if (orgApacheFelixWebconsolePluginsMemoryusage != nil) {
        queryParams[@"org.apache.felix.webconsole.plugins.memoryusage"] = orgApacheFelixWebconsolePluginsMemoryusage;
    }
    if (orgApacheFelixWebconsolePluginsPackageadmin != nil) {
        queryParams[@"org.apache.felix.webconsole.plugins.packageadmin"] = orgApacheFelixWebconsolePluginsPackageadmin;
    }
    if (orgApacheJackrabbitOakAuthLdap != nil) {
        queryParams[@"org.apache.jackrabbit.oak-auth-ldap"] = orgApacheJackrabbitOakAuthLdap;
    }
    if (orgApacheJackrabbitOakSegmentTar != nil) {
        queryParams[@"org.apache.jackrabbit.oak-segment-tar"] = orgApacheJackrabbitOakSegmentTar;
    }
    if (orgApacheJackrabbitOakSolrOsgi != nil) {
        queryParams[@"org.apache.jackrabbit.oak-solr-osgi"] = orgApacheJackrabbitOakSolrOsgi;
    }
    if (orgApacheSlingBundleresourceImpl != nil) {
        queryParams[@"org.apache.sling.bundleresource.impl"] = orgApacheSlingBundleresourceImpl;
    }
    if (orgApacheSlingCommonsFsclassloader != nil) {
        queryParams[@"org.apache.sling.commons.fsclassloader"] = orgApacheSlingCommonsFsclassloader;
    }
    if (orgApacheSlingCommonsLogWebconsole != nil) {
        queryParams[@"org.apache.sling.commons.log.webconsole"] = orgApacheSlingCommonsLogWebconsole;
    }
    if (orgApacheSlingDatasource != nil) {
        queryParams[@"org.apache.sling.datasource"] = orgApacheSlingDatasource;
    }
    if (orgApacheSlingDiscoveryBase != nil) {
        queryParams[@"org.apache.sling.discovery.base"] = orgApacheSlingDiscoveryBase;
    }
    if (orgApacheSlingDiscoveryOak != nil) {
        queryParams[@"org.apache.sling.discovery.oak"] = orgApacheSlingDiscoveryOak;
    }
    if (orgApacheSlingDiscoverySupport != nil) {
        queryParams[@"org.apache.sling.discovery.support"] = orgApacheSlingDiscoverySupport;
    }
    if (orgApacheSlingDistributionApi != nil) {
        queryParams[@"org.apache.sling.distribution.api"] = orgApacheSlingDistributionApi;
    }
    if (orgApacheSlingDistributionCore != nil) {
        queryParams[@"org.apache.sling.distribution.core"] = orgApacheSlingDistributionCore;
    }
    if (orgApacheSlingExtensionsWebconsolesecurityprovider != nil) {
        queryParams[@"org.apache.sling.extensions.webconsolesecurityprovider"] = orgApacheSlingExtensionsWebconsolesecurityprovider;
    }
    if (orgApacheSlingHcWebconsole != nil) {
        queryParams[@"org.apache.sling.hc.webconsole"] = orgApacheSlingHcWebconsole;
    }
    if (orgApacheSlingInstallerConsole != nil) {
        queryParams[@"org.apache.sling.installer.console"] = orgApacheSlingInstallerConsole;
    }
    if (orgApacheSlingInstallerProviderFile != nil) {
        queryParams[@"org.apache.sling.installer.provider.file"] = orgApacheSlingInstallerProviderFile;
    }
    if (orgApacheSlingInstallerProviderJcr != nil) {
        queryParams[@"org.apache.sling.installer.provider.jcr"] = orgApacheSlingInstallerProviderJcr;
    }
    if (orgApacheSlingJcrDavex != nil) {
        queryParams[@"org.apache.sling.jcr.davex"] = orgApacheSlingJcrDavex;
    }
    if (orgApacheSlingJcrResourcesecurity != nil) {
        queryParams[@"org.apache.sling.jcr.resourcesecurity"] = orgApacheSlingJcrResourcesecurity;
    }
    if (orgApacheSlingJmxProvider != nil) {
        queryParams[@"org.apache.sling.jmx.provider"] = orgApacheSlingJmxProvider;
    }
    if (orgApacheSlingLaunchpadInstaller != nil) {
        queryParams[@"org.apache.sling.launchpad.installer"] = orgApacheSlingLaunchpadInstaller;
    }
    if (orgApacheSlingModelsImpl != nil) {
        queryParams[@"org.apache.sling.models.impl"] = orgApacheSlingModelsImpl;
    }
    if (orgApacheSlingRepoinitParser != nil) {
        queryParams[@"org.apache.sling.repoinit.parser"] = orgApacheSlingRepoinitParser;
    }
    if (orgApacheSlingResourceInventory != nil) {
        queryParams[@"org.apache.sling.resource.inventory"] = orgApacheSlingResourceInventory;
    }
    if (orgApacheSlingResourceresolver != nil) {
        queryParams[@"org.apache.sling.resourceresolver"] = orgApacheSlingResourceresolver;
    }
    if (orgApacheSlingScriptingJavascript != nil) {
        queryParams[@"org.apache.sling.scripting.javascript"] = orgApacheSlingScriptingJavascript;
    }
    if (orgApacheSlingScriptingJst != nil) {
        queryParams[@"org.apache.sling.scripting.jst"] = orgApacheSlingScriptingJst;
    }
    if (orgApacheSlingScriptingSightlyJsProvider != nil) {
        queryParams[@"org.apache.sling.scripting.sightly.js.provider"] = orgApacheSlingScriptingSightlyJsProvider;
    }
    if (orgApacheSlingScriptingSightlyModelsProvider != nil) {
        queryParams[@"org.apache.sling.scripting.sightly.models.provider"] = orgApacheSlingScriptingSightlyModelsProvider;
    }
    if (orgApacheSlingSecurity != nil) {
        queryParams[@"org.apache.sling.security"] = orgApacheSlingSecurity;
    }
    if (orgApacheSlingServletsCompat != nil) {
        queryParams[@"org.apache.sling.servlets.compat"] = orgApacheSlingServletsCompat;
    }
    if (orgApacheSlingServletsGet != nil) {
        queryParams[@"org.apache.sling.servlets.get"] = orgApacheSlingServletsGet;
    }
    if (orgApacheSlingStartupfilterDisabler != nil) {
        queryParams[@"org.apache.sling.startupfilter.disabler"] = orgApacheSlingStartupfilterDisabler;
    }
    if (orgApacheSlingTracer != nil) {
        queryParams[@"org.apache.sling.tracer"] = orgApacheSlingTracer;
    }
    if (weRetailClientAppCore != nil) {
        queryParams[@"we.retail.client.app.core"] = weRetailClientAppCore;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthCertImplClientCertAuthHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param configid  (optional)
///
///  @param scope  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    configid: (NSString*) configid
    scope: (NSString*) scope
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (configid != nil) {
        queryParams[@"configid"] = configid;
    }
    if (scope != nil) {
        queryParams[@"scope"] = scope;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param authImsClientSecret  (optional)
///
///  @param customizerType  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    authImsClientSecret: (NSString*) authImsClientSecret
    customizerType: (NSString*) customizerType
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (authImsClientSecret != nil) {
        queryParams[@"auth.ims.client.secret"] = authImsClientSecret;
    }
    if (customizerType != nil) {
        queryParams[@"customizer.type"] = customizerType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @param oauthProviderImsAuthorizationUrl  (optional)
///
///  @param oauthProviderImsTokenUrl  (optional)
///
///  @param oauthProviderImsProfileUrl  (optional)
///
///  @param oauthProviderImsExtendedDetailsUrls  (optional)
///
///  @param oauthProviderImsValidateTokenUrl  (optional)
///
///  @param oauthProviderImsSessionProperty  (optional)
///
///  @param oauthProviderImsServiceTokenClientId  (optional)
///
///  @param oauthProviderImsServiceTokenClientSecret  (optional)
///
///  @param oauthProviderImsServiceToken  (optional)
///
///  @param imsOrgRef  (optional)
///
///  @param imsGroupMapping  (optional)
///
///  @param oauthProviderImsOnlyLicenseGroup  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsImplIMSProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    oauthProviderImsAuthorizationUrl: (NSString*) oauthProviderImsAuthorizationUrl
    oauthProviderImsTokenUrl: (NSString*) oauthProviderImsTokenUrl
    oauthProviderImsProfileUrl: (NSString*) oauthProviderImsProfileUrl
    oauthProviderImsExtendedDetailsUrls: (NSArray<NSString*>*) oauthProviderImsExtendedDetailsUrls
    oauthProviderImsValidateTokenUrl: (NSString*) oauthProviderImsValidateTokenUrl
    oauthProviderImsSessionProperty: (NSString*) oauthProviderImsSessionProperty
    oauthProviderImsServiceTokenClientId: (NSString*) oauthProviderImsServiceTokenClientId
    oauthProviderImsServiceTokenClientSecret: (NSString*) oauthProviderImsServiceTokenClientSecret
    oauthProviderImsServiceToken: (NSString*) oauthProviderImsServiceToken
    imsOrgRef: (NSString*) imsOrgRef
    imsGroupMapping: (NSArray<NSString*>*) imsGroupMapping
    oauthProviderImsOnlyLicenseGroup: (NSNumber*) oauthProviderImsOnlyLicenseGroup
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    if (oauthProviderImsAuthorizationUrl != nil) {
        queryParams[@"oauth.provider.ims.authorization.url"] = oauthProviderImsAuthorizationUrl;
    }
    if (oauthProviderImsTokenUrl != nil) {
        queryParams[@"oauth.provider.ims.token.url"] = oauthProviderImsTokenUrl;
    }
    if (oauthProviderImsProfileUrl != nil) {
        queryParams[@"oauth.provider.ims.profile.url"] = oauthProviderImsProfileUrl;
    }
    if (oauthProviderImsExtendedDetailsUrls != nil) {
        queryParams[@"oauth.provider.ims.extended.details.urls"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: oauthProviderImsExtendedDetailsUrls format: @"multi"];
    }
    if (oauthProviderImsValidateTokenUrl != nil) {
        queryParams[@"oauth.provider.ims.validate.token.url"] = oauthProviderImsValidateTokenUrl;
    }
    if (oauthProviderImsSessionProperty != nil) {
        queryParams[@"oauth.provider.ims.session.property"] = oauthProviderImsSessionProperty;
    }
    if (oauthProviderImsServiceTokenClientId != nil) {
        queryParams[@"oauth.provider.ims.service.token.client.id"] = oauthProviderImsServiceTokenClientId;
    }
    if (oauthProviderImsServiceTokenClientSecret != nil) {
        queryParams[@"oauth.provider.ims.service.token.client.secret"] = oauthProviderImsServiceTokenClientSecret;
    }
    if (oauthProviderImsServiceToken != nil) {
        queryParams[@"oauth.provider.ims.service.token"] = oauthProviderImsServiceToken;
    }
    if (imsOrgRef != nil) {
        queryParams[@"ims.org.ref"] = imsOrgRef;
    }
    if (imsGroupMapping != nil) {
        queryParams[@"ims.group.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: imsGroupMapping format: @"multi"];
    }
    if (oauthProviderImsOnlyLicenseGroup != nil) {
        queryParams[@"oauth.provider.ims.only.license.group"] = [oauthProviderImsOnlyLicenseGroup isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsImplIMSProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthConfigmanagerImsConfigid  (optional)
///
///  @param imsOwningEntity  (optional)
///
///  @param aemInstanceId  (optional)
///
///  @param imsServiceCode  (optional)
///
///  @returns OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthImsImplImsConfigProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthConfigmanagerImsConfigid: (NSString*) oauthConfigmanagerImsConfigid
    imsOwningEntity: (NSString*) imsOwningEntity
    aemInstanceId: (NSString*) aemInstanceId
    imsServiceCode: (NSString*) imsServiceCode
    completionHandler: (void (^)(OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthConfigmanagerImsConfigid != nil) {
        queryParams[@"oauth.configmanager.ims.configid"] = oauthConfigmanagerImsConfigid;
    }
    if (imsOwningEntity != nil) {
        queryParams[@"ims.owningEntity"] = imsOwningEntity;
    }
    if (aemInstanceId != nil) {
        queryParams[@"aem.instanceId"] = aemInstanceId;
    }
    if (imsServiceCode != nil) {
        queryParams[@"ims.serviceCode"] = imsServiceCode;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthImsImplImsConfigProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param authTokenProviderTitle  (optional)
///
///  @param authTokenProviderDefaultClaims  (optional)
///
///  @param authTokenProviderEndpoint  (optional)
///
///  @param authAccessTokenRequest  (optional)
///
///  @param authTokenProviderKeypairAlias  (optional)
///
///  @param authTokenProviderConnTimeout  (optional)
///
///  @param authTokenProviderSoTimeout  (optional)
///
///  @param authTokenProviderClientId  (optional)
///
///  @param authTokenProviderScope  (optional)
///
///  @param authTokenProviderReuseAccessToken  (optional)
///
///  @param authTokenProviderRelaxedSsl  (optional)
///
///  @param tokenRequestCustomizerType  (optional)
///
///  @param authTokenValidatorType  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthAccesstokenProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    authTokenProviderTitle: (NSString*) authTokenProviderTitle
    authTokenProviderDefaultClaims: (NSArray<NSString*>*) authTokenProviderDefaultClaims
    authTokenProviderEndpoint: (NSString*) authTokenProviderEndpoint
    authAccessTokenRequest: (NSString*) authAccessTokenRequest
    authTokenProviderKeypairAlias: (NSString*) authTokenProviderKeypairAlias
    authTokenProviderConnTimeout: (NSNumber*) authTokenProviderConnTimeout
    authTokenProviderSoTimeout: (NSNumber*) authTokenProviderSoTimeout
    authTokenProviderClientId: (NSString*) authTokenProviderClientId
    authTokenProviderScope: (NSString*) authTokenProviderScope
    authTokenProviderReuseAccessToken: (NSNumber*) authTokenProviderReuseAccessToken
    authTokenProviderRelaxedSsl: (NSNumber*) authTokenProviderRelaxedSsl
    tokenRequestCustomizerType: (NSString*) tokenRequestCustomizerType
    authTokenValidatorType: (NSString*) authTokenValidatorType
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (authTokenProviderTitle != nil) {
        queryParams[@"auth.token.provider.title"] = authTokenProviderTitle;
    }
    if (authTokenProviderDefaultClaims != nil) {
        queryParams[@"auth.token.provider.default.claims"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authTokenProviderDefaultClaims format: @"multi"];
    }
    if (authTokenProviderEndpoint != nil) {
        queryParams[@"auth.token.provider.endpoint"] = authTokenProviderEndpoint;
    }
    if (authAccessTokenRequest != nil) {
        queryParams[@"auth.access.token.request"] = authAccessTokenRequest;
    }
    if (authTokenProviderKeypairAlias != nil) {
        queryParams[@"auth.token.provider.keypair.alias"] = authTokenProviderKeypairAlias;
    }
    if (authTokenProviderConnTimeout != nil) {
        queryParams[@"auth.token.provider.conn.timeout"] = authTokenProviderConnTimeout;
    }
    if (authTokenProviderSoTimeout != nil) {
        queryParams[@"auth.token.provider.so.timeout"] = authTokenProviderSoTimeout;
    }
    if (authTokenProviderClientId != nil) {
        queryParams[@"auth.token.provider.client.id"] = authTokenProviderClientId;
    }
    if (authTokenProviderScope != nil) {
        queryParams[@"auth.token.provider.scope"] = authTokenProviderScope;
    }
    if (authTokenProviderReuseAccessToken != nil) {
        queryParams[@"auth.token.provider.reuse.access.token"] = [authTokenProviderReuseAccessToken isEqual:@(YES)] ? @"true" : @"false";
    }
    if (authTokenProviderRelaxedSsl != nil) {
        queryParams[@"auth.token.provider.relaxed.ssl"] = [authTokenProviderRelaxedSsl isEqual:@(YES)] ? @"true" : @"false";
    }
    if (tokenRequestCustomizerType != nil) {
        queryParams[@"token.request.customizer.type"] = tokenRequestCustomizerType;
    }
    if (authTokenValidatorType != nil) {
        queryParams[@"auth.token.validator.type"] = authTokenValidatorType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthAccesstokenProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param oauthClientIdsAllowed  (optional)
///
///  @param authBearerSyncIms  (optional)
///
///  @param authTokenRequestParameter  (optional)
///
///  @param oauthBearerConfigid  (optional)
///
///  @param oauthJwtSupport  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplBearerAuthenticationHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    oauthClientIdsAllowed: (NSArray<NSString*>*) oauthClientIdsAllowed
    authBearerSyncIms: (NSNumber*) authBearerSyncIms
    authTokenRequestParameter: (NSString*) authTokenRequestParameter
    oauthBearerConfigid: (NSString*) oauthBearerConfigid
    oauthJwtSupport: (NSNumber*) oauthJwtSupport
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (oauthClientIdsAllowed != nil) {
        queryParams[@"oauth.clientIds.allowed"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: oauthClientIdsAllowed format: @"multi"];
    }
    if (authBearerSyncIms != nil) {
        queryParams[@"auth.bearer.sync.ims"] = [authBearerSyncIms isEqual:@(YES)] ? @"true" : @"false";
    }
    if (authTokenRequestParameter != nil) {
        queryParams[@"auth.tokenRequestParameter"] = authTokenRequestParameter;
    }
    if (oauthBearerConfigid != nil) {
        queryParams[@"oauth.bearer.configid"] = oauthBearerConfigid;
    }
    if (oauthJwtSupport != nil) {
        queryParams[@"oauth.jwt.support"] = [oauthJwtSupport isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param authTokenValidatorType  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplDefaultTokenValidatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    authTokenValidatorType: (NSString*) authTokenValidatorType
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (authTokenValidatorType != nil) {
        queryParams[@"auth.token.validator.type"] = authTokenValidatorType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplFacebookProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplFacebookProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @param oauthProviderGithubAuthorizationUrl  (optional)
///
///  @param oauthProviderGithubTokenUrl  (optional)
///
///  @param oauthProviderGithubProfileUrl  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplGithubProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    oauthProviderGithubAuthorizationUrl: (NSString*) oauthProviderGithubAuthorizationUrl
    oauthProviderGithubTokenUrl: (NSString*) oauthProviderGithubTokenUrl
    oauthProviderGithubProfileUrl: (NSString*) oauthProviderGithubProfileUrl
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    if (oauthProviderGithubAuthorizationUrl != nil) {
        queryParams[@"oauth.provider.github.authorization.url"] = oauthProviderGithubAuthorizationUrl;
    }
    if (oauthProviderGithubTokenUrl != nil) {
        queryParams[@"oauth.provider.github.token.url"] = oauthProviderGithubTokenUrl;
    }
    if (oauthProviderGithubProfileUrl != nil) {
        queryParams[@"oauth.provider.github.profile.url"] = oauthProviderGithubProfileUrl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplGithubProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @param oauthProviderGraniteAuthorizationUrl  (optional)
///
///  @param oauthProviderGraniteTokenUrl  (optional)
///
///  @param oauthProviderGraniteProfileUrl  (optional)
///
///  @param oauthProviderGraniteExtendedDetailsUrls  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplGraniteProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    oauthProviderGraniteAuthorizationUrl: (NSString*) oauthProviderGraniteAuthorizationUrl
    oauthProviderGraniteTokenUrl: (NSString*) oauthProviderGraniteTokenUrl
    oauthProviderGraniteProfileUrl: (NSString*) oauthProviderGraniteProfileUrl
    oauthProviderGraniteExtendedDetailsUrls: (NSString*) oauthProviderGraniteExtendedDetailsUrls
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    if (oauthProviderGraniteAuthorizationUrl != nil) {
        queryParams[@"oauth.provider.granite.authorization.url"] = oauthProviderGraniteAuthorizationUrl;
    }
    if (oauthProviderGraniteTokenUrl != nil) {
        queryParams[@"oauth.provider.granite.token.url"] = oauthProviderGraniteTokenUrl;
    }
    if (oauthProviderGraniteProfileUrl != nil) {
        queryParams[@"oauth.provider.granite.profile.url"] = oauthProviderGraniteProfileUrl;
    }
    if (oauthProviderGraniteExtendedDetailsUrls != nil) {
        queryParams[@"oauth.provider.granite.extended.details.urls"] = oauthProviderGraniteExtendedDetailsUrls;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplGraniteProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthCookieLoginTimeout  (optional)
///
///  @param oauthCookieMaxAge  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplHelperProviderConfigManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthCookieLoginTimeout: (NSString*) oauthCookieLoginTimeout
    oauthCookieMaxAge: (NSString*) oauthCookieMaxAge
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthCookieLoginTimeout != nil) {
        queryParams[@"oauth.cookie.login.timeout"] = oauthCookieLoginTimeout;
    }
    if (oauthCookieMaxAge != nil) {
        queryParams[@"oauth.cookie.max.age"] = oauthCookieMaxAge;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthCookieLoginTimeout  (optional)
///
///  @param oauthCookieMaxAge  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthCookieLoginTimeout: (NSString*) oauthCookieLoginTimeout
    oauthCookieMaxAge: (NSString*) oauthCookieMaxAge
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthCookieLoginTimeout != nil) {
        queryParams[@"oauth.cookie.login.timeout"] = oauthCookieLoginTimeout;
    }
    if (oauthCookieMaxAge != nil) {
        queryParams[@"oauth.cookie.max.age"] = oauthCookieMaxAge;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthProviderId  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthImplTwitterProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthProviderId: (NSString*) oauthProviderId
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthProviderId != nil) {
        queryParams[@"oauth.provider.id"] = oauthProviderId;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthImplTwitterProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthConfigId  (optional)
///
///  @param oauthClientId  (optional)
///
///  @param oauthClientSecret  (optional)
///
///  @param oauthScope  (optional)
///
///  @param oauthConfigProviderId  (optional)
///
///  @param oauthCreateUsers  (optional)
///
///  @param oauthUseridProperty  (optional)
///
///  @param forceStrictUsernameMatching  (optional)
///
///  @param oauthEncodeUserids  (optional)
///
///  @param oauthHashUserids  (optional)
///
///  @param oauthCallBackUrl  (optional)
///
///  @param oauthAccessTokenPersist  (optional)
///
///  @param oauthAccessTokenPersistCookie  (optional)
///
///  @param oauthCsrfStateProtection  (optional)
///
///  @param oauthRedirectRequestParams  (optional)
///
///  @param oauthConfigSiblingsAllow  (optional)
///
///  @returns OAIComAdobeGraniteAuthOauthProviderInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthOauthProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthConfigId: (NSString*) oauthConfigId
    oauthClientId: (NSString*) oauthClientId
    oauthClientSecret: (NSString*) oauthClientSecret
    oauthScope: (NSArray<NSString*>*) oauthScope
    oauthConfigProviderId: (NSString*) oauthConfigProviderId
    oauthCreateUsers: (NSNumber*) oauthCreateUsers
    oauthUseridProperty: (NSString*) oauthUseridProperty
    forceStrictUsernameMatching: (NSNumber*) forceStrictUsernameMatching
    oauthEncodeUserids: (NSNumber*) oauthEncodeUserids
    oauthHashUserids: (NSNumber*) oauthHashUserids
    oauthCallBackUrl: (NSString*) oauthCallBackUrl
    oauthAccessTokenPersist: (NSNumber*) oauthAccessTokenPersist
    oauthAccessTokenPersistCookie: (NSNumber*) oauthAccessTokenPersistCookie
    oauthCsrfStateProtection: (NSNumber*) oauthCsrfStateProtection
    oauthRedirectRequestParams: (NSNumber*) oauthRedirectRequestParams
    oauthConfigSiblingsAllow: (NSNumber*) oauthConfigSiblingsAllow
    completionHandler: (void (^)(OAIComAdobeGraniteAuthOauthProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.oauth.provider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthConfigId != nil) {
        queryParams[@"oauth.config.id"] = oauthConfigId;
    }
    if (oauthClientId != nil) {
        queryParams[@"oauth.client.id"] = oauthClientId;
    }
    if (oauthClientSecret != nil) {
        queryParams[@"oauth.client.secret"] = oauthClientSecret;
    }
    if (oauthScope != nil) {
        queryParams[@"oauth.scope"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: oauthScope format: @"multi"];
    }
    if (oauthConfigProviderId != nil) {
        queryParams[@"oauth.config.provider.id"] = oauthConfigProviderId;
    }
    if (oauthCreateUsers != nil) {
        queryParams[@"oauth.create.users"] = [oauthCreateUsers isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthUseridProperty != nil) {
        queryParams[@"oauth.userid.property"] = oauthUseridProperty;
    }
    if (forceStrictUsernameMatching != nil) {
        queryParams[@"force.strict.username.matching"] = [forceStrictUsernameMatching isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthEncodeUserids != nil) {
        queryParams[@"oauth.encode.userids"] = [oauthEncodeUserids isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthHashUserids != nil) {
        queryParams[@"oauth.hash.userids"] = [oauthHashUserids isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthCallBackUrl != nil) {
        queryParams[@"oauth.callBackUrl"] = oauthCallBackUrl;
    }
    if (oauthAccessTokenPersist != nil) {
        queryParams[@"oauth.access.token.persist"] = [oauthAccessTokenPersist isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthAccessTokenPersistCookie != nil) {
        queryParams[@"oauth.access.token.persist.cookie"] = [oauthAccessTokenPersistCookie isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthCsrfStateProtection != nil) {
        queryParams[@"oauth.csrf.state.protection"] = [oauthCsrfStateProtection isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthRedirectRequestParams != nil) {
        queryParams[@"oauth.redirect.request.params"] = [oauthRedirectRequestParams isEqual:@(YES)] ? @"true" : @"false";
    }
    if (oauthConfigSiblingsAllow != nil) {
        queryParams[@"oauth.config.siblings.allow"] = [oauthConfigSiblingsAllow isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthOauthProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthOauthProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param supportedPaths  (optional)
///
///  @returns OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthRequirementImplDefaultRequirementHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    supportedPaths: (NSArray<NSString*>*) supportedPaths
    completionHandler: (void (^)(OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (supportedPaths != nil) {
        queryParams[@"supportedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: supportedPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param idpUrl  (optional)
///
///  @param idpCertAlias  (optional)
///
///  @param idpHttpRedirect  (optional)
///
///  @param serviceProviderEntityId  (optional)
///
///  @param assertionConsumerServiceURL  (optional)
///
///  @param spPrivateKeyAlias  (optional)
///
///  @param keyStorePassword  (optional)
///
///  @param defaultRedirectUrl  (optional)
///
///  @param userIDAttribute  (optional)
///
///  @param useEncryption  (optional)
///
///  @param createUser  (optional)
///
///  @param userIntermediatePath  (optional)
///
///  @param addGroupMemberships  (optional)
///
///  @param groupMembershipAttribute  (optional)
///
///  @param defaultGroups  (optional)
///
///  @param nameIdFormat  (optional)
///
///  @param synchronizeAttributes  (optional)
///
///  @param handleLogout  (optional)
///
///  @param logoutUrl  (optional)
///
///  @param clockTolerance  (optional)
///
///  @param digestMethod  (optional)
///
///  @param signatureMethod  (optional)
///
///  @param identitySyncType  (optional)
///
///  @param idpIdentifier  (optional)
///
///  @returns OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthSamlSamlAuthenticationHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSArray<NSString*>*) path
    serviceRanking: (NSNumber*) serviceRanking
    idpUrl: (NSString*) idpUrl
    idpCertAlias: (NSString*) idpCertAlias
    idpHttpRedirect: (NSNumber*) idpHttpRedirect
    serviceProviderEntityId: (NSString*) serviceProviderEntityId
    assertionConsumerServiceURL: (NSString*) assertionConsumerServiceURL
    spPrivateKeyAlias: (NSString*) spPrivateKeyAlias
    keyStorePassword: (NSString*) keyStorePassword
    defaultRedirectUrl: (NSString*) defaultRedirectUrl
    userIDAttribute: (NSString*) userIDAttribute
    useEncryption: (NSNumber*) useEncryption
    createUser: (NSNumber*) createUser
    userIntermediatePath: (NSString*) userIntermediatePath
    addGroupMemberships: (NSNumber*) addGroupMemberships
    groupMembershipAttribute: (NSString*) groupMembershipAttribute
    defaultGroups: (NSArray<NSString*>*) defaultGroups
    nameIdFormat: (NSString*) nameIdFormat
    synchronizeAttributes: (NSArray<NSString*>*) synchronizeAttributes
    handleLogout: (NSNumber*) handleLogout
    logoutUrl: (NSString*) logoutUrl
    clockTolerance: (NSNumber*) clockTolerance
    digestMethod: (NSString*) digestMethod
    signatureMethod: (NSString*) signatureMethod
    identitySyncType: (NSString*) identitySyncType
    idpIdentifier: (NSString*) idpIdentifier
    completionHandler: (void (^)(OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: path format: @"multi"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (idpUrl != nil) {
        queryParams[@"idpUrl"] = idpUrl;
    }
    if (idpCertAlias != nil) {
        queryParams[@"idpCertAlias"] = idpCertAlias;
    }
    if (idpHttpRedirect != nil) {
        queryParams[@"idpHttpRedirect"] = [idpHttpRedirect isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceProviderEntityId != nil) {
        queryParams[@"serviceProviderEntityId"] = serviceProviderEntityId;
    }
    if (assertionConsumerServiceURL != nil) {
        queryParams[@"assertionConsumerServiceURL"] = assertionConsumerServiceURL;
    }
    if (spPrivateKeyAlias != nil) {
        queryParams[@"spPrivateKeyAlias"] = spPrivateKeyAlias;
    }
    if (keyStorePassword != nil) {
        queryParams[@"keyStorePassword"] = keyStorePassword;
    }
    if (defaultRedirectUrl != nil) {
        queryParams[@"defaultRedirectUrl"] = defaultRedirectUrl;
    }
    if (userIDAttribute != nil) {
        queryParams[@"userIDAttribute"] = userIDAttribute;
    }
    if (useEncryption != nil) {
        queryParams[@"useEncryption"] = [useEncryption isEqual:@(YES)] ? @"true" : @"false";
    }
    if (createUser != nil) {
        queryParams[@"createUser"] = [createUser isEqual:@(YES)] ? @"true" : @"false";
    }
    if (userIntermediatePath != nil) {
        queryParams[@"userIntermediatePath"] = userIntermediatePath;
    }
    if (addGroupMemberships != nil) {
        queryParams[@"addGroupMemberships"] = [addGroupMemberships isEqual:@(YES)] ? @"true" : @"false";
    }
    if (groupMembershipAttribute != nil) {
        queryParams[@"groupMembershipAttribute"] = groupMembershipAttribute;
    }
    if (defaultGroups != nil) {
        queryParams[@"defaultGroups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: defaultGroups format: @"multi"];
    }
    if (nameIdFormat != nil) {
        queryParams[@"nameIdFormat"] = nameIdFormat;
    }
    if (synchronizeAttributes != nil) {
        queryParams[@"synchronizeAttributes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: synchronizeAttributes format: @"multi"];
    }
    if (handleLogout != nil) {
        queryParams[@"handleLogout"] = [handleLogout isEqual:@(YES)] ? @"true" : @"false";
    }
    if (logoutUrl != nil) {
        queryParams[@"logoutUrl"] = logoutUrl;
    }
    if (clockTolerance != nil) {
        queryParams[@"clockTolerance"] = clockTolerance;
    }
    if (digestMethod != nil) {
        queryParams[@"digestMethod"] = digestMethod;
    }
    if (signatureMethod != nil) {
        queryParams[@"signatureMethod"] = signatureMethod;
    }
    if (identitySyncType != nil) {
        queryParams[@"identitySyncType"] = identitySyncType;
    }
    if (idpIdentifier != nil) {
        queryParams[@"idpIdentifier"] = idpIdentifier;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param jaasControlFlag  (optional)
///
///  @param jaasRealmName  (optional)
///
///  @param jaasRanking  (optional)
///
///  @param headers  (optional)
///
///  @param cookies  (optional)
///
///  @param parameters  (optional)
///
///  @param usermap  (optional)
///
///  @param format  (optional)
///
///  @param trustedCredentialsAttribute  (optional)
///
///  @returns OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteAuthSsoImplSsoAuthenticationHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    serviceRanking: (NSNumber*) serviceRanking
    jaasControlFlag: (NSString*) jaasControlFlag
    jaasRealmName: (NSString*) jaasRealmName
    jaasRanking: (NSNumber*) jaasRanking
    headers: (NSArray<NSString*>*) headers
    cookies: (NSArray<NSString*>*) cookies
    parameters: (NSArray<NSString*>*) parameters
    usermap: (NSArray<NSString*>*) usermap
    format: (NSString*) format
    trustedCredentialsAttribute: (NSString*) trustedCredentialsAttribute
    completionHandler: (void (^)(OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (jaasControlFlag != nil) {
        queryParams[@"jaas.controlFlag"] = jaasControlFlag;
    }
    if (jaasRealmName != nil) {
        queryParams[@"jaas.realmName"] = jaasRealmName;
    }
    if (jaasRanking != nil) {
        queryParams[@"jaas.ranking"] = jaasRanking;
    }
    if (headers != nil) {
        queryParams[@"headers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: headers format: @"multi"];
    }
    if (cookies != nil) {
        queryParams[@"cookies"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cookies format: @"multi"];
    }
    if (parameters != nil) {
        queryParams[@"parameters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parameters format: @"multi"];
    }
    if (usermap != nil) {
        queryParams[@"usermap"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: usermap format: @"multi"];
    }
    if (format != nil) {
        queryParams[@"format"] = format;
    }
    if (trustedCredentialsAttribute != nil) {
        queryParams[@"trustedCredentialsAttribute"] = trustedCredentialsAttribute;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param minimumCodeCacheSize  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplCodeCacheHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    minimumCodeCacheSize: (NSNumber*) minimumCodeCacheSize
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (minimumCodeCacheSize != nil) {
        queryParams[@"minimum.code.cache.size"] = minimumCodeCacheSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplDavExBundleHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param ignoredBundles  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    ignoredBundles: (NSArray<NSString*>*) ignoredBundles
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (ignoredBundles != nil) {
        queryParams[@"ignored.bundles"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignoredBundles format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param maxQueuedJobs  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplJobsHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    maxQueuedJobs: (NSNumber*) maxQueuedJobs
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (maxQueuedJobs != nil) {
        queryParams[@"max.queued.jobs"] = maxQueuedJobs;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplJobsHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplSlingGetServletHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteBundlesHcImplWebDavBundleHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param replicateCommentResourceTypes  (optional)
///
///  @returns OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCommentsInternalCommentReplicationContentFilterFacWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    replicateCommentResourceTypes: (NSArray<NSString*>*) replicateCommentResourceTypes
    completionHandler: (void (^)(OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (replicateCommentResourceTypes != nil) {
        queryParams[@"replicate.comment.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: replicateCommentResourceTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param compatgroups  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCompatrouterImplCompatSwitchingServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    compatgroups: (NSArray<NSString*>*) compatgroups
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (compatgroups != nil) {
        queryParams[@"compatgroups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: compatgroups format: @"multi"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param _id  (optional)
///
///  @param compatPath  (optional)
///
///  @param varNewPath  (optional)
///
///  @returns OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCompatrouterImplRoutingConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    _id: (NSString*) _id
    compatPath: (NSString*) compatPath
    varNewPath: (NSString*) varNewPath
    completionHandler: (void (^)(OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (_id != nil) {
        queryParams[@"id"] = _id;
    }
    if (compatPath != nil) {
        queryParams[@"compatPath"] = compatPath;
    }
    if (varNewPath != nil) {
        queryParams[@"newPath"] = varNewPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCompatrouterImplRoutingConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param group  (optional)
///
///  @param ids  (optional)
///
///  @returns OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCompatrouterImplSwitchMappingConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    group: (NSString*) group
    ids: (NSArray<NSString*>*) ids
    completionHandler: (void (^)(OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (group != nil) {
        queryParams[@"group"] = group;
    }
    if (ids != nil) {
        queryParams[@"ids"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ids format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param fallbackPaths  (optional)
///
///  @returns OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo*
///
-(NSURLSessionTask*) comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    fallbackPaths: (NSArray<NSString*>*) fallbackPaths
    completionHandler: (void (^)(OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (fallbackPaths != nil) {
        queryParams[@"fallbackPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fallbackPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeGraniteContexthubSilentMode  (optional)
///
///  @param comAdobeGraniteContexthubShowUi  (optional)
///
///  @returns OAIComAdobeGraniteContexthubImplContextHubImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteContexthubImplContextHubImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeGraniteContexthubSilentMode: (NSNumber*) comAdobeGraniteContexthubSilentMode
    comAdobeGraniteContexthubShowUi: (NSNumber*) comAdobeGraniteContexthubShowUi
    completionHandler: (void (^)(OAIComAdobeGraniteContexthubImplContextHubImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeGraniteContexthubSilentMode != nil) {
        queryParams[@"com.adobe.granite.contexthub.silent_mode"] = [comAdobeGraniteContexthubSilentMode isEqual:@(YES)] ? @"true" : @"false";
    }
    if (comAdobeGraniteContexthubShowUi != nil) {
        queryParams[@"com.adobe.granite.contexthub.show_ui"] = [comAdobeGraniteContexthubShowUi isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteContexthubImplContextHubImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteContexthubImplContextHubImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param alloworigin  (optional)
///
///  @param alloworiginregexp  (optional)
///
///  @param allowedpaths  (optional)
///
///  @param exposedheaders  (optional)
///
///  @param maxage  (optional)
///
///  @param supportedheaders  (optional)
///
///  @param supportedmethods  (optional)
///
///  @param supportscredentials  (optional)
///
///  @returns OAIComAdobeGraniteCorsImplCORSPolicyImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCorsImplCORSPolicyImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    alloworigin: (NSArray<NSString*>*) alloworigin
    alloworiginregexp: (NSArray<NSString*>*) alloworiginregexp
    allowedpaths: (NSArray<NSString*>*) allowedpaths
    exposedheaders: (NSArray<NSString*>*) exposedheaders
    maxage: (NSNumber*) maxage
    supportedheaders: (NSArray<NSString*>*) supportedheaders
    supportedmethods: (NSArray<NSString*>*) supportedmethods
    supportscredentials: (NSNumber*) supportscredentials
    completionHandler: (void (^)(OAIComAdobeGraniteCorsImplCORSPolicyImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (alloworigin != nil) {
        queryParams[@"alloworigin"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: alloworigin format: @"multi"];
    }
    if (alloworiginregexp != nil) {
        queryParams[@"alloworiginregexp"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: alloworiginregexp format: @"multi"];
    }
    if (allowedpaths != nil) {
        queryParams[@"allowedpaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedpaths format: @"multi"];
    }
    if (exposedheaders != nil) {
        queryParams[@"exposedheaders"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: exposedheaders format: @"multi"];
    }
    if (maxage != nil) {
        queryParams[@"maxage"] = maxage;
    }
    if (supportedheaders != nil) {
        queryParams[@"supportedheaders"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: supportedheaders format: @"multi"];
    }
    if (supportedmethods != nil) {
        queryParams[@"supportedmethods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: supportedmethods format: @"multi"];
    }
    if (supportscredentials != nil) {
        queryParams[@"supportscredentials"] = [supportscredentials isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCorsImplCORSPolicyImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCorsImplCORSPolicyImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param filterMethods  (optional)
///
///  @param filterEnableSafeUserAgents  (optional)
///
///  @param filterSafeUserAgents  (optional)
///
///  @param filterExcludedPaths  (optional)
///
///  @returns OAIComAdobeGraniteCsrfImplCSRFFilterInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCsrfImplCSRFFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    filterMethods: (NSArray<NSString*>*) filterMethods
    filterEnableSafeUserAgents: (NSNumber*) filterEnableSafeUserAgents
    filterSafeUserAgents: (NSArray<NSString*>*) filterSafeUserAgents
    filterExcludedPaths: (NSArray<NSString*>*) filterExcludedPaths
    completionHandler: (void (^)(OAIComAdobeGraniteCsrfImplCSRFFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (filterMethods != nil) {
        queryParams[@"filter.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterMethods format: @"multi"];
    }
    if (filterEnableSafeUserAgents != nil) {
        queryParams[@"filter.enable.safe.user.agents"] = [filterEnableSafeUserAgents isEqual:@(YES)] ? @"true" : @"false";
    }
    if (filterSafeUserAgents != nil) {
        queryParams[@"filter.safe.user.agents"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterSafeUserAgents format: @"multi"];
    }
    if (filterExcludedPaths != nil) {
        queryParams[@"filter.excluded.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterExcludedPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCsrfImplCSRFFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCsrfImplCSRFFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param csrfTokenExpiresIn  (optional)
///
///  @param slingAuthRequirements  (optional)
///
///  @returns OAIComAdobeGraniteCsrfImplCSRFServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteCsrfImplCSRFServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    csrfTokenExpiresIn: (NSNumber*) csrfTokenExpiresIn
    slingAuthRequirements: (NSString*) slingAuthRequirements
    completionHandler: (void (^)(OAIComAdobeGraniteCsrfImplCSRFServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (csrfTokenExpiresIn != nil) {
        queryParams[@"csrf.token.expires.in"] = csrfTokenExpiresIn;
    }
    if (slingAuthRequirements != nil) {
        queryParams[@"sling.auth.requirements"] = slingAuthRequirements;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteCsrfImplCSRFServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteCsrfImplCSRFServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param username  (optional)
///
///  @param encryptedPassword  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    username: (NSString*) username
    encryptedPassword: (NSString*) encryptedPassword
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (username != nil) {
        queryParams[@"username"] = username;
    }
    if (encryptedPassword != nil) {
        queryParams[@"encryptedPassword"] = encryptedPassword;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param agentName  (optional)
///
///  @param diffPath  (optional)
///
///  @param observedPath  (optional)
///
///  @param serviceName  (optional)
///
///  @param propertyNames  (optional)
///
///  @param distributionDelay  (optional)
///
///  @param serviceUserTarget  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplDiffDiffChangesObserverWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    agentName: (NSString*) agentName
    diffPath: (NSString*) diffPath
    observedPath: (NSString*) observedPath
    serviceName: (NSString*) serviceName
    propertyNames: (NSString*) propertyNames
    distributionDelay: (NSNumber*) distributionDelay
    serviceUserTarget: (NSString*) serviceUserTarget
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (agentName != nil) {
        queryParams[@"agentName"] = agentName;
    }
    if (diffPath != nil) {
        queryParams[@"diffPath"] = diffPath;
    }
    if (observedPath != nil) {
        queryParams[@"observedPath"] = observedPath;
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (propertyNames != nil) {
        queryParams[@"propertyNames"] = propertyNames;
    }
    if (distributionDelay != nil) {
        queryParams[@"distributionDelay"] = distributionDelay;
    }
    if (serviceUserTarget != nil) {
        queryParams[@"serviceUser.target"] = serviceUserTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param diffPath  (optional)
///
///  @param serviceName  (optional)
///
///  @param serviceUserTarget  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplDiffDiffEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    diffPath: (NSString*) diffPath
    serviceName: (NSString*) serviceName
    serviceUserTarget: (NSString*) serviceUserTarget
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (diffPath != nil) {
        queryParams[@"diffPath"] = diffPath;
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (serviceUserTarget != nil) {
        queryParams[@"serviceUser.target"] = serviceUserTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param importerName  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplDistributionToReplicationEvenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    importerName: (NSArray<NSString*>*) importerName
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (importerName != nil) {
        queryParams[@"importer.name"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: importerName format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerName  (optional)
///
///  @param forwardRequests  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerName: (NSString*) providerName
    forwardRequests: (NSNumber*) forwardRequests
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerName != nil) {
        queryParams[@"providerName"] = providerName;
    }
    if (forwardRequests != nil) {
        queryParams[@"forward.requests"] = [forwardRequests isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param forwardRequests  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplReplicationDistributionTransWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    forwardRequests: (NSNumber*) forwardRequests
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (forwardRequests != nil) {
        queryParams[@"forward.requests"] = [forwardRequests isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param serviceName  (optional)
///
///  @param userId  (optional)
///
///  @param accessTokenProviderTarget  (optional)
///
///  @returns OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo*
///
-(NSURLSessionTask*) comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    serviceName: (NSString*) serviceName
    userId: (NSString*) userId
    accessTokenProviderTarget: (NSString*) accessTokenProviderTarget
    completionHandler: (void (^)(OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (userId != nil) {
        queryParams[@"userId"] = userId;
    }
    if (accessTokenProviderTarget != nil) {
        queryParams[@"accessTokenProvider.target"] = accessTokenProviderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param featureName  (optional)
///
///  @param featureDescription  (optional)
///
///  @param httpHeaderName  (optional)
///
///  @param httpHeaderValuepattern  (optional)
///
///  @returns OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo*
///
-(NSURLSessionTask*) comAdobeGraniteFragsImplCheckHttpHeaderFlagWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    featureName: (NSString*) featureName
    featureDescription: (NSString*) featureDescription
    httpHeaderName: (NSString*) httpHeaderName
    httpHeaderValuepattern: (NSString*) httpHeaderValuepattern
    completionHandler: (void (^)(OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (featureName != nil) {
        queryParams[@"feature.name"] = featureName;
    }
    if (featureDescription != nil) {
        queryParams[@"feature.description"] = featureDescription;
    }
    if (httpHeaderName != nil) {
        queryParams[@"http.header.name"] = httpHeaderName;
    }
    if (httpHeaderValuepattern != nil) {
        queryParams[@"http.header.valuepattern"] = httpHeaderValuepattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param featureName  (optional)
///
///  @param featureDescription  (optional)
///
///  @param activePercentage  (optional)
///
///  @param cookieName  (optional)
///
///  @param cookieMaxAge  (optional)
///
///  @returns OAIComAdobeGraniteFragsImplRandomFeatureInfo*
///
-(NSURLSessionTask*) comAdobeGraniteFragsImplRandomFeatureWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    featureName: (NSString*) featureName
    featureDescription: (NSString*) featureDescription
    activePercentage: (NSString*) activePercentage
    cookieName: (NSString*) cookieName
    cookieMaxAge: (NSNumber*) cookieMaxAge
    completionHandler: (void (^)(OAIComAdobeGraniteFragsImplRandomFeatureInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (featureName != nil) {
        queryParams[@"feature.name"] = featureName;
    }
    if (featureDescription != nil) {
        queryParams[@"feature.description"] = featureDescription;
    }
    if (activePercentage != nil) {
        queryParams[@"active.percentage"] = activePercentage;
    }
    if (cookieName != nil) {
        queryParams[@"cookie.name"] = cookieName;
    }
    if (cookieMaxAge != nil) {
        queryParams[@"cookie.maxAge"] = cookieMaxAge;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteFragsImplRandomFeatureInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteFragsImplRandomFeatureInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeGraniteHttpcacheFileDocumentRoot  (optional)
///
///  @param comAdobeGraniteHttpcacheFileIncludeHost  (optional)
///
///  @returns OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo*
///
-(NSURLSessionTask*) comAdobeGraniteHttpcacheFileFileCacheStoreWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeGraniteHttpcacheFileDocumentRoot: (NSString*) comAdobeGraniteHttpcacheFileDocumentRoot
    comAdobeGraniteHttpcacheFileIncludeHost: (NSString*) comAdobeGraniteHttpcacheFileIncludeHost
    completionHandler: (void (^)(OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeGraniteHttpcacheFileDocumentRoot != nil) {
        queryParams[@"com.adobe.granite.httpcache.file.documentRoot"] = comAdobeGraniteHttpcacheFileDocumentRoot;
    }
    if (comAdobeGraniteHttpcacheFileIncludeHost != nil) {
        queryParams[@"com.adobe.granite.httpcache.file.includeHost"] = comAdobeGraniteHttpcacheFileIncludeHost;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteHttpcacheFileFileCacheStoreInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeGraniteHttpcacheUrlPaths  (optional)
///
///  @returns OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo*
///
-(NSURLSessionTask*) comAdobeGraniteHttpcacheImplOuterCacheFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeGraniteHttpcacheUrlPaths: (NSArray<NSString*>*) comAdobeGraniteHttpcacheUrlPaths
    completionHandler: (void (^)(OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeGraniteHttpcacheUrlPaths != nil) {
        queryParams[@"com.adobe.granite.httpcache.url.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeGraniteHttpcacheUrlPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteHttpcacheImplOuterCacheFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pseudoPatterns  (optional)
///
///  @returns OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo*
///
-(NSURLSessionTask*) comAdobeGraniteI18nImplBundlePseudoTranslationsWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pseudoPatterns: (NSArray<NSString*>*) pseudoPatterns
    completionHandler: (void (^)(OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pseudoPatterns != nil) {
        queryParams[@"pseudo.patterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: pseudoPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteI18nImplBundlePseudoTranslationsInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param securityPreferencesName  (optional)
///
///  @returns OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo*
///
-(NSURLSessionTask*) comAdobeGraniteI18nImplPreferencesLocaleResolverServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    securityPreferencesName: (NSString*) securityPreferencesName
    completionHandler: (void (^)(OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (securityPreferencesName != nil) {
        queryParams[@"security.preferences.name"] = securityPreferencesName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param graniteInfocollectorIncludeThreadDumps  (optional)
///
///  @param graniteInfocollectorIncludeHeapDump  (optional)
///
///  @returns OAIComAdobeGraniteInfocollectorInfoCollectorInfo*
///
-(NSURLSessionTask*) comAdobeGraniteInfocollectorInfoCollectorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    graniteInfocollectorIncludeThreadDumps: (NSNumber*) graniteInfocollectorIncludeThreadDumps
    graniteInfocollectorIncludeHeapDump: (NSNumber*) graniteInfocollectorIncludeHeapDump
    completionHandler: (void (^)(OAIComAdobeGraniteInfocollectorInfoCollectorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (graniteInfocollectorIncludeThreadDumps != nil) {
        queryParams[@"granite.infocollector.includeThreadDumps"] = [graniteInfocollectorIncludeThreadDumps isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteInfocollectorIncludeHeapDump != nil) {
        queryParams[@"granite.infocollector.includeHeapDump"] = [graniteInfocollectorIncludeHeapDump isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteInfocollectorInfoCollectorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteInfocollectorInfoCollectorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comAdobeGraniteJettySslPort  (optional)
///
///  @param comAdobeGraniteJettySslKeystoreUser  (optional)
///
///  @param comAdobeGraniteJettySslKeystorePassword  (optional)
///
///  @param comAdobeGraniteJettySslCiphersuitesExcluded  (optional)
///
///  @param comAdobeGraniteJettySslCiphersuitesIncluded  (optional)
///
///  @param comAdobeGraniteJettySslClientCertificate  (optional)
///
///  @returns OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo*
///
-(NSURLSessionTask*) comAdobeGraniteJettySslInternalGraniteSslConnectorFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comAdobeGraniteJettySslPort: (NSNumber*) comAdobeGraniteJettySslPort
    comAdobeGraniteJettySslKeystoreUser: (NSString*) comAdobeGraniteJettySslKeystoreUser
    comAdobeGraniteJettySslKeystorePassword: (NSString*) comAdobeGraniteJettySslKeystorePassword
    comAdobeGraniteJettySslCiphersuitesExcluded: (NSArray<NSString*>*) comAdobeGraniteJettySslCiphersuitesExcluded
    comAdobeGraniteJettySslCiphersuitesIncluded: (NSArray<NSString*>*) comAdobeGraniteJettySslCiphersuitesIncluded
    comAdobeGraniteJettySslClientCertificate: (NSString*) comAdobeGraniteJettySslClientCertificate
    completionHandler: (void (^)(OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comAdobeGraniteJettySslPort != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.port"] = comAdobeGraniteJettySslPort;
    }
    if (comAdobeGraniteJettySslKeystoreUser != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.keystore.user"] = comAdobeGraniteJettySslKeystoreUser;
    }
    if (comAdobeGraniteJettySslKeystorePassword != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.keystore.password"] = comAdobeGraniteJettySslKeystorePassword;
    }
    if (comAdobeGraniteJettySslCiphersuitesExcluded != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.ciphersuites.excluded"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeGraniteJettySslCiphersuitesExcluded format: @"multi"];
    }
    if (comAdobeGraniteJettySslCiphersuitesIncluded != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.ciphersuites.included"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comAdobeGraniteJettySslCiphersuitesIncluded format: @"multi"];
    }
    if (comAdobeGraniteJettySslClientCertificate != nil) {
        queryParams[@"com.adobe.granite.jetty.ssl.client.certificate"] = comAdobeGraniteJettySslClientCertificate;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param checkInternval  (optional)
///
///  @param excludeIds  (optional)
///
///  @param encryptPing  (optional)
///
///  @returns OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo*
///
-(NSURLSessionTask*) comAdobeGraniteLicenseImplLicenseCheckFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    checkInternval: (NSNumber*) checkInternval
    excludeIds: (NSArray<NSString*>*) excludeIds
    encryptPing: (NSNumber*) encryptPing
    completionHandler: (void (^)(OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (checkInternval != nil) {
        queryParams[@"checkInternval"] = checkInternval;
    }
    if (excludeIds != nil) {
        queryParams[@"excludeIds"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludeIds format: @"multi"];
    }
    if (encryptPing != nil) {
        queryParams[@"encryptPing"] = [encryptPing isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteLicenseImplLicenseCheckFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param messagesQueueSize  (optional)
///
///  @param loggerConfig  (optional)
///
///  @param messagesSize  (optional)
///
///  @returns OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteLoggingImplLogAnalyserImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    messagesQueueSize: (NSNumber*) messagesQueueSize
    loggerConfig: (NSArray<NSString*>*) loggerConfig
    messagesSize: (NSNumber*) messagesSize
    completionHandler: (void (^)(OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (messagesQueueSize != nil) {
        queryParams[@"messages.queue.size"] = messagesQueueSize;
    }
    if (loggerConfig != nil) {
        queryParams[@"logger.config"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: loggerConfig format: @"multi"];
    }
    if (messagesSize != nil) {
        queryParams[@"messages.size"] = messagesSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteLoggingImplLogAnalyserImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteLoggingImplLogErrorHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteLoggingImplLogErrorHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param graniteMaintenanceMandatory  (optional)
///
///  @param jobTopics  (optional)
///
///  @returns OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo*
///
-(NSURLSessionTask*) comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    graniteMaintenanceMandatory: (NSNumber*) graniteMaintenanceMandatory
    jobTopics: (NSString*) jobTopics
    completionHandler: (void (^)(OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (graniteMaintenanceMandatory != nil) {
        queryParams[@"granite.maintenance.mandatory"] = [graniteMaintenanceMandatory isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jobTopics != nil) {
        queryParams[@"job.topics"] = jobTopics;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jobTopics  (optional)
///
///  @returns OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo*
///
-(NSURLSessionTask*) comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jobTopics: (NSString*) jobTopics
    completionHandler: (void (^)(OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jobTopics != nil) {
        queryParams[@"job.topics"] = jobTopics;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fullGcDays  (optional)
///
///  @returns OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo*
///
-(NSURLSessionTask*) comAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fullGcDays: (NSArray<NSString*>*) fullGcDays
    completionHandler: (void (^)(OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fullGcDays != nil) {
        queryParams[@"full.gc.days"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fullGcDays format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param scriptFilename  (optional)
///
///  @param scriptDisplay  (optional)
///
///  @param scriptPath  (optional)
///
///  @param scriptPlatform  (optional)
///
///  @param interval  (optional)
///
///  @param jmxdomain  (optional)
///
///  @returns OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteMonitoringImplScriptConfigImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    scriptFilename: (NSString*) scriptFilename
    scriptDisplay: (NSString*) scriptDisplay
    scriptPath: (NSString*) scriptPath
    scriptPlatform: (NSArray<NSString*>*) scriptPlatform
    interval: (NSNumber*) interval
    jmxdomain: (NSString*) jmxdomain
    completionHandler: (void (^)(OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (scriptFilename != nil) {
        queryParams[@"script.filename"] = scriptFilename;
    }
    if (scriptDisplay != nil) {
        queryParams[@"script.display"] = scriptDisplay;
    }
    if (scriptPath != nil) {
        queryParams[@"script.path"] = scriptPath;
    }
    if (scriptPlatform != nil) {
        queryParams[@"script.platform"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: scriptPlatform format: @"multi"];
    }
    if (interval != nil) {
        queryParams[@"interval"] = interval;
    }
    if (jmxdomain != nil) {
        queryParams[@"jmxdomain"] = jmxdomain;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteMonitoringImplScriptConfigImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param jaasControlFlag  (optional)
///
///  @param jaasRealmName  (optional)
///
///  @param jaasRanking  (optional)
///
///  @param oauthOfflineValidation  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    jaasControlFlag: (NSString*) jaasControlFlag
    jaasRealmName: (NSString*) jaasRealmName
    jaasRanking: (NSNumber*) jaasRanking
    oauthOfflineValidation: (NSNumber*) oauthOfflineValidation
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (jaasControlFlag != nil) {
        queryParams[@"jaas.controlFlag"] = jaasControlFlag;
    }
    if (jaasRealmName != nil) {
        queryParams[@"jaas.realmName"] = jaasRealmName;
    }
    if (jaasRanking != nil) {
        queryParams[@"jaas.ranking"] = jaasRanking;
    }
    if (oauthOfflineValidation != nil) {
        queryParams[@"oauth.offline.validation"] = [oauthOfflineValidation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerImplAccessTokenCleanupTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthClientRevocationActive  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerImplOAuth2ClientRevocationServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthClientRevocationActive: (NSNumber*) oauthClientRevocationActive
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthClientRevocationActive != nil) {
        queryParams[@"oauth.client.revocation.active"] = [oauthClientRevocationActive isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletPaths  (optional)
///
///  @param oauthRevocationActive  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletPaths: (NSString*) slingServletPaths
    oauthRevocationActive: (NSNumber*) oauthRevocationActive
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletPaths != nil) {
        queryParams[@"sling.servlet.paths"] = slingServletPaths;
    }
    if (oauthRevocationActive != nil) {
        queryParams[@"oauth.revocation.active"] = [oauthRevocationActive isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthIssuer  (optional)
///
///  @param oauthAccessTokenExpiresIn  (optional)
///
///  @param osgiHttpWhiteboardServletPattern  (optional)
///
///  @param osgiHttpWhiteboardContextSelect  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerImplOAuth2TokenEndpointServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthIssuer: (NSString*) oauthIssuer
    oauthAccessTokenExpiresIn: (NSString*) oauthAccessTokenExpiresIn
    osgiHttpWhiteboardServletPattern: (NSString*) osgiHttpWhiteboardServletPattern
    osgiHttpWhiteboardContextSelect: (NSString*) osgiHttpWhiteboardContextSelect
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthIssuer != nil) {
        queryParams[@"oauth.issuer"] = oauthIssuer;
    }
    if (oauthAccessTokenExpiresIn != nil) {
        queryParams[@"oauth.access.token.expires.in"] = oauthAccessTokenExpiresIn;
    }
    if (osgiHttpWhiteboardServletPattern != nil) {
        queryParams[@"osgi.http.whiteboard.servlet.pattern"] = osgiHttpWhiteboardServletPattern;
    }
    if (osgiHttpWhiteboardContextSelect != nil) {
        queryParams[@"osgi.http.whiteboard.context.select"] = osgiHttpWhiteboardContextSelect;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param oauthTokenRevocationActive  (optional)
///
///  @returns OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOauthServerImplOAuth2TokenRevocationServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    oauthTokenRevocationActive: (NSNumber*) oauthTokenRevocationActive
    completionHandler: (void (^)(OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (oauthTokenRevocationActive != nil) {
        queryParams[@"oauth.token.revocation.active"] = [oauthTokenRevocationActive isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param offloadingTransporter  (optional)
///
///  @param offloadingCleanupPayload  (optional)
///
///  @returns OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOffloadingImplOffloadingConfiguratorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    offloadingTransporter: (NSString*) offloadingTransporter
    offloadingCleanupPayload: (NSNumber*) offloadingCleanupPayload
    completionHandler: (void (^)(OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (offloadingTransporter != nil) {
        queryParams[@"offloading.transporter"] = offloadingTransporter;
    }
    if (offloadingCleanupPayload != nil) {
        queryParams[@"offloading.cleanup.payload"] = [offloadingCleanupPayload isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param offloadingJobclonerEnabled  (optional)
///
///  @returns OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOffloadingImplOffloadingJobClonerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    offloadingJobclonerEnabled: (NSNumber*) offloadingJobclonerEnabled
    completionHandler: (void (^)(OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (offloadingJobclonerEnabled != nil) {
        queryParams[@"offloading.jobcloner.enabled"] = [offloadingJobclonerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOffloadingImplOffloadingJobClonerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param offloadingOffloaderEnabled  (optional)
///
///  @returns OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOffloadingImplOffloadingJobOffloaderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    offloadingOffloaderEnabled: (NSNumber*) offloadingOffloaderEnabled
    completionHandler: (void (^)(OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (offloadingOffloaderEnabled != nil) {
        queryParams[@"offloading.offloader.enabled"] = [offloadingOffloaderEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param offloadingAgentmanagerEnabled  (optional)
///
///  @returns OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    offloadingAgentmanagerEnabled: (NSNumber*) offloadingAgentmanagerEnabled
    completionHandler: (void (^)(OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (offloadingAgentmanagerEnabled != nil) {
        queryParams[@"offloading.agentmanager.enabled"] = [offloadingAgentmanagerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultTransportAgentToWorkerPrefix  (optional)
///
///  @param defaultTransportAgentToMasterPrefix  (optional)
///
///  @param defaultTransportInputPackage  (optional)
///
///  @param defaultTransportOutputPackage  (optional)
///
///  @param defaultTransportReplicationSynchronous  (optional)
///
///  @param defaultTransportContentpackage  (optional)
///
///  @param offloadingTransporterDefaultEnabled  (optional)
///
///  @returns OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultTransportAgentToWorkerPrefix: (NSString*) defaultTransportAgentToWorkerPrefix
    defaultTransportAgentToMasterPrefix: (NSString*) defaultTransportAgentToMasterPrefix
    defaultTransportInputPackage: (NSString*) defaultTransportInputPackage
    defaultTransportOutputPackage: (NSString*) defaultTransportOutputPackage
    defaultTransportReplicationSynchronous: (NSNumber*) defaultTransportReplicationSynchronous
    defaultTransportContentpackage: (NSNumber*) defaultTransportContentpackage
    offloadingTransporterDefaultEnabled: (NSNumber*) offloadingTransporterDefaultEnabled
    completionHandler: (void (^)(OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultTransportAgentToWorkerPrefix != nil) {
        queryParams[@"default.transport.agent-to-worker.prefix"] = defaultTransportAgentToWorkerPrefix;
    }
    if (defaultTransportAgentToMasterPrefix != nil) {
        queryParams[@"default.transport.agent-to-master.prefix"] = defaultTransportAgentToMasterPrefix;
    }
    if (defaultTransportInputPackage != nil) {
        queryParams[@"default.transport.input.package"] = defaultTransportInputPackage;
    }
    if (defaultTransportOutputPackage != nil) {
        queryParams[@"default.transport.output.package"] = defaultTransportOutputPackage;
    }
    if (defaultTransportReplicationSynchronous != nil) {
        queryParams[@"default.transport.replication.synchronous"] = [defaultTransportReplicationSynchronous isEqual:@(YES)] ? @"true" : @"false";
    }
    if (defaultTransportContentpackage != nil) {
        queryParams[@"default.transport.contentpackage"] = [defaultTransportContentpackage isEqual:@(YES)] ? @"true" : @"false";
    }
    if (offloadingTransporterDefaultEnabled != nil) {
        queryParams[@"offloading.transporter.default.enabled"] = [offloadingTransporterDefaultEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param omnisearchSuggestionRequiretextMin  (optional)
///
///  @param omnisearchSuggestionSpellcheckRequire  (optional)
///
///  @returns OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    omnisearchSuggestionRequiretextMin: (NSNumber*) omnisearchSuggestionRequiretextMin
    omnisearchSuggestionSpellcheckRequire: (NSNumber*) omnisearchSuggestionSpellcheckRequire
    completionHandler: (void (^)(OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (omnisearchSuggestionRequiretextMin != nil) {
        queryParams[@"omnisearch.suggestion.requiretext.min"] = omnisearchSuggestionRequiretextMin;
    }
    if (omnisearchSuggestionSpellcheckRequire != nil) {
        queryParams[@"omnisearch.suggestion.spellcheck.require"] = [omnisearchSuggestionSpellcheckRequire isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param optoutCookies  (optional)
///
///  @param optoutHeaders  (optional)
///
///  @param optoutWhitelistCookies  (optional)
///
///  @returns OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteOptoutImplOptOutServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    optoutCookies: (NSArray<NSString*>*) optoutCookies
    optoutHeaders: (NSArray<NSString*>*) optoutHeaders
    optoutWhitelistCookies: (NSArray<NSString*>*) optoutWhitelistCookies
    completionHandler: (void (^)(OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (optoutCookies != nil) {
        queryParams[@"optout.cookies"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: optoutCookies format: @"multi"];
    }
    if (optoutHeaders != nil) {
        queryParams[@"optout.headers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: optoutHeaders format: @"multi"];
    }
    if (optoutWhitelistCookies != nil) {
        queryParams[@"optout.whitelist.cookies"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: optoutWhitelistCookies format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteOptoutImplOptOutServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param indexingCriticalThreshold  (optional)
///
///  @param indexingWarnThreshold  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteQueriesImplHcAsyncIndexHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    indexingCriticalThreshold: (NSNumber*) indexingCriticalThreshold
    indexingWarnThreshold: (NSNumber*) indexingWarnThreshold
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (indexingCriticalThreshold != nil) {
        queryParams[@"indexing.critical.threshold"] = indexingCriticalThreshold;
    }
    if (indexingWarnThreshold != nil) {
        queryParams[@"indexing.warn.threshold"] = indexingWarnThreshold;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param largeIndexCriticalThreshold  (optional)
///
///  @param largeIndexWarnThreshold  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteQueriesImplHcLargeIndexHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    largeIndexCriticalThreshold: (NSNumber*) largeIndexCriticalThreshold
    largeIndexWarnThreshold: (NSNumber*) largeIndexWarnThreshold
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (largeIndexCriticalThreshold != nil) {
        queryParams[@"large.index.critical.threshold"] = largeIndexCriticalThreshold;
    }
    if (largeIndexWarnThreshold != nil) {
        queryParams[@"large.index.warn.threshold"] = largeIndexWarnThreshold;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteQueriesImplHcQueriesStatusHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param getPeriod  (optional)
///
///  @returns OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo*
///
-(NSURLSessionTask*) comAdobeGraniteQueriesImplHcQueryHealthCheckMetricsWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    getPeriod: (NSNumber*) getPeriod
    completionHandler: (void (^)(OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (getPeriod != nil) {
        queryParams[@"getPeriod"] = getPeriod;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteQueriesImplHcQueryLimitsHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param numberOfRetriesAllowed  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteReplicationHcImplReplicationQueueHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    numberOfRetriesAllowed: (NSNumber*) numberOfRetriesAllowed
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (numberOfRetriesAllowed != nil) {
        queryParams[@"number.of.retries.allowed"] = numberOfRetriesAllowed;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo*
///
-(NSURLSessionTask*) comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param excludeSearchPath  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    excludeSearchPath: (NSArray<NSString*>*) excludeSearchPath
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (excludeSearchPath != nil) {
        queryParams[@"exclude.search.path"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludeSearchPath format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param accountLogins  (optional)
///
///  @param consoleLogins  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    accountLogins: (NSArray<NSString*>*) accountLogins
    consoleLogins: (NSArray<NSString*>*) consoleLogins
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (accountLogins != nil) {
        queryParams[@"account.logins"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: accountLogins format: @"multi"];
    }
    if (consoleLogins != nil) {
        queryParams[@"console.logins"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: consoleLogins format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @param diskSpaceWarnThreshold  (optional)
///
///  @param diskSpaceErrorThreshold  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    diskSpaceWarnThreshold: (NSNumber*) diskSpaceWarnThreshold
    diskSpaceErrorThreshold: (NSNumber*) diskSpaceErrorThreshold
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (diskSpaceWarnThreshold != nil) {
        queryParams[@"disk.space.warn.threshold"] = diskSpaceWarnThreshold;
    }
    if (diskSpaceErrorThreshold != nil) {
        queryParams[@"disk.space.error.threshold"] = diskSpaceErrorThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param intervalSeconds  (optional)
///
///  @param commitsPerIntervalThreshold  (optional)
///
///  @param maxLocationLength  (optional)
///
///  @param maxDetailsShown  (optional)
///
///  @param minDetailsPercentage  (optional)
///
///  @param threadMatchers  (optional)
///
///  @param maxGreedyDepth  (optional)
///
///  @param greedyStackMatchers  (optional)
///
///  @param stackFilters  (optional)
///
///  @param stackMatchers  (optional)
///
///  @param stackCategorizers  (optional)
///
///  @param stackShorteners  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryImplCommitStatsConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    intervalSeconds: (NSNumber*) intervalSeconds
    commitsPerIntervalThreshold: (NSNumber*) commitsPerIntervalThreshold
    maxLocationLength: (NSNumber*) maxLocationLength
    maxDetailsShown: (NSNumber*) maxDetailsShown
    minDetailsPercentage: (NSNumber*) minDetailsPercentage
    threadMatchers: (NSArray<NSString*>*) threadMatchers
    maxGreedyDepth: (NSNumber*) maxGreedyDepth
    greedyStackMatchers: (NSString*) greedyStackMatchers
    stackFilters: (NSArray<NSString*>*) stackFilters
    stackMatchers: (NSArray<NSString*>*) stackMatchers
    stackCategorizers: (NSArray<NSString*>*) stackCategorizers
    stackShorteners: (NSArray<NSString*>*) stackShorteners
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (intervalSeconds != nil) {
        queryParams[@"intervalSeconds"] = intervalSeconds;
    }
    if (commitsPerIntervalThreshold != nil) {
        queryParams[@"commitsPerIntervalThreshold"] = commitsPerIntervalThreshold;
    }
    if (maxLocationLength != nil) {
        queryParams[@"maxLocationLength"] = maxLocationLength;
    }
    if (maxDetailsShown != nil) {
        queryParams[@"maxDetailsShown"] = maxDetailsShown;
    }
    if (minDetailsPercentage != nil) {
        queryParams[@"minDetailsPercentage"] = minDetailsPercentage;
    }
    if (threadMatchers != nil) {
        queryParams[@"threadMatchers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: threadMatchers format: @"multi"];
    }
    if (maxGreedyDepth != nil) {
        queryParams[@"maxGreedyDepth"] = maxGreedyDepth;
    }
    if (greedyStackMatchers != nil) {
        queryParams[@"greedyStackMatchers"] = greedyStackMatchers;
    }
    if (stackFilters != nil) {
        queryParams[@"stackFilters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: stackFilters format: @"multi"];
    }
    if (stackMatchers != nil) {
        queryParams[@"stackMatchers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: stackMatchers format: @"multi"];
    }
    if (stackCategorizers != nil) {
        queryParams[@"stackCategorizers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: stackCategorizers format: @"multi"];
    }
    if (stackShorteners != nil) {
        queryParams[@"stackShorteners"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: stackShorteners format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryImplCommitStatsConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param serviceusersSimpleSubjectPopulation  (optional)
///
///  @param serviceusersList  (optional)
///
///  @returns OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRepositoryServiceUserConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    serviceusersSimpleSubjectPopulation: (NSNumber*) serviceusersSimpleSubjectPopulation
    serviceusersList: (NSArray<NSString*>*) serviceusersList
    completionHandler: (void (^)(OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (serviceusersSimpleSubjectPopulation != nil) {
        queryParams[@"serviceusers.simpleSubjectPopulation"] = [serviceusersSimpleSubjectPopulation isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceusersList != nil) {
        queryParams[@"serviceusers.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: serviceusersList format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRepositoryServiceUserConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param types  (optional)
///
///  @returns OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo*
///
-(NSURLSessionTask*) comAdobeGraniteResourcestatusImplCompositeStatusTypeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    types: (NSArray<NSString*>*) types
    completionHandler: (void (^)(OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (types != nil) {
        queryParams[@"types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: types format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerRoot  (optional)
///
///  @returns OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteResourcestatusImplStatusResourceProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerRoot: (NSString*) providerRoot
    completionHandler: (void (^)(OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerRoot != nil) {
        queryParams[@"provider.root"] = providerRoot;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mimeAllowEmpty  (optional)
///
///  @param mimeAllowed  (optional)
///
///  @returns OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRestAssetsImplAssetContentDispositionFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mimeAllowEmpty: (NSNumber*) mimeAllowEmpty
    mimeAllowed: (NSArray<NSString*>*) mimeAllowed
    completionHandler: (void (^)(OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mimeAllowEmpty != nil) {
        queryParams[@"mime.allowEmpty"] = [mimeAllowEmpty isEqual:@(YES)] ? @"true" : @"false";
    }
    if (mimeAllowed != nil) {
        queryParams[@"mime.allowed"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: mimeAllowed format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerRoots  (optional)
///
///  @returns OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerRoots: (NSString*) providerRoots
    completionHandler: (void (^)(OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerRoots != nil) {
        queryParams[@"provider.roots"] = providerRoots;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultLimit  (optional)
///
///  @param useAbsoluteUri  (optional)
///
///  @returns OAIComAdobeGraniteRestImplServletDefaultGETServletInfo*
///
-(NSURLSessionTask*) comAdobeGraniteRestImplServletDefaultGETServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultLimit: (NSNumber*) defaultLimit
    useAbsoluteUri: (NSNumber*) useAbsoluteUri
    completionHandler: (void (^)(OAIComAdobeGraniteRestImplServletDefaultGETServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultLimit != nil) {
        queryParams[@"default.limit"] = defaultLimit;
    }
    if (useAbsoluteUri != nil) {
        queryParams[@"use.absolute.uri"] = [useAbsoluteUri isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteRestImplServletDefaultGETServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteRestImplServletDefaultGETServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcTags  (optional)
///
///  @returns OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo*
///
-(NSURLSessionTask*) comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcTags: (NSArray<NSString*>*) hcTags
    completionHandler: (void (^)(OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param adapterCondition  (optional)
///
///  @param graniteUserpropertiesNodetypes  (optional)
///
///  @param graniteUserpropertiesResourcetypes  (optional)
///
///  @returns OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo*
///
-(NSURLSessionTask*) comAdobeGraniteSecurityUserUserPropertiesServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    adapterCondition: (NSString*) adapterCondition
    graniteUserpropertiesNodetypes: (NSArray<NSString*>*) graniteUserpropertiesNodetypes
    graniteUserpropertiesResourcetypes: (NSArray<NSString*>*) graniteUserpropertiesResourcetypes
    completionHandler: (void (^)(OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (adapterCondition != nil) {
        queryParams[@"adapter.condition"] = adapterCondition;
    }
    if (graniteUserpropertiesNodetypes != nil) {
        queryParams[@"granite.userproperties.nodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: graniteUserpropertiesNodetypes format: @"multi"];
    }
    if (graniteUserpropertiesResourcetypes != nil) {
        queryParams[@"granite.userproperties.resourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: graniteUserpropertiesResourcetypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteSecurityUserUserPropertiesServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param group2memberRelationshipOutgoing  (optional)
///
///  @param group2memberExcludedOutgoing  (optional)
///
///  @param group2memberRelationshipIncoming  (optional)
///
///  @param group2memberExcludedIncoming  (optional)
///
///  @returns OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteSocialgraphImplSocialGraphFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    group2memberRelationshipOutgoing: (NSString*) group2memberRelationshipOutgoing
    group2memberExcludedOutgoing: (NSArray<NSString*>*) group2memberExcludedOutgoing
    group2memberRelationshipIncoming: (NSString*) group2memberRelationshipIncoming
    group2memberExcludedIncoming: (NSArray<NSString*>*) group2memberExcludedIncoming
    completionHandler: (void (^)(OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (group2memberRelationshipOutgoing != nil) {
        queryParams[@"group2member.relationship.outgoing"] = group2memberRelationshipOutgoing;
    }
    if (group2memberExcludedOutgoing != nil) {
        queryParams[@"group2member.excluded.outgoing"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: group2memberExcludedOutgoing format: @"multi"];
    }
    if (group2memberRelationshipIncoming != nil) {
        queryParams[@"group2member.relationship.incoming"] = group2memberRelationshipIncoming;
    }
    if (group2memberExcludedIncoming != nil) {
        queryParams[@"group2member.excluded.incoming"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: group2memberExcludedIncoming format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param jmxObjectname  (optional)
///
///  @returns OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    jmxObjectname: (NSString*) jmxObjectname
    completionHandler: (void (^)(OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (jmxObjectname != nil) {
        queryParams[@"jmx.objectname"] = jmxObjectname;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param adapterCondition  (optional)
///
///  @returns OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    adapterCondition: (NSString*) adapterCondition
    completionHandler: (void (^)(OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (adapterCondition != nil) {
        queryParams[@"adapter.condition"] = adapterCondition;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param archivingEnabled  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param archiveSinceDaysCompleted  (optional)
///
///  @returns OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    archivingEnabled: (NSNumber*) archivingEnabled
    schedulerExpression: (NSString*) schedulerExpression
    archiveSinceDaysCompleted: (NSNumber*) archiveSinceDaysCompleted
    completionHandler: (void (^)(OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (archivingEnabled != nil) {
        queryParams[@"archiving.enabled"] = [archivingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (archiveSinceDaysCompleted != nil) {
        queryParams[@"archive.since.days.completed"] = archiveSinceDaysCompleted;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param purgeCompleted  (optional)
///
///  @param completedAge  (optional)
///
///  @param purgeActive  (optional)
///
///  @param activeAge  (optional)
///
///  @param saveThreshold  (optional)
///
///  @returns OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    purgeCompleted: (NSNumber*) purgeCompleted
    completedAge: (NSNumber*) completedAge
    purgeActive: (NSNumber*) purgeActive
    activeAge: (NSNumber*) activeAge
    saveThreshold: (NSNumber*) saveThreshold
    completionHandler: (void (^)(OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (purgeCompleted != nil) {
        queryParams[@"purgeCompleted"] = [purgeCompleted isEqual:@(YES)] ? @"true" : @"false";
    }
    if (completedAge != nil) {
        queryParams[@"completedAge"] = completedAge;
    }
    if (purgeActive != nil) {
        queryParams[@"purgeActive"] = [purgeActive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (activeAge != nil) {
        queryParams[@"activeAge"] = activeAge;
    }
    if (saveThreshold != nil) {
        queryParams[@"saveThreshold"] = saveThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param adapterCondition  (optional)
///
///  @param taskmanagerAdmingroups  (optional)
///
///  @returns OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    adapterCondition: (NSString*) adapterCondition
    taskmanagerAdmingroups: (NSArray<NSString*>*) taskmanagerAdmingroups
    completionHandler: (void (^)(OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (adapterCondition != nil) {
        queryParams[@"adapter.condition"] = adapterCondition;
    }
    if (taskmanagerAdmingroups != nil) {
        queryParams[@"taskmanager.admingroups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: taskmanagerAdmingroups format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerPeriod  (optional)
///
///  @param schedulerRunOn  (optional)
///
///  @param graniteThreaddumpEnabled  (optional)
///
///  @param graniteThreaddumpDumpsPerFile  (optional)
///
///  @param graniteThreaddumpEnableGzipCompression  (optional)
///
///  @param graniteThreaddumpEnableDirectoriesCompression  (optional)
///
///  @param graniteThreaddumpEnableJStack  (optional)
///
///  @param graniteThreaddumpMaxBackupDays  (optional)
///
///  @param graniteThreaddumpBackupCleanTrigger  (optional)
///
///  @returns OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo*
///
-(NSURLSessionTask*) comAdobeGraniteThreaddumpThreadDumpCollectorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerPeriod: (NSNumber*) schedulerPeriod
    schedulerRunOn: (NSString*) schedulerRunOn
    graniteThreaddumpEnabled: (NSNumber*) graniteThreaddumpEnabled
    graniteThreaddumpDumpsPerFile: (NSNumber*) graniteThreaddumpDumpsPerFile
    graniteThreaddumpEnableGzipCompression: (NSNumber*) graniteThreaddumpEnableGzipCompression
    graniteThreaddumpEnableDirectoriesCompression: (NSNumber*) graniteThreaddumpEnableDirectoriesCompression
    graniteThreaddumpEnableJStack: (NSNumber*) graniteThreaddumpEnableJStack
    graniteThreaddumpMaxBackupDays: (NSNumber*) graniteThreaddumpMaxBackupDays
    graniteThreaddumpBackupCleanTrigger: (NSString*) graniteThreaddumpBackupCleanTrigger
    completionHandler: (void (^)(OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerPeriod != nil) {
        queryParams[@"scheduler.period"] = schedulerPeriod;
    }
    if (schedulerRunOn != nil) {
        queryParams[@"scheduler.runOn"] = schedulerRunOn;
    }
    if (graniteThreaddumpEnabled != nil) {
        queryParams[@"granite.threaddump.enabled"] = [graniteThreaddumpEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteThreaddumpDumpsPerFile != nil) {
        queryParams[@"granite.threaddump.dumpsPerFile"] = graniteThreaddumpDumpsPerFile;
    }
    if (graniteThreaddumpEnableGzipCompression != nil) {
        queryParams[@"granite.threaddump.enableGzipCompression"] = [graniteThreaddumpEnableGzipCompression isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteThreaddumpEnableDirectoriesCompression != nil) {
        queryParams[@"granite.threaddump.enableDirectoriesCompression"] = [graniteThreaddumpEnableDirectoriesCompression isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteThreaddumpEnableJStack != nil) {
        queryParams[@"granite.threaddump.enableJStack"] = [graniteThreaddumpEnableJStack isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteThreaddumpMaxBackupDays != nil) {
        queryParams[@"granite.threaddump.maxBackupDays"] = graniteThreaddumpMaxBackupDays;
    }
    if (graniteThreaddumpBackupCleanTrigger != nil) {
        queryParams[@"granite.threaddump.backupCleanTrigger"] = graniteThreaddumpBackupCleanTrigger;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteThreaddumpThreadDumpCollectorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param translationFactory  (optional)
///
///  @param defaultConnectorLabel  (optional)
///
///  @param defaultConnectorAttribution  (optional)
///
///  @param defaultConnectorWorkspaceId  (optional)
///
///  @param defaultConnectorSubscriptionKey  (optional)
///
///  @param languageMapLocation  (optional)
///
///  @param categoryMapLocation  (optional)
///
///  @param retryAttempts  (optional)
///
///  @param timeoutCount  (optional)
///
///  @returns OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    translationFactory: (NSString*) translationFactory
    defaultConnectorLabel: (NSString*) defaultConnectorLabel
    defaultConnectorAttribution: (NSString*) defaultConnectorAttribution
    defaultConnectorWorkspaceId: (NSString*) defaultConnectorWorkspaceId
    defaultConnectorSubscriptionKey: (NSString*) defaultConnectorSubscriptionKey
    languageMapLocation: (NSString*) languageMapLocation
    categoryMapLocation: (NSString*) categoryMapLocation
    retryAttempts: (NSNumber*) retryAttempts
    timeoutCount: (NSNumber*) timeoutCount
    completionHandler: (void (^)(OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (translationFactory != nil) {
        queryParams[@"translationFactory"] = translationFactory;
    }
    if (defaultConnectorLabel != nil) {
        queryParams[@"defaultConnectorLabel"] = defaultConnectorLabel;
    }
    if (defaultConnectorAttribution != nil) {
        queryParams[@"defaultConnectorAttribution"] = defaultConnectorAttribution;
    }
    if (defaultConnectorWorkspaceId != nil) {
        queryParams[@"defaultConnectorWorkspaceId"] = defaultConnectorWorkspaceId;
    }
    if (defaultConnectorSubscriptionKey != nil) {
        queryParams[@"defaultConnectorSubscriptionKey"] = defaultConnectorSubscriptionKey;
    }
    if (languageMapLocation != nil) {
        queryParams[@"languageMapLocation"] = languageMapLocation;
    }
    if (categoryMapLocation != nil) {
        queryParams[@"categoryMapLocation"] = categoryMapLocation;
    }
    if (retryAttempts != nil) {
        queryParams[@"retryAttempts"] = retryAttempts;
    }
    if (timeoutCount != nil) {
        queryParams[@"timeoutCount"] = timeoutCount;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultConnectorName  (optional)
///
///  @param defaultCategory  (optional)
///
///  @returns OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteTranslationCoreImplTranslationManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultConnectorName: (NSString*) defaultConnectorName
    defaultCategory: (NSString*) defaultCategory
    completionHandler: (void (^)(OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultConnectorName != nil) {
        queryParams[@"defaultConnectorName"] = defaultConnectorName;
    }
    if (defaultCategory != nil) {
        queryParams[@"defaultCategory"] = defaultCategory;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param htmllibmanagerTiming  (optional)
///
///  @param htmllibmanagerDebugInitJs  (optional)
///
///  @param htmllibmanagerMinify  (optional)
///
///  @param htmllibmanagerDebug  (optional)
///
///  @param htmllibmanagerGzip  (optional)
///
///  @param htmllibmanagerMaxDataUriSize  (optional)
///
///  @param htmllibmanagerMaxage  (optional)
///
///  @param htmllibmanagerForceCQUrlInfo  (optional)
///
///  @param htmllibmanagerDefaultthemename  (optional)
///
///  @param htmllibmanagerDefaultuserthemename  (optional)
///
///  @param htmllibmanagerClientmanager  (optional)
///
///  @param htmllibmanagerPathList  (optional)
///
///  @param htmllibmanagerExcludedPathList  (optional)
///
///  @param htmllibmanagerProcessorJs  (optional)
///
///  @param htmllibmanagerProcessorCss  (optional)
///
///  @param htmllibmanagerLongcachePatterns  (optional)
///
///  @param htmllibmanagerLongcacheFormat  (optional)
///
///  @param htmllibmanagerUseFileSystemOutputCache  (optional)
///
///  @param htmllibmanagerFileSystemOutputCacheLocation  (optional)
///
///  @param htmllibmanagerDisableReplacement  (optional)
///
///  @returns OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo*
///
-(NSURLSessionTask*) comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    htmllibmanagerTiming: (NSNumber*) htmllibmanagerTiming
    htmllibmanagerDebugInitJs: (NSString*) htmllibmanagerDebugInitJs
    htmllibmanagerMinify: (NSNumber*) htmllibmanagerMinify
    htmllibmanagerDebug: (NSNumber*) htmllibmanagerDebug
    htmllibmanagerGzip: (NSNumber*) htmllibmanagerGzip
    htmllibmanagerMaxDataUriSize: (NSNumber*) htmllibmanagerMaxDataUriSize
    htmllibmanagerMaxage: (NSNumber*) htmllibmanagerMaxage
    htmllibmanagerForceCQUrlInfo: (NSNumber*) htmllibmanagerForceCQUrlInfo
    htmllibmanagerDefaultthemename: (NSString*) htmllibmanagerDefaultthemename
    htmllibmanagerDefaultuserthemename: (NSString*) htmllibmanagerDefaultuserthemename
    htmllibmanagerClientmanager: (NSString*) htmllibmanagerClientmanager
    htmllibmanagerPathList: (NSArray<NSString*>*) htmllibmanagerPathList
    htmllibmanagerExcludedPathList: (NSArray<NSString*>*) htmllibmanagerExcludedPathList
    htmllibmanagerProcessorJs: (NSArray<NSString*>*) htmllibmanagerProcessorJs
    htmllibmanagerProcessorCss: (NSArray<NSString*>*) htmllibmanagerProcessorCss
    htmllibmanagerLongcachePatterns: (NSArray<NSString*>*) htmllibmanagerLongcachePatterns
    htmllibmanagerLongcacheFormat: (NSString*) htmllibmanagerLongcacheFormat
    htmllibmanagerUseFileSystemOutputCache: (NSNumber*) htmllibmanagerUseFileSystemOutputCache
    htmllibmanagerFileSystemOutputCacheLocation: (NSString*) htmllibmanagerFileSystemOutputCacheLocation
    htmllibmanagerDisableReplacement: (NSArray<NSString*>*) htmllibmanagerDisableReplacement
    completionHandler: (void (^)(OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (htmllibmanagerTiming != nil) {
        queryParams[@"htmllibmanager.timing"] = [htmllibmanagerTiming isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerDebugInitJs != nil) {
        queryParams[@"htmllibmanager.debug.init.js"] = htmllibmanagerDebugInitJs;
    }
    if (htmllibmanagerMinify != nil) {
        queryParams[@"htmllibmanager.minify"] = [htmllibmanagerMinify isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerDebug != nil) {
        queryParams[@"htmllibmanager.debug"] = [htmllibmanagerDebug isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerGzip != nil) {
        queryParams[@"htmllibmanager.gzip"] = [htmllibmanagerGzip isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerMaxDataUriSize != nil) {
        queryParams[@"htmllibmanager.maxDataUriSize"] = htmllibmanagerMaxDataUriSize;
    }
    if (htmllibmanagerMaxage != nil) {
        queryParams[@"htmllibmanager.maxage"] = htmllibmanagerMaxage;
    }
    if (htmllibmanagerForceCQUrlInfo != nil) {
        queryParams[@"htmllibmanager.forceCQUrlInfo"] = [htmllibmanagerForceCQUrlInfo isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerDefaultthemename != nil) {
        queryParams[@"htmllibmanager.defaultthemename"] = htmllibmanagerDefaultthemename;
    }
    if (htmllibmanagerDefaultuserthemename != nil) {
        queryParams[@"htmllibmanager.defaultuserthemename"] = htmllibmanagerDefaultuserthemename;
    }
    if (htmllibmanagerClientmanager != nil) {
        queryParams[@"htmllibmanager.clientmanager"] = htmllibmanagerClientmanager;
    }
    if (htmllibmanagerPathList != nil) {
        queryParams[@"htmllibmanager.path.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerPathList format: @"multi"];
    }
    if (htmllibmanagerExcludedPathList != nil) {
        queryParams[@"htmllibmanager.excluded.path.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerExcludedPathList format: @"multi"];
    }
    if (htmllibmanagerProcessorJs != nil) {
        queryParams[@"htmllibmanager.processor.js"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerProcessorJs format: @"multi"];
    }
    if (htmllibmanagerProcessorCss != nil) {
        queryParams[@"htmllibmanager.processor.css"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerProcessorCss format: @"multi"];
    }
    if (htmllibmanagerLongcachePatterns != nil) {
        queryParams[@"htmllibmanager.longcache.patterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerLongcachePatterns format: @"multi"];
    }
    if (htmllibmanagerLongcacheFormat != nil) {
        queryParams[@"htmllibmanager.longcache.format"] = htmllibmanagerLongcacheFormat;
    }
    if (htmllibmanagerUseFileSystemOutputCache != nil) {
        queryParams[@"htmllibmanager.useFileSystemOutputCache"] = [htmllibmanagerUseFileSystemOutputCache isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerFileSystemOutputCacheLocation != nil) {
        queryParams[@"htmllibmanager.fileSystemOutputCacheLocation"] = htmllibmanagerFileSystemOutputCacheLocation;
    }
    if (htmllibmanagerDisableReplacement != nil) {
        queryParams[@"htmllibmanager.disable.replacement"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerDisableReplacement format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param graniteWorkflowWorkflowPublishEventServiceEnabled  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    graniteWorkflowWorkflowPublishEventServiceEnabled: (NSNumber*) graniteWorkflowWorkflowPublishEventServiceEnabled
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (graniteWorkflowWorkflowPublishEventServiceEnabled != nil) {
        queryParams[@"granite.workflow.WorkflowPublishEventService.enabled"] = [graniteWorkflowWorkflowPublishEventServiceEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param bucketSize  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    bucketSize: (NSNumber*) bucketSize
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (bucketSize != nil) {
        queryParams[@"bucketSize"] = bucketSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultTimeout  (optional)
///
///  @param maxTimeout  (optional)
///
///  @param defaultPeriod  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultTimeout: (NSNumber*) defaultTimeout
    maxTimeout: (NSNumber*) maxTimeout
    defaultPeriod: (NSNumber*) defaultPeriod
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultTimeout != nil) {
        queryParams[@"default.timeout"] = defaultTimeout;
    }
    if (maxTimeout != nil) {
        queryParams[@"max.timeout"] = maxTimeout;
    }
    if (defaultPeriod != nil) {
        queryParams[@"default.period"] = defaultPeriod;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jobTopics  (optional)
///
///  @param allowSelfProcessTermination  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreJobJobHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jobTopics: (NSArray<NSString*>*) jobTopics
    allowSelfProcessTermination: (NSNumber*) allowSelfProcessTermination
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jobTopics != nil) {
        queryParams[@"job.topics"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: jobTopics format: @"multi"];
    }
    if (allowSelfProcessTermination != nil) {
        queryParams[@"allow.self.process.termination"] = [allowSelfProcessTermination isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreJobJobHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jobTopics  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jobTopics: (NSString*) jobTopics
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jobTopics != nil) {
        queryParams[@"job.topics"] = jobTopics;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param getSystemWorkflowModels  (optional)
///
///  @param getPackageRootPath  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCorePayloadMapCacheWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    getSystemWorkflowModels: (NSArray<NSString*>*) getSystemWorkflowModels
    getPackageRootPath: (NSString*) getPackageRootPath
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (getSystemWorkflowModels != nil) {
        queryParams[@"getSystemWorkflowModels"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: getSystemWorkflowModels format: @"multi"];
    }
    if (getPackageRootPath != nil) {
        queryParams[@"getPackageRootPath"] = getPackageRootPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCorePayloadMapCacheInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param payloadMoveWhiteList  (optional)
///
///  @param payloadMoveHandleFromWorkflowProcess  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    payloadMoveWhiteList: (NSArray<NSString*>*) payloadMoveWhiteList
    payloadMoveHandleFromWorkflowProcess: (NSNumber*) payloadMoveHandleFromWorkflowProcess
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (payloadMoveWhiteList != nil) {
        queryParams[@"payload.move.white.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: payloadMoveWhiteList format: @"multi"];
    }
    if (payloadMoveHandleFromWorkflowProcess != nil) {
        queryParams[@"payload.move.handle.from.workflow.process"] = [payloadMoveHandleFromWorkflowProcess isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWorkflowConfigWorkflowPackagesRootPath  (optional)
///
///  @param cqWorkflowConfigWorkflowProcessLegacyMode  (optional)
///
///  @param cqWorkflowConfigAllowLocking  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreWorkflowConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWorkflowConfigWorkflowPackagesRootPath: (NSArray<NSString*>*) cqWorkflowConfigWorkflowPackagesRootPath
    cqWorkflowConfigWorkflowProcessLegacyMode: (NSNumber*) cqWorkflowConfigWorkflowProcessLegacyMode
    cqWorkflowConfigAllowLocking: (NSNumber*) cqWorkflowConfigAllowLocking
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWorkflowConfigWorkflowPackagesRootPath != nil) {
        queryParams[@"cq.workflow.config.workflow.packages.root.path"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWorkflowConfigWorkflowPackagesRootPath format: @"multi"];
    }
    if (cqWorkflowConfigWorkflowProcessLegacyMode != nil) {
        queryParams[@"cq.workflow.config.workflow.process.legacy.mode"] = [cqWorkflowConfigWorkflowProcessLegacyMode isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqWorkflowConfigAllowLocking != nil) {
        queryParams[@"cq.workflow.config.allow.locking"] = [cqWorkflowConfigAllowLocking isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreWorkflowConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param graniteWorkflowinboxSortPropertyName  (optional)
///
///  @param graniteWorkflowinboxSortOrder  (optional)
///
///  @param cqWorkflowJobRetry  (optional)
///
///  @param cqWorkflowSuperuser  (optional)
///
///  @param graniteWorkflowInboxQuerySize  (optional)
///
///  @param graniteWorkflowAdminUserGroupFilter  (optional)
///
///  @param graniteWorkflowEnforceWorkitemAssigneePermissions  (optional)
///
///  @param graniteWorkflowEnforceWorkflowInitiatorPermissions  (optional)
///
///  @param graniteWorkflowInjectTenantIdInJobTopics  (optional)
///
///  @param graniteWorkflowMaxPurgeSaveThreshold  (optional)
///
///  @param graniteWorkflowMaxPurgeQueryCount  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowCoreWorkflowSessionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    graniteWorkflowinboxSortPropertyName: (NSString*) graniteWorkflowinboxSortPropertyName
    graniteWorkflowinboxSortOrder: (NSString*) graniteWorkflowinboxSortOrder
    cqWorkflowJobRetry: (NSNumber*) cqWorkflowJobRetry
    cqWorkflowSuperuser: (NSArray<NSString*>*) cqWorkflowSuperuser
    graniteWorkflowInboxQuerySize: (NSNumber*) graniteWorkflowInboxQuerySize
    graniteWorkflowAdminUserGroupFilter: (NSNumber*) graniteWorkflowAdminUserGroupFilter
    graniteWorkflowEnforceWorkitemAssigneePermissions: (NSNumber*) graniteWorkflowEnforceWorkitemAssigneePermissions
    graniteWorkflowEnforceWorkflowInitiatorPermissions: (NSNumber*) graniteWorkflowEnforceWorkflowInitiatorPermissions
    graniteWorkflowInjectTenantIdInJobTopics: (NSNumber*) graniteWorkflowInjectTenantIdInJobTopics
    graniteWorkflowMaxPurgeSaveThreshold: (NSNumber*) graniteWorkflowMaxPurgeSaveThreshold
    graniteWorkflowMaxPurgeQueryCount: (NSNumber*) graniteWorkflowMaxPurgeQueryCount
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (graniteWorkflowinboxSortPropertyName != nil) {
        queryParams[@"granite.workflowinbox.sort.propertyName"] = graniteWorkflowinboxSortPropertyName;
    }
    if (graniteWorkflowinboxSortOrder != nil) {
        queryParams[@"granite.workflowinbox.sort.order"] = graniteWorkflowinboxSortOrder;
    }
    if (cqWorkflowJobRetry != nil) {
        queryParams[@"cq.workflow.job.retry"] = cqWorkflowJobRetry;
    }
    if (cqWorkflowSuperuser != nil) {
        queryParams[@"cq.workflow.superuser"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWorkflowSuperuser format: @"multi"];
    }
    if (graniteWorkflowInboxQuerySize != nil) {
        queryParams[@"granite.workflow.inboxQuerySize"] = graniteWorkflowInboxQuerySize;
    }
    if (graniteWorkflowAdminUserGroupFilter != nil) {
        queryParams[@"granite.workflow.adminUserGroupFilter"] = [graniteWorkflowAdminUserGroupFilter isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteWorkflowEnforceWorkitemAssigneePermissions != nil) {
        queryParams[@"granite.workflow.enforceWorkitemAssigneePermissions"] = [graniteWorkflowEnforceWorkitemAssigneePermissions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteWorkflowEnforceWorkflowInitiatorPermissions != nil) {
        queryParams[@"granite.workflow.enforceWorkflowInitiatorPermissions"] = [graniteWorkflowEnforceWorkflowInitiatorPermissions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteWorkflowInjectTenantIdInJobTopics != nil) {
        queryParams[@"granite.workflow.injectTenantIdInJobTopics"] = [graniteWorkflowInjectTenantIdInJobTopics isEqual:@(YES)] ? @"true" : @"false";
    }
    if (graniteWorkflowMaxPurgeSaveThreshold != nil) {
        queryParams[@"granite.workflow.maxPurgeSaveThreshold"] = graniteWorkflowMaxPurgeSaveThreshold;
    }
    if (graniteWorkflowMaxPurgeQueryCount != nil) {
        queryParams[@"granite.workflow.maxPurgeQueryCount"] = graniteWorkflowMaxPurgeQueryCount;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param scheduledpurgeName  (optional)
///
///  @param scheduledpurgeWorkflowStatus  (optional)
///
///  @param scheduledpurgeModelIds  (optional)
///
///  @param scheduledpurgeDaysold  (optional)
///
///  @returns OAIComAdobeGraniteWorkflowPurgeSchedulerInfo*
///
-(NSURLSessionTask*) comAdobeGraniteWorkflowPurgeSchedulerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    scheduledpurgeName: (NSString*) scheduledpurgeName
    scheduledpurgeWorkflowStatus: (NSString*) scheduledpurgeWorkflowStatus
    scheduledpurgeModelIds: (NSArray<NSString*>*) scheduledpurgeModelIds
    scheduledpurgeDaysold: (NSNumber*) scheduledpurgeDaysold
    completionHandler: (void (^)(OAIComAdobeGraniteWorkflowPurgeSchedulerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (scheduledpurgeName != nil) {
        queryParams[@"scheduledpurge.name"] = scheduledpurgeName;
    }
    if (scheduledpurgeWorkflowStatus != nil) {
        queryParams[@"scheduledpurge.workflowStatus"] = scheduledpurgeWorkflowStatus;
    }
    if (scheduledpurgeModelIds != nil) {
        queryParams[@"scheduledpurge.modelIds"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: scheduledpurgeModelIds format: @"multi"];
    }
    if (scheduledpurgeDaysold != nil) {
        queryParams[@"scheduledpurge.daysold"] = scheduledpurgeDaysold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeGraniteWorkflowPurgeSchedulerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeGraniteWorkflowPurgeSchedulerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxConnections  (optional)
///
///  @param maxRequests  (optional)
///
///  @param requestTimeout  (optional)
///
///  @param requestRetries  (optional)
///
///  @param launchTimeout  (optional)
///
///  @returns OAIComAdobeOctopusNcommBootstrapInfo*
///
-(NSURLSessionTask*) comAdobeOctopusNcommBootstrapWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxConnections: (NSNumber*) maxConnections
    maxRequests: (NSNumber*) maxRequests
    requestTimeout: (NSNumber*) requestTimeout
    requestRetries: (NSNumber*) requestRetries
    launchTimeout: (NSNumber*) launchTimeout
    completionHandler: (void (^)(OAIComAdobeOctopusNcommBootstrapInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxConnections != nil) {
        queryParams[@"maxConnections"] = maxConnections;
    }
    if (maxRequests != nil) {
        queryParams[@"maxRequests"] = maxRequests;
    }
    if (requestTimeout != nil) {
        queryParams[@"requestTimeout"] = requestTimeout;
    }
    if (requestRetries != nil) {
        queryParams[@"requestRetries"] = requestRetries;
    }
    if (launchTimeout != nil) {
        queryParams[@"launchTimeout"] = launchTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeOctopusNcommBootstrapInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeOctopusNcommBootstrapInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param communitiesIntegrationLivefyreSlingEventFilter  (optional)
///
///  @returns OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo*
///
-(NSURLSessionTask*) comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    communitiesIntegrationLivefyreSlingEventFilter: (NSString*) communitiesIntegrationLivefyreSlingEventFilter
    completionHandler: (void (^)(OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (communitiesIntegrationLivefyreSlingEventFilter != nil) {
        queryParams[@"communities.integration.livefyre.sling.event.filter"] = communitiesIntegrationLivefyreSlingEventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxConnections  (optional)
///
///  @param maxRequests  (optional)
///
///  @param requestTimeout  (optional)
///
///  @param logDir  (optional)
///
///  @returns OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo*
///
-(NSURLSessionTask*) comAdobeXmpWorkerFilesNcommXMPFilesNCommWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxConnections: (NSString*) maxConnections
    maxRequests: (NSString*) maxRequests
    requestTimeout: (NSString*) requestTimeout
    logDir: (NSString*) logDir
    completionHandler: (void (^)(OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxConnections != nil) {
        queryParams[@"maxConnections"] = maxConnections;
    }
    if (maxRequests != nil) {
        queryParams[@"maxRequests"] = maxRequests;
    }
    if (requestTimeout != nil) {
        queryParams[@"requestTimeout"] = requestTimeout;
    }
    if (logDir != nil) {
        queryParams[@"logDir"] = logDir;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jdbcDriverClass  (optional)
///
///  @param jdbcConnectionUri  (optional)
///
///  @param jdbcUsername  (optional)
///
///  @param jdbcPassword  (optional)
///
///  @param jdbcValidationQuery  (optional)
///
///  @param defaultReadonly  (optional)
///
///  @param defaultAutocommit  (optional)
///
///  @param poolSize  (optional)
///
///  @param poolMaxWaitMsec  (optional)
///
///  @param datasourceName  (optional)
///
///  @param datasourceSvcProperties  (optional)
///
///  @returns OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo*
///
-(NSURLSessionTask*) comDayCommonsDatasourceJdbcpoolJdbcPoolServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jdbcDriverClass: (NSString*) jdbcDriverClass
    jdbcConnectionUri: (NSString*) jdbcConnectionUri
    jdbcUsername: (NSString*) jdbcUsername
    jdbcPassword: (NSString*) jdbcPassword
    jdbcValidationQuery: (NSString*) jdbcValidationQuery
    defaultReadonly: (NSNumber*) defaultReadonly
    defaultAutocommit: (NSNumber*) defaultAutocommit
    poolSize: (NSNumber*) poolSize
    poolMaxWaitMsec: (NSNumber*) poolMaxWaitMsec
    datasourceName: (NSString*) datasourceName
    datasourceSvcProperties: (NSArray<NSString*>*) datasourceSvcProperties
    completionHandler: (void (^)(OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jdbcDriverClass != nil) {
        queryParams[@"jdbc.driver.class"] = jdbcDriverClass;
    }
    if (jdbcConnectionUri != nil) {
        queryParams[@"jdbc.connection.uri"] = jdbcConnectionUri;
    }
    if (jdbcUsername != nil) {
        queryParams[@"jdbc.username"] = jdbcUsername;
    }
    if (jdbcPassword != nil) {
        queryParams[@"jdbc.password"] = jdbcPassword;
    }
    if (jdbcValidationQuery != nil) {
        queryParams[@"jdbc.validation.query"] = jdbcValidationQuery;
    }
    if (defaultReadonly != nil) {
        queryParams[@"default.readonly"] = [defaultReadonly isEqual:@(YES)] ? @"true" : @"false";
    }
    if (defaultAutocommit != nil) {
        queryParams[@"default.autocommit"] = [defaultAutocommit isEqual:@(YES)] ? @"true" : @"false";
    }
    if (poolSize != nil) {
        queryParams[@"pool.size"] = poolSize;
    }
    if (poolMaxWaitMsec != nil) {
        queryParams[@"pool.max.wait.msec"] = poolMaxWaitMsec;
    }
    if (datasourceName != nil) {
        queryParams[@"datasource.name"] = datasourceName;
    }
    if (datasourceSvcProperties != nil) {
        queryParams[@"datasource.svc.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: datasourceSvcProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param proxyEnabled  (optional)
///
///  @param proxyHost  (optional)
///
///  @param proxyUser  (optional)
///
///  @param proxyPassword  (optional)
///
///  @param proxyNtlmHost  (optional)
///
///  @param proxyNtlmDomain  (optional)
///
///  @param proxyExceptions  (optional)
///
///  @returns OAIComDayCommonsHttpclientInfo*
///
-(NSURLSessionTask*) comDayCommonsHttpclientWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    proxyEnabled: (NSNumber*) proxyEnabled
    proxyHost: (NSString*) proxyHost
    proxyUser: (NSString*) proxyUser
    proxyPassword: (NSString*) proxyPassword
    proxyNtlmHost: (NSString*) proxyNtlmHost
    proxyNtlmDomain: (NSString*) proxyNtlmDomain
    proxyExceptions: (NSArray<NSString*>*) proxyExceptions
    completionHandler: (void (^)(OAIComDayCommonsHttpclientInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.commons.httpclient"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (proxyEnabled != nil) {
        queryParams[@"proxy.enabled"] = [proxyEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (proxyHost != nil) {
        queryParams[@"proxy.host"] = proxyHost;
    }
    if (proxyUser != nil) {
        queryParams[@"proxy.user"] = proxyUser;
    }
    if (proxyPassword != nil) {
        queryParams[@"proxy.password"] = proxyPassword;
    }
    if (proxyNtlmHost != nil) {
        queryParams[@"proxy.ntlm.host"] = proxyNtlmHost;
    }
    if (proxyNtlmDomain != nil) {
        queryParams[@"proxy.ntlm.domain"] = proxyNtlmDomain;
    }
    if (proxyExceptions != nil) {
        queryParams[@"proxy.exceptions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: proxyExceptions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCommonsHttpclientInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCommonsHttpclientInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqStoreListenerAdditionalStorePaths  (optional)
///
///  @returns OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsImplStorePropertiesChangeListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqStoreListenerAdditionalStorePaths: (NSArray<NSString*>*) cqStoreListenerAdditionalStorePaths
    completionHandler: (void (^)(OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqStoreListenerAdditionalStorePaths != nil) {
        queryParams[@"cq.store.listener.additionalStorePaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqStoreListenerAdditionalStorePaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsImplStorePropertiesChangeListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param allowedPaths  (optional)
///
///  @param cqAnalyticsSaintExporterPagesize  (optional)
///
///  @returns OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsSitecatalystImplExporterClassificationsExporteWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    allowedPaths: (NSArray<NSString*>*) allowedPaths
    cqAnalyticsSaintExporterPagesize: (NSNumber*) cqAnalyticsSaintExporterPagesize
    completionHandler: (void (^)(OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (allowedPaths != nil) {
        queryParams[@"allowed.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedPaths format: @"multi"];
    }
    if (cqAnalyticsSaintExporterPagesize != nil) {
        queryParams[@"cq.analytics.saint.exporter.pagesize"] = cqAnalyticsSaintExporterPagesize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param reportFetchAttempts  (optional)
///
///  @param reportFetchDelay  (optional)
///
///  @returns OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsSitecatalystImplImporterReportImporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    reportFetchAttempts: (NSNumber*) reportFetchAttempts
    reportFetchDelay: (NSNumber*) reportFetchDelay
    completionHandler: (void (^)(OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (reportFetchAttempts != nil) {
        queryParams[@"report.fetch.attempts"] = reportFetchAttempts;
    }
    if (reportFetchDelay != nil) {
        queryParams[@"report.fetch.delay"] = reportFetchDelay;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsAdapterfactoryContextstores  (optional)
///
///  @returns OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsAdapterfactoryContextstores: (NSArray<NSString*>*) cqAnalyticsAdapterfactoryContextstores
    completionHandler: (void (^)(OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsAdapterfactoryContextstores != nil) {
        queryParams[@"cq.analytics.adapterfactory.contextstores"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqAnalyticsAdapterfactoryContextstores format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsSitecatalystServiceDatacenterUrl  (optional)
///
///  @param devhostnamepatterns  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @returns OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsSitecatalystServiceDatacenterUrl: (NSArray<NSString*>*) cqAnalyticsSitecatalystServiceDatacenterUrl
    devhostnamepatterns: (NSArray<NSString*>*) devhostnamepatterns
    connectionTimeout: (NSNumber*) connectionTimeout
    socketTimeout: (NSNumber*) socketTimeout
    completionHandler: (void (^)(OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsSitecatalystServiceDatacenterUrl != nil) {
        queryParams[@"cq.analytics.sitecatalyst.service.datacenter.url"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqAnalyticsSitecatalystServiceDatacenterUrl format: @"multi"];
    }
    if (devhostnamepatterns != nil) {
        queryParams[@"devhostnamepatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: devhostnamepatterns format: @"multi"];
    }
    if (connectionTimeout != nil) {
        queryParams[@"connection.timeout"] = connectionTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socket.timeout"] = socketTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsTestandtargetAccountoptionsupdaterEnabled  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsTestandtargetAccountoptionsupdaterEnabled: (NSNumber*) cqAnalyticsTestandtargetAccountoptionsupdaterEnabled
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsTestandtargetAccountoptionsupdaterEnabled != nil) {
        queryParams[@"cq.analytics.testandtarget.accountoptionsupdater.enabled"] = [cqAnalyticsTestandtargetAccountoptionsupdaterEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled: (NSNumber*) cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled != nil) {
        queryParams[@"cq.analytics.testandtarget.deleteauthoractivitylistener.enabled"] = [cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled: (NSNumber*) cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled != nil) {
        queryParams[@"cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled"] = [cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsTestandtargetSegmentimporterEnabled  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplSegmentImporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsTestandtargetSegmentimporterEnabled: (NSNumber*) cqAnalyticsTestandtargetSegmentimporterEnabled
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsTestandtargetSegmentimporterEnabled != nil) {
        queryParams[@"cq.analytics.testandtarget.segmentimporter.enabled"] = [cqAnalyticsTestandtargetSegmentimporterEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplSegmentImporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param endpointUri  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplServiceWebServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    endpointUri: (NSString*) endpointUri
    connectionTimeout: (NSNumber*) connectionTimeout
    socketTimeout: (NSNumber*) socketTimeout
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (endpointUri != nil) {
        queryParams[@"endpointUri"] = endpointUri;
    }
    if (connectionTimeout != nil) {
        queryParams[@"connectionTimeout"] = connectionTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socketTimeout"] = socketTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param testandtargetEndpointUrl  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplServletsAdminServerServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    testandtargetEndpointUrl: (NSString*) testandtargetEndpointUrl
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (testandtargetEndpointUrl != nil) {
        queryParams[@"testandtarget.endpoint.url"] = testandtargetEndpointUrl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAnalyticsTestandtargetApiUrl  (optional)
///
///  @param cqAnalyticsTestandtargetTimeout  (optional)
///
///  @param cqAnalyticsTestandtargetSockettimeout  (optional)
///
///  @param cqAnalyticsTestandtargetRecommendationsUrlReplace  (optional)
///
///  @param cqAnalyticsTestandtargetRecommendationsUrlReplacewith  (optional)
///
///  @returns OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo*
///
-(NSURLSessionTask*) comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAnalyticsTestandtargetApiUrl: (NSString*) cqAnalyticsTestandtargetApiUrl
    cqAnalyticsTestandtargetTimeout: (NSNumber*) cqAnalyticsTestandtargetTimeout
    cqAnalyticsTestandtargetSockettimeout: (NSNumber*) cqAnalyticsTestandtargetSockettimeout
    cqAnalyticsTestandtargetRecommendationsUrlReplace: (NSString*) cqAnalyticsTestandtargetRecommendationsUrlReplace
    cqAnalyticsTestandtargetRecommendationsUrlReplacewith: (NSString*) cqAnalyticsTestandtargetRecommendationsUrlReplacewith
    completionHandler: (void (^)(OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAnalyticsTestandtargetApiUrl != nil) {
        queryParams[@"cq.analytics.testandtarget.api.url"] = cqAnalyticsTestandtargetApiUrl;
    }
    if (cqAnalyticsTestandtargetTimeout != nil) {
        queryParams[@"cq.analytics.testandtarget.timeout"] = cqAnalyticsTestandtargetTimeout;
    }
    if (cqAnalyticsTestandtargetSockettimeout != nil) {
        queryParams[@"cq.analytics.testandtarget.sockettimeout"] = cqAnalyticsTestandtargetSockettimeout;
    }
    if (cqAnalyticsTestandtargetRecommendationsUrlReplace != nil) {
        queryParams[@"cq.analytics.testandtarget.recommendations.url.replace"] = cqAnalyticsTestandtargetRecommendationsUrlReplace;
    }
    if (cqAnalyticsTestandtargetRecommendationsUrlReplacewith != nil) {
        queryParams[@"cq.analytics.testandtarget.recommendations.url.replacewith"] = cqAnalyticsTestandtargetRecommendationsUrlReplacewith;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cugExemptedPrincipals  (optional)
///
///  @param cugEnabled  (optional)
///
///  @param cugPrincipalsRegex  (optional)
///
///  @param cugPrincipalsReplacement  (optional)
///
///  @returns OAIComDayCqAuthImplCugCugSupportImplInfo*
///
-(NSURLSessionTask*) comDayCqAuthImplCugCugSupportImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cugExemptedPrincipals: (NSArray<NSString*>*) cugExemptedPrincipals
    cugEnabled: (NSNumber*) cugEnabled
    cugPrincipalsRegex: (NSString*) cugPrincipalsRegex
    cugPrincipalsReplacement: (NSString*) cugPrincipalsReplacement
    completionHandler: (void (^)(OAIComDayCqAuthImplCugCugSupportImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cugExemptedPrincipals != nil) {
        queryParams[@"cug.exempted.principals"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cugExemptedPrincipals format: @"multi"];
    }
    if (cugEnabled != nil) {
        queryParams[@"cug.enabled"] = [cugEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cugPrincipalsRegex != nil) {
        queryParams[@"cug.principals.regex"] = cugPrincipalsRegex;
    }
    if (cugPrincipalsReplacement != nil) {
        queryParams[@"cug.principals.replacement"] = cugPrincipalsReplacement;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAuthImplCugCugSupportImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAuthImplCugCugSupportImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param authLoginselectorMappings  (optional)
///
///  @param authLoginselectorChangepwMappings  (optional)
///
///  @param authLoginselectorDefaultloginpage  (optional)
///
///  @param authLoginselectorDefaultchangepwpage  (optional)
///
///  @param authLoginselectorHandle  (optional)
///
///  @param authLoginselectorHandleAllExtensions  (optional)
///
///  @returns OAIComDayCqAuthImplLoginSelectorHandlerInfo*
///
-(NSURLSessionTask*) comDayCqAuthImplLoginSelectorHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    serviceRanking: (NSNumber*) serviceRanking
    authLoginselectorMappings: (NSArray<NSString*>*) authLoginselectorMappings
    authLoginselectorChangepwMappings: (NSArray<NSString*>*) authLoginselectorChangepwMappings
    authLoginselectorDefaultloginpage: (NSString*) authLoginselectorDefaultloginpage
    authLoginselectorDefaultchangepwpage: (NSString*) authLoginselectorDefaultchangepwpage
    authLoginselectorHandle: (NSArray<NSString*>*) authLoginselectorHandle
    authLoginselectorHandleAllExtensions: (NSNumber*) authLoginselectorHandleAllExtensions
    completionHandler: (void (^)(OAIComDayCqAuthImplLoginSelectorHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (authLoginselectorMappings != nil) {
        queryParams[@"auth.loginselector.mappings"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authLoginselectorMappings format: @"multi"];
    }
    if (authLoginselectorChangepwMappings != nil) {
        queryParams[@"auth.loginselector.changepw.mappings"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authLoginselectorChangepwMappings format: @"multi"];
    }
    if (authLoginselectorDefaultloginpage != nil) {
        queryParams[@"auth.loginselector.defaultloginpage"] = authLoginselectorDefaultloginpage;
    }
    if (authLoginselectorDefaultchangepwpage != nil) {
        queryParams[@"auth.loginselector.defaultchangepwpage"] = authLoginselectorDefaultchangepwpage;
    }
    if (authLoginselectorHandle != nil) {
        queryParams[@"auth.loginselector.handle"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authLoginselectorHandle format: @"multi"];
    }
    if (authLoginselectorHandleAllExtensions != nil) {
        queryParams[@"auth.loginselector.handle.all.extensions"] = [authLoginselectorHandleAllExtensions isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqAuthImplLoginSelectorHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqAuthImplLoginSelectorHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param externalizerDomains  (optional)
///
///  @param externalizerHost  (optional)
///
///  @param externalizerContextpath  (optional)
///
///  @param externalizerEncodedpath  (optional)
///
///  @returns OAIComDayCqCommonsImplExternalizerImplInfo*
///
-(NSURLSessionTask*) comDayCqCommonsImplExternalizerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    externalizerDomains: (NSArray<NSString*>*) externalizerDomains
    externalizerHost: (NSString*) externalizerHost
    externalizerContextpath: (NSString*) externalizerContextpath
    externalizerEncodedpath: (NSNumber*) externalizerEncodedpath
    completionHandler: (void (^)(OAIComDayCqCommonsImplExternalizerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (externalizerDomains != nil) {
        queryParams[@"externalizer.domains"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: externalizerDomains format: @"multi"];
    }
    if (externalizerHost != nil) {
        queryParams[@"externalizer.host"] = externalizerHost;
    }
    if (externalizerContextpath != nil) {
        queryParams[@"externalizer.contextpath"] = externalizerContextpath;
    }
    if (externalizerEncodedpath != nil) {
        queryParams[@"externalizer.encodedpath"] = [externalizerEncodedpath isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqCommonsImplExternalizerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqCommonsImplExternalizerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param rootmappingTarget  (optional)
///
///  @returns OAIComDayCqCommonsServletsRootMappingServletInfo*
///
-(NSURLSessionTask*) comDayCqCommonsServletsRootMappingServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    rootmappingTarget: (NSString*) rootmappingTarget
    completionHandler: (void (^)(OAIComDayCqCommonsServletsRootMappingServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (rootmappingTarget != nil) {
        queryParams[@"rootmapping.target"] = rootmappingTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqCommonsServletsRootMappingServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqCommonsServletsRootMappingServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param codeupgradetasks  (optional)
///
///  @param codeupgradetaskfilters  (optional)
///
///  @returns OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo*
///
-(NSURLSessionTask*) comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    codeupgradetasks: (NSArray<NSString*>*) codeupgradetasks
    codeupgradetaskfilters: (NSArray<NSString*>*) codeupgradetaskfilters
    completionHandler: (void (^)(OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (codeupgradetasks != nil) {
        queryParams[@"codeupgradetasks"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: codeupgradetasks format: @"multi"];
    }
    if (codeupgradetaskfilters != nil) {
        queryParams[@"codeupgradetaskfilters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: codeupgradetaskfilters format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param upgradeTaskIgnoreList  (optional)
///
///  @returns OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo*
///
-(NSURLSessionTask*) comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    upgradeTaskIgnoreList: (NSArray<NSString*>*) upgradeTaskIgnoreList
    completionHandler: (void (^)(OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (upgradeTaskIgnoreList != nil) {
        queryParams[@"upgradeTaskIgnoreList"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: upgradeTaskIgnoreList format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param effectiveBundleListPath  (optional)
///
///  @returns OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo*
///
-(NSURLSessionTask*) comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    effectiveBundleListPath: (NSString*) effectiveBundleListPath
    completionHandler: (void (^)(OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (effectiveBundleListPath != nil) {
        queryParams[@"effectiveBundleListPath"] = effectiveBundleListPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param contentsyncFallbackAuthorizable  (optional)
///
///  @param contentsyncFallbackUpdateuser  (optional)
///
///  @returns OAIComDayCqContentsyncImplContentSyncManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqContentsyncImplContentSyncManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    contentsyncFallbackAuthorizable: (NSString*) contentsyncFallbackAuthorizable
    contentsyncFallbackUpdateuser: (NSString*) contentsyncFallbackUpdateuser
    completionHandler: (void (^)(OAIComDayCqContentsyncImplContentSyncManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (contentsyncFallbackAuthorizable != nil) {
        queryParams[@"contentsync.fallback.authorizable"] = contentsyncFallbackAuthorizable;
    }
    if (contentsyncFallbackUpdateuser != nil) {
        queryParams[@"contentsync.fallback.updateuser"] = contentsyncFallbackUpdateuser;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqContentsyncImplContentSyncManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqContentsyncImplContentSyncManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param largeFileThreshold  (optional)
///
///  @param largeCommentThreshold  (optional)
///
///  @param cqDamEnableExtMetaExtraction  (optional)
///
///  @returns OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCommonsHandlerStandardImageHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    largeFileThreshold: (NSNumber*) largeFileThreshold
    largeCommentThreshold: (NSNumber*) largeCommentThreshold
    cqDamEnableExtMetaExtraction: (NSNumber*) cqDamEnableExtMetaExtraction
    completionHandler: (void (^)(OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (largeFileThreshold != nil) {
        queryParams[@"large_file_threshold"] = largeFileThreshold;
    }
    if (largeCommentThreshold != nil) {
        queryParams[@"large_comment_threshold"] = largeCommentThreshold;
    }
    if (cqDamEnableExtMetaExtraction != nil) {
        queryParams[@"cq.dam.enable.ext.meta.extraction"] = [cqDamEnableExtMetaExtraction isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCommonsHandlerStandardImageHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param xmpFilterApplyWhitelist  (optional)
///
///  @param xmpFilterWhitelist  (optional)
///
///  @param xmpFilterApplyBlacklist  (optional)
///
///  @param xmpFilterBlacklist  (optional)
///
///  @returns OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo*
///
-(NSURLSessionTask*) comDayCqDamCommonsMetadataXmpFilterBlackWhiteWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    xmpFilterApplyWhitelist: (NSNumber*) xmpFilterApplyWhitelist
    xmpFilterWhitelist: (NSArray<NSString*>*) xmpFilterWhitelist
    xmpFilterApplyBlacklist: (NSNumber*) xmpFilterApplyBlacklist
    xmpFilterBlacklist: (NSArray<NSString*>*) xmpFilterBlacklist
    completionHandler: (void (^)(OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (xmpFilterApplyWhitelist != nil) {
        queryParams[@"xmp.filter.apply_whitelist"] = [xmpFilterApplyWhitelist isEqual:@(YES)] ? @"true" : @"false";
    }
    if (xmpFilterWhitelist != nil) {
        queryParams[@"xmp.filter.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: xmpFilterWhitelist format: @"multi"];
    }
    if (xmpFilterApplyBlacklist != nil) {
        queryParams[@"xmp.filter.apply_blacklist"] = [xmpFilterApplyBlacklist isEqual:@(YES)] ? @"true" : @"false";
    }
    if (xmpFilterBlacklist != nil) {
        queryParams[@"xmp.filter.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: xmpFilterBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param largeFileMin  (optional)
///
///  @param cacheApply  (optional)
///
///  @param mimeTypes  (optional)
///
///  @returns OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCommonsUtilImplAssetCacheImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    largeFileMin: (NSNumber*) largeFileMin
    cacheApply: (NSNumber*) cacheApply
    mimeTypes: (NSArray<NSString*>*) mimeTypes
    completionHandler: (void (^)(OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (largeFileMin != nil) {
        queryParams[@"large.file.min"] = largeFileMin;
    }
    if (cacheApply != nil) {
        queryParams[@"cache.apply"] = [cacheApply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (mimeTypes != nil) {
        queryParams[@"mime.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: mimeTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCommonsUtilImplAssetCacheImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamConfigAnnotationPdfDocumentWidth  (optional)
///
///  @param cqDamConfigAnnotationPdfDocumentHeight  (optional)
///
///  @param cqDamConfigAnnotationPdfDocumentPaddingHorizontal  (optional)
///
///  @param cqDamConfigAnnotationPdfDocumentPaddingVertical  (optional)
///
///  @param cqDamConfigAnnotationPdfFontSize  (optional)
///
///  @param cqDamConfigAnnotationPdfFontColor  (optional)
///
///  @param cqDamConfigAnnotationPdfFontFamily  (optional)
///
///  @param cqDamConfigAnnotationPdfFontLight  (optional)
///
///  @param cqDamConfigAnnotationPdfMarginTextImage  (optional)
///
///  @param cqDamConfigAnnotationPdfMinImageHeight  (optional)
///
///  @param cqDamConfigAnnotationPdfReviewStatusWidth  (optional)
///
///  @param cqDamConfigAnnotationPdfReviewStatusColorApproved  (optional)
///
///  @param cqDamConfigAnnotationPdfReviewStatusColorRejected  (optional)
///
///  @param cqDamConfigAnnotationPdfReviewStatusColorChangesRequested  (optional)
///
///  @param cqDamConfigAnnotationPdfAnnotationMarkerWidth  (optional)
///
///  @param cqDamConfigAnnotationPdfAssetMinheight  (optional)
///
///  @returns OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamConfigAnnotationPdfDocumentWidth: (NSNumber*) cqDamConfigAnnotationPdfDocumentWidth
    cqDamConfigAnnotationPdfDocumentHeight: (NSNumber*) cqDamConfigAnnotationPdfDocumentHeight
    cqDamConfigAnnotationPdfDocumentPaddingHorizontal: (NSNumber*) cqDamConfigAnnotationPdfDocumentPaddingHorizontal
    cqDamConfigAnnotationPdfDocumentPaddingVertical: (NSNumber*) cqDamConfigAnnotationPdfDocumentPaddingVertical
    cqDamConfigAnnotationPdfFontSize: (NSNumber*) cqDamConfigAnnotationPdfFontSize
    cqDamConfigAnnotationPdfFontColor: (NSString*) cqDamConfigAnnotationPdfFontColor
    cqDamConfigAnnotationPdfFontFamily: (NSString*) cqDamConfigAnnotationPdfFontFamily
    cqDamConfigAnnotationPdfFontLight: (NSString*) cqDamConfigAnnotationPdfFontLight
    cqDamConfigAnnotationPdfMarginTextImage: (NSNumber*) cqDamConfigAnnotationPdfMarginTextImage
    cqDamConfigAnnotationPdfMinImageHeight: (NSNumber*) cqDamConfigAnnotationPdfMinImageHeight
    cqDamConfigAnnotationPdfReviewStatusWidth: (NSNumber*) cqDamConfigAnnotationPdfReviewStatusWidth
    cqDamConfigAnnotationPdfReviewStatusColorApproved: (NSString*) cqDamConfigAnnotationPdfReviewStatusColorApproved
    cqDamConfigAnnotationPdfReviewStatusColorRejected: (NSString*) cqDamConfigAnnotationPdfReviewStatusColorRejected
    cqDamConfigAnnotationPdfReviewStatusColorChangesRequested: (NSString*) cqDamConfigAnnotationPdfReviewStatusColorChangesRequested
    cqDamConfigAnnotationPdfAnnotationMarkerWidth: (NSNumber*) cqDamConfigAnnotationPdfAnnotationMarkerWidth
    cqDamConfigAnnotationPdfAssetMinheight: (NSNumber*) cqDamConfigAnnotationPdfAssetMinheight
    completionHandler: (void (^)(OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamConfigAnnotationPdfDocumentWidth != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.document.width"] = cqDamConfigAnnotationPdfDocumentWidth;
    }
    if (cqDamConfigAnnotationPdfDocumentHeight != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.document.height"] = cqDamConfigAnnotationPdfDocumentHeight;
    }
    if (cqDamConfigAnnotationPdfDocumentPaddingHorizontal != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.document.padding.horizontal"] = cqDamConfigAnnotationPdfDocumentPaddingHorizontal;
    }
    if (cqDamConfigAnnotationPdfDocumentPaddingVertical != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.document.padding.vertical"] = cqDamConfigAnnotationPdfDocumentPaddingVertical;
    }
    if (cqDamConfigAnnotationPdfFontSize != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.font.size"] = cqDamConfigAnnotationPdfFontSize;
    }
    if (cqDamConfigAnnotationPdfFontColor != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.font.color"] = cqDamConfigAnnotationPdfFontColor;
    }
    if (cqDamConfigAnnotationPdfFontFamily != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.font.family"] = cqDamConfigAnnotationPdfFontFamily;
    }
    if (cqDamConfigAnnotationPdfFontLight != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.font.light"] = cqDamConfigAnnotationPdfFontLight;
    }
    if (cqDamConfigAnnotationPdfMarginTextImage != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.marginTextImage"] = cqDamConfigAnnotationPdfMarginTextImage;
    }
    if (cqDamConfigAnnotationPdfMinImageHeight != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.minImageHeight"] = cqDamConfigAnnotationPdfMinImageHeight;
    }
    if (cqDamConfigAnnotationPdfReviewStatusWidth != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.reviewStatus.width"] = cqDamConfigAnnotationPdfReviewStatusWidth;
    }
    if (cqDamConfigAnnotationPdfReviewStatusColorApproved != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.reviewStatus.color.approved"] = cqDamConfigAnnotationPdfReviewStatusColorApproved;
    }
    if (cqDamConfigAnnotationPdfReviewStatusColorRejected != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.reviewStatus.color.rejected"] = cqDamConfigAnnotationPdfReviewStatusColorRejected;
    }
    if (cqDamConfigAnnotationPdfReviewStatusColorChangesRequested != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested"] = cqDamConfigAnnotationPdfReviewStatusColorChangesRequested;
    }
    if (cqDamConfigAnnotationPdfAnnotationMarkerWidth != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.annotationMarker.width"] = cqDamConfigAnnotationPdfAnnotationMarkerWidth;
    }
    if (cqDamConfigAnnotationPdfAssetMinheight != nil) {
        queryParams[@"cq.dam.config.annotation.pdf.asset.minheight"] = cqDamConfigAnnotationPdfAssetMinheight;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplAssetMoveListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplAssetMoveListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplAssetMoveListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplAssetMoveListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplAssetMoveListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isEnabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplAssethomeAssetHomePageConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isEnabled: (NSNumber*) isEnabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isEnabled != nil) {
        queryParams[@"isEnabled"] = [isEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamAdhocAssetSharePrezipMaxcontentsize  (optional)
///
///  @returns OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamAdhocAssetSharePrezipMaxcontentsize: (NSNumber*) cqDamAdhocAssetSharePrezipMaxcontentsize
    completionHandler: (void (^)(OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamAdhocAssetSharePrezipMaxcontentsize != nil) {
        queryParams[@"cq.dam.adhoc.asset.share.prezip.maxcontentsize"] = cqDamAdhocAssetSharePrezipMaxcontentsize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamImageCacheMaxMemory  (optional)
///
///  @param cqDamImageCacheMaxAge  (optional)
///
///  @param cqDamImageCacheMaxDimension  (optional)
///
///  @returns OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplCacheCQBufferedImageCacheWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamImageCacheMaxMemory: (NSNumber*) cqDamImageCacheMaxMemory
    cqDamImageCacheMaxAge: (NSNumber*) cqDamImageCacheMaxAge
    cqDamImageCacheMaxDimension: (NSString*) cqDamImageCacheMaxDimension
    completionHandler: (void (^)(OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamImageCacheMaxMemory != nil) {
        queryParams[@"cq.dam.image.cache.max.memory"] = cqDamImageCacheMaxMemory;
    }
    if (cqDamImageCacheMaxAge != nil) {
        queryParams[@"cq.dam.image.cache.max.age"] = cqDamImageCacheMaxAge;
    }
    if (cqDamImageCacheMaxDimension != nil) {
        queryParams[@"cq.dam.image.cache.max.dimension"] = cqDamImageCacheMaxDimension;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplCacheCQBufferedImageCacheInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param changeeventlistenerObservedPaths  (optional)
///
///  @returns OAIComDayCqDamCoreImplDamChangeEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplDamChangeEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    changeeventlistenerObservedPaths: (NSArray<NSString*>*) changeeventlistenerObservedPaths
    completionHandler: (void (^)(OAIComDayCqDamCoreImplDamChangeEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (changeeventlistenerObservedPaths != nil) {
        queryParams[@"changeeventlistener.observed.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: changeeventlistenerObservedPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplDamChangeEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplDamChangeEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param maxSavedActivities  (optional)
///
///  @param saveInterval  (optional)
///
///  @param enableActivityPurge  (optional)
///
///  @param eventTypes  (optional)
///
///  @returns OAIComDayCqDamCoreImplDamEventPurgeServiceInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplDamEventPurgeServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    maxSavedActivities: (NSNumber*) maxSavedActivities
    saveInterval: (NSNumber*) saveInterval
    enableActivityPurge: (NSNumber*) enableActivityPurge
    eventTypes: (NSString*) eventTypes
    completionHandler: (void (^)(OAIComDayCqDamCoreImplDamEventPurgeServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (maxSavedActivities != nil) {
        queryParams[@"maxSavedActivities"] = maxSavedActivities;
    }
    if (saveInterval != nil) {
        queryParams[@"saveInterval"] = saveInterval;
    }
    if (enableActivityPurge != nil) {
        queryParams[@"enableActivityPurge"] = [enableActivityPurge isEqual:@(YES)] ? @"true" : @"false";
    }
    if (eventTypes != nil) {
        queryParams[@"eventTypes"] = eventTypes;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplDamEventPurgeServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplDamEventPurgeServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param eventQueueLength  (optional)
///
///  @param eventrecorderEnabled  (optional)
///
///  @param eventrecorderBlacklist  (optional)
///
///  @param eventrecorderEventtypes  (optional)
///
///  @returns OAIComDayCqDamCoreImplDamEventRecorderImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplDamEventRecorderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    eventQueueLength: (NSNumber*) eventQueueLength
    eventrecorderEnabled: (NSNumber*) eventrecorderEnabled
    eventrecorderBlacklist: (NSArray<NSString*>*) eventrecorderBlacklist
    eventrecorderEventtypes: (NSString*) eventrecorderEventtypes
    completionHandler: (void (^)(OAIComDayCqDamCoreImplDamEventRecorderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (eventQueueLength != nil) {
        queryParams[@"event.queue.length"] = eventQueueLength;
    }
    if (eventrecorderEnabled != nil) {
        queryParams[@"eventrecorder.enabled"] = [eventrecorderEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (eventrecorderBlacklist != nil) {
        queryParams[@"eventrecorder.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: eventrecorderBlacklist format: @"multi"];
    }
    if (eventrecorderEventtypes != nil) {
        queryParams[@"eventrecorder.eventtypes"] = eventrecorderEventtypes;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplDamEventRecorderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplDamEventRecorderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplEventDamEventAuditListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplEventDamEventAuditListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamExpiryNotificationSchedulerIstimebased  (optional)
///
///  @param cqDamExpiryNotificationSchedulerTimebasedRule  (optional)
///
///  @param cqDamExpiryNotificationSchedulerPeriodRule  (optional)
///
///  @param sendEmail  (optional)
///
///  @param assetExpiredLimit  (optional)
///
///  @param priorNotificationSeconds  (optional)
///
///  @param cqDamExpiryNotificationUrlProtocol  (optional)
///
///  @returns OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplExpiryNotificationJobImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamExpiryNotificationSchedulerIstimebased: (NSNumber*) cqDamExpiryNotificationSchedulerIstimebased
    cqDamExpiryNotificationSchedulerTimebasedRule: (NSString*) cqDamExpiryNotificationSchedulerTimebasedRule
    cqDamExpiryNotificationSchedulerPeriodRule: (NSNumber*) cqDamExpiryNotificationSchedulerPeriodRule
    sendEmail: (NSNumber*) sendEmail
    assetExpiredLimit: (NSNumber*) assetExpiredLimit
    priorNotificationSeconds: (NSNumber*) priorNotificationSeconds
    cqDamExpiryNotificationUrlProtocol: (NSString*) cqDamExpiryNotificationUrlProtocol
    completionHandler: (void (^)(OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamExpiryNotificationSchedulerIstimebased != nil) {
        queryParams[@"cq.dam.expiry.notification.scheduler.istimebased"] = [cqDamExpiryNotificationSchedulerIstimebased isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamExpiryNotificationSchedulerTimebasedRule != nil) {
        queryParams[@"cq.dam.expiry.notification.scheduler.timebased.rule"] = cqDamExpiryNotificationSchedulerTimebasedRule;
    }
    if (cqDamExpiryNotificationSchedulerPeriodRule != nil) {
        queryParams[@"cq.dam.expiry.notification.scheduler.period.rule"] = cqDamExpiryNotificationSchedulerPeriodRule;
    }
    if (sendEmail != nil) {
        queryParams[@"send_email"] = [sendEmail isEqual:@(YES)] ? @"true" : @"false";
    }
    if (assetExpiredLimit != nil) {
        queryParams[@"asset_expired_limit"] = assetExpiredLimit;
    }
    if (priorNotificationSeconds != nil) {
        queryParams[@"prior_notification_seconds"] = priorNotificationSeconds;
    }
    if (cqDamExpiryNotificationUrlProtocol != nil) {
        queryParams[@"cq.dam.expiry.notification.url.protocol"] = cqDamExpiryNotificationUrlProtocol;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplExpiryNotificationJobImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param isEnabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    isEnabled: (NSNumber*) isEnabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (isEnabled != nil) {
        queryParams[@"isEnabled"] = [isEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param skipBufferedcache  (optional)
///
///  @returns OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplGfxCommonsGfxRendererWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    skipBufferedcache: (NSNumber*) skipBufferedcache
    completionHandler: (void (^)(OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (skipBufferedcache != nil) {
        queryParams[@"skip.bufferedcache"] = [skipBufferedcache isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplGfxCommonsGfxRendererInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mimetype  (optional)
///
///  @returns OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplHandlerEPSFormatHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mimetype: (NSString*) mimetype
    completionHandler: (void (^)(OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mimetype != nil) {
        queryParams[@"mimetype"] = mimetype;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplHandlerEPSFormatHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mimetype  (optional)
///
///  @returns OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplHandlerIndesignFormatHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mimetype: (NSArray<NSString*>*) mimetype
    completionHandler: (void (^)(OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mimetype != nil) {
        queryParams[@"mimetype"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: mimetype format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamEnableExtMetaExtraction  (optional)
///
///  @param largeFileThreshold  (optional)
///
///  @param largeCommentThreshold  (optional)
///
///  @returns OAIComDayCqDamCoreImplHandlerJpegHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplHandlerJpegHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamEnableExtMetaExtraction: (NSNumber*) cqDamEnableExtMetaExtraction
    largeFileThreshold: (NSNumber*) largeFileThreshold
    largeCommentThreshold: (NSNumber*) largeCommentThreshold
    completionHandler: (void (^)(OAIComDayCqDamCoreImplHandlerJpegHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamEnableExtMetaExtraction != nil) {
        queryParams[@"cq.dam.enable.ext.meta.extraction"] = [cqDamEnableExtMetaExtraction isEqual:@(YES)] ? @"true" : @"false";
    }
    if (largeFileThreshold != nil) {
        queryParams[@"large_file_threshold"] = largeFileThreshold;
    }
    if (largeCommentThreshold != nil) {
        queryParams[@"large_comment_threshold"] = largeCommentThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplHandlerJpegHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplHandlerJpegHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param xmphandlerCqFormats  (optional)
///
///  @returns OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplHandlerXmpNCommXMPHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    xmphandlerCqFormats: (NSArray<NSString*>*) xmphandlerCqFormats
    completionHandler: (void (^)(OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (xmphandlerCqFormats != nil) {
        queryParams[@"xmphandler.cq.formats"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: xmphandlerCqFormats format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jmxObjectname  (optional)
///
///  @param propertyMeasureEnabled  (optional)
///
///  @param propertyName  (optional)
///
///  @param propertyMaxWaitMs  (optional)
///
///  @param propertyMaxRate  (optional)
///
///  @param fulltextMeasureEnabled  (optional)
///
///  @param fulltextName  (optional)
///
///  @param fulltextMaxWaitMs  (optional)
///
///  @param fulltextMaxRate  (optional)
///
///  @returns OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplJmxAssetIndexUpdateMonitorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jmxObjectname: (NSString*) jmxObjectname
    propertyMeasureEnabled: (NSNumber*) propertyMeasureEnabled
    propertyName: (NSString*) propertyName
    propertyMaxWaitMs: (NSNumber*) propertyMaxWaitMs
    propertyMaxRate: (NSNumber*) propertyMaxRate
    fulltextMeasureEnabled: (NSNumber*) fulltextMeasureEnabled
    fulltextName: (NSString*) fulltextName
    fulltextMaxWaitMs: (NSNumber*) fulltextMaxWaitMs
    fulltextMaxRate: (NSNumber*) fulltextMaxRate
    completionHandler: (void (^)(OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jmxObjectname != nil) {
        queryParams[@"jmx.objectname"] = jmxObjectname;
    }
    if (propertyMeasureEnabled != nil) {
        queryParams[@"property.measure.enabled"] = [propertyMeasureEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (propertyName != nil) {
        queryParams[@"property.name"] = propertyName;
    }
    if (propertyMaxWaitMs != nil) {
        queryParams[@"property.max.wait.ms"] = propertyMaxWaitMs;
    }
    if (propertyMaxRate != nil) {
        queryParams[@"property.max.rate"] = propertyMaxRate;
    }
    if (fulltextMeasureEnabled != nil) {
        queryParams[@"fulltext.measure.enabled"] = [fulltextMeasureEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (fulltextName != nil) {
        queryParams[@"fulltext.name"] = fulltextName;
    }
    if (fulltextMaxWaitMs != nil) {
        queryParams[@"fulltext.max.wait.ms"] = fulltextMaxWaitMs;
    }
    if (fulltextMaxRate != nil) {
        queryParams[@"fulltext.max.rate"] = fulltextMaxRate;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jmxObjectname  (optional)
///
///  @returns OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplJmxAssetMigrationMBeanImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jmxObjectname: (NSString*) jmxObjectname
    completionHandler: (void (^)(OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jmxObjectname != nil) {
        queryParams[@"jmx.objectname"] = jmxObjectname;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jmxObjectname  (optional)
///
///  @param active  (optional)
///
///  @returns OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplJmxAssetUpdateMonitorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jmxObjectname: (NSString*) jmxObjectname
    active: (NSNumber*) active
    completionHandler: (void (^)(OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jmxObjectname != nil) {
        queryParams[@"jmx.objectname"] = jmxObjectname;
    }
    if (active != nil) {
        queryParams[@"active"] = [active isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param operation  (optional)
///
///  @param emailEnabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    operation: (NSString*) operation
    emailEnabled: (NSNumber*) emailEnabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (operation != nil) {
        queryParams[@"operation"] = operation;
    }
    if (emailEnabled != nil) {
        queryParams[@"emailEnabled"] = [emailEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param operation  (optional)
///
///  @param operationIcon  (optional)
///
///  @param topicName  (optional)
///
///  @param emailEnabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    operation: (NSString*) operation
    operationIcon: (NSString*) operationIcon
    topicName: (NSString*) topicName
    emailEnabled: (NSNumber*) emailEnabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (operation != nil) {
        queryParams[@"operation"] = operation;
    }
    if (operationIcon != nil) {
        queryParams[@"operationIcon"] = operationIcon;
    }
    if (topicName != nil) {
        queryParams[@"topicName"] = topicName;
    }
    if (emailEnabled != nil) {
        queryParams[@"emailEnabled"] = [emailEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletPaths  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param cqDamEnableAnonymous  (optional)
///
///  @returns OAIComDayCqDamCoreImplLightboxLightboxServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplLightboxLightboxServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletPaths: (NSString*) slingServletPaths
    slingServletMethods: (NSArray<NSString*>*) slingServletMethods
    cqDamEnableAnonymous: (NSNumber*) cqDamEnableAnonymous
    completionHandler: (void (^)(OAIComDayCqDamCoreImplLightboxLightboxServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletPaths != nil) {
        queryParams[@"sling.servlet.paths"] = slingServletPaths;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletMethods format: @"multi"];
    }
    if (cqDamEnableAnonymous != nil) {
        queryParams[@"cq.dam.enable.anonymous"] = [cqDamEnableAnonymous isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplLightboxLightboxServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplLightboxLightboxServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param granitedata  (optional)
///
///  @returns OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplMetadataEditorSelectComponentHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    granitedata: (NSArray<NSString*>*) granitedata
    completionHandler: (void (^)(OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (granitedata != nil) {
        queryParams[@"granite:data"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: granitedata format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamAllowAllMime  (optional)
///
///  @param cqDamAllowedAssetMimes  (optional)
///
///  @returns OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamAllowAllMime: (NSNumber*) cqDamAllowAllMime
    cqDamAllowedAssetMimes: (NSArray<NSString*>*) cqDamAllowedAssetMimes
    completionHandler: (void (^)(OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamAllowAllMime != nil) {
        queryParams[@"cq.dam.allow.all.mime"] = [cqDamAllowAllMime isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamAllowedAssetMimes != nil) {
        queryParams[@"cq.dam.allowed.asset.mimes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamAllowedAssetMimes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamDetectAssetMimeFromContent  (optional)
///
///  @returns OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamDetectAssetMimeFromContent: (NSNumber*) cqDamDetectAssetMimeFromContent
    completionHandler: (void (^)(OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamDetectAssetMimeFromContent != nil) {
        queryParams[@"cq.dam.detect.asset.mime.from.content"] = [cqDamDetectAssetMimeFromContent isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamMissingmetadataNotificationSchedulerIstimebased  (optional)
///
///  @param cqDamMissingmetadataNotificationSchedulerTimebasedRule  (optional)
///
///  @param cqDamMissingmetadataNotificationSchedulerPeriodRule  (optional)
///
///  @param cqDamMissingmetadataNotificationRecipient  (optional)
///
///  @returns OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplMissingMetadataNotificationJobWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamMissingmetadataNotificationSchedulerIstimebased: (NSNumber*) cqDamMissingmetadataNotificationSchedulerIstimebased
    cqDamMissingmetadataNotificationSchedulerTimebasedRule: (NSString*) cqDamMissingmetadataNotificationSchedulerTimebasedRule
    cqDamMissingmetadataNotificationSchedulerPeriodRule: (NSNumber*) cqDamMissingmetadataNotificationSchedulerPeriodRule
    cqDamMissingmetadataNotificationRecipient: (NSString*) cqDamMissingmetadataNotificationRecipient
    completionHandler: (void (^)(OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamMissingmetadataNotificationSchedulerIstimebased != nil) {
        queryParams[@"cq.dam.missingmetadata.notification.scheduler.istimebased"] = [cqDamMissingmetadataNotificationSchedulerIstimebased isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamMissingmetadataNotificationSchedulerTimebasedRule != nil) {
        queryParams[@"cq.dam.missingmetadata.notification.scheduler.timebased.rule"] = cqDamMissingmetadataNotificationSchedulerTimebasedRule;
    }
    if (cqDamMissingmetadataNotificationSchedulerPeriodRule != nil) {
        queryParams[@"cq.dam.missingmetadata.notification.scheduler.period.rule"] = cqDamMissingmetadataNotificationSchedulerPeriodRule;
    }
    if (cqDamMissingmetadataNotificationRecipient != nil) {
        queryParams[@"cq.dam.missingmetadata.notification.recipient"] = cqDamMissingmetadataNotificationRecipient;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplMissingMetadataNotificationJobInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param notifyOnComplete  (optional)
///
///  @returns OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    notifyOnComplete: (NSNumber*) notifyOnComplete
    completionHandler: (void (^)(OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (notifyOnComplete != nil) {
        queryParams[@"Notify on Complete"] = [notifyOnComplete isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mimeTypes  (optional)
///
///  @param maxExtract  (optional)
///
///  @returns OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplProcessTextExtractionProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mimeTypes: (NSArray<NSString*>*) mimeTypes
    maxExtract: (NSNumber*) maxExtract
    completionHandler: (void (^)(OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mimeTypes != nil) {
        queryParams[@"mimeTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: mimeTypes format: @"multi"];
    }
    if (maxExtract != nil) {
        queryParams[@"maxExtract"] = maxExtract;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplProcessTextExtractionProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param xmpPropagate  (optional)
///
///  @param xmpExcludes  (optional)
///
///  @returns OAIComDayCqDamCoreImplRenditionMakerImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplRenditionMakerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    xmpPropagate: (NSNumber*) xmpPropagate
    xmpExcludes: (NSArray<NSString*>*) xmpExcludes
    completionHandler: (void (^)(OAIComDayCqDamCoreImplRenditionMakerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (xmpPropagate != nil) {
        queryParams[@"xmp.propagate"] = [xmpPropagate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (xmpExcludes != nil) {
        queryParams[@"xmp.excludes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: xmpExcludes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplRenditionMakerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplRenditionMakerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queryBatchSize  (optional)
///
///  @returns OAIComDayCqDamCoreImplReportsReportExportServiceInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplReportsReportExportServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queryBatchSize: (NSNumber*) queryBatchSize
    completionHandler: (void (^)(OAIComDayCqDamCoreImplReportsReportExportServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queryBatchSize != nil) {
        queryParams[@"queryBatchSize"] = queryBatchSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplReportsReportExportServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplReportsReportExportServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param maxSavedReports  (optional)
///
///  @param timeDuration  (optional)
///
///  @param enableReportPurge  (optional)
///
///  @returns OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplReportsReportPurgeServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    maxSavedReports: (NSNumber*) maxSavedReports
    timeDuration: (NSNumber*) timeDuration
    enableReportPurge: (NSNumber*) enableReportPurge
    completionHandler: (void (^)(OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (maxSavedReports != nil) {
        queryParams[@"maxSavedReports"] = maxSavedReports;
    }
    if (timeDuration != nil) {
        queryParams[@"timeDuration"] = timeDuration;
    }
    if (enableReportPurge != nil) {
        queryParams[@"enableReportPurge"] = [enableReportPurge isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplReportsReportPurgeServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletAssetDownloadServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletAssetDownloadServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletAssetDownloadServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletAssetDownloadServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletAssetDownloadServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamBatchStatusMaxassets  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletAssetStatusServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletAssetStatusServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamBatchStatusMaxassets: (NSNumber*) cqDamBatchStatusMaxassets
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletAssetStatusServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamBatchStatusMaxassets != nil) {
        queryParams[@"cq.dam.batch.status.maxassets"] = cqDamBatchStatusMaxassets;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletAssetStatusServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletAssetStatusServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamBatchIndesignMaxassets  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletAssetXMPSearchServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamBatchIndesignMaxassets: (NSNumber*) cqDamBatchIndesignMaxassets
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamBatchIndesignMaxassets != nil) {
        queryParams[@"cq.dam.batch.indesign.maxassets"] = cqDamBatchIndesignMaxassets;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletAssetXMPSearchServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamBatchMetadataAssetDefault  (optional)
///
///  @param cqDamBatchMetadataCollectionDefault  (optional)
///
///  @param cqDamBatchMetadataMaxresources  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletBatchMetadataServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletBatchMetadataServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamBatchMetadataAssetDefault: (NSArray<NSString*>*) cqDamBatchMetadataAssetDefault
    cqDamBatchMetadataCollectionDefault: (NSArray<NSString*>*) cqDamBatchMetadataCollectionDefault
    cqDamBatchMetadataMaxresources: (NSNumber*) cqDamBatchMetadataMaxresources
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletBatchMetadataServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamBatchMetadataAssetDefault != nil) {
        queryParams[@"cq.dam.batch.metadata.asset.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamBatchMetadataAssetDefault format: @"multi"];
    }
    if (cqDamBatchMetadataCollectionDefault != nil) {
        queryParams[@"cq.dam.batch.metadata.collection.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamBatchMetadataCollectionDefault format: @"multi"];
    }
    if (cqDamBatchMetadataMaxresources != nil) {
        queryParams[@"cq.dam.batch.metadata.maxresources"] = cqDamBatchMetadataMaxresources;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletBatchMetadataServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletBatchMetadataServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletResourceTypes  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param cqDamDrmEnable  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletBinaryProviderServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletBinaryProviderServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletResourceTypes: (NSArray<NSString*>*) slingServletResourceTypes
    slingServletMethods: (NSArray<NSString*>*) slingServletMethods
    cqDamDrmEnable: (NSNumber*) cqDamDrmEnable
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletBinaryProviderServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletResourceTypes != nil) {
        queryParams[@"sling.servlet.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletResourceTypes format: @"multi"];
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletMethods format: @"multi"];
    }
    if (cqDamDrmEnable != nil) {
        queryParams[@"cq.dam.drm.enable"] = [cqDamDrmEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletBinaryProviderServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletBinaryProviderServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamBatchCollectionProperties  (optional)
///
///  @param cqDamBatchCollectionMaxcollections  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletCollectionServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletCollectionServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamBatchCollectionProperties: (NSArray<NSString*>*) cqDamBatchCollectionProperties
    cqDamBatchCollectionMaxcollections: (NSNumber*) cqDamBatchCollectionMaxcollections
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletCollectionServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamBatchCollectionProperties != nil) {
        queryParams[@"cq.dam.batch.collection.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamBatchCollectionProperties format: @"multi"];
    }
    if (cqDamBatchCollectionMaxcollections != nil) {
        queryParams[@"cq.dam.batch.collection.maxcollections"] = cqDamBatchCollectionMaxcollections;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletCollectionServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletCollectionServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamBatchCollectionsProperties  (optional)
///
///  @param cqDamBatchCollectionsLimit  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletCollectionsServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletCollectionsServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamBatchCollectionsProperties: (NSArray<NSString*>*) cqDamBatchCollectionsProperties
    cqDamBatchCollectionsLimit: (NSNumber*) cqDamBatchCollectionsLimit
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletCollectionsServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamBatchCollectionsProperties != nil) {
        queryParams[@"cq.dam.batch.collections.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamBatchCollectionsProperties format: @"multi"];
    }
    if (cqDamBatchCollectionsLimit != nil) {
        queryParams[@"cq.dam.batch.collections.limit"] = cqDamBatchCollectionsLimit;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletCollectionsServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletCollectionsServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param moreInfo  (optional)
///
///  @param mntoverlaydamguicontentassetsmoreinfoHtmlpath  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletCompanionServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletCompanionServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    moreInfo: (NSString*) moreInfo
    mntoverlaydamguicontentassetsmoreinfoHtmlpath: (NSString*) mntoverlaydamguicontentassetsmoreinfoHtmlpath
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletCompanionServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (moreInfo != nil) {
        queryParams[@"More Info"] = moreInfo;
    }
    if (mntoverlaydamguicontentassetsmoreinfoHtmlpath != nil) {
        queryParams[@"/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}"] = mntoverlaydamguicontentassetsmoreinfoHtmlpath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletCompanionServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletCompanionServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param detectDuplicate  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletCreateAssetServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletCreateAssetServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    detectDuplicate: (NSNumber*) detectDuplicate
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletCreateAssetServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (detectDuplicate != nil) {
        queryParams[@"detect_duplicate"] = [detectDuplicate isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletCreateAssetServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletCreateAssetServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqMimeTypeBlacklist  (optional)
///
///  @param cqDamEmptyMime  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletDamContentDispositionFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqMimeTypeBlacklist: (NSArray<NSString*>*) cqMimeTypeBlacklist
    cqDamEmptyMime: (NSNumber*) cqDamEmptyMime
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqMimeTypeBlacklist != nil) {
        queryParams[@"cq.mime.type.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqMimeTypeBlacklist format: @"multi"];
    }
    if (cqDamEmptyMime != nil) {
        queryParams[@"cq.dam.empty.mime"] = [cqDamEmptyMime isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletDamContentDispositionFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamCoreGuidlookupfilterEnabled  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletGuidLookupFilterInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletGuidLookupFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamCoreGuidlookupfilterEnabled: (NSNumber*) cqDamCoreGuidlookupfilterEnabled
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletGuidLookupFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamCoreGuidlookupfilterEnabled != nil) {
        queryParams[@"cq.dam.core.guidlookupfilter.enabled"] = [cqDamCoreGuidlookupfilterEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletGuidLookupFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletGuidLookupFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamSyncWorkflowId  (optional)
///
///  @param cqDamSyncFolderTypes  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletHealthCheckServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletHealthCheckServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamSyncWorkflowId: (NSString*) cqDamSyncWorkflowId
    cqDamSyncFolderTypes: (NSArray<NSString*>*) cqDamSyncFolderTypes
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletHealthCheckServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamSyncWorkflowId != nil) {
        queryParams[@"cq.dam.sync.workflow.id"] = cqDamSyncWorkflowId;
    }
    if (cqDamSyncFolderTypes != nil) {
        queryParams[@"cq.dam.sync.folder.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamSyncFolderTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletHealthCheckServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletHealthCheckServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletResourceTypes  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param slingServletExtensions  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletMetadataGetServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletMetadataGetServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletResourceTypes: (NSString*) slingServletResourceTypes
    slingServletMethods: (NSString*) slingServletMethods
    slingServletExtensions: (NSString*) slingServletExtensions
    slingServletSelectors: (NSString*) slingServletSelectors
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletMetadataGetServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletResourceTypes != nil) {
        queryParams[@"sling.servlet.resourceTypes"] = slingServletResourceTypes;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    if (slingServletExtensions != nil) {
        queryParams[@"sling.servlet.extensions"] = slingServletExtensions;
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletMetadataGetServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletMetadataGetServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamDrmEnable  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletMultipleLicenseAcceptServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamDrmEnable: (NSNumber*) cqDamDrmEnable
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamDrmEnable != nil) {
        queryParams[@"cq.dam.drm.enable"] = [cqDamDrmEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletResourceTypes  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param downloadConfig  (optional)
///
///  @param viewSelector  (optional)
///
///  @param sendEmail  (optional)
///
///  @returns OAIComDayCqDamCoreImplServletResourceCollectionServletInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplServletResourceCollectionServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletResourceTypes: (NSArray<NSString*>*) slingServletResourceTypes
    slingServletMethods: (NSString*) slingServletMethods
    slingServletSelectors: (NSString*) slingServletSelectors
    downloadConfig: (NSString*) downloadConfig
    viewSelector: (NSString*) viewSelector
    sendEmail: (NSNumber*) sendEmail
    completionHandler: (void (^)(OAIComDayCqDamCoreImplServletResourceCollectionServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletResourceTypes != nil) {
        queryParams[@"sling.servlet.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletResourceTypes format: @"multi"];
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    if (downloadConfig != nil) {
        queryParams[@"download.config"] = downloadConfig;
    }
    if (viewSelector != nil) {
        queryParams[@"view.selector"] = viewSelector;
    }
    if (sendEmail != nil) {
        queryParams[@"send_email"] = [sendEmail isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplServletResourceCollectionServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplServletResourceCollectionServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param createPreviewEnabled  (optional)
///
///  @param updatePreviewEnabled  (optional)
///
///  @param queueSize  (optional)
///
///  @param folderPreviewRenditionRegex  (optional)
///
///  @returns OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    createPreviewEnabled: (NSNumber*) createPreviewEnabled
    updatePreviewEnabled: (NSNumber*) updatePreviewEnabled
    queueSize: (NSNumber*) queueSize
    folderPreviewRenditionRegex: (NSString*) folderPreviewRenditionRegex
    completionHandler: (void (^)(OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (createPreviewEnabled != nil) {
        queryParams[@"createPreviewEnabled"] = [createPreviewEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (updatePreviewEnabled != nil) {
        queryParams[@"updatePreviewEnabled"] = [updatePreviewEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (queueSize != nil) {
        queryParams[@"queueSize"] = queueSize;
    }
    if (folderPreviewRenditionRegex != nil) {
        queryParams[@"folderPreviewRenditionRegex"] = folderPreviewRenditionRegex;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamConfigUnzipMaxuncompressedsize  (optional)
///
///  @param cqDamConfigUnzipEncoding  (optional)
///
///  @returns OAIComDayCqDamCoreImplUnzipUnzipConfigInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreImplUnzipUnzipConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamConfigUnzipMaxuncompressedsize: (NSNumber*) cqDamConfigUnzipMaxuncompressedsize
    cqDamConfigUnzipEncoding: (NSString*) cqDamConfigUnzipEncoding
    completionHandler: (void (^)(OAIComDayCqDamCoreImplUnzipUnzipConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamConfigUnzipMaxuncompressedsize != nil) {
        queryParams[@"cq.dam.config.unzip.maxuncompressedsize"] = cqDamConfigUnzipMaxuncompressedsize;
    }
    if (cqDamConfigUnzipEncoding != nil) {
        queryParams[@"cq.dam.config.unzip.encoding"] = cqDamConfigUnzipEncoding;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreImplUnzipUnzipConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreImplUnzipUnzipConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param cqDamEnableSha1  (optional)
///
///  @returns OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreProcessExifToolExtractMetadataProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    cqDamEnableSha1: (NSNumber*) cqDamEnableSha1
    completionHandler: (void (^)(OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (cqDamEnableSha1 != nil) {
        queryParams[@"cq.dam.enable.sha1"] = [cqDamEnableSha1 isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param cqDamEnableSha1  (optional)
///
///  @returns OAIComDayCqDamCoreProcessExtractMetadataProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreProcessExtractMetadataProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    cqDamEnableSha1: (NSNumber*) cqDamEnableSha1
    completionHandler: (void (^)(OAIComDayCqDamCoreProcessExtractMetadataProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (cqDamEnableSha1 != nil) {
        queryParams[@"cq.dam.enable.sha1"] = [cqDamEnableSha1 isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreProcessExtractMetadataProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreProcessExtractMetadataProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param cqDamEnableSha1  (optional)
///
///  @param cqDamMetadataXssprotectedProperties  (optional)
///
///  @returns OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamCoreProcessMetadataProcessorProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    cqDamEnableSha1: (NSNumber*) cqDamEnableSha1
    cqDamMetadataXssprotectedProperties: (NSArray<NSString*>*) cqDamMetadataXssprotectedProperties
    completionHandler: (void (^)(OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (cqDamEnableSha1 != nil) {
        queryParams[@"cq.dam.enable.sha1"] = [cqDamEnableSha1 isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamMetadataXssprotectedProperties != nil) {
        queryParams[@"cq.dam.metadata.xssprotected.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamMetadataXssprotectedProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamCoreProcessMetadataProcessorProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param executableSearchpath  (optional)
///
///  @returns OAIComDayCqDamHandlerFfmpegLocatorImplInfo*
///
-(NSURLSessionTask*) comDayCqDamHandlerFfmpegLocatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    executableSearchpath: (NSArray<NSString*>*) executableSearchpath
    completionHandler: (void (^)(OAIComDayCqDamHandlerFfmpegLocatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (executableSearchpath != nil) {
        queryParams[@"executable.searchpath"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: executableSearchpath format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamHandlerFfmpegLocatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamHandlerFfmpegLocatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param fontmgrSystemFontDir  (optional)
///
///  @param fontmgrAdobeFontDir  (optional)
///
///  @param fontmgrCustomerFontDir  (optional)
///
///  @returns OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    fontmgrSystemFontDir: (NSArray<NSString*>*) fontmgrSystemFontDir
    fontmgrAdobeFontDir: (NSString*) fontmgrAdobeFontDir
    fontmgrCustomerFontDir: (NSString*) fontmgrCustomerFontDir
    completionHandler: (void (^)(OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (fontmgrSystemFontDir != nil) {
        queryParams[@"fontmgr.system.font.dir"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fontmgrSystemFontDir format: @"multi"];
    }
    if (fontmgrAdobeFontDir != nil) {
        queryParams[@"fontmgr.adobe.font.dir"] = fontmgrAdobeFontDir;
    }
    if (fontmgrCustomerFontDir != nil) {
        queryParams[@"fontmgr.customer.font.dir"] = fontmgrCustomerFontDir;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param rasterAnnotation  (optional)
///
///  @returns OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamHandlerStandardPdfPdfHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    rasterAnnotation: (NSNumber*) rasterAnnotation
    completionHandler: (void (^)(OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (rasterAnnotation != nil) {
        queryParams[@"raster.annotation"] = [rasterAnnotation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamHandlerStandardPdfPdfHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param rasterAnnotation  (optional)
///
///  @returns OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamHandlerStandardPsPostScriptHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    rasterAnnotation: (NSNumber*) rasterAnnotation
    completionHandler: (void (^)(OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (rasterAnnotation != nil) {
        queryParams[@"raster.annotation"] = [rasterAnnotation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamHandlerStandardPsPostScriptHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param largeFileThreshold  (optional)
///
///  @returns OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamHandlerStandardPsdPsdHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    largeFileThreshold: (NSNumber*) largeFileThreshold
    completionHandler: (void (^)(OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (largeFileThreshold != nil) {
        queryParams[@"large_file_threshold"] = largeFileThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamHandlerStandardPsdPsdHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enableMultisession  (optional)
///
///  @param idsCcEnable  (optional)
///
///  @param enableRetry  (optional)
///
///  @param enableRetryScripterror  (optional)
///
///  @param externalizerDomainCqhost  (optional)
///
///  @param externalizerDomainHttp  (optional)
///
///  @returns OAIComDayCqDamIdsImplIDSJobProcessorInfo*
///
-(NSURLSessionTask*) comDayCqDamIdsImplIDSJobProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enableMultisession: (NSNumber*) enableMultisession
    idsCcEnable: (NSNumber*) idsCcEnable
    enableRetry: (NSNumber*) enableRetry
    enableRetryScripterror: (NSNumber*) enableRetryScripterror
    externalizerDomainCqhost: (NSString*) externalizerDomainCqhost
    externalizerDomainHttp: (NSString*) externalizerDomainHttp
    completionHandler: (void (^)(OAIComDayCqDamIdsImplIDSJobProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enableMultisession != nil) {
        queryParams[@"enable.multisession"] = [enableMultisession isEqual:@(YES)] ? @"true" : @"false";
    }
    if (idsCcEnable != nil) {
        queryParams[@"ids.cc.enable"] = [idsCcEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableRetry != nil) {
        queryParams[@"enable.retry"] = [enableRetry isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableRetryScripterror != nil) {
        queryParams[@"enable.retry.scripterror"] = [enableRetryScripterror isEqual:@(YES)] ? @"true" : @"false";
    }
    if (externalizerDomainCqhost != nil) {
        queryParams[@"externalizer.domain.cqhost"] = externalizerDomainCqhost;
    }
    if (externalizerDomainHttp != nil) {
        queryParams[@"externalizer.domain.http"] = externalizerDomainHttp;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamIdsImplIDSJobProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamIdsImplIDSJobProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxErrorsToBlacklist  (optional)
///
///  @param retryIntervalToWhitelist  (optional)
///
///  @param connectTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @param processLabel  (optional)
///
///  @param connectionUseMax  (optional)
///
///  @returns OAIComDayCqDamIdsImplIDSPoolManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqDamIdsImplIDSPoolManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxErrorsToBlacklist: (NSNumber*) maxErrorsToBlacklist
    retryIntervalToWhitelist: (NSNumber*) retryIntervalToWhitelist
    connectTimeout: (NSNumber*) connectTimeout
    socketTimeout: (NSNumber*) socketTimeout
    processLabel: (NSString*) processLabel
    connectionUseMax: (NSNumber*) connectionUseMax
    completionHandler: (void (^)(OAIComDayCqDamIdsImplIDSPoolManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxErrorsToBlacklist != nil) {
        queryParams[@"max.errors.to.blacklist"] = maxErrorsToBlacklist;
    }
    if (retryIntervalToWhitelist != nil) {
        queryParams[@"retry.interval.to.whitelist"] = retryIntervalToWhitelist;
    }
    if (connectTimeout != nil) {
        queryParams[@"connect.timeout"] = connectTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socket.timeout"] = socketTimeout;
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (connectionUseMax != nil) {
        queryParams[@"connection.use.max"] = connectionUseMax;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamIdsImplIDSPoolManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamIdsImplIDSPoolManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param extractPages  (optional)
///
///  @returns OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamInddImplHandlerIndesignXMPHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    extractPages: (NSNumber*) extractPages
    completionHandler: (void (^)(OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (extractPages != nil) {
        queryParams[@"extract.pages"] = [extractPages isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamInddImplHandlerIndesignXMPHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param snippetcreationMaxcollections  (optional)
///
///  @returns OAIComDayCqDamInddImplServletSnippetCreationServletInfo*
///
-(NSURLSessionTask*) comDayCqDamInddImplServletSnippetCreationServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    snippetcreationMaxcollections: (NSNumber*) snippetcreationMaxcollections
    completionHandler: (void (^)(OAIComDayCqDamInddImplServletSnippetCreationServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (snippetcreationMaxcollections != nil) {
        queryParams[@"snippetcreation.maxcollections"] = snippetcreationMaxcollections;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamInddImplServletSnippetCreationServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamInddImplServletSnippetCreationServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @param cqDamInddPagesRegex  (optional)
///
///  @param idsJobDecoupled  (optional)
///
///  @param idsJobWorkflowModel  (optional)
///
///  @returns OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamInddProcessINDDMediaExtractProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    cqDamInddPagesRegex: (NSString*) cqDamInddPagesRegex
    idsJobDecoupled: (NSNumber*) idsJobDecoupled
    idsJobWorkflowModel: (NSString*) idsJobWorkflowModel
    completionHandler: (void (^)(OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    if (cqDamInddPagesRegex != nil) {
        queryParams[@"cq.dam.indd.pages.regex"] = cqDamInddPagesRegex;
    }
    if (idsJobDecoupled != nil) {
        queryParams[@"ids.job.decoupled"] = [idsJobDecoupled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (idsJobWorkflowModel != nil) {
        queryParams[@"ids.job.workflow.model"] = idsJobWorkflowModel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamInddProcessINDDMediaExtractProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param batchCommitSize  (optional)
///
///  @returns OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo*
///
-(NSURLSessionTask*) comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    batchCommitSize: (NSNumber*) batchCommitSize
    completionHandler: (void (^)(OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (batchCommitSize != nil) {
        queryParams[@"batch.commit.size"] = batchCommitSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @returns OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo*
///
-(NSURLSessionTask*) comDayCqDamPerformanceInternalAssetPerformanceReportSyncJobWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    completionHandler: (void (^)(OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param deleteZipFile  (optional)
///
///  @returns OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo*
///
-(NSURLSessionTask*) comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    deleteZipFile: (NSNumber*) deleteZipFile
    completionHandler: (void (^)(OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (deleteZipFile != nil) {
        queryParams[@"delete.zip.file"] = [deleteZipFile isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamS7damDynamicmediaconfigeventlistenerEnabled  (optional)
///
///  @returns OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamS7damDynamicmediaconfigeventlistenerEnabled: (NSNumber*) cqDamS7damDynamicmediaconfigeventlistenerEnabled
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamS7damDynamicmediaconfigeventlistenerEnabled != nil) {
        queryParams[@"cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled"] = [cqDamS7damDynamicmediaconfigeventlistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param schedulerConcurrent  (optional)
///
///  @returns OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    schedulerConcurrent: (NSNumber*) schedulerConcurrent
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (schedulerConcurrent != nil) {
        queryParams[@"scheduler.concurrent"] = [schedulerConcurrent isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingPostOperation  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @returns OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonPostServletsSetCreateHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingPostOperation: (NSString*) slingPostOperation
    slingServletMethods: (NSString*) slingServletMethods
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingPostOperation != nil) {
        queryParams[@"sling.post.operation"] = slingPostOperation;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingPostOperation  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @returns OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonPostServletsSetModifyHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingPostOperation: (NSString*) slingPostOperation
    slingServletMethods: (NSString*) slingServletMethods
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingPostOperation != nil) {
        queryParams[@"sling.post.operation"] = slingPostOperation;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param processLabel  (optional)
///
///  @returns OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    processLabel: (NSString*) processLabel
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (processLabel != nil) {
        queryParams[@"process.label"] = processLabel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamS7damDamchangeeventlistenerEnabled  (optional)
///
///  @returns OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonS7damDamChangeEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamS7damDamchangeeventlistenerEnabled: (NSNumber*) cqDamS7damDamchangeeventlistenerEnabled
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamS7damDamchangeeventlistenerEnabled != nil) {
        queryParams[@"cq.dam.s7dam.damchangeeventlistener.enabled"] = [cqDamS7damDamchangeeventlistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonS7damDamChangeEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletPaths  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @returns OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonServletsS7damProductInfoServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletPaths: (NSString*) slingServletPaths
    slingServletMethods: (NSString*) slingServletMethods
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletPaths != nil) {
        queryParams[@"sling.servlet.paths"] = slingServletPaths;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = slingServletMethods;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonServletsS7damProductInfoServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceHttpReadtimeoutName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceHttpMaxretrycountName  (optional)
///
///  @param cqDamS7damVideoproxyclientserviceUploadprogressIntervalName  (optional)
///
///  @returns OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName: (NSNumber*) cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName
    cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName: (NSNumber*) cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName
    cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName: (NSNumber*) cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName
    cqDamS7damVideoproxyclientserviceHttpReadtimeoutName: (NSNumber*) cqDamS7damVideoproxyclientserviceHttpReadtimeoutName
    cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName: (NSNumber*) cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName
    cqDamS7damVideoproxyclientserviceHttpMaxretrycountName: (NSNumber*) cqDamS7damVideoproxyclientserviceHttpMaxretrycountName
    cqDamS7damVideoproxyclientserviceUploadprogressIntervalName: (NSNumber*) cqDamS7damVideoproxyclientserviceUploadprogressIntervalName
    completionHandler: (void (^)(OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name"] = cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName;
    }
    if (cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name"] = cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName;
    }
    if (cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name"] = cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName;
    }
    if (cqDamS7damVideoproxyclientserviceHttpReadtimeoutName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name"] = cqDamS7damVideoproxyclientserviceHttpReadtimeoutName;
    }
    if (cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name"] = cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName;
    }
    if (cqDamS7damVideoproxyclientserviceHttpMaxretrycountName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name"] = cqDamS7damVideoproxyclientserviceHttpMaxretrycountName;
    }
    if (cqDamS7damVideoproxyclientserviceUploadprogressIntervalName != nil) {
        queryParams[@"cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name"] = cqDamS7damVideoproxyclientserviceUploadprogressIntervalName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamScene7ApiclientRecordsperpageNofilterName  (optional)
///
///  @param cqDamScene7ApiclientRecordsperpageWithfilterName  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7APIClientImplInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7APIClientImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamScene7ApiclientRecordsperpageNofilterName: (NSNumber*) cqDamScene7ApiclientRecordsperpageNofilterName
    cqDamScene7ApiclientRecordsperpageWithfilterName: (NSNumber*) cqDamScene7ApiclientRecordsperpageWithfilterName
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7APIClientImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamScene7ApiclientRecordsperpageNofilterName != nil) {
        queryParams[@"cq.dam.scene7.apiclient.recordsperpage.nofilter.name"] = cqDamScene7ApiclientRecordsperpageNofilterName;
    }
    if (cqDamScene7ApiclientRecordsperpageWithfilterName != nil) {
        queryParams[@"cq.dam.scene7.apiclient.recordsperpage.withfilter.name"] = cqDamScene7ApiclientRecordsperpageWithfilterName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7APIClientImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7APIClientImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamScene7AssetmimetypeserviceMapping  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7AssetMimeTypeServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamScene7AssetmimetypeserviceMapping: (NSArray<NSString*>*) cqDamScene7AssetmimetypeserviceMapping
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamScene7AssetmimetypeserviceMapping != nil) {
        queryParams[@"cq.dam.scene7.assetmimetypeservice.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamScene7AssetmimetypeserviceMapping format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamScene7ConfigurationeventlistenerEnabled  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7ConfigurationEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamScene7ConfigurationeventlistenerEnabled: (NSNumber*) cqDamScene7ConfigurationeventlistenerEnabled
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamScene7ConfigurationeventlistenerEnabled != nil) {
        queryParams[@"cq.dam.scene7.configurationeventlistener.enabled"] = [cqDamScene7ConfigurationeventlistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamScene7DamchangeeventlistenerEnabled  (optional)
///
///  @param cqDamScene7DamchangeeventlistenerObservedPaths  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7DamChangeEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamScene7DamchangeeventlistenerEnabled: (NSNumber*) cqDamScene7DamchangeeventlistenerEnabled
    cqDamScene7DamchangeeventlistenerObservedPaths: (NSArray<NSString*>*) cqDamScene7DamchangeeventlistenerObservedPaths
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamScene7DamchangeeventlistenerEnabled != nil) {
        queryParams[@"cq.dam.scene7.damchangeeventlistener.enabled"] = [cqDamScene7DamchangeeventlistenerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqDamScene7DamchangeeventlistenerObservedPaths != nil) {
        queryParams[@"cq.dam.scene7.damchangeeventlistener.observed.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqDamScene7DamchangeeventlistenerObservedPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7DamChangeEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param scene7FlashTemplatesRti  (optional)
///
///  @param scene7FlashTemplatesRsi  (optional)
///
///  @param scene7FlashTemplatesRb  (optional)
///
///  @param scene7FlashTemplatesRurl  (optional)
///
///  @param scene7FlashTemplateUrlFormatParameter  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7FlashTemplatesServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    scene7FlashTemplatesRti: (NSString*) scene7FlashTemplatesRti
    scene7FlashTemplatesRsi: (NSString*) scene7FlashTemplatesRsi
    scene7FlashTemplatesRb: (NSString*) scene7FlashTemplatesRb
    scene7FlashTemplatesRurl: (NSString*) scene7FlashTemplatesRurl
    scene7FlashTemplateUrlFormatParameter: (NSString*) scene7FlashTemplateUrlFormatParameter
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (scene7FlashTemplatesRti != nil) {
        queryParams[@"scene7FlashTemplates.rti"] = scene7FlashTemplatesRti;
    }
    if (scene7FlashTemplatesRsi != nil) {
        queryParams[@"scene7FlashTemplates.rsi"] = scene7FlashTemplatesRsi;
    }
    if (scene7FlashTemplatesRb != nil) {
        queryParams[@"scene7FlashTemplates.rb"] = scene7FlashTemplatesRb;
    }
    if (scene7FlashTemplatesRurl != nil) {
        queryParams[@"scene7FlashTemplates.rurl"] = scene7FlashTemplatesRurl;
    }
    if (scene7FlashTemplateUrlFormatParameter != nil) {
        queryParams[@"scene7FlashTemplate.urlFormatParameter"] = scene7FlashTemplateUrlFormatParameter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqDamScene7UploadserviceActivejobtimeoutLabel  (optional)
///
///  @param cqDamScene7UploadserviceConnectionmaxperrouteLabel  (optional)
///
///  @returns OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqDamScene7ImplScene7UploadServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqDamScene7UploadserviceActivejobtimeoutLabel: (NSNumber*) cqDamScene7UploadserviceActivejobtimeoutLabel
    cqDamScene7UploadserviceConnectionmaxperrouteLabel: (NSNumber*) cqDamScene7UploadserviceConnectionmaxperrouteLabel
    completionHandler: (void (^)(OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqDamScene7UploadserviceActivejobtimeoutLabel != nil) {
        queryParams[@"cq.dam.scene7.uploadservice.activejobtimeout.label"] = cqDamScene7UploadserviceActivejobtimeoutLabel;
    }
    if (cqDamScene7UploadserviceConnectionmaxperrouteLabel != nil) {
        queryParams[@"cq.dam.scene7.uploadservice.connectionmaxperroute.label"] = cqDamScene7UploadserviceConnectionmaxperrouteLabel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamScene7ImplScene7UploadServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param getCacheExpirationUnit  (optional)
///
///  @param getCacheExpirationValue  (optional)
///
///  @returns OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo*
///
-(NSURLSessionTask*) comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    getCacheExpirationUnit: (NSString*) getCacheExpirationUnit
    getCacheExpirationValue: (NSNumber*) getCacheExpirationValue
    completionHandler: (void (^)(OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (getCacheExpirationUnit != nil) {
        queryParams[@"getCacheExpirationUnit"] = getCacheExpirationUnit;
    }
    if (getCacheExpirationValue != nil) {
        queryParams[@"getCacheExpirationValue"] = getCacheExpirationValue;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param locale  (optional)
///
///  @param imsConfig  (optional)
///
///  @returns OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo*
///
-(NSURLSessionTask*) comDayCqDamStockIntegrationImplConfigurationStockConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    locale: (NSString*) locale
    imsConfig: (NSString*) imsConfig
    completionHandler: (void (^)(OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (locale != nil) {
        queryParams[@"locale"] = locale;
    }
    if (imsConfig != nil) {
        queryParams[@"imsConfig"] = imsConfig;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIComDayCqDamVideoImplServletVideoTestServletInfo*
///
-(NSURLSessionTask*) comDayCqDamVideoImplServletVideoTestServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIComDayCqDamVideoImplServletVideoTestServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqDamVideoImplServletVideoTestServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqDamVideoImplServletVideoTestServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxWidth  (optional)
///
///  @param maxHeight  (optional)
///
///  @returns OAIComDayCqExtwidgetServletsImageSpriteServletInfo*
///
-(NSURLSessionTask*) comDayCqExtwidgetServletsImageSpriteServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxWidth: (NSNumber*) maxWidth
    maxHeight: (NSNumber*) maxHeight
    completionHandler: (void (^)(OAIComDayCqExtwidgetServletsImageSpriteServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxWidth != nil) {
        queryParams[@"maxWidth"] = maxWidth;
    }
    if (maxHeight != nil) {
        queryParams[@"maxHeight"] = maxHeight;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqExtwidgetServletsImageSpriteServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqExtwidgetServletsImageSpriteServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fontpath  (optional)
///
///  @param oversamplingFactor  (optional)
///
///  @returns OAIComDayCqImageInternalFontFontHelperInfo*
///
-(NSURLSessionTask*) comDayCqImageInternalFontFontHelperWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fontpath: (NSArray<NSString*>*) fontpath
    oversamplingFactor: (NSNumber*) oversamplingFactor
    completionHandler: (void (^)(OAIComDayCqImageInternalFontFontHelperInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fontpath != nil) {
        queryParams[@"fontpath"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fontpath format: @"multi"];
    }
    if (oversamplingFactor != nil) {
        queryParams[@"oversamplingFactor"] = oversamplingFactor;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqImageInternalFontFontHelperInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqImageInternalFontFontHelperInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param clusterLevelEnable  (optional)
///
///  @param clusterMasterLevel  (optional)
///
///  @param clusterSlaveLevel  (optional)
///
///  @returns OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo*
///
-(NSURLSessionTask*) comDayCqJcrclustersupportClusterStartLevelControllerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    clusterLevelEnable: (NSNumber*) clusterLevelEnable
    clusterMasterLevel: (NSNumber*) clusterMasterLevel
    clusterSlaveLevel: (NSNumber*) clusterSlaveLevel
    completionHandler: (void (^)(OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (clusterLevelEnable != nil) {
        queryParams[@"cluster.level.enable"] = [clusterLevelEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (clusterMasterLevel != nil) {
        queryParams[@"cluster.master.level"] = clusterMasterLevel;
    }
    if (clusterSlaveLevel != nil) {
        queryParams[@"cluster.slave.level"] = clusterSlaveLevel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqJcrclustersupportClusterStartLevelControllerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param smtpHost  (optional)
///
///  @param smtpPort  (optional)
///
///  @param smtpUser  (optional)
///
///  @param smtpPassword  (optional)
///
///  @param fromAddress  (optional)
///
///  @param smtpSsl  (optional)
///
///  @param smtpStarttls  (optional)
///
///  @param debugEmail  (optional)
///
///  @returns OAIComDayCqMailerDefaultMailServiceInfo*
///
-(NSURLSessionTask*) comDayCqMailerDefaultMailServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    smtpHost: (NSString*) smtpHost
    smtpPort: (NSNumber*) smtpPort
    smtpUser: (NSString*) smtpUser
    smtpPassword: (NSString*) smtpPassword
    fromAddress: (NSString*) fromAddress
    smtpSsl: (NSNumber*) smtpSsl
    smtpStarttls: (NSNumber*) smtpStarttls
    debugEmail: (NSNumber*) debugEmail
    completionHandler: (void (^)(OAIComDayCqMailerDefaultMailServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mailer.DefaultMailService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (smtpHost != nil) {
        queryParams[@"smtp.host"] = smtpHost;
    }
    if (smtpPort != nil) {
        queryParams[@"smtp.port"] = smtpPort;
    }
    if (smtpUser != nil) {
        queryParams[@"smtp.user"] = smtpUser;
    }
    if (smtpPassword != nil) {
        queryParams[@"smtp.password"] = smtpPassword;
    }
    if (fromAddress != nil) {
        queryParams[@"from.address"] = fromAddress;
    }
    if (smtpSsl != nil) {
        queryParams[@"smtp.ssl"] = [smtpSsl isEqual:@(YES)] ? @"true" : @"false";
    }
    if (smtpStarttls != nil) {
        queryParams[@"smtp.starttls"] = [smtpStarttls isEqual:@(YES)] ? @"true" : @"false";
    }
    if (debugEmail != nil) {
        queryParams[@"debug.email"] = [debugEmail isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMailerDefaultMailServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMailerDefaultMailServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxRecipientCount  (optional)
///
///  @returns OAIComDayCqMailerImplCqMailingServiceInfo*
///
-(NSURLSessionTask*) comDayCqMailerImplCqMailingServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxRecipientCount: (NSString*) maxRecipientCount
    completionHandler: (void (^)(OAIComDayCqMailerImplCqMailingServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxRecipientCount != nil) {
        queryParams[@"max.recipient.count"] = maxRecipientCount;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMailerImplCqMailingServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMailerImplCqMailingServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mailerEmailCharset  (optional)
///
///  @returns OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo*
///
-(NSURLSessionTask*) comDayCqMailerImplEmailCqEmailTemplateFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mailerEmailCharset: (NSString*) mailerEmailCharset
    completionHandler: (void (^)(OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mailerEmailCharset != nil) {
        queryParams[@"mailer.email.charset"] = mailerEmailCharset;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMailerImplEmailCqEmailTemplateFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mailerEmailEmbed  (optional)
///
///  @param mailerEmailCharset  (optional)
///
///  @param mailerEmailRetrieverUserID  (optional)
///
///  @param mailerEmailRetrieverUserPWD  (optional)
///
///  @returns OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo*
///
-(NSURLSessionTask*) comDayCqMailerImplEmailCqRetrieverTemplateFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mailerEmailEmbed: (NSNumber*) mailerEmailEmbed
    mailerEmailCharset: (NSString*) mailerEmailCharset
    mailerEmailRetrieverUserID: (NSString*) mailerEmailRetrieverUserID
    mailerEmailRetrieverUserPWD: (NSString*) mailerEmailRetrieverUserPWD
    completionHandler: (void (^)(OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mailerEmailEmbed != nil) {
        queryParams[@"mailer.email.embed"] = [mailerEmailEmbed isEqual:@(YES)] ? @"true" : @"false";
    }
    if (mailerEmailCharset != nil) {
        queryParams[@"mailer.email.charset"] = mailerEmailCharset;
    }
    if (mailerEmailRetrieverUserID != nil) {
        queryParams[@"mailer.email.retrieverUserID"] = mailerEmailRetrieverUserID;
    }
    if (mailerEmailRetrieverUserPWD != nil) {
        queryParams[@"mailer.email.retrieverUserPWD"] = mailerEmailRetrieverUserPWD;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param aemMcmCampaignFormConstraints  (optional)
///
///  @param aemMcmCampaignPublicUrl  (optional)
///
///  @param aemMcmCampaignRelaxedSSL  (optional)
///
///  @returns OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo*
///
-(NSURLSessionTask*) comDayCqMcmCampaignImplIntegrationConfigImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    aemMcmCampaignFormConstraints: (NSArray<NSString*>*) aemMcmCampaignFormConstraints
    aemMcmCampaignPublicUrl: (NSString*) aemMcmCampaignPublicUrl
    aemMcmCampaignRelaxedSSL: (NSNumber*) aemMcmCampaignRelaxedSSL
    completionHandler: (void (^)(OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (aemMcmCampaignFormConstraints != nil) {
        queryParams[@"aem.mcm.campaign.formConstraints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: aemMcmCampaignFormConstraints format: @"multi"];
    }
    if (aemMcmCampaignPublicUrl != nil) {
        queryParams[@"aem.mcm.campaign.publicUrl"] = aemMcmCampaignPublicUrl;
    }
    if (aemMcmCampaignRelaxedSSL != nil) {
        queryParams[@"aem.mcm.campaign.relaxedSSL"] = [aemMcmCampaignRelaxedSSL isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmCampaignImplIntegrationConfigImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo*
///
-(NSURLSessionTask*) comDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fromAddress  (optional)
///
///  @param senderHost  (optional)
///
///  @param maxBounceCount  (optional)
///
///  @returns OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqMcmCoreNewsletterNewsletterEmailServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fromAddress: (NSString*) fromAddress
    senderHost: (NSString*) senderHost
    maxBounceCount: (NSString*) maxBounceCount
    completionHandler: (void (^)(OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fromAddress != nil) {
        queryParams[@"from.address"] = fromAddress;
    }
    if (senderHost != nil) {
        queryParams[@"sender.host"] = senderHost;
    }
    if (maxBounceCount != nil) {
        queryParams[@"max.bounce.count"] = maxBounceCount;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param experienceIndirection  (optional)
///
///  @param touchpointIndirection  (optional)
///
///  @returns OAIComDayCqMcmImplMCMConfigurationInfo*
///
-(NSURLSessionTask*) comDayCqMcmImplMCMConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    experienceIndirection: (NSArray<NSString*>*) experienceIndirection
    touchpointIndirection: (NSArray<NSString*>*) touchpointIndirection
    completionHandler: (void (^)(OAIComDayCqMcmImplMCMConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (experienceIndirection != nil) {
        queryParams[@"experience.indirection"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: experienceIndirection format: @"multi"];
    }
    if (touchpointIndirection != nil) {
        queryParams[@"touchpoint.indirection"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: touchpointIndirection format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmImplMCMConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmImplMCMConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo*
///
-(NSURLSessionTask*) comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo*
///
-(NSURLSessionTask*) comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo*
///
-(NSURLSessionTask*) comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo*
///
-(NSURLSessionTask*) comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo*
///
-(NSURLSessionTask*) comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @returns OAIComDayCqNotificationImplNotificationServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqNotificationImplNotificationServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    completionHandler: (void (^)(OAIComDayCqNotificationImplNotificationServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqNotificationImplNotificationServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqNotificationImplNotificationServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param forcelocation  (optional)
///
///  @returns OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo*
///
-(NSURLSessionTask*) comDayCqPersonalizationImplServletsTargetingConfigurationServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    forcelocation: (NSNumber*) forcelocation
    completionHandler: (void (^)(OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (forcelocation != nil) {
        queryParams[@"forcelocation"] = [forcelocation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param _id  (optional)
///
///  @param enabled  (optional)
///
///  @param reference  (optional)
///
///  @param interval  (optional)
///
///  @param expression  (optional)
///
///  @param source  (optional)
///
///  @param target  (optional)
///
///  @param login  (optional)
///
///  @param password  (optional)
///
///  @returns OAIComDayCqPollingImporterImplManagedPollConfigImplInfo*
///
-(NSURLSessionTask*) comDayCqPollingImporterImplManagedPollConfigImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    _id: (NSString*) _id
    enabled: (NSNumber*) enabled
    reference: (NSNumber*) reference
    interval: (NSNumber*) interval
    expression: (NSString*) expression
    source: (NSString*) source
    target: (NSString*) target
    login: (NSString*) login
    password: (NSString*) password
    completionHandler: (void (^)(OAIComDayCqPollingImporterImplManagedPollConfigImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (_id != nil) {
        queryParams[@"id"] = _id;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (reference != nil) {
        queryParams[@"reference"] = [reference isEqual:@(YES)] ? @"true" : @"false";
    }
    if (interval != nil) {
        queryParams[@"interval"] = interval;
    }
    if (expression != nil) {
        queryParams[@"expression"] = expression;
    }
    if (source != nil) {
        queryParams[@"source"] = source;
    }
    if (target != nil) {
        queryParams[@"target"] = target;
    }
    if (login != nil) {
        queryParams[@"login"] = login;
    }
    if (password != nil) {
        queryParams[@"password"] = password;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqPollingImporterImplManagedPollConfigImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqPollingImporterImplManagedPollConfigImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param importerUser  (optional)
///
///  @returns OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo*
///
-(NSURLSessionTask*) comDayCqPollingImporterImplManagedPollingImporterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    importerUser: (NSString*) importerUser
    completionHandler: (void (^)(OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (importerUser != nil) {
        queryParams[@"importer.user"] = importerUser;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqPollingImporterImplManagedPollingImporterImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param importerMinInterval  (optional)
///
///  @param importerUser  (optional)
///
///  @param excludePaths  (optional)
///
///  @param includePaths  (optional)
///
///  @returns OAIComDayCqPollingImporterImplPollingImporterImplInfo*
///
-(NSURLSessionTask*) comDayCqPollingImporterImplPollingImporterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    importerMinInterval: (NSNumber*) importerMinInterval
    importerUser: (NSString*) importerUser
    excludePaths: (NSArray<NSString*>*) excludePaths
    includePaths: (NSArray<NSString*>*) includePaths
    completionHandler: (void (^)(OAIComDayCqPollingImporterImplPollingImporterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (importerMinInterval != nil) {
        queryParams[@"importer.min.interval"] = importerMinInterval;
    }
    if (importerUser != nil) {
        queryParams[@"importer.user"] = importerUser;
    }
    if (excludePaths != nil) {
        queryParams[@"exclude.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludePaths format: @"multi"];
    }
    if (includePaths != nil) {
        queryParams[@"include.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: includePaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqPollingImporterImplPollingImporterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqPollingImporterImplPollingImporterImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIComDayCqReplicationAuditReplicationEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqReplicationAuditReplicationEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIComDayCqReplicationAuditReplicationEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationAuditReplicationEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationAuditReplicationEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param host  (optional)
///
///  @param port  (optional)
///
///  @returns OAIComDayCqReplicationContentStaticContentBuilderInfo*
///
-(NSURLSessionTask*) comDayCqReplicationContentStaticContentBuilderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    host: (NSString*) host
    port: (NSNumber*) port
    completionHandler: (void (^)(OAIComDayCqReplicationContentStaticContentBuilderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (host != nil) {
        queryParams[@"host"] = host;
    }
    if (port != nil) {
        queryParams[@"port"] = port;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationContentStaticContentBuilderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationContentStaticContentBuilderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jobTopics  (optional)
///
///  @param serviceUserTarget  (optional)
///
///  @param agentProviderTarget  (optional)
///
///  @returns OAIComDayCqReplicationImplAgentManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplAgentManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jobTopics: (NSString*) jobTopics
    serviceUserTarget: (NSString*) serviceUserTarget
    agentProviderTarget: (NSString*) agentProviderTarget
    completionHandler: (void (^)(OAIComDayCqReplicationImplAgentManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jobTopics != nil) {
        queryParams[@"job.topics"] = jobTopics;
    }
    if (serviceUserTarget != nil) {
        queryParams[@"serviceUser.target"] = serviceUserTarget;
    }
    if (agentProviderTarget != nil) {
        queryParams[@"agentProvider.target"] = agentProviderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplAgentManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplAgentManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param binaryThreshold  (optional)
///
///  @returns OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplContentDurboBinaryLessContentBuilderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    binaryThreshold: (NSNumber*) binaryThreshold
    completionHandler: (void (^)(OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (binaryThreshold != nil) {
        queryParams[@"binary.threshold"] = binaryThreshold;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param preserveHierarchyNodes  (optional)
///
///  @param ignoreVersioning  (optional)
///
///  @param importAcl  (optional)
///
///  @param saveThreshold  (optional)
///
///  @param preserveUserPaths  (optional)
///
///  @param preserveUuid  (optional)
///
///  @param preserveUuidNodetypes  (optional)
///
///  @param preserveUuidSubtrees  (optional)
///
///  @param autoCommit  (optional)
///
///  @returns OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplContentDurboDurboImportConfigurationProvWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    preserveHierarchyNodes: (NSNumber*) preserveHierarchyNodes
    ignoreVersioning: (NSNumber*) ignoreVersioning
    importAcl: (NSNumber*) importAcl
    saveThreshold: (NSNumber*) saveThreshold
    preserveUserPaths: (NSNumber*) preserveUserPaths
    preserveUuid: (NSNumber*) preserveUuid
    preserveUuidNodetypes: (NSArray<NSString*>*) preserveUuidNodetypes
    preserveUuidSubtrees: (NSArray<NSString*>*) preserveUuidSubtrees
    autoCommit: (NSNumber*) autoCommit
    completionHandler: (void (^)(OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (preserveHierarchyNodes != nil) {
        queryParams[@"preserve.hierarchy.nodes"] = [preserveHierarchyNodes isEqual:@(YES)] ? @"true" : @"false";
    }
    if (ignoreVersioning != nil) {
        queryParams[@"ignore.versioning"] = [ignoreVersioning isEqual:@(YES)] ? @"true" : @"false";
    }
    if (importAcl != nil) {
        queryParams[@"import.acl"] = [importAcl isEqual:@(YES)] ? @"true" : @"false";
    }
    if (saveThreshold != nil) {
        queryParams[@"save.threshold"] = saveThreshold;
    }
    if (preserveUserPaths != nil) {
        queryParams[@"preserve.user.paths"] = [preserveUserPaths isEqual:@(YES)] ? @"true" : @"false";
    }
    if (preserveUuid != nil) {
        queryParams[@"preserve.uuid"] = [preserveUuid isEqual:@(YES)] ? @"true" : @"false";
    }
    if (preserveUuidNodetypes != nil) {
        queryParams[@"preserve.uuid.nodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: preserveUuidNodetypes format: @"multi"];
    }
    if (preserveUuidSubtrees != nil) {
        queryParams[@"preserve.uuid.subtrees"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: preserveUuidSubtrees format: @"multi"];
    }
    if (autoCommit != nil) {
        queryParams[@"auto.commit"] = [autoCommit isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param replicationContentUseFileStorage  (optional)
///
///  @param replicationContentMaxCommitAttempts  (optional)
///
///  @returns OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplReplicationContentFactoryProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    replicationContentUseFileStorage: (NSNumber*) replicationContentUseFileStorage
    replicationContentMaxCommitAttempts: (NSNumber*) replicationContentMaxCommitAttempts
    completionHandler: (void (^)(OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (replicationContentUseFileStorage != nil) {
        queryParams[@"replication.content.useFileStorage"] = [replicationContentUseFileStorage isEqual:@(YES)] ? @"true" : @"false";
    }
    if (replicationContentMaxCommitAttempts != nil) {
        queryParams[@"replication.content.maxCommitAttempts"] = replicationContentMaxCommitAttempts;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplReplicationContentFactoryProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param receiverTmpfileThreshold  (optional)
///
///  @param receiverPackagesUseInstall  (optional)
///
///  @returns OAIComDayCqReplicationImplReplicationReceiverImplInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplReplicationReceiverImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    receiverTmpfileThreshold: (NSNumber*) receiverTmpfileThreshold
    receiverPackagesUseInstall: (NSNumber*) receiverPackagesUseInstall
    completionHandler: (void (^)(OAIComDayCqReplicationImplReplicationReceiverImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (receiverTmpfileThreshold != nil) {
        queryParams[@"receiver.tmpfile.threshold"] = receiverTmpfileThreshold;
    }
    if (receiverPackagesUseInstall != nil) {
        queryParams[@"receiver.packages.use.install"] = [receiverPackagesUseInstall isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplReplicationReceiverImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplReplicationReceiverImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param distributeEvents  (optional)
///
///  @returns OAIComDayCqReplicationImplReplicatorImplInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplReplicatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    distributeEvents: (NSNumber*) distributeEvents
    completionHandler: (void (^)(OAIComDayCqReplicationImplReplicatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (distributeEvents != nil) {
        queryParams[@"distribute_events"] = [distributeEvents isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplReplicatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplReplicatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerPeriod  (optional)
///
///  @returns OAIComDayCqReplicationImplReverseReplicatorInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplReverseReplicatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerPeriod: (NSNumber*) schedulerPeriod
    completionHandler: (void (^)(OAIComDayCqReplicationImplReverseReplicatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerPeriod != nil) {
        queryParams[@"scheduler.period"] = schedulerPeriod;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplReverseReplicatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplReverseReplicatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disabledCipherSuites  (optional)
///
///  @param enabledCipherSuites  (optional)
///
///  @returns OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplTransportBinaryLessTransportHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disabledCipherSuites: (NSArray<NSString*>*) disabledCipherSuites
    enabledCipherSuites: (NSArray<NSString*>*) enabledCipherSuites
    completionHandler: (void (^)(OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disabledCipherSuites != nil) {
        queryParams[@"disabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: disabledCipherSuites format: @"multi"];
    }
    if (enabledCipherSuites != nil) {
        queryParams[@"enabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: enabledCipherSuites format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disabledCipherSuites  (optional)
///
///  @param enabledCipherSuites  (optional)
///
///  @returns OAIComDayCqReplicationImplTransportHttpInfo*
///
-(NSURLSessionTask*) comDayCqReplicationImplTransportHttpWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disabledCipherSuites: (NSArray<NSString*>*) disabledCipherSuites
    enabledCipherSuites: (NSArray<NSString*>*) enabledCipherSuites
    completionHandler: (void (^)(OAIComDayCqReplicationImplTransportHttpInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.replication.impl.transport.Http"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disabledCipherSuites != nil) {
        queryParams[@"disabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: disabledCipherSuites format: @"multi"];
    }
    if (enabledCipherSuites != nil) {
        queryParams[@"enabled.cipher.suites"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: enabledCipherSuites format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReplicationImplTransportHttpInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReplicationImplTransportHttpInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param repcacheEnable  (optional)
///
///  @param repcacheTtl  (optional)
///
///  @param repcacheMax  (optional)
///
///  @returns OAIComDayCqReportingImplCacheCacheImplInfo*
///
-(NSURLSessionTask*) comDayCqReportingImplCacheCacheImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    repcacheEnable: (NSNumber*) repcacheEnable
    repcacheTtl: (NSNumber*) repcacheTtl
    repcacheMax: (NSNumber*) repcacheMax
    completionHandler: (void (^)(OAIComDayCqReportingImplCacheCacheImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (repcacheEnable != nil) {
        queryParams[@"repcache.enable"] = [repcacheEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (repcacheTtl != nil) {
        queryParams[@"repcache.ttl"] = repcacheTtl;
    }
    if (repcacheMax != nil) {
        queryParams[@"repcache.max"] = repcacheMax;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReportingImplCacheCacheImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReportingImplCacheCacheImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param repconfTimezone  (optional)
///
///  @param repconfLocale  (optional)
///
///  @param repconfSnapshots  (optional)
///
///  @param repconfRepdir  (optional)
///
///  @param repconfHourofday  (optional)
///
///  @param repconfMinofhour  (optional)
///
///  @param repconfMaxrows  (optional)
///
///  @param repconfFakedata  (optional)
///
///  @param repconfSnapshotuser  (optional)
///
///  @param repconfEnforcesnapshotuser  (optional)
///
///  @returns OAIComDayCqReportingImplConfigServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqReportingImplConfigServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    repconfTimezone: (NSString*) repconfTimezone
    repconfLocale: (NSString*) repconfLocale
    repconfSnapshots: (NSString*) repconfSnapshots
    repconfRepdir: (NSString*) repconfRepdir
    repconfHourofday: (NSNumber*) repconfHourofday
    repconfMinofhour: (NSNumber*) repconfMinofhour
    repconfMaxrows: (NSNumber*) repconfMaxrows
    repconfFakedata: (NSNumber*) repconfFakedata
    repconfSnapshotuser: (NSString*) repconfSnapshotuser
    repconfEnforcesnapshotuser: (NSNumber*) repconfEnforcesnapshotuser
    completionHandler: (void (^)(OAIComDayCqReportingImplConfigServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (repconfTimezone != nil) {
        queryParams[@"repconf.timezone"] = repconfTimezone;
    }
    if (repconfLocale != nil) {
        queryParams[@"repconf.locale"] = repconfLocale;
    }
    if (repconfSnapshots != nil) {
        queryParams[@"repconf.snapshots"] = repconfSnapshots;
    }
    if (repconfRepdir != nil) {
        queryParams[@"repconf.repdir"] = repconfRepdir;
    }
    if (repconfHourofday != nil) {
        queryParams[@"repconf.hourofday"] = repconfHourofday;
    }
    if (repconfMinofhour != nil) {
        queryParams[@"repconf.minofhour"] = repconfMinofhour;
    }
    if (repconfMaxrows != nil) {
        queryParams[@"repconf.maxrows"] = repconfMaxrows;
    }
    if (repconfFakedata != nil) {
        queryParams[@"repconf.fakedata"] = [repconfFakedata isEqual:@(YES)] ? @"true" : @"false";
    }
    if (repconfSnapshotuser != nil) {
        queryParams[@"repconf.snapshotuser"] = repconfSnapshotuser;
    }
    if (repconfEnforcesnapshotuser != nil) {
        queryParams[@"repconf.enforcesnapshotuser"] = [repconfEnforcesnapshotuser isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReportingImplConfigServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReportingImplConfigServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param requestLogOutput  (optional)
///
///  @returns OAIComDayCqReportingImplRLogAnalyzerInfo*
///
-(NSURLSessionTask*) comDayCqReportingImplRLogAnalyzerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    requestLogOutput: (NSString*) requestLogOutput
    completionHandler: (void (^)(OAIComDayCqReportingImplRLogAnalyzerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (requestLogOutput != nil) {
        queryParams[@"request.log.output"] = requestLogOutput;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqReportingImplRLogAnalyzerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqReportingImplRLogAnalyzerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerPeriod  (optional)
///
///  @param schedulerConcurrent  (optional)
///
///  @param serviceBadLinkToleranceInterval  (optional)
///
///  @param serviceCheckOverridePatterns  (optional)
///
///  @param serviceCacheBrokenInternalLinks  (optional)
///
///  @param serviceSpecialLinkPrefix  (optional)
///
///  @param serviceSpecialLinkPatterns  (optional)
///
///  @returns OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo*
///
-(NSURLSessionTask*) comDayCqRewriterLinkcheckerImplLinkCheckerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerPeriod: (NSNumber*) schedulerPeriod
    schedulerConcurrent: (NSNumber*) schedulerConcurrent
    serviceBadLinkToleranceInterval: (NSNumber*) serviceBadLinkToleranceInterval
    serviceCheckOverridePatterns: (NSArray<NSString*>*) serviceCheckOverridePatterns
    serviceCacheBrokenInternalLinks: (NSNumber*) serviceCacheBrokenInternalLinks
    serviceSpecialLinkPrefix: (NSArray<NSString*>*) serviceSpecialLinkPrefix
    serviceSpecialLinkPatterns: (NSArray<NSString*>*) serviceSpecialLinkPatterns
    completionHandler: (void (^)(OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerPeriod != nil) {
        queryParams[@"scheduler.period"] = schedulerPeriod;
    }
    if (schedulerConcurrent != nil) {
        queryParams[@"scheduler.concurrent"] = [schedulerConcurrent isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceBadLinkToleranceInterval != nil) {
        queryParams[@"service.bad_link_tolerance_interval"] = serviceBadLinkToleranceInterval;
    }
    if (serviceCheckOverridePatterns != nil) {
        queryParams[@"service.check_override_patterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: serviceCheckOverridePatterns format: @"multi"];
    }
    if (serviceCacheBrokenInternalLinks != nil) {
        queryParams[@"service.cache_broken_internal_links"] = [serviceCacheBrokenInternalLinks isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceSpecialLinkPrefix != nil) {
        queryParams[@"service.special_link_prefix"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: serviceSpecialLinkPrefix format: @"multi"];
    }
    if (serviceSpecialLinkPatterns != nil) {
        queryParams[@"service.special_link_patterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: serviceSpecialLinkPatterns format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerPeriod  (optional)
///
///  @param schedulerConcurrent  (optional)
///
///  @param goodLinkTestInterval  (optional)
///
///  @param badLinkTestInterval  (optional)
///
///  @param linkUnusedInterval  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @returns OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo*
///
-(NSURLSessionTask*) comDayCqRewriterLinkcheckerImplLinkCheckerTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerPeriod: (NSNumber*) schedulerPeriod
    schedulerConcurrent: (NSNumber*) schedulerConcurrent
    goodLinkTestInterval: (NSNumber*) goodLinkTestInterval
    badLinkTestInterval: (NSNumber*) badLinkTestInterval
    linkUnusedInterval: (NSNumber*) linkUnusedInterval
    connectionTimeout: (NSNumber*) connectionTimeout
    completionHandler: (void (^)(OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerPeriod != nil) {
        queryParams[@"scheduler.period"] = schedulerPeriod;
    }
    if (schedulerConcurrent != nil) {
        queryParams[@"scheduler.concurrent"] = [schedulerConcurrent isEqual:@(YES)] ? @"true" : @"false";
    }
    if (goodLinkTestInterval != nil) {
        queryParams[@"good_link_test_interval"] = goodLinkTestInterval;
    }
    if (badLinkTestInterval != nil) {
        queryParams[@"bad_link_test_interval"] = badLinkTestInterval;
    }
    if (linkUnusedInterval != nil) {
        queryParams[@"link_unused_interval"] = linkUnusedInterval;
    }
    if (connectionTimeout != nil) {
        queryParams[@"connection.timeout"] = connectionTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param linkcheckertransformerDisableRewriting  (optional)
///
///  @param linkcheckertransformerDisableChecking  (optional)
///
///  @param linkcheckertransformerMapCacheSize  (optional)
///
///  @param linkcheckertransformerStrictExtensionCheck  (optional)
///
///  @param linkcheckertransformerStripHtmltExtension  (optional)
///
///  @param linkcheckertransformerRewriteElements  (optional)
///
///  @param linkcheckertransformerStripExtensionPathBlacklist  (optional)
///
///  @returns OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo*
///
-(NSURLSessionTask*) comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    linkcheckertransformerDisableRewriting: (NSNumber*) linkcheckertransformerDisableRewriting
    linkcheckertransformerDisableChecking: (NSNumber*) linkcheckertransformerDisableChecking
    linkcheckertransformerMapCacheSize: (NSNumber*) linkcheckertransformerMapCacheSize
    linkcheckertransformerStrictExtensionCheck: (NSNumber*) linkcheckertransformerStrictExtensionCheck
    linkcheckertransformerStripHtmltExtension: (NSNumber*) linkcheckertransformerStripHtmltExtension
    linkcheckertransformerRewriteElements: (NSArray<NSString*>*) linkcheckertransformerRewriteElements
    linkcheckertransformerStripExtensionPathBlacklist: (NSArray<NSString*>*) linkcheckertransformerStripExtensionPathBlacklist
    completionHandler: (void (^)(OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (linkcheckertransformerDisableRewriting != nil) {
        queryParams[@"linkcheckertransformer.disableRewriting"] = [linkcheckertransformerDisableRewriting isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkcheckertransformerDisableChecking != nil) {
        queryParams[@"linkcheckertransformer.disableChecking"] = [linkcheckertransformerDisableChecking isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkcheckertransformerMapCacheSize != nil) {
        queryParams[@"linkcheckertransformer.mapCacheSize"] = linkcheckertransformerMapCacheSize;
    }
    if (linkcheckertransformerStrictExtensionCheck != nil) {
        queryParams[@"linkcheckertransformer.strictExtensionCheck"] = [linkcheckertransformerStrictExtensionCheck isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkcheckertransformerStripHtmltExtension != nil) {
        queryParams[@"linkcheckertransformer.stripHtmltExtension"] = [linkcheckertransformerStripHtmltExtension isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkcheckertransformerRewriteElements != nil) {
        queryParams[@"linkcheckertransformer.rewriteElements"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: linkcheckertransformerRewriteElements format: @"multi"];
    }
    if (linkcheckertransformerStripExtensionPathBlacklist != nil) {
        queryParams[@"linkcheckertransformer.stripExtensionPathBlacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: linkcheckertransformerStripExtensionPathBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceMaxLinksPerHost  (optional)
///
///  @param serviceSaveExternalLinkReferences  (optional)
///
///  @returns OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo*
///
-(NSURLSessionTask*) comDayCqRewriterLinkcheckerImplLinkInfoStorageImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceMaxLinksPerHost: (NSNumber*) serviceMaxLinksPerHost
    serviceSaveExternalLinkReferences: (NSNumber*) serviceSaveExternalLinkReferences
    completionHandler: (void (^)(OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceMaxLinksPerHost != nil) {
        queryParams[@"service.max_links_per_host"] = serviceMaxLinksPerHost;
    }
    if (serviceSaveExternalLinkReferences != nil) {
        queryParams[@"service.save_external_link_references"] = [serviceSaveExternalLinkReferences isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param htmlparserProcessTags  (optional)
///
///  @param htmlparserPreserveCamelCase  (optional)
///
///  @returns OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo*
///
-(NSURLSessionTask*) comDayCqRewriterProcessorImplHtmlParserFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    htmlparserProcessTags: (NSArray<NSString*>*) htmlparserProcessTags
    htmlparserPreserveCamelCase: (NSNumber*) htmlparserPreserveCamelCase
    completionHandler: (void (^)(OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (htmlparserProcessTags != nil) {
        queryParams[@"htmlparser.processTags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmlparserProcessTags format: @"multi"];
    }
    if (htmlparserPreserveCamelCase != nil) {
        queryParams[@"htmlparser.preserveCamelCase"] = [htmlparserPreserveCamelCase isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqRewriterProcessorImplHtmlParserFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param excerptProperties  (optional)
///
///  @param cacheMaxEntries  (optional)
///
///  @param cacheEntryLifetime  (optional)
///
///  @param xpathUnion  (optional)
///
///  @returns OAIComDayCqSearchImplBuilderQueryBuilderImplInfo*
///
-(NSURLSessionTask*) comDayCqSearchImplBuilderQueryBuilderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    excerptProperties: (NSArray<NSString*>*) excerptProperties
    cacheMaxEntries: (NSNumber*) cacheMaxEntries
    cacheEntryLifetime: (NSNumber*) cacheEntryLifetime
    xpathUnion: (NSNumber*) xpathUnion
    completionHandler: (void (^)(OAIComDayCqSearchImplBuilderQueryBuilderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (excerptProperties != nil) {
        queryParams[@"excerpt.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excerptProperties format: @"multi"];
    }
    if (cacheMaxEntries != nil) {
        queryParams[@"cache.max.entries"] = cacheMaxEntries;
    }
    if (cacheEntryLifetime != nil) {
        queryParams[@"cache.entry.lifetime"] = cacheEntryLifetime;
    }
    if (xpathUnion != nil) {
        queryParams[@"xpath.union"] = [xpathUnion isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqSearchImplBuilderQueryBuilderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqSearchImplBuilderQueryBuilderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pathBuilderTarget  (optional)
///
///  @param suggestBasepath  (optional)
///
///  @returns OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqSearchSuggestImplSuggestionIndexManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pathBuilderTarget: (NSString*) pathBuilderTarget
    suggestBasepath: (NSString*) suggestBasepath
    completionHandler: (void (^)(OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pathBuilderTarget != nil) {
        queryParams[@"pathBuilder.target"] = pathBuilderTarget;
    }
    if (suggestBasepath != nil) {
        queryParams[@"suggest.basepath"] = suggestBasepath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSearchpromoteConfighandlerEnabled  (optional)
///
///  @returns OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo*
///
-(NSURLSessionTask*) comDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSearchpromoteConfighandlerEnabled: (NSNumber*) cqSearchpromoteConfighandlerEnabled
    completionHandler: (void (^)(OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSearchpromoteConfighandlerEnabled != nil) {
        queryParams[@"cq.searchpromote.confighandler.enabled"] = [cqSearchpromoteConfighandlerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqSearchpromoteConfigurationServerUri  (optional)
///
///  @param cqSearchpromoteConfigurationEnvironment  (optional)
///
///  @param connectionTimeout  (optional)
///
///  @param socketTimeout  (optional)
///
///  @returns OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqSearchpromoteImplSearchPromoteServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqSearchpromoteConfigurationServerUri: (NSString*) cqSearchpromoteConfigurationServerUri
    cqSearchpromoteConfigurationEnvironment: (NSString*) cqSearchpromoteConfigurationEnvironment
    connectionTimeout: (NSNumber*) connectionTimeout
    socketTimeout: (NSNumber*) socketTimeout
    completionHandler: (void (^)(OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqSearchpromoteConfigurationServerUri != nil) {
        queryParams[@"cq.searchpromote.configuration.server.uri"] = cqSearchpromoteConfigurationServerUri;
    }
    if (cqSearchpromoteConfigurationEnvironment != nil) {
        queryParams[@"cq.searchpromote.configuration.environment"] = cqSearchpromoteConfigurationEnvironment;
    }
    if (connectionTimeout != nil) {
        queryParams[@"connection.timeout"] = connectionTimeout;
    }
    if (socketTimeout != nil) {
        queryParams[@"socket.timeout"] = socketTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqSearchpromoteImplSearchPromoteServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqAclsetupRules  (optional)
///
///  @returns OAIComDayCqSecurityACLSetupInfo*
///
-(NSURLSessionTask*) comDayCqSecurityACLSetupWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqAclsetupRules: (NSArray<NSString*>*) cqAclsetupRules
    completionHandler: (void (^)(OAIComDayCqSecurityACLSetupInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.security.ACLSetup"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqAclsetupRules != nil) {
        queryParams[@"cq.aclsetup.rules"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqAclsetupRules format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqSecurityACLSetupInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqSecurityACLSetupInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerPeriod  (optional)
///
///  @param schedulerConcurrent  (optional)
///
///  @param path  (optional)
///
///  @param workspace  (optional)
///
///  @param keywordsPath  (optional)
///
///  @param asyncEntries  (optional)
///
///  @returns OAIComDayCqStatisticsImplStatisticsServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqStatisticsImplStatisticsServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerPeriod: (NSNumber*) schedulerPeriod
    schedulerConcurrent: (NSNumber*) schedulerConcurrent
    path: (NSString*) path
    workspace: (NSString*) workspace
    keywordsPath: (NSString*) keywordsPath
    asyncEntries: (NSNumber*) asyncEntries
    completionHandler: (void (^)(OAIComDayCqStatisticsImplStatisticsServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerPeriod != nil) {
        queryParams[@"scheduler.period"] = schedulerPeriod;
    }
    if (schedulerConcurrent != nil) {
        queryParams[@"scheduler.concurrent"] = [schedulerConcurrent isEqual:@(YES)] ? @"true" : @"false";
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (workspace != nil) {
        queryParams[@"workspace"] = workspace;
    }
    if (keywordsPath != nil) {
        queryParams[@"keywordsPath"] = keywordsPath;
    }
    if (asyncEntries != nil) {
        queryParams[@"asyncEntries"] = [asyncEntries isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqStatisticsImplStatisticsServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqStatisticsImplStatisticsServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param validationEnabled  (optional)
///
///  @returns OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo*
///
-(NSURLSessionTask*) comDayCqTaggingImplJcrTagManagerFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    validationEnabled: (NSNumber*) validationEnabled
    completionHandler: (void (^)(OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (validationEnabled != nil) {
        queryParams[@"validation.enabled"] = [validationEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqTaggingImplJcrTagManagerFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param ignorePath  (optional)
///
///  @returns OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo*
///
-(NSURLSessionTask*) comDayCqTaggingImplSearchTagPredicateEvaluatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    ignorePath: (NSNumber*) ignorePath
    completionHandler: (void (^)(OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (ignorePath != nil) {
        queryParams[@"ignore_path"] = [ignorePath isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqTaggingImplSearchTagPredicateEvaluatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @returns OAIComDayCqTaggingImplTagGarbageCollectorInfo*
///
-(NSURLSessionTask*) comDayCqTaggingImplTagGarbageCollectorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    completionHandler: (void (^)(OAIComDayCqTaggingImplTagGarbageCollectorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqTaggingImplTagGarbageCollectorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqTaggingImplTagGarbageCollectorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqPagesupdatehandlerImageresourcetypes  (optional)
///
///  @returns OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmContentsyncImplHandlerPagesUpdateHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqPagesupdatehandlerImageresourcetypes: (NSArray<NSString*>*) cqPagesupdatehandlerImageresourcetypes
    completionHandler: (void (^)(OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqPagesupdatehandlerImageresourcetypes != nil) {
        queryParams[@"cq.pagesupdatehandler.imageresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqPagesupdatehandlerImageresourcetypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqContentsyncPathrewritertransformerMappingLinks  (optional)
///
///  @param cqContentsyncPathrewritertransformerMappingClientlibs  (optional)
///
///  @param cqContentsyncPathrewritertransformerMappingImages  (optional)
///
///  @param cqContentsyncPathrewritertransformerAttributePattern  (optional)
///
///  @param cqContentsyncPathrewritertransformerClientlibraryPattern  (optional)
///
///  @param cqContentsyncPathrewritertransformerClientlibraryReplace  (optional)
///
///  @returns OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo*
///
-(NSURLSessionTask*) comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqContentsyncPathrewritertransformerMappingLinks: (NSArray<NSString*>*) cqContentsyncPathrewritertransformerMappingLinks
    cqContentsyncPathrewritertransformerMappingClientlibs: (NSArray<NSString*>*) cqContentsyncPathrewritertransformerMappingClientlibs
    cqContentsyncPathrewritertransformerMappingImages: (NSArray<NSString*>*) cqContentsyncPathrewritertransformerMappingImages
    cqContentsyncPathrewritertransformerAttributePattern: (NSString*) cqContentsyncPathrewritertransformerAttributePattern
    cqContentsyncPathrewritertransformerClientlibraryPattern: (NSString*) cqContentsyncPathrewritertransformerClientlibraryPattern
    cqContentsyncPathrewritertransformerClientlibraryReplace: (NSString*) cqContentsyncPathrewritertransformerClientlibraryReplace
    completionHandler: (void (^)(OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqContentsyncPathrewritertransformerMappingLinks != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.mapping.links"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqContentsyncPathrewritertransformerMappingLinks format: @"multi"];
    }
    if (cqContentsyncPathrewritertransformerMappingClientlibs != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.mapping.clientlibs"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqContentsyncPathrewritertransformerMappingClientlibs format: @"multi"];
    }
    if (cqContentsyncPathrewritertransformerMappingImages != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.mapping.images"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqContentsyncPathrewritertransformerMappingImages format: @"multi"];
    }
    if (cqContentsyncPathrewritertransformerAttributePattern != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.attribute.pattern"] = cqContentsyncPathrewritertransformerAttributePattern;
    }
    if (cqContentsyncPathrewritertransformerClientlibraryPattern != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.clientlibrary.pattern"] = cqContentsyncPathrewritertransformerClientlibraryPattern;
    }
    if (cqContentsyncPathrewritertransformerClientlibraryReplace != nil) {
        queryParams[@"cq.contentsync.pathrewritertransformer.clientlibrary.replace"] = cqContentsyncPathrewritertransformerClientlibraryReplace;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param authoringUIModeServiceDefault  (optional)
///
///  @returns OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplAuthoringUIModeServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    authoringUIModeServiceDefault: (NSString*) authoringUIModeServiceDefault
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (authoringUIModeServiceDefault != nil) {
        queryParams[@"authoringUIModeService.default"] = authoringUIModeServiceDefault;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param wcmcommandservletDeleteWhitelist  (optional)
///
///  @returns OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplCommandsWCMCommandServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    wcmcommandservletDeleteWhitelist: (NSArray<NSString*>*) wcmcommandservletDeleteWhitelist
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (wcmcommandservletDeleteWhitelist != nil) {
        queryParams[@"wcmcommandservlet.delete_whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: wcmcommandservletDeleteWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplCommandsWCMCommandServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param dimDefaultMode  (optional)
///
///  @param dimAppcacheEnabled  (optional)
///
///  @returns OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    dimDefaultMode: (NSString*) dimDefaultMode
    dimAppcacheEnabled: (NSNumber*) dimAppcacheEnabled
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (dimDefaultMode != nil) {
        queryParams[@"dim.default.mode"] = dimDefaultMode;
    }
    if (dimAppcacheEnabled != nil) {
        queryParams[@"dim.appcache.enabled"] = [dimAppcacheEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param configured  (optional)
///
///  @returns OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplEventPageEventAuditListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    configured: (NSString*) configured
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (configured != nil) {
        queryParams[@"configured"] = configured;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplEventPageEventAuditListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param paths  (optional)
///
///  @returns OAIComDayCqWcmCoreImplEventPagePostProcessorInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplEventPagePostProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    paths: (NSArray<NSString*>*) paths
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplEventPagePostProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (paths != nil) {
        queryParams[@"paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: paths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplEventPagePostProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplEventPagePostProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param paths  (optional)
///
///  @param excludedPaths  (optional)
///
///  @returns OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplEventRepositoryChangeEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    paths: (NSArray<NSString*>*) paths
    excludedPaths: (NSArray<NSString*>*) excludedPaths
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (paths != nil) {
        queryParams[@"paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: paths format: @"multi"];
    }
    if (excludedPaths != nil) {
        queryParams[@"excludedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludedPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param paths  (optional)
///
///  @returns OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplEventTemplatePostProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    paths: (NSString*) paths
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (paths != nil) {
        queryParams[@"paths"] = paths;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplEventTemplatePostProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param langmgrListPath  (optional)
///
///  @param langmgrCountryDefault  (optional)
///
///  @returns OAIComDayCqWcmCoreImplLanguageManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplLanguageManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    langmgrListPath: (NSString*) langmgrListPath
    langmgrCountryDefault: (NSArray<NSString*>*) langmgrCountryDefault
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplLanguageManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (langmgrListPath != nil) {
        queryParams[@"langmgr.list.path"] = langmgrListPath;
    }
    if (langmgrCountryDefault != nil) {
        queryParams[@"langmgr.country.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: langmgrCountryDefault format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplLanguageManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplLanguageManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param linkExpiredPrefix  (optional)
///
///  @param linkExpiredRemove  (optional)
///
///  @param linkExpiredSuffix  (optional)
///
///  @param linkInvalidPrefix  (optional)
///
///  @param linkInvalidRemove  (optional)
///
///  @param linkInvalidSuffix  (optional)
///
///  @param linkPredatedPrefix  (optional)
///
///  @param linkPredatedRemove  (optional)
///
///  @param linkPredatedSuffix  (optional)
///
///  @param linkWcmmodes  (optional)
///
///  @returns OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    linkExpiredPrefix: (NSString*) linkExpiredPrefix
    linkExpiredRemove: (NSNumber*) linkExpiredRemove
    linkExpiredSuffix: (NSString*) linkExpiredSuffix
    linkInvalidPrefix: (NSString*) linkInvalidPrefix
    linkInvalidRemove: (NSNumber*) linkInvalidRemove
    linkInvalidSuffix: (NSString*) linkInvalidSuffix
    linkPredatedPrefix: (NSString*) linkPredatedPrefix
    linkPredatedRemove: (NSNumber*) linkPredatedRemove
    linkPredatedSuffix: (NSString*) linkPredatedSuffix
    linkWcmmodes: (NSArray<NSString*>*) linkWcmmodes
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (linkExpiredPrefix != nil) {
        queryParams[@"link.expired.prefix"] = linkExpiredPrefix;
    }
    if (linkExpiredRemove != nil) {
        queryParams[@"link.expired.remove"] = [linkExpiredRemove isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkExpiredSuffix != nil) {
        queryParams[@"link.expired.suffix"] = linkExpiredSuffix;
    }
    if (linkInvalidPrefix != nil) {
        queryParams[@"link.invalid.prefix"] = linkInvalidPrefix;
    }
    if (linkInvalidRemove != nil) {
        queryParams[@"link.invalid.remove"] = [linkInvalidRemove isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkInvalidSuffix != nil) {
        queryParams[@"link.invalid.suffix"] = linkInvalidSuffix;
    }
    if (linkPredatedPrefix != nil) {
        queryParams[@"link.predated.prefix"] = linkPredatedPrefix;
    }
    if (linkPredatedRemove != nil) {
        queryParams[@"link.predated.remove"] = [linkPredatedRemove isEqual:@(YES)] ? @"true" : @"false";
    }
    if (linkPredatedSuffix != nil) {
        queryParams[@"link.predated.suffix"] = linkPredatedSuffix;
    }
    if (linkWcmmodes != nil) {
        queryParams[@"link.wcmmodes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: linkWcmmodes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pageInfoProviderPropertyRegexDefault  (optional)
///
///  @param pageInfoProviderPropertyName  (optional)
///
///  @returns OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplPagePageInfoAggregatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pageInfoProviderPropertyRegexDefault: (NSString*) pageInfoProviderPropertyRegexDefault
    pageInfoProviderPropertyName: (NSString*) pageInfoProviderPropertyName
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pageInfoProviderPropertyRegexDefault != nil) {
        queryParams[@"page.info.provider.property.regex.default"] = pageInfoProviderPropertyRegexDefault;
    }
    if (pageInfoProviderPropertyName != nil) {
        queryParams[@"page.info.provider.property.name"] = pageInfoProviderPropertyName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param illegalCharMapping  (optional)
///
///  @param pageSubTreeActivationCheck  (optional)
///
///  @returns OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplPagePageManagerFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    illegalCharMapping: (NSString*) illegalCharMapping
    pageSubTreeActivationCheck: (NSNumber*) pageSubTreeActivationCheck
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (illegalCharMapping != nil) {
        queryParams[@"illegalCharMapping"] = illegalCharMapping;
    }
    if (pageSubTreeActivationCheck != nil) {
        queryParams[@"pageSubTreeActivationCheck"] = [pageSubTreeActivationCheck isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplPagePageManagerFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param contentReferenceConfigResourceTypes  (optional)
///
///  @returns OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplReferencesContentContentReferenceConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    contentReferenceConfigResourceTypes: (NSArray<NSString*>*) contentReferenceConfigResourceTypes
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (contentReferenceConfigResourceTypes != nil) {
        queryParams[@"contentReferenceConfig.resourceTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: contentReferenceConfigResourceTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param damShowexpired  (optional)
///
///  @param damShowhidden  (optional)
///
///  @param tagTitleSearch  (optional)
///
///  @param guessTotal  (optional)
///
///  @param damExpiryProperty  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsContentfinderAssetViewHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    damShowexpired: (NSNumber*) damShowexpired
    damShowhidden: (NSNumber*) damShowhidden
    tagTitleSearch: (NSNumber*) tagTitleSearch
    guessTotal: (NSString*) guessTotal
    damExpiryProperty: (NSString*) damExpiryProperty
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (damShowexpired != nil) {
        queryParams[@"dam.showexpired"] = [damShowexpired isEqual:@(YES)] ? @"true" : @"false";
    }
    if (damShowhidden != nil) {
        queryParams[@"dam.showhidden"] = [damShowhidden isEqual:@(YES)] ? @"true" : @"false";
    }
    if (tagTitleSearch != nil) {
        queryParams[@"tagTitleSearch"] = [tagTitleSearch isEqual:@(YES)] ? @"true" : @"false";
    }
    if (guessTotal != nil) {
        queryParams[@"guessTotal"] = guessTotal;
    }
    if (damExpiryProperty != nil) {
        queryParams[@"dam.expiryProperty"] = damExpiryProperty;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param itemResourceTypes  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    itemResourceTypes: (NSArray<NSString*>*) itemResourceTypes
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (itemResourceTypes != nil) {
        queryParams[@"item.resource.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: itemResourceTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param guessTotal  (optional)
///
///  @param tagTitleSearch  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsContentfinderPageViewHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    guessTotal: (NSString*) guessTotal
    tagTitleSearch: (NSNumber*) tagTitleSearch
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (guessTotal != nil) {
        queryParams[@"guessTotal"] = guessTotal;
    }
    if (tagTitleSearch != nil) {
        queryParams[@"tagTitleSearch"] = [tagTitleSearch isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param scope  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsFindReplaceServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    scope: (NSArray<NSString*>*) scope
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (scope != nil) {
        queryParams[@"scope"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: scope format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsFindReplaceServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param referencesearchservletMaxReferencesPerPage  (optional)
///
///  @param referencesearchservletMaxPages  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsReferenceSearchServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    referencesearchservletMaxReferencesPerPage: (NSNumber*) referencesearchservletMaxReferencesPerPage
    referencesearchservletMaxPages: (NSNumber*) referencesearchservletMaxPages
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (referencesearchservletMaxReferencesPerPage != nil) {
        queryParams[@"referencesearchservlet.maxReferencesPerPage"] = referencesearchservletMaxReferencesPerPage;
    }
    if (referencesearchservletMaxPages != nil) {
        queryParams[@"referencesearchservlet.maxPages"] = referencesearchservletMaxPages;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsReferenceSearchServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param workspace  (optional)
///
///  @param dimensions  (optional)
///
///  @returns OAIComDayCqWcmCoreImplServletsThumbnailServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplServletsThumbnailServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    workspace: (NSString*) workspace
    dimensions: (NSArray<NSString*>*) dimensions
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplServletsThumbnailServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (workspace != nil) {
        queryParams[@"workspace"] = workspace;
    }
    if (dimensions != nil) {
        queryParams[@"dimensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: dimensions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplServletsThumbnailServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplServletsThumbnailServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param nonValidChars  (optional)
///
///  @returns OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplUtilsDefaultPageNameValidatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    nonValidChars: (NSString*) nonValidChars
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (nonValidChars != nil) {
        queryParams[@"nonValidChars"] = nonValidChars;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultExternalizerDomain  (optional)
///
///  @returns OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplVariantsPageVariantsProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultExternalizerDomain: (NSString*) defaultExternalizerDomain
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultExternalizerDomain != nil) {
        queryParams[@"default.externalizer.domain"] = defaultExternalizerDomain;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param versionmanagerCreateVersionOnActivation  (optional)
///
///  @param versionmanagerPurgingEnabled  (optional)
///
///  @param versionmanagerPurgePaths  (optional)
///
///  @param versionmanagerIvPaths  (optional)
///
///  @param versionmanagerMaxAgeDays  (optional)
///
///  @param versionmanagerMaxNumberVersions  (optional)
///
///  @param versionmanagerMinNumberVersions  (optional)
///
///  @returns OAIComDayCqWcmCoreImplVersionManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplVersionManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    versionmanagerCreateVersionOnActivation: (NSNumber*) versionmanagerCreateVersionOnActivation
    versionmanagerPurgingEnabled: (NSNumber*) versionmanagerPurgingEnabled
    versionmanagerPurgePaths: (NSArray<NSString*>*) versionmanagerPurgePaths
    versionmanagerIvPaths: (NSArray<NSString*>*) versionmanagerIvPaths
    versionmanagerMaxAgeDays: (NSNumber*) versionmanagerMaxAgeDays
    versionmanagerMaxNumberVersions: (NSNumber*) versionmanagerMaxNumberVersions
    versionmanagerMinNumberVersions: (NSNumber*) versionmanagerMinNumberVersions
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplVersionManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (versionmanagerCreateVersionOnActivation != nil) {
        queryParams[@"versionmanager.createVersionOnActivation"] = [versionmanagerCreateVersionOnActivation isEqual:@(YES)] ? @"true" : @"false";
    }
    if (versionmanagerPurgingEnabled != nil) {
        queryParams[@"versionmanager.purgingEnabled"] = [versionmanagerPurgingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (versionmanagerPurgePaths != nil) {
        queryParams[@"versionmanager.purgePaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: versionmanagerPurgePaths format: @"multi"];
    }
    if (versionmanagerIvPaths != nil) {
        queryParams[@"versionmanager.ivPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: versionmanagerIvPaths format: @"multi"];
    }
    if (versionmanagerMaxAgeDays != nil) {
        queryParams[@"versionmanager.maxAgeDays"] = versionmanagerMaxAgeDays;
    }
    if (versionmanagerMaxNumberVersions != nil) {
        queryParams[@"versionmanager.maxNumberVersions"] = versionmanagerMaxNumberVersions;
    }
    if (versionmanagerMinNumberVersions != nil) {
        queryParams[@"versionmanager.minNumberVersions"] = versionmanagerMinNumberVersions;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplVersionManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplVersionManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param versionpurgePaths  (optional)
///
///  @param versionpurgeRecursive  (optional)
///
///  @param versionpurgeMaxVersions  (optional)
///
///  @param versionpurgeMinVersions  (optional)
///
///  @param versionpurgeMaxAgeDays  (optional)
///
///  @returns OAIComDayCqWcmCoreImplVersionPurgeTaskInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplVersionPurgeTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    versionpurgePaths: (NSArray<NSString*>*) versionpurgePaths
    versionpurgeRecursive: (NSNumber*) versionpurgeRecursive
    versionpurgeMaxVersions: (NSNumber*) versionpurgeMaxVersions
    versionpurgeMinVersions: (NSNumber*) versionpurgeMinVersions
    versionpurgeMaxAgeDays: (NSNumber*) versionpurgeMaxAgeDays
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplVersionPurgeTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (versionpurgePaths != nil) {
        queryParams[@"versionpurge.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: versionpurgePaths format: @"multi"];
    }
    if (versionpurgeRecursive != nil) {
        queryParams[@"versionpurge.recursive"] = [versionpurgeRecursive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (versionpurgeMaxVersions != nil) {
        queryParams[@"versionpurge.maxVersions"] = versionpurgeMaxVersions;
    }
    if (versionpurgeMinVersions != nil) {
        queryParams[@"versionpurge.minVersions"] = versionpurgeMinVersions;
    }
    if (versionpurgeMaxAgeDays != nil) {
        queryParams[@"versionpurge.maxAgeDays"] = versionpurgeMaxAgeDays;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplVersionPurgeTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplVersionPurgeTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param wcmdbgfilterEnabled  (optional)
///
///  @param wcmdbgfilterJspDebug  (optional)
///
///  @returns OAIComDayCqWcmCoreImplWCMDebugFilterInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplWCMDebugFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    wcmdbgfilterEnabled: (NSNumber*) wcmdbgfilterEnabled
    wcmdbgfilterJspDebug: (NSNumber*) wcmdbgfilterJspDebug
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplWCMDebugFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (wcmdbgfilterEnabled != nil) {
        queryParams[@"wcmdbgfilter.enabled"] = [wcmdbgfilterEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (wcmdbgfilterJspDebug != nil) {
        queryParams[@"wcmdbgfilter.jspDebug"] = [wcmdbgfilterJspDebug isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplWCMDebugFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplWCMDebugFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param wcmdevmodefilterEnabled  (optional)
///
///  @returns OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplWCMDeveloperModeFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    wcmdevmodefilterEnabled: (NSNumber*) wcmdevmodefilterEnabled
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (wcmdevmodefilterEnabled != nil) {
        queryParams[@"wcmdevmodefilter.enabled"] = [wcmdevmodefilterEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplWCMDeveloperModeFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param filterOrder  (optional)
///
///  @param filterScope  (optional)
///
///  @returns OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreImplWarpTimeWarpFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    filterOrder: (NSString*) filterOrder
    filterScope: (NSString*) filterScope
    completionHandler: (void (^)(OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (filterOrder != nil) {
        queryParams[@"filter.order"] = filterOrder;
    }
    if (filterScope != nil) {
        queryParams[@"filter.scope"] = filterScope;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreImplWarpTimeWarpFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mvtstatisticsTrackingurl  (optional)
///
///  @returns OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreMvtMVTStatisticsImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mvtstatisticsTrackingurl: (NSString*) mvtstatisticsTrackingurl
    completionHandler: (void (^)(OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mvtstatisticsTrackingurl != nil) {
        queryParams[@"mvtstatistics.trackingurl"] = mvtstatisticsTrackingurl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreMvtMVTStatisticsImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pageviewstatisticsTrackingurl  (optional)
///
///  @param pageviewstatisticsTrackingscriptEnabled  (optional)
///
///  @returns OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreStatsPageViewStatisticsImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pageviewstatisticsTrackingurl: (NSString*) pageviewstatisticsTrackingurl
    pageviewstatisticsTrackingscriptEnabled: (NSString*) pageviewstatisticsTrackingscriptEnabled
    completionHandler: (void (^)(OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pageviewstatisticsTrackingurl != nil) {
        queryParams[@"pageviewstatistics.trackingurl"] = pageviewstatisticsTrackingurl;
    }
    if (pageviewstatisticsTrackingscriptEnabled != nil) {
        queryParams[@"pageviewstatistics.trackingscript.enabled"] = pageviewstatisticsTrackingscriptEnabled;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreStatsPageViewStatisticsImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param wcmfilterMode  (optional)
///
///  @returns OAIComDayCqWcmCoreWCMRequestFilterInfo*
///
-(NSURLSessionTask*) comDayCqWcmCoreWCMRequestFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    wcmfilterMode: (NSString*) wcmfilterMode
    completionHandler: (void (^)(OAIComDayCqWcmCoreWCMRequestFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (wcmfilterMode != nil) {
        queryParams[@"wcmfilter.mode"] = wcmfilterMode;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmCoreWCMRequestFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmCoreWCMRequestFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param extractFilter  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterDesignPackageImporterInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterDesignPackageImporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    extractFilter: (NSArray<NSString*>*) extractFilter
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterDesignPackageImporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (extractFilter != nil) {
        queryParams[@"extract.filter"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: extractFilter format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterDesignPackageImporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterDesignPackageImporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param filepattern  (optional)
///
///  @param buildPageNodes  (optional)
///
///  @param buildClientLibs  (optional)
///
///  @param buildCanvasComponent  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterImplCanvasBuilderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    filepattern: (NSString*) filepattern
    buildPageNodes: (NSNumber*) buildPageNodes
    buildClientLibs: (NSNumber*) buildClientLibs
    buildCanvasComponent: (NSNumber*) buildCanvasComponent
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (filepattern != nil) {
        queryParams[@"filepattern"] = filepattern;
    }
    if (buildPageNodes != nil) {
        queryParams[@"build.page.nodes"] = [buildPageNodes isEqual:@(YES)] ? @"true" : @"false";
    }
    if (buildClientLibs != nil) {
        queryParams[@"build.client.libs"] = [buildClientLibs isEqual:@(YES)] ? @"true" : @"false";
    }
    if (buildCanvasComponent != nil) {
        queryParams[@"build.canvas.component"] = [buildCanvasComponent isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterImplCanvasBuilderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param minThreadPoolSize  (optional)
///
///  @param maxThreadPoolSize  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterImplCanvasPageDeleteHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    minThreadPoolSize: (NSNumber*) minThreadPoolSize
    maxThreadPoolSize: (NSNumber*) maxThreadPoolSize
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (minThreadPoolSize != nil) {
        queryParams[@"minThreadPoolSize"] = minThreadPoolSize;
    }
    if (maxThreadPoolSize != nil) {
        queryParams[@"maxThreadPoolSize"] = maxThreadPoolSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param searchPattern  (optional)
///
///  @param replacePattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterImplEntryPreprocessorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    searchPattern: (NSString*) searchPattern
    replacePattern: (NSString*) replacePattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (searchPattern != nil) {
        queryParams[@"search.pattern"] = searchPattern;
    }
    if (replacePattern != nil) {
        queryParams[@"replace.pattern"] = replacePattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param filepattern  (optional)
///
///  @param deviceGroups  (optional)
///
///  @param buildPageNodes  (optional)
///
///  @param buildClientLibs  (optional)
///
///  @param buildCanvasComponent  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterImplMobileCanvasBuilderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    filepattern: (NSString*) filepattern
    deviceGroups: (NSArray<NSString*>*) deviceGroups
    buildPageNodes: (NSNumber*) buildPageNodes
    buildClientLibs: (NSNumber*) buildClientLibs
    buildCanvasComponent: (NSNumber*) buildCanvasComponent
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (filepattern != nil) {
        queryParams[@"filepattern"] = filepattern;
    }
    if (deviceGroups != nil) {
        queryParams[@"device.groups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: deviceGroups format: @"multi"];
    }
    if (buildPageNodes != nil) {
        queryParams[@"build.page.nodes"] = [buildPageNodes isEqual:@(YES)] ? @"true" : @"false";
    }
    if (buildClientLibs != nil) {
        queryParams[@"build.client.libs"] = [buildClientLibs isEqual:@(YES)] ? @"true" : @"false";
    }
    if (buildCanvasComponent != nil) {
        queryParams[@"build.canvas.component"] = [buildCanvasComponent isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @param componentResourceType  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    componentResourceType: (NSString*) componentResourceType
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    if (componentResourceType != nil) {
        queryParams[@"component.resourceType"] = componentResourceType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param tagpattern  (optional)
///
///  @returns OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo*
///
-(NSURLSessionTask*) comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    tagpattern: (NSString*) tagpattern
    completionHandler: (void (^)(OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (tagpattern != nil) {
        queryParams[@"tagpattern"] = tagpattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceName  (optional)
///
///  @param slingServletResourceTypes  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param formsFormchooserservletAdvansesearchRequire  (optional)
///
///  @returns OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationFormsImplFormChooserServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceName: (NSString*) serviceName
    slingServletResourceTypes: (NSString*) slingServletResourceTypes
    slingServletSelectors: (NSString*) slingServletSelectors
    slingServletMethods: (NSArray<NSString*>*) slingServletMethods
    formsFormchooserservletAdvansesearchRequire: (NSNumber*) formsFormchooserservletAdvansesearchRequire
    completionHandler: (void (^)(OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceName != nil) {
        queryParams[@"service.name"] = serviceName;
    }
    if (slingServletResourceTypes != nil) {
        queryParams[@"sling.servlet.resourceTypes"] = slingServletResourceTypes;
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletMethods format: @"multi"];
    }
    if (formsFormchooserservletAdvansesearchRequire != nil) {
        queryParams[@"forms.formchooserservlet.advansesearch.require"] = [formsFormchooserservletAdvansesearchRequire isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationFormsImplFormChooserServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param formsFormparagraphpostprocessorEnabled  (optional)
///
///  @param formsFormparagraphpostprocessorFormresourcetypes  (optional)
///
///  @returns OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationFormsImplFormParagraphPostProcessorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    formsFormparagraphpostprocessorEnabled: (NSNumber*) formsFormparagraphpostprocessorEnabled
    formsFormparagraphpostprocessorFormresourcetypes: (NSArray<NSString*>*) formsFormparagraphpostprocessorFormresourcetypes
    completionHandler: (void (^)(OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (formsFormparagraphpostprocessorEnabled != nil) {
        queryParams[@"forms.formparagraphpostprocessor.enabled"] = [formsFormparagraphpostprocessorEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (formsFormparagraphpostprocessorFormresourcetypes != nil) {
        queryParams[@"forms.formparagraphpostprocessor.formresourcetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: formsFormparagraphpostprocessorFormresourcetypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param nameWhitelist  (optional)
///
///  @param allowExpressions  (optional)
///
///  @returns OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationFormsImplFormsHandlingServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    nameWhitelist: (NSString*) nameWhitelist
    allowExpressions: (NSNumber*) allowExpressions
    completionHandler: (void (^)(OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (nameWhitelist != nil) {
        queryParams[@"name.whitelist"] = nameWhitelist;
    }
    if (allowExpressions != nil) {
        queryParams[@"allow.expressions"] = [allowExpressions isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationFormsImplFormsHandlingServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletResourceTypes  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param resourceWhitelist  (optional)
///
///  @param resourceBlacklist  (optional)
///
///  @returns OAIComDayCqWcmFoundationFormsImplMailServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationFormsImplMailServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletResourceTypes: (NSString*) slingServletResourceTypes
    slingServletSelectors: (NSString*) slingServletSelectors
    resourceWhitelist: (NSArray<NSString*>*) resourceWhitelist
    resourceBlacklist: (NSString*) resourceBlacklist
    completionHandler: (void (^)(OAIComDayCqWcmFoundationFormsImplMailServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletResourceTypes != nil) {
        queryParams[@"sling.servlet.resourceTypes"] = slingServletResourceTypes;
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = slingServletSelectors;
    }
    if (resourceWhitelist != nil) {
        queryParams[@"resource.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceWhitelist format: @"multi"];
    }
    if (resourceBlacklist != nil) {
        queryParams[@"resource.blacklist"] = resourceBlacklist;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationFormsImplMailServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationFormsImplMailServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param adaptSupportedWidths  (optional)
///
///  @returns OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationImplAdaptiveImageComponentServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    adaptSupportedWidths: (NSArray<NSString*>*) adaptSupportedWidths
    completionHandler: (void (^)(OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (adaptSupportedWidths != nil) {
        queryParams[@"adapt.supported.widths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: adaptSupportedWidths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param authHttpNologin  (optional)
///
///  @param authHttpRealm  (optional)
///
///  @param authDefaultLoginpage  (optional)
///
///  @param authCredForm  (optional)
///
///  @param authCredUtf8  (optional)
///
///  @returns OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationImplHTTPAuthHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    authHttpNologin: (NSNumber*) authHttpNologin
    authHttpRealm: (NSString*) authHttpRealm
    authDefaultLoginpage: (NSString*) authDefaultLoginpage
    authCredForm: (NSArray<NSString*>*) authCredForm
    authCredUtf8: (NSArray<NSString*>*) authCredUtf8
    completionHandler: (void (^)(OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (authHttpNologin != nil) {
        queryParams[@"auth.http.nologin"] = [authHttpNologin isEqual:@(YES)] ? @"true" : @"false";
    }
    if (authHttpRealm != nil) {
        queryParams[@"auth.http.realm"] = authHttpRealm;
    }
    if (authDefaultLoginpage != nil) {
        queryParams[@"auth.default.loginpage"] = authDefaultLoginpage;
    }
    if (authCredForm != nil) {
        queryParams[@"auth.cred.form"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authCredForm format: @"multi"];
    }
    if (authCredUtf8 != nil) {
        queryParams[@"auth.cred.utf8"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authCredUtf8 format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationImplHTTPAuthHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingAuthRequirements  (optional)
///
///  @returns OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationImplPageImpressionsTrackerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingAuthRequirements: (NSString*) slingAuthRequirements
    completionHandler: (void (^)(OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingAuthRequirements != nil) {
        queryParams[@"sling.auth.requirements"] = slingAuthRequirements;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationImplPageImpressionsTrackerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param excludedResourceTypes  (optional)
///
///  @returns OAIComDayCqWcmFoundationImplPageRedirectServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationImplPageRedirectServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    excludedResourceTypes: (NSArray<NSString*>*) excludedResourceTypes
    completionHandler: (void (^)(OAIComDayCqWcmFoundationImplPageRedirectServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (excludedResourceTypes != nil) {
        queryParams[@"excluded.resource.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludedResourceTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationImplPageRedirectServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationImplPageRedirectServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param defaultAttachmentTypeBlacklist  (optional)
///
///  @param baselineAttachmentTypeBlacklist  (optional)
///
///  @returns OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    defaultAttachmentTypeBlacklist: (NSArray<NSString*>*) defaultAttachmentTypeBlacklist
    baselineAttachmentTypeBlacklist: (NSArray<NSString*>*) baselineAttachmentTypeBlacklist
    completionHandler: (void (^)(OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (defaultAttachmentTypeBlacklist != nil) {
        queryParams[@"default.attachment.type.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: defaultAttachmentTypeBlacklist format: @"multi"];
    }
    if (baselineAttachmentTypeBlacklist != nil) {
        queryParams[@"baseline.attachment.type.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: baselineAttachmentTypeBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param parameterWhitelist  (optional)
///
///  @param parameterWhitelistPrefixes  (optional)
///
///  @param binaryParameterWhitelist  (optional)
///
///  @param modifierWhitelist  (optional)
///
///  @param operationWhitelist  (optional)
///
///  @param operationWhitelistPrefixes  (optional)
///
///  @param typehintWhitelist  (optional)
///
///  @param resourcetypeWhitelist  (optional)
///
///  @returns OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    parameterWhitelist: (NSArray<NSString*>*) parameterWhitelist
    parameterWhitelistPrefixes: (NSArray<NSString*>*) parameterWhitelistPrefixes
    binaryParameterWhitelist: (NSArray<NSString*>*) binaryParameterWhitelist
    modifierWhitelist: (NSArray<NSString*>*) modifierWhitelist
    operationWhitelist: (NSArray<NSString*>*) operationWhitelist
    operationWhitelistPrefixes: (NSArray<NSString*>*) operationWhitelistPrefixes
    typehintWhitelist: (NSArray<NSString*>*) typehintWhitelist
    resourcetypeWhitelist: (NSArray<NSString*>*) resourcetypeWhitelist
    completionHandler: (void (^)(OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (parameterWhitelist != nil) {
        queryParams[@"parameter.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parameterWhitelist format: @"multi"];
    }
    if (parameterWhitelistPrefixes != nil) {
        queryParams[@"parameter.whitelist.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parameterWhitelistPrefixes format: @"multi"];
    }
    if (binaryParameterWhitelist != nil) {
        queryParams[@"binary.parameter.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: binaryParameterWhitelist format: @"multi"];
    }
    if (modifierWhitelist != nil) {
        queryParams[@"modifier.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: modifierWhitelist format: @"multi"];
    }
    if (operationWhitelist != nil) {
        queryParams[@"operation.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: operationWhitelist format: @"multi"];
    }
    if (operationWhitelistPrefixes != nil) {
        queryParams[@"operation.whitelist.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: operationWhitelistPrefixes format: @"multi"];
    }
    if (typehintWhitelist != nil) {
        queryParams[@"typehint.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: typehintWhitelist format: @"multi"];
    }
    if (resourcetypeWhitelist != nil) {
        queryParams[@"resourcetype.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourcetypeWhitelist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param deviceInfoTransformerEnabled  (optional)
///
///  @param deviceInfoTransformerCssStyle  (optional)
///
///  @returns OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    deviceInfoTransformerEnabled: (NSNumber*) deviceInfoTransformerEnabled
    deviceInfoTransformerCssStyle: (NSString*) deviceInfoTransformerCssStyle
    completionHandler: (void (^)(OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (deviceInfoTransformerEnabled != nil) {
        queryParams[@"device.info.transformer.enabled"] = [deviceInfoTransformerEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (deviceInfoTransformerCssStyle != nil) {
        queryParams[@"device.info.transformer.css.style"] = deviceInfoTransformerCssStyle;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param redirectEnabled  (optional)
///
///  @param redirectStatsEnabled  (optional)
///
///  @param redirectExtensions  (optional)
///
///  @param redirectPaths  (optional)
///
///  @returns OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo*
///
-(NSURLSessionTask*) comDayCqWcmMobileCoreImplRedirectRedirectFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    redirectEnabled: (NSNumber*) redirectEnabled
    redirectStatsEnabled: (NSNumber*) redirectStatsEnabled
    redirectExtensions: (NSArray<NSString*>*) redirectExtensions
    redirectPaths: (NSArray<NSString*>*) redirectPaths
    completionHandler: (void (^)(OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (redirectEnabled != nil) {
        queryParams[@"redirect.enabled"] = [redirectEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (redirectStatsEnabled != nil) {
        queryParams[@"redirect.stats.enabled"] = [redirectStatsEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (redirectExtensions != nil) {
        queryParams[@"redirect.extensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: redirectExtensions format: @"multi"];
    }
    if (redirectPaths != nil) {
        queryParams[@"redirect.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: redirectPaths format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @param contentcopyactionOrderStyle  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsContentCopyActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    contentcopyactionOrderStyle: (NSString*) contentcopyactionOrderStyle
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    if (contentcopyactionOrderStyle != nil) {
        queryParams[@"contentcopyaction.order.style"] = contentcopyactionOrderStyle;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsContentDeleteActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @param cqWcmMsmActionIgnoredMixin  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsContentUpdateActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    cqWcmMsmActionIgnoredMixin: (NSArray<NSString*>*) cqWcmMsmActionIgnoredMixin
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    if (cqWcmMsmActionIgnoredMixin != nil) {
        queryParams[@"cq.wcm.msm.action.ignoredMixin"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionIgnoredMixin format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsOrderChildrenActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @param cqWcmMsmImplActionsPagemovePropReferenceUpdate  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsPageMoveActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    cqWcmMsmImplActionsPagemovePropReferenceUpdate: (NSNumber*) cqWcmMsmImplActionsPagemovePropReferenceUpdate
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    if (cqWcmMsmImplActionsPagemovePropReferenceUpdate != nil) {
        queryParams[@"cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate"] = [cqWcmMsmImplActionsPagemovePropReferenceUpdate isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @param cqWcmMsmImplActionReferencesupdatePropUpdateNested  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsReferencesUpdateActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    cqWcmMsmImplActionReferencesupdatePropUpdateNested: (NSNumber*) cqWcmMsmImplActionReferencesupdatePropUpdateNested
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    if (cqWcmMsmImplActionReferencesupdatePropUpdateNested != nil) {
        queryParams[@"cq.wcm.msm.impl.action.referencesupdate.prop_updateNested"] = [cqWcmMsmImplActionReferencesupdatePropUpdateNested isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmMsmActionExcludednodetypes  (optional)
///
///  @param cqWcmMsmActionExcludedparagraphitems  (optional)
///
///  @param cqWcmMsmActionExcludedprops  (optional)
///
///  @returns OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplActionsVersionCopyActionFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmMsmActionExcludednodetypes: (NSArray<NSString*>*) cqWcmMsmActionExcludednodetypes
    cqWcmMsmActionExcludedparagraphitems: (NSArray<NSString*>*) cqWcmMsmActionExcludedparagraphitems
    cqWcmMsmActionExcludedprops: (NSArray<NSString*>*) cqWcmMsmActionExcludedprops
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmMsmActionExcludednodetypes != nil) {
        queryParams[@"cq.wcm.msm.action.excludednodetypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludednodetypes format: @"multi"];
    }
    if (cqWcmMsmActionExcludedparagraphitems != nil) {
        queryParams[@"cq.wcm.msm.action.excludedparagraphitems"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedparagraphitems format: @"multi"];
    }
    if (cqWcmMsmActionExcludedprops != nil) {
        queryParams[@"cq.wcm.msm.action.excludedprops"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmMsmActionExcludedprops format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param liverelationshipmgrRelationsconfigDefault  (optional)
///
///  @returns OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplLiveRelationshipManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    liverelationshipmgrRelationsconfigDefault: (NSString*) liverelationshipmgrRelationsconfigDefault
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (liverelationshipmgrRelationsconfigDefault != nil) {
        queryParams[@"liverelationshipmgr.relationsconfig.default"] = liverelationshipmgrRelationsconfigDefault;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplLiveRelationshipManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param rolloutmgrExcludedpropsDefault  (optional)
///
///  @param rolloutmgrExcludedparagraphpropsDefault  (optional)
///
///  @param rolloutmgrExcludednodetypesDefault  (optional)
///
///  @param rolloutmgrThreadpoolMaxsize  (optional)
///
///  @param rolloutmgrThreadpoolMaxshutdowntime  (optional)
///
///  @param rolloutmgrThreadpoolPriority  (optional)
///
///  @param rolloutmgrCommitSize  (optional)
///
///  @param rolloutmgrConflicthandlingEnabled  (optional)
///
///  @returns OAIComDayCqWcmMsmImplRolloutManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplRolloutManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    rolloutmgrExcludedpropsDefault: (NSArray<NSString*>*) rolloutmgrExcludedpropsDefault
    rolloutmgrExcludedparagraphpropsDefault: (NSArray<NSString*>*) rolloutmgrExcludedparagraphpropsDefault
    rolloutmgrExcludednodetypesDefault: (NSArray<NSString*>*) rolloutmgrExcludednodetypesDefault
    rolloutmgrThreadpoolMaxsize: (NSNumber*) rolloutmgrThreadpoolMaxsize
    rolloutmgrThreadpoolMaxshutdowntime: (NSNumber*) rolloutmgrThreadpoolMaxshutdowntime
    rolloutmgrThreadpoolPriority: (NSString*) rolloutmgrThreadpoolPriority
    rolloutmgrCommitSize: (NSNumber*) rolloutmgrCommitSize
    rolloutmgrConflicthandlingEnabled: (NSNumber*) rolloutmgrConflicthandlingEnabled
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplRolloutManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (rolloutmgrExcludedpropsDefault != nil) {
        queryParams[@"rolloutmgr.excludedprops.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: rolloutmgrExcludedpropsDefault format: @"multi"];
    }
    if (rolloutmgrExcludedparagraphpropsDefault != nil) {
        queryParams[@"rolloutmgr.excludedparagraphprops.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: rolloutmgrExcludedparagraphpropsDefault format: @"multi"];
    }
    if (rolloutmgrExcludednodetypesDefault != nil) {
        queryParams[@"rolloutmgr.excludednodetypes.default"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: rolloutmgrExcludednodetypesDefault format: @"multi"];
    }
    if (rolloutmgrThreadpoolMaxsize != nil) {
        queryParams[@"rolloutmgr.threadpool.maxsize"] = rolloutmgrThreadpoolMaxsize;
    }
    if (rolloutmgrThreadpoolMaxshutdowntime != nil) {
        queryParams[@"rolloutmgr.threadpool.maxshutdowntime"] = rolloutmgrThreadpoolMaxshutdowntime;
    }
    if (rolloutmgrThreadpoolPriority != nil) {
        queryParams[@"rolloutmgr.threadpool.priority"] = rolloutmgrThreadpoolPriority;
    }
    if (rolloutmgrCommitSize != nil) {
        queryParams[@"rolloutmgr.commit.size"] = rolloutmgrCommitSize;
    }
    if (rolloutmgrConflicthandlingEnabled != nil) {
        queryParams[@"rolloutmgr.conflicthandling.enabled"] = [rolloutmgrConflicthandlingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplRolloutManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplRolloutManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param auditlogservletDefaultEventsCount  (optional)
///
///  @param auditlogservletDefaultPath  (optional)
///
///  @returns OAIComDayCqWcmMsmImplServletsAuditLogServletInfo*
///
-(NSURLSessionTask*) comDayCqWcmMsmImplServletsAuditLogServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    auditlogservletDefaultEventsCount: (NSNumber*) auditlogservletDefaultEventsCount
    auditlogservletDefaultPath: (NSString*) auditlogservletDefaultPath
    completionHandler: (void (^)(OAIComDayCqWcmMsmImplServletsAuditLogServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (auditlogservletDefaultEventsCount != nil) {
        queryParams[@"auditlogservlet.default.events.count"] = auditlogservletDefaultEventsCount;
    }
    if (auditlogservletDefaultPath != nil) {
        queryParams[@"auditlogservlet.default.path"] = auditlogservletDefaultPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmMsmImplServletsAuditLogServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmMsmImplServletsAuditLogServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param emailFrom  (optional)
///
///  @returns OAIComDayCqWcmNotificationEmailImplEmailChannelInfo*
///
-(NSURLSessionTask*) comDayCqWcmNotificationEmailImplEmailChannelWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    emailFrom: (NSString*) emailFrom
    completionHandler: (void (^)(OAIComDayCqWcmNotificationEmailImplEmailChannelInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (emailFrom != nil) {
        queryParams[@"email.from"] = emailFrom;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmNotificationEmailImplEmailChannelInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmNotificationEmailImplEmailChannelInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventTopics  (optional)
///
///  @returns OAIComDayCqWcmNotificationImplNotificationManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmNotificationImplNotificationManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventTopics: (NSArray<NSString*>*) eventTopics
    completionHandler: (void (^)(OAIComDayCqWcmNotificationImplNotificationManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventTopics != nil) {
        queryParams[@"event.topics"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: eventTopics format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmNotificationImplNotificationManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmNotificationImplNotificationManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param comDayCqWcmScriptingBvpScriptEngines  (optional)
///
///  @returns OAIComDayCqWcmScriptingImplBVPManagerInfo*
///
-(NSURLSessionTask*) comDayCqWcmScriptingImplBVPManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    comDayCqWcmScriptingBvpScriptEngines: (NSArray<NSString*>*) comDayCqWcmScriptingBvpScriptEngines
    completionHandler: (void (^)(OAIComDayCqWcmScriptingImplBVPManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (comDayCqWcmScriptingBvpScriptEngines != nil) {
        queryParams[@"com.day.cq.wcm.scripting.bvp.script.engines"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: comDayCqWcmScriptingBvpScriptEngines format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmScriptingImplBVPManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmScriptingImplBVPManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cqWcmUndoEnabled  (optional)
///
///  @param cqWcmUndoPath  (optional)
///
///  @param cqWcmUndoValidity  (optional)
///
///  @param cqWcmUndoSteps  (optional)
///
///  @param cqWcmUndoPersistence  (optional)
///
///  @param cqWcmUndoPersistenceMode  (optional)
///
///  @param cqWcmUndoMarkermode  (optional)
///
///  @param cqWcmUndoWhitelist  (optional)
///
///  @param cqWcmUndoBlacklist  (optional)
///
///  @returns OAIComDayCqWcmUndoUndoConfigInfo*
///
-(NSURLSessionTask*) comDayCqWcmUndoUndoConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cqWcmUndoEnabled: (NSNumber*) cqWcmUndoEnabled
    cqWcmUndoPath: (NSString*) cqWcmUndoPath
    cqWcmUndoValidity: (NSNumber*) cqWcmUndoValidity
    cqWcmUndoSteps: (NSNumber*) cqWcmUndoSteps
    cqWcmUndoPersistence: (NSString*) cqWcmUndoPersistence
    cqWcmUndoPersistenceMode: (NSNumber*) cqWcmUndoPersistenceMode
    cqWcmUndoMarkermode: (NSString*) cqWcmUndoMarkermode
    cqWcmUndoWhitelist: (NSArray<NSString*>*) cqWcmUndoWhitelist
    cqWcmUndoBlacklist: (NSArray<NSString*>*) cqWcmUndoBlacklist
    completionHandler: (void (^)(OAIComDayCqWcmUndoUndoConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cqWcmUndoEnabled != nil) {
        queryParams[@"cq.wcm.undo.enabled"] = [cqWcmUndoEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqWcmUndoPath != nil) {
        queryParams[@"cq.wcm.undo.path"] = cqWcmUndoPath;
    }
    if (cqWcmUndoValidity != nil) {
        queryParams[@"cq.wcm.undo.validity"] = cqWcmUndoValidity;
    }
    if (cqWcmUndoSteps != nil) {
        queryParams[@"cq.wcm.undo.steps"] = cqWcmUndoSteps;
    }
    if (cqWcmUndoPersistence != nil) {
        queryParams[@"cq.wcm.undo.persistence"] = cqWcmUndoPersistence;
    }
    if (cqWcmUndoPersistenceMode != nil) {
        queryParams[@"cq.wcm.undo.persistence.mode"] = [cqWcmUndoPersistenceMode isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqWcmUndoMarkermode != nil) {
        queryParams[@"cq.wcm.undo.markermode"] = cqWcmUndoMarkermode;
    }
    if (cqWcmUndoWhitelist != nil) {
        queryParams[@"cq.wcm.undo.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmUndoWhitelist format: @"multi"];
    }
    if (cqWcmUndoBlacklist != nil) {
        queryParams[@"cq.wcm.undo.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmUndoBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmUndoUndoConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmUndoUndoConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param flushAgents  (optional)
///
///  @returns OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo*
///
-(NSURLSessionTask*) comDayCqWcmWebservicesupportImplReplicationEventListenerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    flushAgents: (NSArray<NSString*>*) flushAgents
    completionHandler: (void (^)(OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (flushAgents != nil) {
        queryParams[@"Flush agents"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: flushAgents format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmWebservicesupportImplReplicationEventListenerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param eventFilter  (optional)
///
///  @param minThreadPoolSize  (optional)
///
///  @param maxThreadPoolSize  (optional)
///
///  @param cqWcmWorkflowTerminateOnActivate  (optional)
///
///  @param cqWcmWorklfowTerminateExclusionList  (optional)
///
///  @returns OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo*
///
-(NSURLSessionTask*) comDayCqWcmWorkflowImplWcmWorkflowServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    eventFilter: (NSString*) eventFilter
    minThreadPoolSize: (NSNumber*) minThreadPoolSize
    maxThreadPoolSize: (NSNumber*) maxThreadPoolSize
    cqWcmWorkflowTerminateOnActivate: (NSNumber*) cqWcmWorkflowTerminateOnActivate
    cqWcmWorklfowTerminateExclusionList: (NSArray<NSString*>*) cqWcmWorklfowTerminateExclusionList
    completionHandler: (void (^)(OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (eventFilter != nil) {
        queryParams[@"event.filter"] = eventFilter;
    }
    if (minThreadPoolSize != nil) {
        queryParams[@"minThreadPoolSize"] = minThreadPoolSize;
    }
    if (maxThreadPoolSize != nil) {
        queryParams[@"maxThreadPoolSize"] = maxThreadPoolSize;
    }
    if (cqWcmWorkflowTerminateOnActivate != nil) {
        queryParams[@"cq.wcm.workflow.terminate.on.activate"] = [cqWcmWorkflowTerminateOnActivate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cqWcmWorklfowTerminateExclusionList != nil) {
        queryParams[@"cq.wcm.worklfow.terminate.exclusion.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cqWcmWorklfowTerminateExclusionList format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param workflowpackageinfoproviderFilter  (optional)
///
///  @param workflowpackageinfoproviderFilterRootpath  (optional)
///
///  @returns OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo*
///
-(NSURLSessionTask*) comDayCqWcmWorkflowImplWorkflowPackageInfoProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    workflowpackageinfoproviderFilter: (NSArray<NSString*>*) workflowpackageinfoproviderFilter
    workflowpackageinfoproviderFilterRootpath: (NSString*) workflowpackageinfoproviderFilterRootpath
    completionHandler: (void (^)(OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (workflowpackageinfoproviderFilter != nil) {
        queryParams[@"workflowpackageinfoprovider.filter"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: workflowpackageinfoproviderFilter format: @"multi"];
    }
    if (workflowpackageinfoproviderFilterRootpath != nil) {
        queryParams[@"workflowpackageinfoprovider.filter.rootpath"] = workflowpackageinfoproviderFilterRootpath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param htmllibmanagerClientmanager  (optional)
///
///  @param htmllibmanagerDebug  (optional)
///
///  @param htmllibmanagerDebugConsole  (optional)
///
///  @param htmllibmanagerDebugInitJs  (optional)
///
///  @param htmllibmanagerDefaultthemename  (optional)
///
///  @param htmllibmanagerDefaultuserthemename  (optional)
///
///  @param htmllibmanagerFirebuglitePath  (optional)
///
///  @param htmllibmanagerForceCQUrlInfo  (optional)
///
///  @param htmllibmanagerGzip  (optional)
///
///  @param htmllibmanagerMaxage  (optional)
///
///  @param htmllibmanagerMaxDataUriSize  (optional)
///
///  @param htmllibmanagerMinify  (optional)
///
///  @param htmllibmanagerPathList  (optional)
///
///  @param htmllibmanagerTiming  (optional)
///
///  @returns OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo*
///
-(NSURLSessionTask*) comDayCqWidgetImplHtmlLibraryManagerImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    htmllibmanagerClientmanager: (NSString*) htmllibmanagerClientmanager
    htmllibmanagerDebug: (NSNumber*) htmllibmanagerDebug
    htmllibmanagerDebugConsole: (NSNumber*) htmllibmanagerDebugConsole
    htmllibmanagerDebugInitJs: (NSString*) htmllibmanagerDebugInitJs
    htmllibmanagerDefaultthemename: (NSString*) htmllibmanagerDefaultthemename
    htmllibmanagerDefaultuserthemename: (NSString*) htmllibmanagerDefaultuserthemename
    htmllibmanagerFirebuglitePath: (NSString*) htmllibmanagerFirebuglitePath
    htmllibmanagerForceCQUrlInfo: (NSNumber*) htmllibmanagerForceCQUrlInfo
    htmllibmanagerGzip: (NSNumber*) htmllibmanagerGzip
    htmllibmanagerMaxage: (NSNumber*) htmllibmanagerMaxage
    htmllibmanagerMaxDataUriSize: (NSNumber*) htmllibmanagerMaxDataUriSize
    htmllibmanagerMinify: (NSNumber*) htmllibmanagerMinify
    htmllibmanagerPathList: (NSArray<NSString*>*) htmllibmanagerPathList
    htmllibmanagerTiming: (NSNumber*) htmllibmanagerTiming
    completionHandler: (void (^)(OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (htmllibmanagerClientmanager != nil) {
        queryParams[@"htmllibmanager.clientmanager"] = htmllibmanagerClientmanager;
    }
    if (htmllibmanagerDebug != nil) {
        queryParams[@"htmllibmanager.debug"] = [htmllibmanagerDebug isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerDebugConsole != nil) {
        queryParams[@"htmllibmanager.debug.console"] = [htmllibmanagerDebugConsole isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerDebugInitJs != nil) {
        queryParams[@"htmllibmanager.debug.init.js"] = htmllibmanagerDebugInitJs;
    }
    if (htmllibmanagerDefaultthemename != nil) {
        queryParams[@"htmllibmanager.defaultthemename"] = htmllibmanagerDefaultthemename;
    }
    if (htmllibmanagerDefaultuserthemename != nil) {
        queryParams[@"htmllibmanager.defaultuserthemename"] = htmllibmanagerDefaultuserthemename;
    }
    if (htmllibmanagerFirebuglitePath != nil) {
        queryParams[@"htmllibmanager.firebuglite.path"] = htmllibmanagerFirebuglitePath;
    }
    if (htmllibmanagerForceCQUrlInfo != nil) {
        queryParams[@"htmllibmanager.forceCQUrlInfo"] = [htmllibmanagerForceCQUrlInfo isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerGzip != nil) {
        queryParams[@"htmllibmanager.gzip"] = [htmllibmanagerGzip isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerMaxage != nil) {
        queryParams[@"htmllibmanager.maxage"] = htmllibmanagerMaxage;
    }
    if (htmllibmanagerMaxDataUriSize != nil) {
        queryParams[@"htmllibmanager.maxDataUriSize"] = htmllibmanagerMaxDataUriSize;
    }
    if (htmllibmanagerMinify != nil) {
        queryParams[@"htmllibmanager.minify"] = [htmllibmanagerMinify isEqual:@(YES)] ? @"true" : @"false";
    }
    if (htmllibmanagerPathList != nil) {
        queryParams[@"htmllibmanager.path.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: htmllibmanagerPathList format: @"multi"];
    }
    if (htmllibmanagerTiming != nil) {
        queryParams[@"htmllibmanager.timing"] = [htmllibmanagerTiming isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWidgetImplHtmlLibraryManagerImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param extendableWidgets  (optional)
///
///  @param widgetextensionproviderDebug  (optional)
///
///  @returns OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo*
///
-(NSURLSessionTask*) comDayCqWidgetImplWidgetExtensionProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    extendableWidgets: (NSArray<NSString*>*) extendableWidgets
    widgetextensionproviderDebug: (NSNumber*) widgetextensionproviderDebug
    completionHandler: (void (^)(OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (extendableWidgets != nil) {
        queryParams[@"extendable.widgets"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: extendableWidgets format: @"multi"];
    }
    if (widgetextensionproviderDebug != nil) {
        queryParams[@"widgetextensionprovider.debug"] = [widgetextensionproviderDebug isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWidgetImplWidgetExtensionProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param fromAddress  (optional)
///
///  @param hostPrefix  (optional)
///
///  @param notifyOnabort  (optional)
///
///  @param notifyOncomplete  (optional)
///
///  @param notifyOncontainercomplete  (optional)
///
///  @param notifyUseronly  (optional)
///
///  @returns OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo*
///
-(NSURLSessionTask*) comDayCqWorkflowImplEmailEMailNotificationServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    fromAddress: (NSString*) fromAddress
    hostPrefix: (NSString*) hostPrefix
    notifyOnabort: (NSNumber*) notifyOnabort
    notifyOncomplete: (NSNumber*) notifyOncomplete
    notifyOncontainercomplete: (NSNumber*) notifyOncontainercomplete
    notifyUseronly: (NSNumber*) notifyUseronly
    completionHandler: (void (^)(OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (fromAddress != nil) {
        queryParams[@"from.address"] = fromAddress;
    }
    if (hostPrefix != nil) {
        queryParams[@"host.prefix"] = hostPrefix;
    }
    if (notifyOnabort != nil) {
        queryParams[@"notify.onabort"] = [notifyOnabort isEqual:@(YES)] ? @"true" : @"false";
    }
    if (notifyOncomplete != nil) {
        queryParams[@"notify.oncomplete"] = [notifyOncomplete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (notifyOncontainercomplete != nil) {
        queryParams[@"notify.oncontainercomplete"] = [notifyOncontainercomplete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (notifyUseronly != nil) {
        queryParams[@"notify.useronly"] = [notifyUseronly isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWorkflowImplEmailEMailNotificationServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param notifyOnupdate  (optional)
///
///  @param notifyOncomplete  (optional)
///
///  @returns OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo*
///
-(NSURLSessionTask*) comDayCqWorkflowImplEmailTaskEMailNotificationServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    notifyOnupdate: (NSNumber*) notifyOnupdate
    notifyOncomplete: (NSNumber*) notifyOncomplete
    completionHandler: (void (^)(OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (notifyOnupdate != nil) {
        queryParams[@"notify.onupdate"] = [notifyOnupdate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (notifyOncomplete != nil) {
        queryParams[@"notify.oncomplete"] = [notifyOncomplete isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param tokenRequiredAttr  (optional)
///
///  @param tokenAlternateUrl  (optional)
///
///  @param tokenEncapsulated  (optional)
///
///  @param skipTokenRefresh  (optional)
///
///  @returns OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo*
///
-(NSURLSessionTask*) comDayCrxSecurityTokenImplImplTokenAuthenticationHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    tokenRequiredAttr: (NSString*) tokenRequiredAttr
    tokenAlternateUrl: (NSString*) tokenAlternateUrl
    tokenEncapsulated: (NSNumber*) tokenEncapsulated
    skipTokenRefresh: (NSArray<NSString*>*) skipTokenRefresh
    completionHandler: (void (^)(OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (tokenRequiredAttr != nil) {
        queryParams[@"token.required.attr"] = tokenRequiredAttr;
    }
    if (tokenAlternateUrl != nil) {
        queryParams[@"token.alternate.url"] = tokenAlternateUrl;
    }
    if (tokenEncapsulated != nil) {
        queryParams[@"token.encapsulated"] = [tokenEncapsulated isEqual:@(YES)] ? @"true" : @"false";
    }
    if (skipTokenRefresh != nil) {
        queryParams[@"skip.token.refresh"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: skipTokenRefresh format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enableTokenCleanupTask  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param batchSize  (optional)
///
///  @returns OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo*
///
-(NSURLSessionTask*) comDayCrxSecurityTokenImplTokenCleanupTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enableTokenCleanupTask: (NSNumber*) enableTokenCleanupTask
    schedulerExpression: (NSString*) schedulerExpression
    batchSize: (NSNumber*) batchSize
    completionHandler: (void (^)(OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enableTokenCleanupTask != nil) {
        queryParams[@"enable.token.cleanup.task"] = [enableTokenCleanupTask isEqual:@(YES)] ? @"true" : @"false";
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (batchSize != nil) {
        queryParams[@"batch.size"] = batchSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIComDayCrxSecurityTokenImplTokenCleanupTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param supportedLocales  (optional)
///
///  @param localizableProperties  (optional)
///
///  @returns OAIGuideLocalizationServiceInfo*
///
-(NSURLSessionTask*) guideLocalizationServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    supportedLocales: (NSArray<NSString*>*) supportedLocales
    localizableProperties: (NSArray<NSString*>*) localizableProperties
    completionHandler: (void (^)(OAIGuideLocalizationServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/Guide Localization Service"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (supportedLocales != nil) {
        queryParams[@"supportedLocales"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: supportedLocales format: @"multi"];
    }
    if (localizableProperties != nil) {
        queryParams[@"Localizable Properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: localizableProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIGuideLocalizationServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIGuideLocalizationServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIMessagingUserComponentFactoryInfo*
///
-(NSURLSessionTask*) messagingUserComponentFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    priority: (NSNumber*) priority
    completionHandler: (void (^)(OAIMessagingUserComponentFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/MessagingUserComponentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIMessagingUserComponentFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIMessagingUserComponentFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param attributeChangeNotificationEnabled  (optional)
///
///  @returns OAIOrgApacheAriesJmxFrameworkStateConfigInfo*
///
-(NSURLSessionTask*) orgApacheAriesJmxFrameworkStateConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    attributeChangeNotificationEnabled: (NSNumber*) attributeChangeNotificationEnabled
    completionHandler: (void (^)(OAIOrgApacheAriesJmxFrameworkStateConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (attributeChangeNotificationEnabled != nil) {
        queryParams[@"attributeChangeNotificationEnabled"] = [attributeChangeNotificationEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheAriesJmxFrameworkStateConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheAriesJmxFrameworkStateConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheFelixEventadminThreadPoolSize  (optional)
///
///  @param orgApacheFelixEventadminAsyncToSyncThreadRatio  (optional)
///
///  @param orgApacheFelixEventadminTimeout  (optional)
///
///  @param orgApacheFelixEventadminRequireTopic  (optional)
///
///  @param orgApacheFelixEventadminIgnoreTimeout  (optional)
///
///  @param orgApacheFelixEventadminIgnoreTopic  (optional)
///
///  @returns OAIOrgApacheFelixEventadminImplEventAdminInfo*
///
-(NSURLSessionTask*) orgApacheFelixEventadminImplEventAdminWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheFelixEventadminThreadPoolSize: (NSNumber*) orgApacheFelixEventadminThreadPoolSize
    orgApacheFelixEventadminAsyncToSyncThreadRatio: (NSNumber*) orgApacheFelixEventadminAsyncToSyncThreadRatio
    orgApacheFelixEventadminTimeout: (NSNumber*) orgApacheFelixEventadminTimeout
    orgApacheFelixEventadminRequireTopic: (NSNumber*) orgApacheFelixEventadminRequireTopic
    orgApacheFelixEventadminIgnoreTimeout: (NSArray<NSString*>*) orgApacheFelixEventadminIgnoreTimeout
    orgApacheFelixEventadminIgnoreTopic: (NSArray<NSString*>*) orgApacheFelixEventadminIgnoreTopic
    completionHandler: (void (^)(OAIOrgApacheFelixEventadminImplEventAdminInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheFelixEventadminThreadPoolSize != nil) {
        queryParams[@"org.apache.felix.eventadmin.ThreadPoolSize"] = orgApacheFelixEventadminThreadPoolSize;
    }
    if (orgApacheFelixEventadminAsyncToSyncThreadRatio != nil) {
        queryParams[@"org.apache.felix.eventadmin.AsyncToSyncThreadRatio"] = orgApacheFelixEventadminAsyncToSyncThreadRatio;
    }
    if (orgApacheFelixEventadminTimeout != nil) {
        queryParams[@"org.apache.felix.eventadmin.Timeout"] = orgApacheFelixEventadminTimeout;
    }
    if (orgApacheFelixEventadminRequireTopic != nil) {
        queryParams[@"org.apache.felix.eventadmin.RequireTopic"] = [orgApacheFelixEventadminRequireTopic isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixEventadminIgnoreTimeout != nil) {
        queryParams[@"org.apache.felix.eventadmin.IgnoreTimeout"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixEventadminIgnoreTimeout format: @"multi"];
    }
    if (orgApacheFelixEventadminIgnoreTopic != nil) {
        queryParams[@"org.apache.felix.eventadmin.IgnoreTopic"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixEventadminIgnoreTopic format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixEventadminImplEventAdminInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixEventadminImplEventAdminInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheFelixHttpHost  (optional)
///
///  @param orgApacheFelixHttpEnable  (optional)
///
///  @param orgOsgiServiceHttpPort  (optional)
///
///  @param orgApacheFelixHttpTimeout  (optional)
///
///  @param orgApacheFelixHttpsEnable  (optional)
///
///  @param orgOsgiServiceHttpPortSecure  (optional)
///
///  @param orgApacheFelixHttpsKeystore  (optional)
///
///  @param orgApacheFelixHttpsKeystorePassword  (optional)
///
///  @param orgApacheFelixHttpsKeystoreKeyPassword  (optional)
///
///  @param orgApacheFelixHttpsTruststore  (optional)
///
///  @param orgApacheFelixHttpsTruststorePassword  (optional)
///
///  @param orgApacheFelixHttpsClientcertificate  (optional)
///
///  @param orgApacheFelixHttpContextPath  (optional)
///
///  @param orgApacheFelixHttpMbeans  (optional)
///
///  @param orgApacheFelixHttpSessionTimeout  (optional)
///
///  @param orgApacheFelixHttpJettyThreadpoolMax  (optional)
///
///  @param orgApacheFelixHttpJettyAcceptors  (optional)
///
///  @param orgApacheFelixHttpJettySelectors  (optional)
///
///  @param orgApacheFelixHttpJettyHeaderBufferSize  (optional)
///
///  @param orgApacheFelixHttpJettyRequestBufferSize  (optional)
///
///  @param orgApacheFelixHttpJettyResponseBufferSize  (optional)
///
///  @param orgApacheFelixHttpJettyMaxFormSize  (optional)
///
///  @param orgApacheFelixHttpPathExclusions  (optional)
///
///  @param orgApacheFelixHttpsJettyCiphersuitesExcluded  (optional)
///
///  @param orgApacheFelixHttpsJettyCiphersuitesIncluded  (optional)
///
///  @param orgApacheFelixHttpJettySendServerHeader  (optional)
///
///  @param orgApacheFelixHttpsJettyProtocolsIncluded  (optional)
///
///  @param orgApacheFelixHttpsJettyProtocolsExcluded  (optional)
///
///  @param orgApacheFelixProxyLoadBalancerConnectionEnable  (optional)
///
///  @param orgApacheFelixHttpsJettyRenegotiateAllowed  (optional)
///
///  @param orgApacheFelixHttpsJettySessionCookieHttpOnly  (optional)
///
///  @param orgApacheFelixHttpsJettySessionCookieSecure  (optional)
///
///  @param orgEclipseJettyServletSessionIdPathParameterName  (optional)
///
///  @param orgEclipseJettyServletCheckingRemoteSessionIdEncoding  (optional)
///
///  @param orgEclipseJettyServletSessionCookie  (optional)
///
///  @param orgEclipseJettyServletSessionDomain  (optional)
///
///  @param orgEclipseJettyServletSessionPath  (optional)
///
///  @param orgEclipseJettyServletMaxAge  (optional)
///
///  @param orgApacheFelixHttpName  (optional)
///
///  @param orgApacheFelixJettyGziphandlerEnable  (optional)
///
///  @param orgApacheFelixJettyGzipMinGzipSize  (optional)
///
///  @param orgApacheFelixJettyGzipCompressionLevel  (optional)
///
///  @param orgApacheFelixJettyGzipInflateBufferSize  (optional)
///
///  @param orgApacheFelixJettyGzipSyncFlush  (optional)
///
///  @param orgApacheFelixJettyGzipExcludedUserAgents  (optional)
///
///  @param orgApacheFelixJettyGzipIncludedMethods  (optional)
///
///  @param orgApacheFelixJettyGzipExcludedMethods  (optional)
///
///  @param orgApacheFelixJettyGzipIncludedPaths  (optional)
///
///  @param orgApacheFelixJettyGzipExcludedPaths  (optional)
///
///  @param orgApacheFelixJettyGzipIncludedMimeTypes  (optional)
///
///  @param orgApacheFelixJettyGzipExcludedMimeTypes  (optional)
///
///  @param orgApacheFelixHttpSessionInvalidate  (optional)
///
///  @param orgApacheFelixHttpSessionUniqueid  (optional)
///
///  @returns OAIOrgApacheFelixHttpInfo*
///
-(NSURLSessionTask*) orgApacheFelixHttpWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheFelixHttpHost: (NSString*) orgApacheFelixHttpHost
    orgApacheFelixHttpEnable: (NSNumber*) orgApacheFelixHttpEnable
    orgOsgiServiceHttpPort: (NSNumber*) orgOsgiServiceHttpPort
    orgApacheFelixHttpTimeout: (NSNumber*) orgApacheFelixHttpTimeout
    orgApacheFelixHttpsEnable: (NSNumber*) orgApacheFelixHttpsEnable
    orgOsgiServiceHttpPortSecure: (NSNumber*) orgOsgiServiceHttpPortSecure
    orgApacheFelixHttpsKeystore: (NSString*) orgApacheFelixHttpsKeystore
    orgApacheFelixHttpsKeystorePassword: (NSString*) orgApacheFelixHttpsKeystorePassword
    orgApacheFelixHttpsKeystoreKeyPassword: (NSString*) orgApacheFelixHttpsKeystoreKeyPassword
    orgApacheFelixHttpsTruststore: (NSString*) orgApacheFelixHttpsTruststore
    orgApacheFelixHttpsTruststorePassword: (NSString*) orgApacheFelixHttpsTruststorePassword
    orgApacheFelixHttpsClientcertificate: (NSString*) orgApacheFelixHttpsClientcertificate
    orgApacheFelixHttpContextPath: (NSString*) orgApacheFelixHttpContextPath
    orgApacheFelixHttpMbeans: (NSNumber*) orgApacheFelixHttpMbeans
    orgApacheFelixHttpSessionTimeout: (NSNumber*) orgApacheFelixHttpSessionTimeout
    orgApacheFelixHttpJettyThreadpoolMax: (NSNumber*) orgApacheFelixHttpJettyThreadpoolMax
    orgApacheFelixHttpJettyAcceptors: (NSNumber*) orgApacheFelixHttpJettyAcceptors
    orgApacheFelixHttpJettySelectors: (NSNumber*) orgApacheFelixHttpJettySelectors
    orgApacheFelixHttpJettyHeaderBufferSize: (NSNumber*) orgApacheFelixHttpJettyHeaderBufferSize
    orgApacheFelixHttpJettyRequestBufferSize: (NSNumber*) orgApacheFelixHttpJettyRequestBufferSize
    orgApacheFelixHttpJettyResponseBufferSize: (NSNumber*) orgApacheFelixHttpJettyResponseBufferSize
    orgApacheFelixHttpJettyMaxFormSize: (NSNumber*) orgApacheFelixHttpJettyMaxFormSize
    orgApacheFelixHttpPathExclusions: (NSArray<NSString*>*) orgApacheFelixHttpPathExclusions
    orgApacheFelixHttpsJettyCiphersuitesExcluded: (NSArray<NSString*>*) orgApacheFelixHttpsJettyCiphersuitesExcluded
    orgApacheFelixHttpsJettyCiphersuitesIncluded: (NSArray<NSString*>*) orgApacheFelixHttpsJettyCiphersuitesIncluded
    orgApacheFelixHttpJettySendServerHeader: (NSNumber*) orgApacheFelixHttpJettySendServerHeader
    orgApacheFelixHttpsJettyProtocolsIncluded: (NSArray<NSString*>*) orgApacheFelixHttpsJettyProtocolsIncluded
    orgApacheFelixHttpsJettyProtocolsExcluded: (NSArray<NSString*>*) orgApacheFelixHttpsJettyProtocolsExcluded
    orgApacheFelixProxyLoadBalancerConnectionEnable: (NSNumber*) orgApacheFelixProxyLoadBalancerConnectionEnable
    orgApacheFelixHttpsJettyRenegotiateAllowed: (NSNumber*) orgApacheFelixHttpsJettyRenegotiateAllowed
    orgApacheFelixHttpsJettySessionCookieHttpOnly: (NSNumber*) orgApacheFelixHttpsJettySessionCookieHttpOnly
    orgApacheFelixHttpsJettySessionCookieSecure: (NSNumber*) orgApacheFelixHttpsJettySessionCookieSecure
    orgEclipseJettyServletSessionIdPathParameterName: (NSString*) orgEclipseJettyServletSessionIdPathParameterName
    orgEclipseJettyServletCheckingRemoteSessionIdEncoding: (NSNumber*) orgEclipseJettyServletCheckingRemoteSessionIdEncoding
    orgEclipseJettyServletSessionCookie: (NSString*) orgEclipseJettyServletSessionCookie
    orgEclipseJettyServletSessionDomain: (NSString*) orgEclipseJettyServletSessionDomain
    orgEclipseJettyServletSessionPath: (NSString*) orgEclipseJettyServletSessionPath
    orgEclipseJettyServletMaxAge: (NSNumber*) orgEclipseJettyServletMaxAge
    orgApacheFelixHttpName: (NSString*) orgApacheFelixHttpName
    orgApacheFelixJettyGziphandlerEnable: (NSNumber*) orgApacheFelixJettyGziphandlerEnable
    orgApacheFelixJettyGzipMinGzipSize: (NSNumber*) orgApacheFelixJettyGzipMinGzipSize
    orgApacheFelixJettyGzipCompressionLevel: (NSNumber*) orgApacheFelixJettyGzipCompressionLevel
    orgApacheFelixJettyGzipInflateBufferSize: (NSNumber*) orgApacheFelixJettyGzipInflateBufferSize
    orgApacheFelixJettyGzipSyncFlush: (NSNumber*) orgApacheFelixJettyGzipSyncFlush
    orgApacheFelixJettyGzipExcludedUserAgents: (NSArray<NSString*>*) orgApacheFelixJettyGzipExcludedUserAgents
    orgApacheFelixJettyGzipIncludedMethods: (NSArray<NSString*>*) orgApacheFelixJettyGzipIncludedMethods
    orgApacheFelixJettyGzipExcludedMethods: (NSArray<NSString*>*) orgApacheFelixJettyGzipExcludedMethods
    orgApacheFelixJettyGzipIncludedPaths: (NSArray<NSString*>*) orgApacheFelixJettyGzipIncludedPaths
    orgApacheFelixJettyGzipExcludedPaths: (NSArray<NSString*>*) orgApacheFelixJettyGzipExcludedPaths
    orgApacheFelixJettyGzipIncludedMimeTypes: (NSArray<NSString*>*) orgApacheFelixJettyGzipIncludedMimeTypes
    orgApacheFelixJettyGzipExcludedMimeTypes: (NSArray<NSString*>*) orgApacheFelixJettyGzipExcludedMimeTypes
    orgApacheFelixHttpSessionInvalidate: (NSNumber*) orgApacheFelixHttpSessionInvalidate
    orgApacheFelixHttpSessionUniqueid: (NSNumber*) orgApacheFelixHttpSessionUniqueid
    completionHandler: (void (^)(OAIOrgApacheFelixHttpInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.http"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheFelixHttpHost != nil) {
        queryParams[@"org.apache.felix.http.host"] = orgApacheFelixHttpHost;
    }
    if (orgApacheFelixHttpEnable != nil) {
        queryParams[@"org.apache.felix.http.enable"] = [orgApacheFelixHttpEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgOsgiServiceHttpPort != nil) {
        queryParams[@"org.osgi.service.http.port"] = orgOsgiServiceHttpPort;
    }
    if (orgApacheFelixHttpTimeout != nil) {
        queryParams[@"org.apache.felix.http.timeout"] = orgApacheFelixHttpTimeout;
    }
    if (orgApacheFelixHttpsEnable != nil) {
        queryParams[@"org.apache.felix.https.enable"] = [orgApacheFelixHttpsEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgOsgiServiceHttpPortSecure != nil) {
        queryParams[@"org.osgi.service.http.port.secure"] = orgOsgiServiceHttpPortSecure;
    }
    if (orgApacheFelixHttpsKeystore != nil) {
        queryParams[@"org.apache.felix.https.keystore"] = orgApacheFelixHttpsKeystore;
    }
    if (orgApacheFelixHttpsKeystorePassword != nil) {
        queryParams[@"org.apache.felix.https.keystore.password"] = orgApacheFelixHttpsKeystorePassword;
    }
    if (orgApacheFelixHttpsKeystoreKeyPassword != nil) {
        queryParams[@"org.apache.felix.https.keystore.key.password"] = orgApacheFelixHttpsKeystoreKeyPassword;
    }
    if (orgApacheFelixHttpsTruststore != nil) {
        queryParams[@"org.apache.felix.https.truststore"] = orgApacheFelixHttpsTruststore;
    }
    if (orgApacheFelixHttpsTruststorePassword != nil) {
        queryParams[@"org.apache.felix.https.truststore.password"] = orgApacheFelixHttpsTruststorePassword;
    }
    if (orgApacheFelixHttpsClientcertificate != nil) {
        queryParams[@"org.apache.felix.https.clientcertificate"] = orgApacheFelixHttpsClientcertificate;
    }
    if (orgApacheFelixHttpContextPath != nil) {
        queryParams[@"org.apache.felix.http.context_path"] = orgApacheFelixHttpContextPath;
    }
    if (orgApacheFelixHttpMbeans != nil) {
        queryParams[@"org.apache.felix.http.mbeans"] = [orgApacheFelixHttpMbeans isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpSessionTimeout != nil) {
        queryParams[@"org.apache.felix.http.session.timeout"] = orgApacheFelixHttpSessionTimeout;
    }
    if (orgApacheFelixHttpJettyThreadpoolMax != nil) {
        queryParams[@"org.apache.felix.http.jetty.threadpool.max"] = orgApacheFelixHttpJettyThreadpoolMax;
    }
    if (orgApacheFelixHttpJettyAcceptors != nil) {
        queryParams[@"org.apache.felix.http.jetty.acceptors"] = orgApacheFelixHttpJettyAcceptors;
    }
    if (orgApacheFelixHttpJettySelectors != nil) {
        queryParams[@"org.apache.felix.http.jetty.selectors"] = orgApacheFelixHttpJettySelectors;
    }
    if (orgApacheFelixHttpJettyHeaderBufferSize != nil) {
        queryParams[@"org.apache.felix.http.jetty.headerBufferSize"] = orgApacheFelixHttpJettyHeaderBufferSize;
    }
    if (orgApacheFelixHttpJettyRequestBufferSize != nil) {
        queryParams[@"org.apache.felix.http.jetty.requestBufferSize"] = orgApacheFelixHttpJettyRequestBufferSize;
    }
    if (orgApacheFelixHttpJettyResponseBufferSize != nil) {
        queryParams[@"org.apache.felix.http.jetty.responseBufferSize"] = orgApacheFelixHttpJettyResponseBufferSize;
    }
    if (orgApacheFelixHttpJettyMaxFormSize != nil) {
        queryParams[@"org.apache.felix.http.jetty.maxFormSize"] = orgApacheFelixHttpJettyMaxFormSize;
    }
    if (orgApacheFelixHttpPathExclusions != nil) {
        queryParams[@"org.apache.felix.http.path_exclusions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixHttpPathExclusions format: @"multi"];
    }
    if (orgApacheFelixHttpsJettyCiphersuitesExcluded != nil) {
        queryParams[@"org.apache.felix.https.jetty.ciphersuites.excluded"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixHttpsJettyCiphersuitesExcluded format: @"multi"];
    }
    if (orgApacheFelixHttpsJettyCiphersuitesIncluded != nil) {
        queryParams[@"org.apache.felix.https.jetty.ciphersuites.included"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixHttpsJettyCiphersuitesIncluded format: @"multi"];
    }
    if (orgApacheFelixHttpJettySendServerHeader != nil) {
        queryParams[@"org.apache.felix.http.jetty.sendServerHeader"] = [orgApacheFelixHttpJettySendServerHeader isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpsJettyProtocolsIncluded != nil) {
        queryParams[@"org.apache.felix.https.jetty.protocols.included"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixHttpsJettyProtocolsIncluded format: @"multi"];
    }
    if (orgApacheFelixHttpsJettyProtocolsExcluded != nil) {
        queryParams[@"org.apache.felix.https.jetty.protocols.excluded"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixHttpsJettyProtocolsExcluded format: @"multi"];
    }
    if (orgApacheFelixProxyLoadBalancerConnectionEnable != nil) {
        queryParams[@"org.apache.felix.proxy.load.balancer.connection.enable"] = [orgApacheFelixProxyLoadBalancerConnectionEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpsJettyRenegotiateAllowed != nil) {
        queryParams[@"org.apache.felix.https.jetty.renegotiateAllowed"] = [orgApacheFelixHttpsJettyRenegotiateAllowed isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpsJettySessionCookieHttpOnly != nil) {
        queryParams[@"org.apache.felix.https.jetty.session.cookie.httpOnly"] = [orgApacheFelixHttpsJettySessionCookieHttpOnly isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpsJettySessionCookieSecure != nil) {
        queryParams[@"org.apache.felix.https.jetty.session.cookie.secure"] = [orgApacheFelixHttpsJettySessionCookieSecure isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgEclipseJettyServletSessionIdPathParameterName != nil) {
        queryParams[@"org.eclipse.jetty.servlet.SessionIdPathParameterName"] = orgEclipseJettyServletSessionIdPathParameterName;
    }
    if (orgEclipseJettyServletCheckingRemoteSessionIdEncoding != nil) {
        queryParams[@"org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding"] = [orgEclipseJettyServletCheckingRemoteSessionIdEncoding isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgEclipseJettyServletSessionCookie != nil) {
        queryParams[@"org.eclipse.jetty.servlet.SessionCookie"] = orgEclipseJettyServletSessionCookie;
    }
    if (orgEclipseJettyServletSessionDomain != nil) {
        queryParams[@"org.eclipse.jetty.servlet.SessionDomain"] = orgEclipseJettyServletSessionDomain;
    }
    if (orgEclipseJettyServletSessionPath != nil) {
        queryParams[@"org.eclipse.jetty.servlet.SessionPath"] = orgEclipseJettyServletSessionPath;
    }
    if (orgEclipseJettyServletMaxAge != nil) {
        queryParams[@"org.eclipse.jetty.servlet.MaxAge"] = orgEclipseJettyServletMaxAge;
    }
    if (orgApacheFelixHttpName != nil) {
        queryParams[@"org.apache.felix.http.name"] = orgApacheFelixHttpName;
    }
    if (orgApacheFelixJettyGziphandlerEnable != nil) {
        queryParams[@"org.apache.felix.jetty.gziphandler.enable"] = [orgApacheFelixJettyGziphandlerEnable isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixJettyGzipMinGzipSize != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.minGzipSize"] = orgApacheFelixJettyGzipMinGzipSize;
    }
    if (orgApacheFelixJettyGzipCompressionLevel != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.compressionLevel"] = orgApacheFelixJettyGzipCompressionLevel;
    }
    if (orgApacheFelixJettyGzipInflateBufferSize != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.inflateBufferSize"] = orgApacheFelixJettyGzipInflateBufferSize;
    }
    if (orgApacheFelixJettyGzipSyncFlush != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.syncFlush"] = [orgApacheFelixJettyGzipSyncFlush isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixJettyGzipExcludedUserAgents != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.excludedUserAgents"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipExcludedUserAgents format: @"multi"];
    }
    if (orgApacheFelixJettyGzipIncludedMethods != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.includedMethods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipIncludedMethods format: @"multi"];
    }
    if (orgApacheFelixJettyGzipExcludedMethods != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.excludedMethods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipExcludedMethods format: @"multi"];
    }
    if (orgApacheFelixJettyGzipIncludedPaths != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.includedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipIncludedPaths format: @"multi"];
    }
    if (orgApacheFelixJettyGzipExcludedPaths != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.excludedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipExcludedPaths format: @"multi"];
    }
    if (orgApacheFelixJettyGzipIncludedMimeTypes != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.includedMimeTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipIncludedMimeTypes format: @"multi"];
    }
    if (orgApacheFelixJettyGzipExcludedMimeTypes != nil) {
        queryParams[@"org.apache.felix.jetty.gzip.excludedMimeTypes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheFelixJettyGzipExcludedMimeTypes format: @"multi"];
    }
    if (orgApacheFelixHttpSessionInvalidate != nil) {
        queryParams[@"org.apache.felix.http.session.invalidate"] = [orgApacheFelixHttpSessionInvalidate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheFelixHttpSessionUniqueid != nil) {
        queryParams[@"org.apache.felix.http.session.uniqueid"] = [orgApacheFelixHttpSessionUniqueid isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixHttpInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixHttpInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param sslForwardHeader  (optional)
///
///  @param sslForwardValue  (optional)
///
///  @param sslForwardCertHeader  (optional)
///
///  @param rewriteAbsoluteUrls  (optional)
///
///  @returns OAIOrgApacheFelixHttpSslfilterSslFilterInfo*
///
-(NSURLSessionTask*) orgApacheFelixHttpSslfilterSslFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    sslForwardHeader: (NSString*) sslForwardHeader
    sslForwardValue: (NSString*) sslForwardValue
    sslForwardCertHeader: (NSString*) sslForwardCertHeader
    rewriteAbsoluteUrls: (NSNumber*) rewriteAbsoluteUrls
    completionHandler: (void (^)(OAIOrgApacheFelixHttpSslfilterSslFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (sslForwardHeader != nil) {
        queryParams[@"ssl-forward.header"] = sslForwardHeader;
    }
    if (sslForwardValue != nil) {
        queryParams[@"ssl-forward.value"] = sslForwardValue;
    }
    if (sslForwardCertHeader != nil) {
        queryParams[@"ssl-forward-cert.header"] = sslForwardCertHeader;
    }
    if (rewriteAbsoluteUrls != nil) {
        queryParams[@"rewrite.absolute.urls"] = [rewriteAbsoluteUrls isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixHttpSslfilterSslFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixHttpSslfilterSslFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jaasControlFlag  (optional)
///
///  @param jaasRanking  (optional)
///
///  @param jaasRealmName  (optional)
///
///  @param jaasClassname  (optional)
///
///  @param jaasOptions  (optional)
///
///  @returns OAIOrgApacheFelixJaasConfigurationFactoryInfo*
///
-(NSURLSessionTask*) orgApacheFelixJaasConfigurationFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jaasControlFlag: (NSString*) jaasControlFlag
    jaasRanking: (NSNumber*) jaasRanking
    jaasRealmName: (NSString*) jaasRealmName
    jaasClassname: (NSString*) jaasClassname
    jaasOptions: (NSArray<NSString*>*) jaasOptions
    completionHandler: (void (^)(OAIOrgApacheFelixJaasConfigurationFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jaasControlFlag != nil) {
        queryParams[@"jaas.controlFlag"] = jaasControlFlag;
    }
    if (jaasRanking != nil) {
        queryParams[@"jaas.ranking"] = jaasRanking;
    }
    if (jaasRealmName != nil) {
        queryParams[@"jaas.realmName"] = jaasRealmName;
    }
    if (jaasClassname != nil) {
        queryParams[@"jaas.classname"] = jaasClassname;
    }
    if (jaasOptions != nil) {
        queryParams[@"jaas.options"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: jaasOptions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixJaasConfigurationFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixJaasConfigurationFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jaasDefaultRealmName  (optional)
///
///  @param jaasConfigProviderName  (optional)
///
///  @param jaasGlobalConfigPolicy  (optional)
///
///  @returns OAIOrgApacheFelixJaasConfigurationSpiInfo*
///
-(NSURLSessionTask*) orgApacheFelixJaasConfigurationSpiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jaasDefaultRealmName: (NSString*) jaasDefaultRealmName
    jaasConfigProviderName: (NSString*) jaasConfigProviderName
    jaasGlobalConfigPolicy: (NSString*) jaasGlobalConfigPolicy
    completionHandler: (void (^)(OAIOrgApacheFelixJaasConfigurationSpiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jaasDefaultRealmName != nil) {
        queryParams[@"jaas.defaultRealmName"] = jaasDefaultRealmName;
    }
    if (jaasConfigProviderName != nil) {
        queryParams[@"jaas.configProviderName"] = jaasConfigProviderName;
    }
    if (jaasGlobalConfigPolicy != nil) {
        queryParams[@"jaas.globalConfigPolicy"] = jaasGlobalConfigPolicy;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixJaasConfigurationSpiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixJaasConfigurationSpiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param dsLoglevel  (optional)
///
///  @param dsFactoryEnabled  (optional)
///
///  @param dsDelayedKeepInstances  (optional)
///
///  @param dsLockTimeoutMilliseconds  (optional)
///
///  @param dsStopTimeoutMilliseconds  (optional)
///
///  @param dsGlobalExtender  (optional)
///
///  @returns OAIOrgApacheFelixScrScrServiceInfo*
///
-(NSURLSessionTask*) orgApacheFelixScrScrServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    dsLoglevel: (NSNumber*) dsLoglevel
    dsFactoryEnabled: (NSNumber*) dsFactoryEnabled
    dsDelayedKeepInstances: (NSNumber*) dsDelayedKeepInstances
    dsLockTimeoutMilliseconds: (NSNumber*) dsLockTimeoutMilliseconds
    dsStopTimeoutMilliseconds: (NSNumber*) dsStopTimeoutMilliseconds
    dsGlobalExtender: (NSNumber*) dsGlobalExtender
    completionHandler: (void (^)(OAIOrgApacheFelixScrScrServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.scr.ScrService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (dsLoglevel != nil) {
        queryParams[@"ds.loglevel"] = dsLoglevel;
    }
    if (dsFactoryEnabled != nil) {
        queryParams[@"ds.factory.enabled"] = [dsFactoryEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (dsDelayedKeepInstances != nil) {
        queryParams[@"ds.delayed.keepInstances"] = [dsDelayedKeepInstances isEqual:@(YES)] ? @"true" : @"false";
    }
    if (dsLockTimeoutMilliseconds != nil) {
        queryParams[@"ds.lock.timeout.milliseconds"] = dsLockTimeoutMilliseconds;
    }
    if (dsStopTimeoutMilliseconds != nil) {
        queryParams[@"ds.stop.timeout.milliseconds"] = dsStopTimeoutMilliseconds;
    }
    if (dsGlobalExtender != nil) {
        queryParams[@"ds.global.extender"] = [dsGlobalExtender isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixScrScrServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixScrScrServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param componentsList  (optional)
///
///  @param type  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadyImplComponentsCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    componentsList: (NSArray<NSString*>*) componentsList
    type: (NSString*) type
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (componentsList != nil) {
        queryParams[@"components.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: componentsList format: @"multi"];
    }
    if (type != nil) {
        queryParams[@"type"] = type;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadyImplComponentsCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param timeout  (optional)
///
///  @param targetStartLevel  (optional)
///
///  @param targetStartLevelPropName  (optional)
///
///  @param type  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadyImplFrameworkStartCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    timeout: (NSNumber*) timeout
    targetStartLevel: (NSNumber*) targetStartLevel
    targetStartLevelPropName: (NSString*) targetStartLevelPropName
    type: (NSString*) type
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (timeout != nil) {
        queryParams[@"timeout"] = timeout;
    }
    if (targetStartLevel != nil) {
        queryParams[@"target.start.level"] = targetStartLevel;
    }
    if (targetStartLevelPropName != nil) {
        queryParams[@"target.start.level.prop.name"] = targetStartLevelPropName;
    }
    if (type != nil) {
        queryParams[@"type"] = type;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadyImplFrameworkStartCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param servicesList  (optional)
///
///  @param type  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadyImplServicesCheckInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadyImplServicesCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    servicesList: (NSArray<NSString*>*) servicesList
    type: (NSString*) type
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadyImplServicesCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (servicesList != nil) {
        queryParams[@"services.list"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: servicesList format: @"multi"];
    }
    if (type != nil) {
        queryParams[@"type"] = type;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadyImplServicesCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadyImplServicesCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param osgiHttpWhiteboardServletPattern  (optional)
///
///  @param osgiHttpWhiteboardContextSelect  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadyImplServletSystemAliveServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    osgiHttpWhiteboardServletPattern: (NSString*) osgiHttpWhiteboardServletPattern
    osgiHttpWhiteboardContextSelect: (NSString*) osgiHttpWhiteboardContextSelect
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (osgiHttpWhiteboardServletPattern != nil) {
        queryParams[@"osgi.http.whiteboard.servlet.pattern"] = osgiHttpWhiteboardServletPattern;
    }
    if (osgiHttpWhiteboardContextSelect != nil) {
        queryParams[@"osgi.http.whiteboard.context.select"] = osgiHttpWhiteboardContextSelect;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadyImplServletSystemAliveServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param osgiHttpWhiteboardServletPattern  (optional)
///
///  @param osgiHttpWhiteboardContextSelect  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadyImplServletSystemReadyServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    osgiHttpWhiteboardServletPattern: (NSString*) osgiHttpWhiteboardServletPattern
    osgiHttpWhiteboardContextSelect: (NSString*) osgiHttpWhiteboardContextSelect
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (osgiHttpWhiteboardServletPattern != nil) {
        queryParams[@"osgi.http.whiteboard.servlet.pattern"] = osgiHttpWhiteboardServletPattern;
    }
    if (osgiHttpWhiteboardContextSelect != nil) {
        queryParams[@"osgi.http.whiteboard.context.select"] = osgiHttpWhiteboardContextSelect;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadyImplServletSystemReadyServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pollInterval  (optional)
///
///  @returns OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo*
///
-(NSURLSessionTask*) orgApacheFelixSystemreadySystemReadyMonitorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pollInterval: (NSNumber*) pollInterval
    completionHandler: (void (^)(OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pollInterval != nil) {
        queryParams[@"poll.interval"] = pollInterval;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixSystemreadySystemReadyMonitorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param managerRoot  (optional)
///
///  @param httpServiceFilter  (optional)
///
///  @param defaultRender  (optional)
///
///  @param realm  (optional)
///
///  @param username  (optional)
///
///  @param password  (optional)
///
///  @param category  (optional)
///
///  @param locale  (optional)
///
///  @param loglevel  (optional)
///
///  @param plugins  (optional)
///
///  @returns OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo*
///
-(NSURLSessionTask*) orgApacheFelixWebconsoleInternalServletOsgiManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    managerRoot: (NSString*) managerRoot
    httpServiceFilter: (NSString*) httpServiceFilter
    defaultRender: (NSString*) defaultRender
    realm: (NSString*) realm
    username: (NSString*) username
    password: (NSString*) password
    category: (NSString*) category
    locale: (NSString*) locale
    loglevel: (NSNumber*) loglevel
    plugins: (NSString*) plugins
    completionHandler: (void (^)(OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (managerRoot != nil) {
        queryParams[@"manager.root"] = managerRoot;
    }
    if (httpServiceFilter != nil) {
        queryParams[@"http.service.filter"] = httpServiceFilter;
    }
    if (defaultRender != nil) {
        queryParams[@"default.render"] = defaultRender;
    }
    if (realm != nil) {
        queryParams[@"realm"] = realm;
    }
    if (username != nil) {
        queryParams[@"username"] = username;
    }
    if (password != nil) {
        queryParams[@"password"] = password;
    }
    if (category != nil) {
        queryParams[@"category"] = category;
    }
    if (locale != nil) {
        queryParams[@"locale"] = locale;
    }
    if (loglevel != nil) {
        queryParams[@"loglevel"] = loglevel;
    }
    if (plugins != nil) {
        queryParams[@"plugins"] = plugins;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixWebconsoleInternalServletOsgiManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxSize  (optional)
///
///  @returns OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo*
///
-(NSURLSessionTask*) orgApacheFelixWebconsolePluginsEventInternalPluginServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxSize: (NSNumber*) maxSize
    completionHandler: (void (^)(OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxSize != nil) {
        queryParams[@"max.size"] = maxSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param felixMemoryusageDumpThreshold  (optional)
///
///  @param felixMemoryusageDumpInterval  (optional)
///
///  @param felixMemoryusageDumpLocation  (optional)
///
///  @returns OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo*
///
-(NSURLSessionTask*) orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    felixMemoryusageDumpThreshold: (NSNumber*) felixMemoryusageDumpThreshold
    felixMemoryusageDumpInterval: (NSNumber*) felixMemoryusageDumpInterval
    felixMemoryusageDumpLocation: (NSString*) felixMemoryusageDumpLocation
    completionHandler: (void (^)(OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (felixMemoryusageDumpThreshold != nil) {
        queryParams[@"felix.memoryusage.dump.threshold"] = felixMemoryusageDumpThreshold;
    }
    if (felixMemoryusageDumpInterval != nil) {
        queryParams[@"felix.memoryusage.dump.interval"] = felixMemoryusageDumpInterval;
    }
    if (felixMemoryusageDumpLocation != nil) {
        queryParams[@"felix.memoryusage.dump.location"] = felixMemoryusageDumpLocation;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param proxyEnabled  (optional)
///
///  @param proxyHost  (optional)
///
///  @param proxyPort  (optional)
///
///  @param proxyUser  (optional)
///
///  @param proxyPassword  (optional)
///
///  @param proxyExceptions  (optional)
///
///  @returns OAIOrgApacheHttpProxyconfiguratorInfo*
///
-(NSURLSessionTask*) orgApacheHttpProxyconfiguratorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    proxyEnabled: (NSNumber*) proxyEnabled
    proxyHost: (NSString*) proxyHost
    proxyPort: (NSNumber*) proxyPort
    proxyUser: (NSString*) proxyUser
    proxyPassword: (NSString*) proxyPassword
    proxyExceptions: (NSArray<NSString*>*) proxyExceptions
    completionHandler: (void (^)(OAIOrgApacheHttpProxyconfiguratorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.http.proxyconfigurator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (proxyEnabled != nil) {
        queryParams[@"proxy.enabled"] = [proxyEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (proxyHost != nil) {
        queryParams[@"proxy.host"] = proxyHost;
    }
    if (proxyPort != nil) {
        queryParams[@"proxy.port"] = proxyPort;
    }
    if (proxyUser != nil) {
        queryParams[@"proxy.user"] = proxyUser;
    }
    if (proxyPassword != nil) {
        queryParams[@"proxy.password"] = proxyPassword;
    }
    if (proxyExceptions != nil) {
        queryParams[@"proxy.exceptions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: proxyExceptions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheHttpProxyconfiguratorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheHttpProxyconfiguratorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param dir  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    dir: (NSString*) dir
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (dir != nil) {
        queryParams[@"dir"] = dir;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mongouri  (optional)
///
///  @param db  (optional)
///
///  @param socketKeepAlive  (optional)
///
///  @param cache  (optional)
///
///  @param nodeCachePercentage  (optional)
///
///  @param prevDocCachePercentage  (optional)
///
///  @param childrenCachePercentage  (optional)
///
///  @param diffCachePercentage  (optional)
///
///  @param cacheSegmentCount  (optional)
///
///  @param cacheStackMoveDistance  (optional)
///
///  @param blobCacheSize  (optional)
///
///  @param persistentCache  (optional)
///
///  @param journalCache  (optional)
///
///  @param customBlobStore  (optional)
///
///  @param journalGCInterval  (optional)
///
///  @param journalGCMaxAge  (optional)
///
///  @param prefetchExternalChanges  (optional)
///
///  @param role  (optional)
///
///  @param versionGcMaxAgeInSecs  (optional)
///
///  @param versionGCExpression  (optional)
///
///  @param versionGCTimeLimitInSecs  (optional)
///
///  @param blobGcMaxAgeInSecs  (optional)
///
///  @param blobTrackSnapshotIntervalInSecs  (optional)
///
///  @param repositoryHome  (optional)
///
///  @param maxReplicationLagInSecs  (optional)
///
///  @param documentStoreType  (optional)
///
///  @param bundlingDisabled  (optional)
///
///  @param updateLimit  (optional)
///
///  @param persistentCacheIncludes  (optional)
///
///  @param leaseCheckMode  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mongouri: (NSString*) mongouri
    db: (NSString*) db
    socketKeepAlive: (NSNumber*) socketKeepAlive
    cache: (NSNumber*) cache
    nodeCachePercentage: (NSNumber*) nodeCachePercentage
    prevDocCachePercentage: (NSNumber*) prevDocCachePercentage
    childrenCachePercentage: (NSNumber*) childrenCachePercentage
    diffCachePercentage: (NSNumber*) diffCachePercentage
    cacheSegmentCount: (NSNumber*) cacheSegmentCount
    cacheStackMoveDistance: (NSNumber*) cacheStackMoveDistance
    blobCacheSize: (NSNumber*) blobCacheSize
    persistentCache: (NSString*) persistentCache
    journalCache: (NSString*) journalCache
    customBlobStore: (NSNumber*) customBlobStore
    journalGCInterval: (NSNumber*) journalGCInterval
    journalGCMaxAge: (NSNumber*) journalGCMaxAge
    prefetchExternalChanges: (NSNumber*) prefetchExternalChanges
    role: (NSString*) role
    versionGcMaxAgeInSecs: (NSNumber*) versionGcMaxAgeInSecs
    versionGCExpression: (NSString*) versionGCExpression
    versionGCTimeLimitInSecs: (NSNumber*) versionGCTimeLimitInSecs
    blobGcMaxAgeInSecs: (NSNumber*) blobGcMaxAgeInSecs
    blobTrackSnapshotIntervalInSecs: (NSNumber*) blobTrackSnapshotIntervalInSecs
    repositoryHome: (NSString*) repositoryHome
    maxReplicationLagInSecs: (NSNumber*) maxReplicationLagInSecs
    documentStoreType: (NSString*) documentStoreType
    bundlingDisabled: (NSNumber*) bundlingDisabled
    updateLimit: (NSNumber*) updateLimit
    persistentCacheIncludes: (NSArray<NSString*>*) persistentCacheIncludes
    leaseCheckMode: (NSString*) leaseCheckMode
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mongouri != nil) {
        queryParams[@"mongouri"] = mongouri;
    }
    if (db != nil) {
        queryParams[@"db"] = db;
    }
    if (socketKeepAlive != nil) {
        queryParams[@"socketKeepAlive"] = [socketKeepAlive isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cache != nil) {
        queryParams[@"cache"] = cache;
    }
    if (nodeCachePercentage != nil) {
        queryParams[@"nodeCachePercentage"] = nodeCachePercentage;
    }
    if (prevDocCachePercentage != nil) {
        queryParams[@"prevDocCachePercentage"] = prevDocCachePercentage;
    }
    if (childrenCachePercentage != nil) {
        queryParams[@"childrenCachePercentage"] = childrenCachePercentage;
    }
    if (diffCachePercentage != nil) {
        queryParams[@"diffCachePercentage"] = diffCachePercentage;
    }
    if (cacheSegmentCount != nil) {
        queryParams[@"cacheSegmentCount"] = cacheSegmentCount;
    }
    if (cacheStackMoveDistance != nil) {
        queryParams[@"cacheStackMoveDistance"] = cacheStackMoveDistance;
    }
    if (blobCacheSize != nil) {
        queryParams[@"blobCacheSize"] = blobCacheSize;
    }
    if (persistentCache != nil) {
        queryParams[@"persistentCache"] = persistentCache;
    }
    if (journalCache != nil) {
        queryParams[@"journalCache"] = journalCache;
    }
    if (customBlobStore != nil) {
        queryParams[@"customBlobStore"] = [customBlobStore isEqual:@(YES)] ? @"true" : @"false";
    }
    if (journalGCInterval != nil) {
        queryParams[@"journalGCInterval"] = journalGCInterval;
    }
    if (journalGCMaxAge != nil) {
        queryParams[@"journalGCMaxAge"] = journalGCMaxAge;
    }
    if (prefetchExternalChanges != nil) {
        queryParams[@"prefetchExternalChanges"] = [prefetchExternalChanges isEqual:@(YES)] ? @"true" : @"false";
    }
    if (role != nil) {
        queryParams[@"role"] = role;
    }
    if (versionGcMaxAgeInSecs != nil) {
        queryParams[@"versionGcMaxAgeInSecs"] = versionGcMaxAgeInSecs;
    }
    if (versionGCExpression != nil) {
        queryParams[@"versionGCExpression"] = versionGCExpression;
    }
    if (versionGCTimeLimitInSecs != nil) {
        queryParams[@"versionGCTimeLimitInSecs"] = versionGCTimeLimitInSecs;
    }
    if (blobGcMaxAgeInSecs != nil) {
        queryParams[@"blobGcMaxAgeInSecs"] = blobGcMaxAgeInSecs;
    }
    if (blobTrackSnapshotIntervalInSecs != nil) {
        queryParams[@"blobTrackSnapshotIntervalInSecs"] = blobTrackSnapshotIntervalInSecs;
    }
    if (repositoryHome != nil) {
        queryParams[@"repository.home"] = repositoryHome;
    }
    if (maxReplicationLagInSecs != nil) {
        queryParams[@"maxReplicationLagInSecs"] = maxReplicationLagInSecs;
    }
    if (documentStoreType != nil) {
        queryParams[@"documentStoreType"] = documentStoreType;
    }
    if (bundlingDisabled != nil) {
        queryParams[@"bundlingDisabled"] = [bundlingDisabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (updateLimit != nil) {
        queryParams[@"updateLimit"] = updateLimit;
    }
    if (persistentCacheIncludes != nil) {
        queryParams[@"persistentCacheIncludes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: persistentCacheIncludes format: @"multi"];
    }
    if (leaseCheckMode != nil) {
        queryParams[@"leaseCheckMode"] = leaseCheckMode;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param persistentCacheIncludes  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    persistentCacheIncludes: (NSArray<NSString*>*) persistentCacheIncludes
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (persistentCacheIncludes != nil) {
        queryParams[@"persistentCacheIncludes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: persistentCacheIncludes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param includedPaths  (optional)
///
///  @param enableAsyncObserver  (optional)
///
///  @param observerQueueSize  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    includedPaths: (NSArray<NSString*>*) includedPaths
    enableAsyncObserver: (NSNumber*) enableAsyncObserver
    observerQueueSize: (NSNumber*) observerQueueSize
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (includedPaths != nil) {
        queryParams[@"includedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: includedPaths format: @"multi"];
    }
    if (enableAsyncObserver != nil) {
        queryParams[@"enableAsyncObserver"] = [enableAsyncObserver isEqual:@(YES)] ? @"true" : @"false";
    }
    if (observerQueueSize != nil) {
        queryParams[@"observerQueueSize"] = observerQueueSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param asyncConfigs  (optional)
///
///  @param leaseTimeOutMinutes  (optional)
///
///  @param failingIndexTimeoutSeconds  (optional)
///
///  @param errorWarnIntervalSeconds  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    asyncConfigs: (NSArray<NSString*>*) asyncConfigs
    leaseTimeOutMinutes: (NSNumber*) leaseTimeOutMinutes
    failingIndexTimeoutSeconds: (NSNumber*) failingIndexTimeoutSeconds
    errorWarnIntervalSeconds: (NSNumber*) errorWarnIntervalSeconds
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (asyncConfigs != nil) {
        queryParams[@"asyncConfigs"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: asyncConfigs format: @"multi"];
    }
    if (leaseTimeOutMinutes != nil) {
        queryParams[@"leaseTimeOutMinutes"] = leaseTimeOutMinutes;
    }
    if (failingIndexTimeoutSeconds != nil) {
        queryParams[@"failingIndexTimeoutSeconds"] = failingIndexTimeoutSeconds;
    }
    if (errorWarnIntervalSeconds != nil) {
        queryParams[@"errorWarnIntervalSeconds"] = errorWarnIntervalSeconds;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param disabled  (optional)
///
///  @param debug  (optional)
///
///  @param localIndexDir  (optional)
///
///  @param enableOpenIndexAsync  (optional)
///
///  @param threadPoolSize  (optional)
///
///  @param prefetchIndexFiles  (optional)
///
///  @param extractedTextCacheSizeInMB  (optional)
///
///  @param extractedTextCacheExpiryInSecs  (optional)
///
///  @param alwaysUsePreExtractedCache  (optional)
///
///  @param booleanClauseLimit  (optional)
///
///  @param enableHybridIndexing  (optional)
///
///  @param hybridQueueSize  (optional)
///
///  @param disableStoredIndexDefinition  (optional)
///
///  @param deletedBlobsCollectionEnabled  (optional)
///
///  @param propIndexCleanerIntervalInSecs  (optional)
///
///  @param enableSingleBlobIndexFiles  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    disabled: (NSNumber*) disabled
    debug: (NSNumber*) debug
    localIndexDir: (NSString*) localIndexDir
    enableOpenIndexAsync: (NSNumber*) enableOpenIndexAsync
    threadPoolSize: (NSNumber*) threadPoolSize
    prefetchIndexFiles: (NSNumber*) prefetchIndexFiles
    extractedTextCacheSizeInMB: (NSNumber*) extractedTextCacheSizeInMB
    extractedTextCacheExpiryInSecs: (NSNumber*) extractedTextCacheExpiryInSecs
    alwaysUsePreExtractedCache: (NSNumber*) alwaysUsePreExtractedCache
    booleanClauseLimit: (NSNumber*) booleanClauseLimit
    enableHybridIndexing: (NSNumber*) enableHybridIndexing
    hybridQueueSize: (NSNumber*) hybridQueueSize
    disableStoredIndexDefinition: (NSNumber*) disableStoredIndexDefinition
    deletedBlobsCollectionEnabled: (NSNumber*) deletedBlobsCollectionEnabled
    propIndexCleanerIntervalInSecs: (NSNumber*) propIndexCleanerIntervalInSecs
    enableSingleBlobIndexFiles: (NSNumber*) enableSingleBlobIndexFiles
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (disabled != nil) {
        queryParams[@"disabled"] = [disabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (debug != nil) {
        queryParams[@"debug"] = [debug isEqual:@(YES)] ? @"true" : @"false";
    }
    if (localIndexDir != nil) {
        queryParams[@"localIndexDir"] = localIndexDir;
    }
    if (enableOpenIndexAsync != nil) {
        queryParams[@"enableOpenIndexAsync"] = [enableOpenIndexAsync isEqual:@(YES)] ? @"true" : @"false";
    }
    if (threadPoolSize != nil) {
        queryParams[@"threadPoolSize"] = threadPoolSize;
    }
    if (prefetchIndexFiles != nil) {
        queryParams[@"prefetchIndexFiles"] = [prefetchIndexFiles isEqual:@(YES)] ? @"true" : @"false";
    }
    if (extractedTextCacheSizeInMB != nil) {
        queryParams[@"extractedTextCacheSizeInMB"] = extractedTextCacheSizeInMB;
    }
    if (extractedTextCacheExpiryInSecs != nil) {
        queryParams[@"extractedTextCacheExpiryInSecs"] = extractedTextCacheExpiryInSecs;
    }
    if (alwaysUsePreExtractedCache != nil) {
        queryParams[@"alwaysUsePreExtractedCache"] = [alwaysUsePreExtractedCache isEqual:@(YES)] ? @"true" : @"false";
    }
    if (booleanClauseLimit != nil) {
        queryParams[@"booleanClauseLimit"] = booleanClauseLimit;
    }
    if (enableHybridIndexing != nil) {
        queryParams[@"enableHybridIndexing"] = [enableHybridIndexing isEqual:@(YES)] ? @"true" : @"false";
    }
    if (hybridQueueSize != nil) {
        queryParams[@"hybridQueueSize"] = hybridQueueSize;
    }
    if (disableStoredIndexDefinition != nil) {
        queryParams[@"disableStoredIndexDefinition"] = [disableStoredIndexDefinition isEqual:@(YES)] ? @"true" : @"false";
    }
    if (deletedBlobsCollectionEnabled != nil) {
        queryParams[@"deletedBlobsCollectionEnabled"] = [deletedBlobsCollectionEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (propIndexCleanerIntervalInSecs != nil) {
        queryParams[@"propIndexCleanerIntervalInSecs"] = propIndexCleanerIntervalInSecs;
    }
    if (enableSingleBlobIndexFiles != nil) {
        queryParams[@"enableSingleBlobIndexFiles"] = [enableSingleBlobIndexFiles isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param solrHomePath  (optional)
///
///  @param solrCoreName  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    solrHomePath: (NSString*) solrHomePath
    solrCoreName: (NSString*) solrCoreName
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (solrHomePath != nil) {
        queryParams[@"solr.home.path"] = solrHomePath;
    }
    if (solrCoreName != nil) {
        queryParams[@"solr.core.name"] = solrCoreName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param pathDescField  (optional)
///
///  @param pathChildField  (optional)
///
///  @param pathParentField  (optional)
///
///  @param pathExactField  (optional)
///
///  @param catchAllField  (optional)
///
///  @param collapsedPathField  (optional)
///
///  @param pathDepthField  (optional)
///
///  @param commitPolicy  (optional)
///
///  @param rows  (optional)
///
///  @param pathRestrictions  (optional)
///
///  @param propertyRestrictions  (optional)
///
///  @param primarytypesRestrictions  (optional)
///
///  @param ignoredProperties  (optional)
///
///  @param usedProperties  (optional)
///
///  @param typeMappings  (optional)
///
///  @param propertyMappings  (optional)
///
///  @param collapseJcrcontentNodes  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    pathDescField: (NSString*) pathDescField
    pathChildField: (NSString*) pathChildField
    pathParentField: (NSString*) pathParentField
    pathExactField: (NSString*) pathExactField
    catchAllField: (NSString*) catchAllField
    collapsedPathField: (NSString*) collapsedPathField
    pathDepthField: (NSString*) pathDepthField
    commitPolicy: (NSString*) commitPolicy
    rows: (NSNumber*) rows
    pathRestrictions: (NSNumber*) pathRestrictions
    propertyRestrictions: (NSNumber*) propertyRestrictions
    primarytypesRestrictions: (NSNumber*) primarytypesRestrictions
    ignoredProperties: (NSArray<NSString*>*) ignoredProperties
    usedProperties: (NSArray<NSString*>*) usedProperties
    typeMappings: (NSArray<NSString*>*) typeMappings
    propertyMappings: (NSArray<NSString*>*) propertyMappings
    collapseJcrcontentNodes: (NSNumber*) collapseJcrcontentNodes
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (pathDescField != nil) {
        queryParams[@"path.desc.field"] = pathDescField;
    }
    if (pathChildField != nil) {
        queryParams[@"path.child.field"] = pathChildField;
    }
    if (pathParentField != nil) {
        queryParams[@"path.parent.field"] = pathParentField;
    }
    if (pathExactField != nil) {
        queryParams[@"path.exact.field"] = pathExactField;
    }
    if (catchAllField != nil) {
        queryParams[@"catch.all.field"] = catchAllField;
    }
    if (collapsedPathField != nil) {
        queryParams[@"collapsed.path.field"] = collapsedPathField;
    }
    if (pathDepthField != nil) {
        queryParams[@"path.depth.field"] = pathDepthField;
    }
    if (commitPolicy != nil) {
        queryParams[@"commit.policy"] = commitPolicy;
    }
    if (rows != nil) {
        queryParams[@"rows"] = rows;
    }
    if (pathRestrictions != nil) {
        queryParams[@"path.restrictions"] = [pathRestrictions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (propertyRestrictions != nil) {
        queryParams[@"property.restrictions"] = [propertyRestrictions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (primarytypesRestrictions != nil) {
        queryParams[@"primarytypes.restrictions"] = [primarytypesRestrictions isEqual:@(YES)] ? @"true" : @"false";
    }
    if (ignoredProperties != nil) {
        queryParams[@"ignored.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignoredProperties format: @"multi"];
    }
    if (usedProperties != nil) {
        queryParams[@"used.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: usedProperties format: @"multi"];
    }
    if (typeMappings != nil) {
        queryParams[@"type.mappings"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: typeMappings format: @"multi"];
    }
    if (propertyMappings != nil) {
        queryParams[@"property.mappings"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertyMappings format: @"multi"];
    }
    if (collapseJcrcontentNodes != nil) {
        queryParams[@"collapse.jcrcontent.nodes"] = [collapseJcrcontentNodes isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param solrHttpUrl  (optional)
///
///  @param solrZkHost  (optional)
///
///  @param solrCollection  (optional)
///
///  @param solrSocketTimeout  (optional)
///
///  @param solrConnectionTimeout  (optional)
///
///  @param solrShardsNo  (optional)
///
///  @param solrReplicationFactor  (optional)
///
///  @param solrConfDir  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    solrHttpUrl: (NSString*) solrHttpUrl
    solrZkHost: (NSString*) solrZkHost
    solrCollection: (NSString*) solrCollection
    solrSocketTimeout: (NSNumber*) solrSocketTimeout
    solrConnectionTimeout: (NSNumber*) solrConnectionTimeout
    solrShardsNo: (NSNumber*) solrShardsNo
    solrReplicationFactor: (NSNumber*) solrReplicationFactor
    solrConfDir: (NSString*) solrConfDir
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (solrHttpUrl != nil) {
        queryParams[@"solr.http.url"] = solrHttpUrl;
    }
    if (solrZkHost != nil) {
        queryParams[@"solr.zk.host"] = solrZkHost;
    }
    if (solrCollection != nil) {
        queryParams[@"solr.collection"] = solrCollection;
    }
    if (solrSocketTimeout != nil) {
        queryParams[@"solr.socket.timeout"] = solrSocketTimeout;
    }
    if (solrConnectionTimeout != nil) {
        queryParams[@"solr.connection.timeout"] = solrConnectionTimeout;
    }
    if (solrShardsNo != nil) {
        queryParams[@"solr.shards.no"] = solrShardsNo;
    }
    if (solrReplicationFactor != nil) {
        queryParams[@"solr.replication.factor"] = solrReplicationFactor;
    }
    if (solrConfDir != nil) {
        queryParams[@"solr.conf.dir"] = solrConfDir;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queryAggregation  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queryAggregation: (NSNumber*) queryAggregation
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queryAggregation != nil) {
        queryParams[@"query.aggregation"] = [queryAggregation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serverType  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serverType: (NSString*) serverType
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serverType != nil) {
        queryParams[@"server.type"] = serverType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerType  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerType: (NSString*) providerType
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerType != nil) {
        queryParams[@"providerType"] = providerType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxItems  (optional)
///
///  @param maxPathDepth  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakPluginsObservationChangeCollectorProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxItems: (NSNumber*) maxItems
    maxPathDepth: (NSNumber*) maxPathDepth
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxItems != nil) {
        queryParams[@"maxItems"] = maxItems;
    }
    if (maxPathDepth != nil) {
        queryParams[@"maxPathDepth"] = maxPathDepth;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queryLimitInMemory  (optional)
///
///  @param queryLimitReads  (optional)
///
///  @param queryFailTraversal  (optional)
///
///  @param fastQuerySize  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakQueryQueryEngineSettingsServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queryLimitInMemory: (NSNumber*) queryLimitInMemory
    queryLimitReads: (NSNumber*) queryLimitReads
    queryFailTraversal: (NSNumber*) queryFailTraversal
    fastQuerySize: (NSNumber*) fastQuerySize
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queryLimitInMemory != nil) {
        queryParams[@"queryLimitInMemory"] = queryLimitInMemory;
    }
    if (queryLimitReads != nil) {
        queryParams[@"queryLimitReads"] = queryLimitReads;
    }
    if (queryFailTraversal != nil) {
        queryParams[@"queryFailTraversal"] = [queryFailTraversal isEqual:@(YES)] ? @"true" : @"false";
    }
    if (fastQuerySize != nil) {
        queryParams[@"fastQuerySize"] = [fastQuerySize isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheJackrabbitOakAuthenticationAppName  (optional)
///
///  @param orgApacheJackrabbitOakAuthenticationConfigSpiName  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheJackrabbitOakAuthenticationAppName: (NSString*) orgApacheJackrabbitOakAuthenticationAppName
    orgApacheJackrabbitOakAuthenticationConfigSpiName: (NSString*) orgApacheJackrabbitOakAuthenticationConfigSpiName
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheJackrabbitOakAuthenticationAppName != nil) {
        queryParams[@"org.apache.jackrabbit.oak.authentication.appName"] = orgApacheJackrabbitOakAuthenticationAppName;
    }
    if (orgApacheJackrabbitOakAuthenticationConfigSpiName != nil) {
        queryParams[@"org.apache.jackrabbit.oak.authentication.configSpiName"] = orgApacheJackrabbitOakAuthenticationConfigSpiName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerName  (optional)
///
///  @param hostName  (optional)
///
///  @param hostPort  (optional)
///
///  @param hostSsl  (optional)
///
///  @param hostTls  (optional)
///
///  @param hostNoCertCheck  (optional)
///
///  @param bindDn  (optional)
///
///  @param bindPassword  (optional)
///
///  @param searchTimeout  (optional)
///
///  @param adminPoolMaxActive  (optional)
///
///  @param adminPoolLookupOnValidate  (optional)
///
///  @param userPoolMaxActive  (optional)
///
///  @param userPoolLookupOnValidate  (optional)
///
///  @param userBaseDN  (optional)
///
///  @param userObjectclass  (optional)
///
///  @param userIdAttribute  (optional)
///
///  @param userExtraFilter  (optional)
///
///  @param userMakeDnPath  (optional)
///
///  @param groupBaseDN  (optional)
///
///  @param groupObjectclass  (optional)
///
///  @param groupNameAttribute  (optional)
///
///  @param groupExtraFilter  (optional)
///
///  @param groupMakeDnPath  (optional)
///
///  @param groupMemberAttribute  (optional)
///
///  @param useUidForExtId  (optional)
///
///  @param customattributes  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerName: (NSString*) providerName
    hostName: (NSString*) hostName
    hostPort: (NSNumber*) hostPort
    hostSsl: (NSNumber*) hostSsl
    hostTls: (NSNumber*) hostTls
    hostNoCertCheck: (NSNumber*) hostNoCertCheck
    bindDn: (NSString*) bindDn
    bindPassword: (NSString*) bindPassword
    searchTimeout: (NSString*) searchTimeout
    adminPoolMaxActive: (NSNumber*) adminPoolMaxActive
    adminPoolLookupOnValidate: (NSNumber*) adminPoolLookupOnValidate
    userPoolMaxActive: (NSNumber*) userPoolMaxActive
    userPoolLookupOnValidate: (NSNumber*) userPoolLookupOnValidate
    userBaseDN: (NSString*) userBaseDN
    userObjectclass: (NSArray<NSString*>*) userObjectclass
    userIdAttribute: (NSString*) userIdAttribute
    userExtraFilter: (NSString*) userExtraFilter
    userMakeDnPath: (NSNumber*) userMakeDnPath
    groupBaseDN: (NSString*) groupBaseDN
    groupObjectclass: (NSArray<NSString*>*) groupObjectclass
    groupNameAttribute: (NSString*) groupNameAttribute
    groupExtraFilter: (NSString*) groupExtraFilter
    groupMakeDnPath: (NSNumber*) groupMakeDnPath
    groupMemberAttribute: (NSString*) groupMemberAttribute
    useUidForExtId: (NSNumber*) useUidForExtId
    customattributes: (NSArray<NSString*>*) customattributes
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerName != nil) {
        queryParams[@"provider.name"] = providerName;
    }
    if (hostName != nil) {
        queryParams[@"host.name"] = hostName;
    }
    if (hostPort != nil) {
        queryParams[@"host.port"] = hostPort;
    }
    if (hostSsl != nil) {
        queryParams[@"host.ssl"] = [hostSsl isEqual:@(YES)] ? @"true" : @"false";
    }
    if (hostTls != nil) {
        queryParams[@"host.tls"] = [hostTls isEqual:@(YES)] ? @"true" : @"false";
    }
    if (hostNoCertCheck != nil) {
        queryParams[@"host.noCertCheck"] = [hostNoCertCheck isEqual:@(YES)] ? @"true" : @"false";
    }
    if (bindDn != nil) {
        queryParams[@"bind.dn"] = bindDn;
    }
    if (bindPassword != nil) {
        queryParams[@"bind.password"] = bindPassword;
    }
    if (searchTimeout != nil) {
        queryParams[@"searchTimeout"] = searchTimeout;
    }
    if (adminPoolMaxActive != nil) {
        queryParams[@"adminPool.maxActive"] = adminPoolMaxActive;
    }
    if (adminPoolLookupOnValidate != nil) {
        queryParams[@"adminPool.lookupOnValidate"] = [adminPoolLookupOnValidate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (userPoolMaxActive != nil) {
        queryParams[@"userPool.maxActive"] = userPoolMaxActive;
    }
    if (userPoolLookupOnValidate != nil) {
        queryParams[@"userPool.lookupOnValidate"] = [userPoolLookupOnValidate isEqual:@(YES)] ? @"true" : @"false";
    }
    if (userBaseDN != nil) {
        queryParams[@"user.baseDN"] = userBaseDN;
    }
    if (userObjectclass != nil) {
        queryParams[@"user.objectclass"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userObjectclass format: @"multi"];
    }
    if (userIdAttribute != nil) {
        queryParams[@"user.idAttribute"] = userIdAttribute;
    }
    if (userExtraFilter != nil) {
        queryParams[@"user.extraFilter"] = userExtraFilter;
    }
    if (userMakeDnPath != nil) {
        queryParams[@"user.makeDnPath"] = [userMakeDnPath isEqual:@(YES)] ? @"true" : @"false";
    }
    if (groupBaseDN != nil) {
        queryParams[@"group.baseDN"] = groupBaseDN;
    }
    if (groupObjectclass != nil) {
        queryParams[@"group.objectclass"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: groupObjectclass format: @"multi"];
    }
    if (groupNameAttribute != nil) {
        queryParams[@"group.nameAttribute"] = groupNameAttribute;
    }
    if (groupExtraFilter != nil) {
        queryParams[@"group.extraFilter"] = groupExtraFilter;
    }
    if (groupMakeDnPath != nil) {
        queryParams[@"group.makeDnPath"] = [groupMakeDnPath isEqual:@(YES)] ? @"true" : @"false";
    }
    if (groupMemberAttribute != nil) {
        queryParams[@"group.memberAttribute"] = groupMemberAttribute;
    }
    if (useUidForExtId != nil) {
        queryParams[@"useUidForExtId"] = [useUidForExtId isEqual:@(YES)] ? @"true" : @"false";
    }
    if (customattributes != nil) {
        queryParams[@"customattributes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: customattributes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param tokenExpiration  (optional)
///
///  @param tokenLength  (optional)
///
///  @param tokenRefresh  (optional)
///
///  @param tokenCleanupThreshold  (optional)
///
///  @param passwordHashAlgorithm  (optional)
///
///  @param passwordHashIterations  (optional)
///
///  @param passwordSaltSize  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    tokenExpiration: (NSString*) tokenExpiration
    tokenLength: (NSString*) tokenLength
    tokenRefresh: (NSNumber*) tokenRefresh
    tokenCleanupThreshold: (NSNumber*) tokenCleanupThreshold
    passwordHashAlgorithm: (NSString*) passwordHashAlgorithm
    passwordHashIterations: (NSNumber*) passwordHashIterations
    passwordSaltSize: (NSNumber*) passwordSaltSize
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (tokenExpiration != nil) {
        queryParams[@"tokenExpiration"] = tokenExpiration;
    }
    if (tokenLength != nil) {
        queryParams[@"tokenLength"] = tokenLength;
    }
    if (tokenRefresh != nil) {
        queryParams[@"tokenRefresh"] = [tokenRefresh isEqual:@(YES)] ? @"true" : @"false";
    }
    if (tokenCleanupThreshold != nil) {
        queryParams[@"tokenCleanupThreshold"] = tokenCleanupThreshold;
    }
    if (passwordHashAlgorithm != nil) {
        queryParams[@"passwordHashAlgorithm"] = passwordHashAlgorithm;
    }
    if (passwordHashIterations != nil) {
        queryParams[@"passwordHashIterations"] = passwordHashIterations;
    }
    if (passwordSaltSize != nil) {
        queryParams[@"passwordSaltSize"] = passwordSaltSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param permissionsJr2  (optional)
///
///  @param importBehavior  (optional)
///
///  @param readPaths  (optional)
///
///  @param administrativePrincipals  (optional)
///
///  @param configurationRanking  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    permissionsJr2: (NSString*) permissionsJr2
    importBehavior: (NSString*) importBehavior
    readPaths: (NSArray<NSString*>*) readPaths
    administrativePrincipals: (NSArray<NSString*>*) administrativePrincipals
    configurationRanking: (NSNumber*) configurationRanking
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (permissionsJr2 != nil) {
        queryParams[@"permissionsJr2"] = permissionsJr2;
    }
    if (importBehavior != nil) {
        queryParams[@"importBehavior"] = importBehavior;
    }
    if (readPaths != nil) {
        queryParams[@"readPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: readPaths format: @"multi"];
    }
    if (administrativePrincipals != nil) {
        queryParams[@"administrativePrincipals"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: administrativePrincipals format: @"multi"];
    }
    if (configurationRanking != nil) {
        queryParams[@"configurationRanking"] = configurationRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param requiredServicePids  (optional)
///
///  @param authorizationCompositionType  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    requiredServicePids: (NSArray<NSString*>*) requiredServicePids
    authorizationCompositionType: (NSString*) authorizationCompositionType
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (requiredServicePids != nil) {
        queryParams[@"requiredServicePids"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: requiredServicePids format: @"multi"];
    }
    if (authorizationCompositionType != nil) {
        queryParams[@"authorizationCompositionType"] = authorizationCompositionType;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param length  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    length: (NSNumber*) length
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (length != nil) {
        queryParams[@"length"] = length;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param usersPath  (optional)
///
///  @param groupsPath  (optional)
///
///  @param systemRelativePath  (optional)
///
///  @param defaultDepth  (optional)
///
///  @param importBehavior  (optional)
///
///  @param passwordHashAlgorithm  (optional)
///
///  @param passwordHashIterations  (optional)
///
///  @param passwordSaltSize  (optional)
///
///  @param omitAdminPw  (optional)
///
///  @param supportAutoSave  (optional)
///
///  @param passwordMaxAge  (optional)
///
///  @param initialPasswordChange  (optional)
///
///  @param passwordHistorySize  (optional)
///
///  @param passwordExpiryForAdmin  (optional)
///
///  @param cacheExpiration  (optional)
///
///  @param enableRFC7613UsercaseMappedProfile  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSecurityUserUserConfigurationImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    usersPath: (NSString*) usersPath
    groupsPath: (NSString*) groupsPath
    systemRelativePath: (NSString*) systemRelativePath
    defaultDepth: (NSNumber*) defaultDepth
    importBehavior: (NSString*) importBehavior
    passwordHashAlgorithm: (NSString*) passwordHashAlgorithm
    passwordHashIterations: (NSNumber*) passwordHashIterations
    passwordSaltSize: (NSNumber*) passwordSaltSize
    omitAdminPw: (NSNumber*) omitAdminPw
    supportAutoSave: (NSNumber*) supportAutoSave
    passwordMaxAge: (NSNumber*) passwordMaxAge
    initialPasswordChange: (NSNumber*) initialPasswordChange
    passwordHistorySize: (NSNumber*) passwordHistorySize
    passwordExpiryForAdmin: (NSNumber*) passwordExpiryForAdmin
    cacheExpiration: (NSNumber*) cacheExpiration
    enableRFC7613UsercaseMappedProfile: (NSNumber*) enableRFC7613UsercaseMappedProfile
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (usersPath != nil) {
        queryParams[@"usersPath"] = usersPath;
    }
    if (groupsPath != nil) {
        queryParams[@"groupsPath"] = groupsPath;
    }
    if (systemRelativePath != nil) {
        queryParams[@"systemRelativePath"] = systemRelativePath;
    }
    if (defaultDepth != nil) {
        queryParams[@"defaultDepth"] = defaultDepth;
    }
    if (importBehavior != nil) {
        queryParams[@"importBehavior"] = importBehavior;
    }
    if (passwordHashAlgorithm != nil) {
        queryParams[@"passwordHashAlgorithm"] = passwordHashAlgorithm;
    }
    if (passwordHashIterations != nil) {
        queryParams[@"passwordHashIterations"] = passwordHashIterations;
    }
    if (passwordSaltSize != nil) {
        queryParams[@"passwordSaltSize"] = passwordSaltSize;
    }
    if (omitAdminPw != nil) {
        queryParams[@"omitAdminPw"] = [omitAdminPw isEqual:@(YES)] ? @"true" : @"false";
    }
    if (supportAutoSave != nil) {
        queryParams[@"supportAutoSave"] = [supportAutoSave isEqual:@(YES)] ? @"true" : @"false";
    }
    if (passwordMaxAge != nil) {
        queryParams[@"passwordMaxAge"] = passwordMaxAge;
    }
    if (initialPasswordChange != nil) {
        queryParams[@"initialPasswordChange"] = [initialPasswordChange isEqual:@(YES)] ? @"true" : @"false";
    }
    if (passwordHistorySize != nil) {
        queryParams[@"passwordHistorySize"] = passwordHistorySize;
    }
    if (passwordExpiryForAdmin != nil) {
        queryParams[@"passwordExpiryForAdmin"] = [passwordExpiryForAdmin isEqual:@(YES)] ? @"true" : @"false";
    }
    if (cacheExpiration != nil) {
        queryParams[@"cacheExpiration"] = cacheExpiration;
    }
    if (enableRFC7613UsercaseMappedProfile != nil) {
        queryParams[@"enableRFC7613UsercaseMappedProfile"] = [enableRFC7613UsercaseMappedProfile isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param accountName  (optional)
///
///  @param containerName  (optional)
///
///  @param accessKey  (optional)
///
///  @param rootPath  (optional)
///
///  @param connectionURL  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    accountName: (NSString*) accountName
    containerName: (NSString*) containerName
    accessKey: (NSString*) accessKey
    rootPath: (NSString*) rootPath
    connectionURL: (NSString*) connectionURL
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (accountName != nil) {
        queryParams[@"accountName"] = accountName;
    }
    if (containerName != nil) {
        queryParams[@"containerName"] = containerName;
    }
    if (accessKey != nil) {
        queryParams[@"accessKey"] = accessKey;
    }
    if (rootPath != nil) {
        queryParams[@"rootPath"] = rootPath;
    }
    if (connectionURL != nil) {
        queryParams[@"connectionURL"] = connectionURL;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param repositoryHome  (optional)
///
///  @param tarmkMode  (optional)
///
///  @param tarmkSize  (optional)
///
///  @param segmentCacheSize  (optional)
///
///  @param stringCacheSize  (optional)
///
///  @param templateCacheSize  (optional)
///
///  @param stringDeduplicationCacheSize  (optional)
///
///  @param templateDeduplicationCacheSize  (optional)
///
///  @param nodeDeduplicationCacheSize  (optional)
///
///  @param pauseCompaction  (optional)
///
///  @param compactionRetryCount  (optional)
///
///  @param compactionForceTimeout  (optional)
///
///  @param compactionSizeDeltaEstimation  (optional)
///
///  @param compactionDisableEstimation  (optional)
///
///  @param compactionRetainedGenerations  (optional)
///
///  @param compactionMemoryThreshold  (optional)
///
///  @param compactionProgressLog  (optional)
///
///  @param standby  (optional)
///
///  @param customBlobStore  (optional)
///
///  @param customSegmentStore  (optional)
///
///  @param splitPersistence  (optional)
///
///  @param repositoryBackupDir  (optional)
///
///  @param blobGcMaxAgeInSecs  (optional)
///
///  @param blobTrackSnapshotIntervalInSecs  (optional)
///
///  @param role  (optional)
///
///  @param registerDescriptors  (optional)
///
///  @param dispatchChanges  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    repositoryHome: (NSString*) repositoryHome
    tarmkMode: (NSString*) tarmkMode
    tarmkSize: (NSNumber*) tarmkSize
    segmentCacheSize: (NSNumber*) segmentCacheSize
    stringCacheSize: (NSNumber*) stringCacheSize
    templateCacheSize: (NSNumber*) templateCacheSize
    stringDeduplicationCacheSize: (NSNumber*) stringDeduplicationCacheSize
    templateDeduplicationCacheSize: (NSNumber*) templateDeduplicationCacheSize
    nodeDeduplicationCacheSize: (NSNumber*) nodeDeduplicationCacheSize
    pauseCompaction: (NSNumber*) pauseCompaction
    compactionRetryCount: (NSNumber*) compactionRetryCount
    compactionForceTimeout: (NSNumber*) compactionForceTimeout
    compactionSizeDeltaEstimation: (NSNumber*) compactionSizeDeltaEstimation
    compactionDisableEstimation: (NSNumber*) compactionDisableEstimation
    compactionRetainedGenerations: (NSNumber*) compactionRetainedGenerations
    compactionMemoryThreshold: (NSNumber*) compactionMemoryThreshold
    compactionProgressLog: (NSNumber*) compactionProgressLog
    standby: (NSNumber*) standby
    customBlobStore: (NSNumber*) customBlobStore
    customSegmentStore: (NSNumber*) customSegmentStore
    splitPersistence: (NSNumber*) splitPersistence
    repositoryBackupDir: (NSString*) repositoryBackupDir
    blobGcMaxAgeInSecs: (NSNumber*) blobGcMaxAgeInSecs
    blobTrackSnapshotIntervalInSecs: (NSNumber*) blobTrackSnapshotIntervalInSecs
    role: (NSString*) role
    registerDescriptors: (NSNumber*) registerDescriptors
    dispatchChanges: (NSNumber*) dispatchChanges
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (repositoryHome != nil) {
        queryParams[@"repository.home"] = repositoryHome;
    }
    if (tarmkMode != nil) {
        queryParams[@"tarmk.mode"] = tarmkMode;
    }
    if (tarmkSize != nil) {
        queryParams[@"tarmk.size"] = tarmkSize;
    }
    if (segmentCacheSize != nil) {
        queryParams[@"segmentCache.size"] = segmentCacheSize;
    }
    if (stringCacheSize != nil) {
        queryParams[@"stringCache.size"] = stringCacheSize;
    }
    if (templateCacheSize != nil) {
        queryParams[@"templateCache.size"] = templateCacheSize;
    }
    if (stringDeduplicationCacheSize != nil) {
        queryParams[@"stringDeduplicationCache.size"] = stringDeduplicationCacheSize;
    }
    if (templateDeduplicationCacheSize != nil) {
        queryParams[@"templateDeduplicationCache.size"] = templateDeduplicationCacheSize;
    }
    if (nodeDeduplicationCacheSize != nil) {
        queryParams[@"nodeDeduplicationCache.size"] = nodeDeduplicationCacheSize;
    }
    if (pauseCompaction != nil) {
        queryParams[@"pauseCompaction"] = [pauseCompaction isEqual:@(YES)] ? @"true" : @"false";
    }
    if (compactionRetryCount != nil) {
        queryParams[@"compaction.retryCount"] = compactionRetryCount;
    }
    if (compactionForceTimeout != nil) {
        queryParams[@"compaction.force.timeout"] = compactionForceTimeout;
    }
    if (compactionSizeDeltaEstimation != nil) {
        queryParams[@"compaction.sizeDeltaEstimation"] = compactionSizeDeltaEstimation;
    }
    if (compactionDisableEstimation != nil) {
        queryParams[@"compaction.disableEstimation"] = [compactionDisableEstimation isEqual:@(YES)] ? @"true" : @"false";
    }
    if (compactionRetainedGenerations != nil) {
        queryParams[@"compaction.retainedGenerations"] = compactionRetainedGenerations;
    }
    if (compactionMemoryThreshold != nil) {
        queryParams[@"compaction.memoryThreshold"] = compactionMemoryThreshold;
    }
    if (compactionProgressLog != nil) {
        queryParams[@"compaction.progressLog"] = compactionProgressLog;
    }
    if (standby != nil) {
        queryParams[@"standby"] = [standby isEqual:@(YES)] ? @"true" : @"false";
    }
    if (customBlobStore != nil) {
        queryParams[@"customBlobStore"] = [customBlobStore isEqual:@(YES)] ? @"true" : @"false";
    }
    if (customSegmentStore != nil) {
        queryParams[@"customSegmentStore"] = [customSegmentStore isEqual:@(YES)] ? @"true" : @"false";
    }
    if (splitPersistence != nil) {
        queryParams[@"splitPersistence"] = [splitPersistence isEqual:@(YES)] ? @"true" : @"false";
    }
    if (repositoryBackupDir != nil) {
        queryParams[@"repository.backup.dir"] = repositoryBackupDir;
    }
    if (blobGcMaxAgeInSecs != nil) {
        queryParams[@"blobGcMaxAgeInSecs"] = blobGcMaxAgeInSecs;
    }
    if (blobTrackSnapshotIntervalInSecs != nil) {
        queryParams[@"blobTrackSnapshotIntervalInSecs"] = blobTrackSnapshotIntervalInSecs;
    }
    if (role != nil) {
        queryParams[@"role"] = role;
    }
    if (registerDescriptors != nil) {
        queryParams[@"registerDescriptors"] = [registerDescriptors isEqual:@(YES)] ? @"true" : @"false";
    }
    if (dispatchChanges != nil) {
        queryParams[@"dispatchChanges"] = [dispatchChanges isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param commitsTrackerWriterGroups  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    commitsTrackerWriterGroups: (NSArray<NSString*>*) commitsTrackerWriterGroups
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (commitsTrackerWriterGroups != nil) {
        queryParams[@"commitsTrackerWriterGroups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: commitsTrackerWriterGroups format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param repositoryHome  (optional)
///
///  @param tarmkMode  (optional)
///
///  @param tarmkSize  (optional)
///
///  @param segmentCacheSize  (optional)
///
///  @param stringCacheSize  (optional)
///
///  @param templateCacheSize  (optional)
///
///  @param stringDeduplicationCacheSize  (optional)
///
///  @param templateDeduplicationCacheSize  (optional)
///
///  @param nodeDeduplicationCacheSize  (optional)
///
///  @param pauseCompaction  (optional)
///
///  @param compactionRetryCount  (optional)
///
///  @param compactionForceTimeout  (optional)
///
///  @param compactionSizeDeltaEstimation  (optional)
///
///  @param compactionDisableEstimation  (optional)
///
///  @param compactionRetainedGenerations  (optional)
///
///  @param compactionMemoryThreshold  (optional)
///
///  @param compactionProgressLog  (optional)
///
///  @param standby  (optional)
///
///  @param customBlobStore  (optional)
///
///  @param customSegmentStore  (optional)
///
///  @param splitPersistence  (optional)
///
///  @param repositoryBackupDir  (optional)
///
///  @param blobGcMaxAgeInSecs  (optional)
///
///  @param blobTrackSnapshotIntervalInSecs  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSegmentSegmentNodeStoreServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    repositoryHome: (NSString*) repositoryHome
    tarmkMode: (NSString*) tarmkMode
    tarmkSize: (NSNumber*) tarmkSize
    segmentCacheSize: (NSNumber*) segmentCacheSize
    stringCacheSize: (NSNumber*) stringCacheSize
    templateCacheSize: (NSNumber*) templateCacheSize
    stringDeduplicationCacheSize: (NSNumber*) stringDeduplicationCacheSize
    templateDeduplicationCacheSize: (NSNumber*) templateDeduplicationCacheSize
    nodeDeduplicationCacheSize: (NSNumber*) nodeDeduplicationCacheSize
    pauseCompaction: (NSNumber*) pauseCompaction
    compactionRetryCount: (NSNumber*) compactionRetryCount
    compactionForceTimeout: (NSNumber*) compactionForceTimeout
    compactionSizeDeltaEstimation: (NSNumber*) compactionSizeDeltaEstimation
    compactionDisableEstimation: (NSNumber*) compactionDisableEstimation
    compactionRetainedGenerations: (NSNumber*) compactionRetainedGenerations
    compactionMemoryThreshold: (NSNumber*) compactionMemoryThreshold
    compactionProgressLog: (NSNumber*) compactionProgressLog
    standby: (NSNumber*) standby
    customBlobStore: (NSNumber*) customBlobStore
    customSegmentStore: (NSNumber*) customSegmentStore
    splitPersistence: (NSNumber*) splitPersistence
    repositoryBackupDir: (NSString*) repositoryBackupDir
    blobGcMaxAgeInSecs: (NSNumber*) blobGcMaxAgeInSecs
    blobTrackSnapshotIntervalInSecs: (NSNumber*) blobTrackSnapshotIntervalInSecs
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (repositoryHome != nil) {
        queryParams[@"repository.home"] = repositoryHome;
    }
    if (tarmkMode != nil) {
        queryParams[@"tarmk.mode"] = tarmkMode;
    }
    if (tarmkSize != nil) {
        queryParams[@"tarmk.size"] = tarmkSize;
    }
    if (segmentCacheSize != nil) {
        queryParams[@"segmentCache.size"] = segmentCacheSize;
    }
    if (stringCacheSize != nil) {
        queryParams[@"stringCache.size"] = stringCacheSize;
    }
    if (templateCacheSize != nil) {
        queryParams[@"templateCache.size"] = templateCacheSize;
    }
    if (stringDeduplicationCacheSize != nil) {
        queryParams[@"stringDeduplicationCache.size"] = stringDeduplicationCacheSize;
    }
    if (templateDeduplicationCacheSize != nil) {
        queryParams[@"templateDeduplicationCache.size"] = templateDeduplicationCacheSize;
    }
    if (nodeDeduplicationCacheSize != nil) {
        queryParams[@"nodeDeduplicationCache.size"] = nodeDeduplicationCacheSize;
    }
    if (pauseCompaction != nil) {
        queryParams[@"pauseCompaction"] = [pauseCompaction isEqual:@(YES)] ? @"true" : @"false";
    }
    if (compactionRetryCount != nil) {
        queryParams[@"compaction.retryCount"] = compactionRetryCount;
    }
    if (compactionForceTimeout != nil) {
        queryParams[@"compaction.force.timeout"] = compactionForceTimeout;
    }
    if (compactionSizeDeltaEstimation != nil) {
        queryParams[@"compaction.sizeDeltaEstimation"] = compactionSizeDeltaEstimation;
    }
    if (compactionDisableEstimation != nil) {
        queryParams[@"compaction.disableEstimation"] = [compactionDisableEstimation isEqual:@(YES)] ? @"true" : @"false";
    }
    if (compactionRetainedGenerations != nil) {
        queryParams[@"compaction.retainedGenerations"] = compactionRetainedGenerations;
    }
    if (compactionMemoryThreshold != nil) {
        queryParams[@"compaction.memoryThreshold"] = compactionMemoryThreshold;
    }
    if (compactionProgressLog != nil) {
        queryParams[@"compaction.progressLog"] = compactionProgressLog;
    }
    if (standby != nil) {
        queryParams[@"standby"] = [standby isEqual:@(YES)] ? @"true" : @"false";
    }
    if (customBlobStore != nil) {
        queryParams[@"customBlobStore"] = [customBlobStore isEqual:@(YES)] ? @"true" : @"false";
    }
    if (customSegmentStore != nil) {
        queryParams[@"customSegmentStore"] = [customSegmentStore isEqual:@(YES)] ? @"true" : @"false";
    }
    if (splitPersistence != nil) {
        queryParams[@"splitPersistence"] = [splitPersistence isEqual:@(YES)] ? @"true" : @"false";
    }
    if (repositoryBackupDir != nil) {
        queryParams[@"repository.backup.dir"] = repositoryBackupDir;
    }
    if (blobGcMaxAgeInSecs != nil) {
        queryParams[@"blobGcMaxAgeInSecs"] = blobGcMaxAgeInSecs;
    }
    if (blobTrackSnapshotIntervalInSecs != nil) {
        queryParams[@"blobTrackSnapshotIntervalInSecs"] = blobTrackSnapshotIntervalInSecs;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingInstallerConfigurationPersist  (optional)
///
///  @param mode  (optional)
///
///  @param port  (optional)
///
///  @param primaryHost  (optional)
///
///  @param interval  (optional)
///
///  @param primaryAllowedClientIpRanges  (optional)
///
///  @param secure  (optional)
///
///  @param standbyReadtimeout  (optional)
///
///  @param standbyAutoclean  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingInstallerConfigurationPersist: (NSNumber*) orgApacheSlingInstallerConfigurationPersist
    mode: (NSString*) mode
    port: (NSNumber*) port
    primaryHost: (NSString*) primaryHost
    interval: (NSNumber*) interval
    primaryAllowedClientIpRanges: (NSArray<NSString*>*) primaryAllowedClientIpRanges
    secure: (NSNumber*) secure
    standbyReadtimeout: (NSNumber*) standbyReadtimeout
    standbyAutoclean: (NSNumber*) standbyAutoclean
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingInstallerConfigurationPersist != nil) {
        queryParams[@"org.apache.sling.installer.configuration.persist"] = [orgApacheSlingInstallerConfigurationPersist isEqual:@(YES)] ? @"true" : @"false";
    }
    if (mode != nil) {
        queryParams[@"mode"] = mode;
    }
    if (port != nil) {
        queryParams[@"port"] = port;
    }
    if (primaryHost != nil) {
        queryParams[@"primary.host"] = primaryHost;
    }
    if (interval != nil) {
        queryParams[@"interval"] = interval;
    }
    if (primaryAllowedClientIpRanges != nil) {
        queryParams[@"primary.allowed-client-ip-ranges"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: primaryAllowedClientIpRanges format: @"multi"];
    }
    if (secure != nil) {
        queryParams[@"secure"] = [secure isEqual:@(YES)] ? @"true" : @"false";
    }
    if (standbyReadtimeout != nil) {
        queryParams[@"standby.readtimeout"] = standbyReadtimeout;
    }
    if (standbyAutoclean != nil) {
        queryParams[@"standby.autoclean"] = [standbyAutoclean isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param handlerName  (optional)
///
///  @param userExpirationTime  (optional)
///
///  @param userAutoMembership  (optional)
///
///  @param userPropertyMapping  (optional)
///
///  @param userPathPrefix  (optional)
///
///  @param userMembershipExpTime  (optional)
///
///  @param userMembershipNestingDepth  (optional)
///
///  @param userDynamicMembership  (optional)
///
///  @param userDisableMissing  (optional)
///
///  @param groupExpirationTime  (optional)
///
///  @param groupAutoMembership  (optional)
///
///  @param groupPropertyMapping  (optional)
///
///  @param groupPathPrefix  (optional)
///
///  @param enableRFC7613UsercaseMappedProfile  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    handlerName: (NSString*) handlerName
    userExpirationTime: (NSString*) userExpirationTime
    userAutoMembership: (NSArray<NSString*>*) userAutoMembership
    userPropertyMapping: (NSArray<NSString*>*) userPropertyMapping
    userPathPrefix: (NSString*) userPathPrefix
    userMembershipExpTime: (NSString*) userMembershipExpTime
    userMembershipNestingDepth: (NSNumber*) userMembershipNestingDepth
    userDynamicMembership: (NSNumber*) userDynamicMembership
    userDisableMissing: (NSNumber*) userDisableMissing
    groupExpirationTime: (NSString*) groupExpirationTime
    groupAutoMembership: (NSArray<NSString*>*) groupAutoMembership
    groupPropertyMapping: (NSArray<NSString*>*) groupPropertyMapping
    groupPathPrefix: (NSString*) groupPathPrefix
    enableRFC7613UsercaseMappedProfile: (NSNumber*) enableRFC7613UsercaseMappedProfile
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (handlerName != nil) {
        queryParams[@"handler.name"] = handlerName;
    }
    if (userExpirationTime != nil) {
        queryParams[@"user.expirationTime"] = userExpirationTime;
    }
    if (userAutoMembership != nil) {
        queryParams[@"user.autoMembership"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userAutoMembership format: @"multi"];
    }
    if (userPropertyMapping != nil) {
        queryParams[@"user.propertyMapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userPropertyMapping format: @"multi"];
    }
    if (userPathPrefix != nil) {
        queryParams[@"user.pathPrefix"] = userPathPrefix;
    }
    if (userMembershipExpTime != nil) {
        queryParams[@"user.membershipExpTime"] = userMembershipExpTime;
    }
    if (userMembershipNestingDepth != nil) {
        queryParams[@"user.membershipNestingDepth"] = userMembershipNestingDepth;
    }
    if (userDynamicMembership != nil) {
        queryParams[@"user.dynamicMembership"] = [userDynamicMembership isEqual:@(YES)] ? @"true" : @"false";
    }
    if (userDisableMissing != nil) {
        queryParams[@"user.disableMissing"] = [userDisableMissing isEqual:@(YES)] ? @"true" : @"false";
    }
    if (groupExpirationTime != nil) {
        queryParams[@"group.expirationTime"] = groupExpirationTime;
    }
    if (groupAutoMembership != nil) {
        queryParams[@"group.autoMembership"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: groupAutoMembership format: @"multi"];
    }
    if (groupPropertyMapping != nil) {
        queryParams[@"group.propertyMapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: groupPropertyMapping format: @"multi"];
    }
    if (groupPathPrefix != nil) {
        queryParams[@"group.pathPrefix"] = groupPathPrefix;
    }
    if (enableRFC7613UsercaseMappedProfile != nil) {
        queryParams[@"enableRFC7613UsercaseMappedProfile"] = [enableRFC7613UsercaseMappedProfile isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jaasRanking  (optional)
///
///  @param jaasControlFlag  (optional)
///
///  @param jaasRealmName  (optional)
///
///  @param idpName  (optional)
///
///  @param syncHandlerName  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jaasRanking: (NSNumber*) jaasRanking
    jaasControlFlag: (NSString*) jaasControlFlag
    jaasRealmName: (NSString*) jaasRealmName
    idpName: (NSString*) idpName
    syncHandlerName: (NSString*) syncHandlerName
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jaasRanking != nil) {
        queryParams[@"jaas.ranking"] = jaasRanking;
    }
    if (jaasControlFlag != nil) {
        queryParams[@"jaas.controlFlag"] = jaasControlFlag;
    }
    if (jaasRealmName != nil) {
        queryParams[@"jaas.realmName"] = jaasRealmName;
    }
    if (idpName != nil) {
        queryParams[@"idp.name"] = idpName;
    }
    if (syncHandlerName != nil) {
        queryParams[@"sync.handlerName"] = syncHandlerName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param protectExternalId  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    protectExternalId: (NSNumber*) protectExternalId
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (protectExternalId != nil) {
        queryParams[@"protectExternalId"] = [protectExternalId isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param cugSupportedPaths  (optional)
///
///  @param cugEnabled  (optional)
///
///  @param configurationRanking  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    cugSupportedPaths: (NSArray<NSString*>*) cugSupportedPaths
    cugEnabled: (NSNumber*) cugEnabled
    configurationRanking: (NSNumber*) configurationRanking
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (cugSupportedPaths != nil) {
        queryParams[@"cugSupportedPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: cugSupportedPaths format: @"multi"];
    }
    if (cugEnabled != nil) {
        queryParams[@"cugEnabled"] = [cugEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (configurationRanking != nil) {
        queryParams[@"configurationRanking"] = configurationRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param principalNames  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    principalNames: (NSArray<NSString*>*) principalNames
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (principalNames != nil) {
        queryParams[@"principalNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: principalNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabledActions  (optional)
///
///  @param userPrivilegeNames  (optional)
///
///  @param groupPrivilegeNames  (optional)
///
///  @param constraint  (optional)
///
///  @returns OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabledActions: (NSString*) enabledActions
    userPrivilegeNames: (NSArray<NSString*>*) userPrivilegeNames
    groupPrivilegeNames: (NSArray<NSString*>*) groupPrivilegeNames
    constraint: (NSString*) constraint
    completionHandler: (void (^)(OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabledActions != nil) {
        queryParams[@"enabledActions"] = enabledActions;
    }
    if (userPrivilegeNames != nil) {
        queryParams[@"userPrivilegeNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userPrivilegeNames format: @"multi"];
    }
    if (groupPrivilegeNames != nil) {
        queryParams[@"groupPrivilegeNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: groupPrivilegeNames format: @"multi"];
    }
    if (constraint != nil) {
        queryParams[@"constraint"] = constraint;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param packageRoots  (optional)
///
///  @returns OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitVaultPackagingImplPackagingImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    packageRoots: (NSArray<NSString*>*) packageRoots
    completionHandler: (void (^)(OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (packageRoots != nil) {
        queryParams[@"packageRoots"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageRoots format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitVaultPackagingImplPackagingImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param homePath  (optional)
///
///  @returns OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo*
///
-(NSURLSessionTask*) orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    homePath: (NSString*) homePath
    completionHandler: (void (^)(OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (homePath != nil) {
        queryParams[@"homePath"] = homePath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletMethods  (optional)
///
///  @param slingServletPaths  (optional)
///
///  @returns OAIOrgApacheSlingAuthCoreImplLogoutServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingAuthCoreImplLogoutServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletMethods: (NSArray<NSString*>*) slingServletMethods
    slingServletPaths: (NSString*) slingServletPaths
    completionHandler: (void (^)(OAIOrgApacheSlingAuthCoreImplLogoutServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletMethods != nil) {
        queryParams[@"sling.servlet.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletMethods format: @"multi"];
    }
    if (slingServletPaths != nil) {
        queryParams[@"sling.servlet.paths"] = slingServletPaths;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingAuthCoreImplLogoutServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingAuthCoreImplLogoutServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplConfigurationBindingsValueProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param configBucketNames  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplConfigurationResolverImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    configBucketNames: (NSArray<NSString*>*) configBucketNames
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (configBucketNames != nil) {
        queryParams[@"configBucketNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configBucketNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplConfigurationResolverImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param configPropertyInheritancePropertyNames  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    configPropertyInheritancePropertyNames: (NSArray<NSString*>*) configPropertyInheritancePropertyNames
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (configPropertyInheritancePropertyNames != nil) {
        queryParams[@"configPropertyInheritancePropertyNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configPropertyInheritancePropertyNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param _description  (optional)
///
///  @param overrides  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    _description: (NSString*) _description
    overrides: (NSArray<NSString*>*) overrides
    enabled: (NSNumber*) enabled
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (_description != nil) {
        queryParams[@"description"] = _description;
    }
    if (overrides != nil) {
        queryParams[@"overrides"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: overrides format: @"multi"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param ignorePropertyNameRegex  (optional)
///
///  @param configCollectionPropertiesResourceNames  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigManagementImplConfigurationManagementSettiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    ignorePropertyNameRegex: (NSArray<NSString*>*) ignorePropertyNameRegex
    configCollectionPropertiesResourceNames: (NSArray<NSString*>*) configCollectionPropertiesResourceNames
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (ignorePropertyNameRegex != nil) {
        queryParams[@"ignorePropertyNameRegex"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignorePropertyNameRegex format: @"multi"];
    }
    if (configCollectionPropertiesResourceNames != nil) {
        queryParams[@"configCollectionPropertiesResourceNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configCollectionPropertiesResourceNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param configPath  (optional)
///
///  @param fallbackPaths  (optional)
///
///  @param configCollectionInheritancePropertyNames  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    configPath: (NSString*) configPath
    fallbackPaths: (NSArray<NSString*>*) fallbackPaths
    configCollectionInheritancePropertyNames: (NSArray<NSString*>*) configCollectionInheritancePropertyNames
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (configPath != nil) {
        queryParams[@"configPath"] = configPath;
    }
    if (fallbackPaths != nil) {
        queryParams[@"fallbackPaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: fallbackPaths format: @"multi"];
    }
    if (configCollectionInheritancePropertyNames != nil) {
        queryParams[@"configCollectionInheritancePropertyNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configCollectionInheritancePropertyNames format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param enabled  (optional)
///
///  @param configRefResourceNames  (optional)
///
///  @param configRefPropertyNames  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo*
///
-(NSURLSessionTask*) orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    enabled: (NSNumber*) enabled
    configRefResourceNames: (NSArray<NSString*>*) configRefResourceNames
    configRefPropertyNames: (NSArray<NSString*>*) configRefPropertyNames
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (configRefResourceNames != nil) {
        queryParams[@"configRefResourceNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configRefResourceNames format: @"multi"];
    }
    if (configRefPropertyNames != nil) {
        queryParams[@"configRefPropertyNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: configRefPropertyNames format: @"multi"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param parserFeatures  (optional)
///
///  @returns OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsHtmlInternalTagsoupHtmlParserWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    parserFeatures: (NSArray<NSString*>*) parserFeatures
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (parserFeatures != nil) {
        queryParams[@"parser.features"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: parserFeatures format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingCommonsLogLevel  (optional)
///
///  @param orgApacheSlingCommonsLogFile  (optional)
///
///  @param orgApacheSlingCommonsLogFileNumber  (optional)
///
///  @param orgApacheSlingCommonsLogFileSize  (optional)
///
///  @param orgApacheSlingCommonsLogPattern  (optional)
///
///  @param orgApacheSlingCommonsLogConfigurationFile  (optional)
///
///  @param orgApacheSlingCommonsLogPackagingDataEnabled  (optional)
///
///  @param orgApacheSlingCommonsLogMaxCallerDataDepth  (optional)
///
///  @param orgApacheSlingCommonsLogMaxOldFileCountInDump  (optional)
///
///  @param orgApacheSlingCommonsLogNumOfLines  (optional)
///
///  @returns OAIOrgApacheSlingCommonsLogLogManagerInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsLogLogManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingCommonsLogLevel: (NSString*) orgApacheSlingCommonsLogLevel
    orgApacheSlingCommonsLogFile: (NSString*) orgApacheSlingCommonsLogFile
    orgApacheSlingCommonsLogFileNumber: (NSNumber*) orgApacheSlingCommonsLogFileNumber
    orgApacheSlingCommonsLogFileSize: (NSString*) orgApacheSlingCommonsLogFileSize
    orgApacheSlingCommonsLogPattern: (NSString*) orgApacheSlingCommonsLogPattern
    orgApacheSlingCommonsLogConfigurationFile: (NSString*) orgApacheSlingCommonsLogConfigurationFile
    orgApacheSlingCommonsLogPackagingDataEnabled: (NSNumber*) orgApacheSlingCommonsLogPackagingDataEnabled
    orgApacheSlingCommonsLogMaxCallerDataDepth: (NSNumber*) orgApacheSlingCommonsLogMaxCallerDataDepth
    orgApacheSlingCommonsLogMaxOldFileCountInDump: (NSNumber*) orgApacheSlingCommonsLogMaxOldFileCountInDump
    orgApacheSlingCommonsLogNumOfLines: (NSNumber*) orgApacheSlingCommonsLogNumOfLines
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsLogLogManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.log.LogManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingCommonsLogLevel != nil) {
        queryParams[@"org.apache.sling.commons.log.level"] = orgApacheSlingCommonsLogLevel;
    }
    if (orgApacheSlingCommonsLogFile != nil) {
        queryParams[@"org.apache.sling.commons.log.file"] = orgApacheSlingCommonsLogFile;
    }
    if (orgApacheSlingCommonsLogFileNumber != nil) {
        queryParams[@"org.apache.sling.commons.log.file.number"] = orgApacheSlingCommonsLogFileNumber;
    }
    if (orgApacheSlingCommonsLogFileSize != nil) {
        queryParams[@"org.apache.sling.commons.log.file.size"] = orgApacheSlingCommonsLogFileSize;
    }
    if (orgApacheSlingCommonsLogPattern != nil) {
        queryParams[@"org.apache.sling.commons.log.pattern"] = orgApacheSlingCommonsLogPattern;
    }
    if (orgApacheSlingCommonsLogConfigurationFile != nil) {
        queryParams[@"org.apache.sling.commons.log.configurationFile"] = orgApacheSlingCommonsLogConfigurationFile;
    }
    if (orgApacheSlingCommonsLogPackagingDataEnabled != nil) {
        queryParams[@"org.apache.sling.commons.log.packagingDataEnabled"] = [orgApacheSlingCommonsLogPackagingDataEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (orgApacheSlingCommonsLogMaxCallerDataDepth != nil) {
        queryParams[@"org.apache.sling.commons.log.maxCallerDataDepth"] = orgApacheSlingCommonsLogMaxCallerDataDepth;
    }
    if (orgApacheSlingCommonsLogMaxOldFileCountInDump != nil) {
        queryParams[@"org.apache.sling.commons.log.maxOldFileCountInDump"] = orgApacheSlingCommonsLogMaxOldFileCountInDump;
    }
    if (orgApacheSlingCommonsLogNumOfLines != nil) {
        queryParams[@"org.apache.sling.commons.log.numOfLines"] = orgApacheSlingCommonsLogNumOfLines;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsLogLogManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsLogLogManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingCommonsLogLevel  (optional)
///
///  @param orgApacheSlingCommonsLogFile  (optional)
///
///  @param orgApacheSlingCommonsLogPattern  (optional)
///
///  @param orgApacheSlingCommonsLogNames  (optional)
///
///  @param orgApacheSlingCommonsLogAdditiv  (optional)
///
///  @returns OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsLogLogManagerFactoryConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingCommonsLogLevel: (NSString*) orgApacheSlingCommonsLogLevel
    orgApacheSlingCommonsLogFile: (NSString*) orgApacheSlingCommonsLogFile
    orgApacheSlingCommonsLogPattern: (NSString*) orgApacheSlingCommonsLogPattern
    orgApacheSlingCommonsLogNames: (NSArray<NSString*>*) orgApacheSlingCommonsLogNames
    orgApacheSlingCommonsLogAdditiv: (NSNumber*) orgApacheSlingCommonsLogAdditiv
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingCommonsLogLevel != nil) {
        queryParams[@"org.apache.sling.commons.log.level"] = orgApacheSlingCommonsLogLevel;
    }
    if (orgApacheSlingCommonsLogFile != nil) {
        queryParams[@"org.apache.sling.commons.log.file"] = orgApacheSlingCommonsLogFile;
    }
    if (orgApacheSlingCommonsLogPattern != nil) {
        queryParams[@"org.apache.sling.commons.log.pattern"] = orgApacheSlingCommonsLogPattern;
    }
    if (orgApacheSlingCommonsLogNames != nil) {
        queryParams[@"org.apache.sling.commons.log.names"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheSlingCommonsLogNames format: @"multi"];
    }
    if (orgApacheSlingCommonsLogAdditiv != nil) {
        queryParams[@"org.apache.sling.commons.log.additiv"] = [orgApacheSlingCommonsLogAdditiv isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsLogLogManagerFactoryConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingCommonsLogFile  (optional)
///
///  @param orgApacheSlingCommonsLogFileNumber  (optional)
///
///  @param orgApacheSlingCommonsLogFileSize  (optional)
///
///  @param orgApacheSlingCommonsLogFileBuffered  (optional)
///
///  @returns OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsLogLogManagerFactoryWriterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingCommonsLogFile: (NSString*) orgApacheSlingCommonsLogFile
    orgApacheSlingCommonsLogFileNumber: (NSNumber*) orgApacheSlingCommonsLogFileNumber
    orgApacheSlingCommonsLogFileSize: (NSString*) orgApacheSlingCommonsLogFileSize
    orgApacheSlingCommonsLogFileBuffered: (NSNumber*) orgApacheSlingCommonsLogFileBuffered
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingCommonsLogFile != nil) {
        queryParams[@"org.apache.sling.commons.log.file"] = orgApacheSlingCommonsLogFile;
    }
    if (orgApacheSlingCommonsLogFileNumber != nil) {
        queryParams[@"org.apache.sling.commons.log.file.number"] = orgApacheSlingCommonsLogFileNumber;
    }
    if (orgApacheSlingCommonsLogFileSize != nil) {
        queryParams[@"org.apache.sling.commons.log.file.size"] = orgApacheSlingCommonsLogFileSize;
    }
    if (orgApacheSlingCommonsLogFileBuffered != nil) {
        queryParams[@"org.apache.sling.commons.log.file.buffered"] = [orgApacheSlingCommonsLogFileBuffered isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param period  (optional)
///
///  @param timeUnit  (optional)
///
///  @param level  (optional)
///
///  @param loggerName  (optional)
///
///  @param prefix  (optional)
///
///  @param pattern  (optional)
///
///  @param registryName  (optional)
///
///  @returns OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsMetricsInternalLogReporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    period: (NSNumber*) period
    timeUnit: (NSString*) timeUnit
    level: (NSString*) level
    loggerName: (NSString*) loggerName
    prefix: (NSString*) prefix
    pattern: (NSString*) pattern
    registryName: (NSString*) registryName
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (period != nil) {
        queryParams[@"period"] = period;
    }
    if (timeUnit != nil) {
        queryParams[@"timeUnit"] = timeUnit;
    }
    if (level != nil) {
        queryParams[@"level"] = level;
    }
    if (loggerName != nil) {
        queryParams[@"loggerName"] = loggerName;
    }
    if (prefix != nil) {
        queryParams[@"prefix"] = prefix;
    }
    if (pattern != nil) {
        queryParams[@"pattern"] = pattern;
    }
    if (registryName != nil) {
        queryParams[@"registryName"] = registryName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsMetricsInternalLogReporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param datasources  (optional)
///
///  @param step  (optional)
///
///  @param archives  (optional)
///
///  @param path  (optional)
///
///  @returns OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    datasources: (NSArray<NSString*>*) datasources
    step: (NSNumber*) step
    archives: (NSArray<NSString*>*) archives
    path: (NSString*) path
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (datasources != nil) {
        queryParams[@"datasources"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: datasources format: @"multi"];
    }
    if (step != nil) {
        queryParams[@"step"] = step;
    }
    if (archives != nil) {
        queryParams[@"archives"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: archives format: @"multi"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mimeTypes  (optional)
///
///  @returns OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsMimeInternalMimeTypeServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mimeTypes: (NSArray<NSString*>*) mimeTypes
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mimeTypes != nil) {
        queryParams[@"mime.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: mimeTypes format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param poolName  (optional)
///
///  @param allowedPoolNames  (optional)
///
///  @param schedulerUseleaderforsingle  (optional)
///
///  @param metricsFilters  (optional)
///
///  @param slowThresholdMillis  (optional)
///
///  @returns OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsSchedulerImplQuartzSchedulerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    poolName: (NSString*) poolName
    allowedPoolNames: (NSArray<NSString*>*) allowedPoolNames
    schedulerUseleaderforsingle: (NSNumber*) schedulerUseleaderforsingle
    metricsFilters: (NSArray<NSString*>*) metricsFilters
    slowThresholdMillis: (NSNumber*) slowThresholdMillis
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (poolName != nil) {
        queryParams[@"poolName"] = poolName;
    }
    if (allowedPoolNames != nil) {
        queryParams[@"allowedPoolNames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedPoolNames format: @"multi"];
    }
    if (schedulerUseleaderforsingle != nil) {
        queryParams[@"scheduler.useleaderforsingle"] = [schedulerUseleaderforsingle isEqual:@(YES)] ? @"true" : @"false";
    }
    if (metricsFilters != nil) {
        queryParams[@"metrics.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: metricsFilters format: @"multi"];
    }
    if (slowThresholdMillis != nil) {
        queryParams[@"slowThresholdMillis"] = slowThresholdMillis;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxQuartzJobDurationAcceptable  (optional)
///
///  @returns OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsSchedulerImplSchedulerHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxQuartzJobDurationAcceptable: (NSNumber*) maxQuartzJobDurationAcceptable
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxQuartzJobDurationAcceptable != nil) {
        queryParams[@"max.quartzJob.duration.acceptable"] = maxQuartzJobDurationAcceptable;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param minPoolSize  (optional)
///
///  @param maxPoolSize  (optional)
///
///  @param queueSize  (optional)
///
///  @param maxThreadAge  (optional)
///
///  @param keepAliveTime  (optional)
///
///  @param blockPolicy  (optional)
///
///  @param shutdownGraceful  (optional)
///
///  @param daemon  (optional)
///
///  @param shutdownWaitTime  (optional)
///
///  @param priority  (optional)
///
///  @returns OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    minPoolSize: (NSNumber*) minPoolSize
    maxPoolSize: (NSNumber*) maxPoolSize
    queueSize: (NSNumber*) queueSize
    maxThreadAge: (NSNumber*) maxThreadAge
    keepAliveTime: (NSNumber*) keepAliveTime
    blockPolicy: (NSString*) blockPolicy
    shutdownGraceful: (NSNumber*) shutdownGraceful
    daemon: (NSNumber*) daemon
    shutdownWaitTime: (NSNumber*) shutdownWaitTime
    priority: (NSString*) priority
    completionHandler: (void (^)(OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (minPoolSize != nil) {
        queryParams[@"minPoolSize"] = minPoolSize;
    }
    if (maxPoolSize != nil) {
        queryParams[@"maxPoolSize"] = maxPoolSize;
    }
    if (queueSize != nil) {
        queryParams[@"queueSize"] = queueSize;
    }
    if (maxThreadAge != nil) {
        queryParams[@"maxThreadAge"] = maxThreadAge;
    }
    if (keepAliveTime != nil) {
        queryParams[@"keepAliveTime"] = keepAliveTime;
    }
    if (blockPolicy != nil) {
        queryParams[@"blockPolicy"] = blockPolicy;
    }
    if (shutdownGraceful != nil) {
        queryParams[@"shutdownGraceful"] = [shutdownGraceful isEqual:@(YES)] ? @"true" : @"false";
    }
    if (daemon != nil) {
        queryParams[@"daemon"] = [daemon isEqual:@(YES)] ? @"true" : @"false";
    }
    if (shutdownWaitTime != nil) {
        queryParams[@"shutdownWaitTime"] = shutdownWaitTime;
    }
    if (priority != nil) {
        queryParams[@"priority"] = priority;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param datasourceName  (optional)
///
///  @param datasourceSvcPropName  (optional)
///
///  @param driverClassName  (optional)
///
///  @param url  (optional)
///
///  @param username  (optional)
///
///  @param password  (optional)
///
///  @param defaultAutoCommit  (optional)
///
///  @param defaultReadOnly  (optional)
///
///  @param defaultTransactionIsolation  (optional)
///
///  @param defaultCatalog  (optional)
///
///  @param maxActive  (optional)
///
///  @param maxIdle  (optional)
///
///  @param minIdle  (optional)
///
///  @param initialSize  (optional)
///
///  @param maxWait  (optional)
///
///  @param maxAge  (optional)
///
///  @param testOnBorrow  (optional)
///
///  @param testOnReturn  (optional)
///
///  @param testWhileIdle  (optional)
///
///  @param validationQuery  (optional)
///
///  @param validationQueryTimeout  (optional)
///
///  @param timeBetweenEvictionRunsMillis  (optional)
///
///  @param minEvictableIdleTimeMillis  (optional)
///
///  @param connectionProperties  (optional)
///
///  @param initSQL  (optional)
///
///  @param jdbcInterceptors  (optional)
///
///  @param validationInterval  (optional)
///
///  @param logValidationErrors  (optional)
///
///  @param datasourceSvcProperties  (optional)
///
///  @returns OAIOrgApacheSlingDatasourceDataSourceFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingDatasourceDataSourceFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    datasourceName: (NSString*) datasourceName
    datasourceSvcPropName: (NSString*) datasourceSvcPropName
    driverClassName: (NSString*) driverClassName
    url: (NSString*) url
    username: (NSString*) username
    password: (NSString*) password
    defaultAutoCommit: (NSString*) defaultAutoCommit
    defaultReadOnly: (NSString*) defaultReadOnly
    defaultTransactionIsolation: (NSString*) defaultTransactionIsolation
    defaultCatalog: (NSString*) defaultCatalog
    maxActive: (NSNumber*) maxActive
    maxIdle: (NSNumber*) maxIdle
    minIdle: (NSNumber*) minIdle
    initialSize: (NSNumber*) initialSize
    maxWait: (NSNumber*) maxWait
    maxAge: (NSNumber*) maxAge
    testOnBorrow: (NSNumber*) testOnBorrow
    testOnReturn: (NSNumber*) testOnReturn
    testWhileIdle: (NSNumber*) testWhileIdle
    validationQuery: (NSString*) validationQuery
    validationQueryTimeout: (NSNumber*) validationQueryTimeout
    timeBetweenEvictionRunsMillis: (NSNumber*) timeBetweenEvictionRunsMillis
    minEvictableIdleTimeMillis: (NSNumber*) minEvictableIdleTimeMillis
    connectionProperties: (NSString*) connectionProperties
    initSQL: (NSString*) initSQL
    jdbcInterceptors: (NSString*) jdbcInterceptors
    validationInterval: (NSNumber*) validationInterval
    logValidationErrors: (NSNumber*) logValidationErrors
    datasourceSvcProperties: (NSArray<NSString*>*) datasourceSvcProperties
    completionHandler: (void (^)(OAIOrgApacheSlingDatasourceDataSourceFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (datasourceName != nil) {
        queryParams[@"datasource.name"] = datasourceName;
    }
    if (datasourceSvcPropName != nil) {
        queryParams[@"datasource.svc.prop.name"] = datasourceSvcPropName;
    }
    if (driverClassName != nil) {
        queryParams[@"driverClassName"] = driverClassName;
    }
    if (url != nil) {
        queryParams[@"url"] = url;
    }
    if (username != nil) {
        queryParams[@"username"] = username;
    }
    if (password != nil) {
        queryParams[@"password"] = password;
    }
    if (defaultAutoCommit != nil) {
        queryParams[@"defaultAutoCommit"] = defaultAutoCommit;
    }
    if (defaultReadOnly != nil) {
        queryParams[@"defaultReadOnly"] = defaultReadOnly;
    }
    if (defaultTransactionIsolation != nil) {
        queryParams[@"defaultTransactionIsolation"] = defaultTransactionIsolation;
    }
    if (defaultCatalog != nil) {
        queryParams[@"defaultCatalog"] = defaultCatalog;
    }
    if (maxActive != nil) {
        queryParams[@"maxActive"] = maxActive;
    }
    if (maxIdle != nil) {
        queryParams[@"maxIdle"] = maxIdle;
    }
    if (minIdle != nil) {
        queryParams[@"minIdle"] = minIdle;
    }
    if (initialSize != nil) {
        queryParams[@"initialSize"] = initialSize;
    }
    if (maxWait != nil) {
        queryParams[@"maxWait"] = maxWait;
    }
    if (maxAge != nil) {
        queryParams[@"maxAge"] = maxAge;
    }
    if (testOnBorrow != nil) {
        queryParams[@"testOnBorrow"] = [testOnBorrow isEqual:@(YES)] ? @"true" : @"false";
    }
    if (testOnReturn != nil) {
        queryParams[@"testOnReturn"] = [testOnReturn isEqual:@(YES)] ? @"true" : @"false";
    }
    if (testWhileIdle != nil) {
        queryParams[@"testWhileIdle"] = [testWhileIdle isEqual:@(YES)] ? @"true" : @"false";
    }
    if (validationQuery != nil) {
        queryParams[@"validationQuery"] = validationQuery;
    }
    if (validationQueryTimeout != nil) {
        queryParams[@"validationQueryTimeout"] = validationQueryTimeout;
    }
    if (timeBetweenEvictionRunsMillis != nil) {
        queryParams[@"timeBetweenEvictionRunsMillis"] = timeBetweenEvictionRunsMillis;
    }
    if (minEvictableIdleTimeMillis != nil) {
        queryParams[@"minEvictableIdleTimeMillis"] = minEvictableIdleTimeMillis;
    }
    if (connectionProperties != nil) {
        queryParams[@"connectionProperties"] = connectionProperties;
    }
    if (initSQL != nil) {
        queryParams[@"initSQL"] = initSQL;
    }
    if (jdbcInterceptors != nil) {
        queryParams[@"jdbcInterceptors"] = jdbcInterceptors;
    }
    if (validationInterval != nil) {
        queryParams[@"validationInterval"] = validationInterval;
    }
    if (logValidationErrors != nil) {
        queryParams[@"logValidationErrors"] = [logValidationErrors isEqual:@(YES)] ? @"true" : @"false";
    }
    if (datasourceSvcProperties != nil) {
        queryParams[@"datasource.svc.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: datasourceSvcProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDatasourceDataSourceFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDatasourceDataSourceFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param datasourceName  (optional)
///
///  @param datasourceSvcPropName  (optional)
///
///  @param datasourceJndiName  (optional)
///
///  @param jndiProperties  (optional)
///
///  @returns OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingDatasourceJNDIDataSourceFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    datasourceName: (NSString*) datasourceName
    datasourceSvcPropName: (NSString*) datasourceSvcPropName
    datasourceJndiName: (NSString*) datasourceJndiName
    jndiProperties: (NSArray<NSString*>*) jndiProperties
    completionHandler: (void (^)(OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (datasourceName != nil) {
        queryParams[@"datasource.name"] = datasourceName;
    }
    if (datasourceSvcPropName != nil) {
        queryParams[@"datasource.svc.prop.name"] = datasourceSvcPropName;
    }
    if (datasourceJndiName != nil) {
        queryParams[@"datasource.jndi.name"] = datasourceJndiName;
    }
    if (jndiProperties != nil) {
        queryParams[@"jndi.properties"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: jndiProperties format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDatasourceJNDIDataSourceFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param connectorPingTimeout  (optional)
///
///  @param connectorPingInterval  (optional)
///
///  @param discoveryLiteCheckInterval  (optional)
///
///  @param clusterSyncServiceTimeout  (optional)
///
///  @param clusterSyncServiceInterval  (optional)
///
///  @param enableSyncToken  (optional)
///
///  @param minEventDelay  (optional)
///
///  @param socketConnectTimeout  (optional)
///
///  @param soTimeout  (optional)
///
///  @param topologyConnectorUrls  (optional)
///
///  @param topologyConnectorWhitelist  (optional)
///
///  @param autoStopLocalLoopEnabled  (optional)
///
///  @param gzipConnectorRequestsEnabled  (optional)
///
///  @param hmacEnabled  (optional)
///
///  @param enableEncryption  (optional)
///
///  @param sharedKey  (optional)
///
///  @param hmacSharedKeyTTL  (optional)
///
///  @param backoffStandbyFactor  (optional)
///
///  @param backoffStableFactor  (optional)
///
///  @returns OAIOrgApacheSlingDiscoveryOakConfigInfo*
///
-(NSURLSessionTask*) orgApacheSlingDiscoveryOakConfigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    connectorPingTimeout: (NSNumber*) connectorPingTimeout
    connectorPingInterval: (NSNumber*) connectorPingInterval
    discoveryLiteCheckInterval: (NSNumber*) discoveryLiteCheckInterval
    clusterSyncServiceTimeout: (NSNumber*) clusterSyncServiceTimeout
    clusterSyncServiceInterval: (NSNumber*) clusterSyncServiceInterval
    enableSyncToken: (NSNumber*) enableSyncToken
    minEventDelay: (NSNumber*) minEventDelay
    socketConnectTimeout: (NSNumber*) socketConnectTimeout
    soTimeout: (NSNumber*) soTimeout
    topologyConnectorUrls: (NSArray<NSString*>*) topologyConnectorUrls
    topologyConnectorWhitelist: (NSArray<NSString*>*) topologyConnectorWhitelist
    autoStopLocalLoopEnabled: (NSNumber*) autoStopLocalLoopEnabled
    gzipConnectorRequestsEnabled: (NSNumber*) gzipConnectorRequestsEnabled
    hmacEnabled: (NSNumber*) hmacEnabled
    enableEncryption: (NSNumber*) enableEncryption
    sharedKey: (NSString*) sharedKey
    hmacSharedKeyTTL: (NSNumber*) hmacSharedKeyTTL
    backoffStandbyFactor: (NSString*) backoffStandbyFactor
    backoffStableFactor: (NSString*) backoffStableFactor
    completionHandler: (void (^)(OAIOrgApacheSlingDiscoveryOakConfigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.discovery.oak.Config"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (connectorPingTimeout != nil) {
        queryParams[@"connectorPingTimeout"] = connectorPingTimeout;
    }
    if (connectorPingInterval != nil) {
        queryParams[@"connectorPingInterval"] = connectorPingInterval;
    }
    if (discoveryLiteCheckInterval != nil) {
        queryParams[@"discoveryLiteCheckInterval"] = discoveryLiteCheckInterval;
    }
    if (clusterSyncServiceTimeout != nil) {
        queryParams[@"clusterSyncServiceTimeout"] = clusterSyncServiceTimeout;
    }
    if (clusterSyncServiceInterval != nil) {
        queryParams[@"clusterSyncServiceInterval"] = clusterSyncServiceInterval;
    }
    if (enableSyncToken != nil) {
        queryParams[@"enableSyncToken"] = [enableSyncToken isEqual:@(YES)] ? @"true" : @"false";
    }
    if (minEventDelay != nil) {
        queryParams[@"minEventDelay"] = minEventDelay;
    }
    if (socketConnectTimeout != nil) {
        queryParams[@"socketConnectTimeout"] = socketConnectTimeout;
    }
    if (soTimeout != nil) {
        queryParams[@"soTimeout"] = soTimeout;
    }
    if (topologyConnectorUrls != nil) {
        queryParams[@"topologyConnectorUrls"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: topologyConnectorUrls format: @"multi"];
    }
    if (topologyConnectorWhitelist != nil) {
        queryParams[@"topologyConnectorWhitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: topologyConnectorWhitelist format: @"multi"];
    }
    if (autoStopLocalLoopEnabled != nil) {
        queryParams[@"autoStopLocalLoopEnabled"] = [autoStopLocalLoopEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (gzipConnectorRequestsEnabled != nil) {
        queryParams[@"gzipConnectorRequestsEnabled"] = [gzipConnectorRequestsEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (hmacEnabled != nil) {
        queryParams[@"hmacEnabled"] = [hmacEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableEncryption != nil) {
        queryParams[@"enableEncryption"] = [enableEncryption isEqual:@(YES)] ? @"true" : @"false";
    }
    if (sharedKey != nil) {
        queryParams[@"sharedKey"] = sharedKey;
    }
    if (hmacSharedKeyTTL != nil) {
        queryParams[@"hmacSharedKeyTTL"] = hmacSharedKeyTTL;
    }
    if (backoffStandbyFactor != nil) {
        queryParams[@"backoffStandbyFactor"] = backoffStandbyFactor;
    }
    if (backoffStableFactor != nil) {
        queryParams[@"backoffStableFactor"] = backoffStableFactor;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDiscoveryOakConfigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDiscoveryOakConfigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @returns OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    completionHandler: (void (^)(OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param title  (optional)
///
///  @param details  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceName  (optional)
///
///  @param logLevel  (optional)
///
///  @param allowedRoots  (optional)
///
///  @param queueProcessingEnabled  (optional)
///
///  @param packageImporterEndpoints  (optional)
///
///  @param passiveQueues  (optional)
///
///  @param priorityQueues  (optional)
///
///  @param retryStrategy  (optional)
///
///  @param retryAttempts  (optional)
///
///  @param requestAuthorizationStrategyTarget  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @param triggersTarget  (optional)
///
///  @param queueProvider  (optional)
///
///  @param asyncDelivery  (optional)
///
///  @param httpConnTimeout  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplForwardDistributionAgentFactoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    title: (NSString*) title
    details: (NSString*) details
    enabled: (NSNumber*) enabled
    serviceName: (NSString*) serviceName
    logLevel: (NSString*) logLevel
    allowedRoots: (NSArray<NSString*>*) allowedRoots
    queueProcessingEnabled: (NSNumber*) queueProcessingEnabled
    packageImporterEndpoints: (NSArray<NSString*>*) packageImporterEndpoints
    passiveQueues: (NSArray<NSString*>*) passiveQueues
    priorityQueues: (NSArray<NSString*>*) priorityQueues
    retryStrategy: (NSString*) retryStrategy
    retryAttempts: (NSNumber*) retryAttempts
    requestAuthorizationStrategyTarget: (NSString*) requestAuthorizationStrategyTarget
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    packageBuilderTarget: (NSString*) packageBuilderTarget
    triggersTarget: (NSString*) triggersTarget
    queueProvider: (NSString*) queueProvider
    asyncDelivery: (NSNumber*) asyncDelivery
    httpConnTimeout: (NSNumber*) httpConnTimeout
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (title != nil) {
        queryParams[@"title"] = title;
    }
    if (details != nil) {
        queryParams[@"details"] = details;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (logLevel != nil) {
        queryParams[@"log.level"] = logLevel;
    }
    if (allowedRoots != nil) {
        queryParams[@"allowed.roots"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedRoots format: @"multi"];
    }
    if (queueProcessingEnabled != nil) {
        queryParams[@"queue.processing.enabled"] = [queueProcessingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (packageImporterEndpoints != nil) {
        queryParams[@"packageImporter.endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageImporterEndpoints format: @"multi"];
    }
    if (passiveQueues != nil) {
        queryParams[@"passiveQueues"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: passiveQueues format: @"multi"];
    }
    if (priorityQueues != nil) {
        queryParams[@"priorityQueues"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: priorityQueues format: @"multi"];
    }
    if (retryStrategy != nil) {
        queryParams[@"retry.strategy"] = retryStrategy;
    }
    if (retryAttempts != nil) {
        queryParams[@"retry.attempts"] = retryAttempts;
    }
    if (requestAuthorizationStrategyTarget != nil) {
        queryParams[@"requestAuthorizationStrategy.target"] = requestAuthorizationStrategyTarget;
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    if (triggersTarget != nil) {
        queryParams[@"triggers.target"] = triggersTarget;
    }
    if (queueProvider != nil) {
        queryParams[@"queue.provider"] = queueProvider;
    }
    if (asyncDelivery != nil) {
        queryParams[@"async.delivery"] = [asyncDelivery isEqual:@(YES)] ? @"true" : @"false";
    }
    if (httpConnTimeout != nil) {
        queryParams[@"http.conn.timeout"] = httpConnTimeout;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param jcrPrivilege  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    jcrPrivilege: (NSString*) jcrPrivilege
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (jcrPrivilege != nil) {
        queryParams[@"jcrPrivilege"] = jcrPrivilege;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param title  (optional)
///
///  @param details  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceName  (optional)
///
///  @param logLevel  (optional)
///
///  @param allowedRoots  (optional)
///
///  @param requestAuthorizationStrategyTarget  (optional)
///
///  @param queueProviderFactoryTarget  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @param triggersTarget  (optional)
///
///  @param priorityQueues  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    title: (NSString*) title
    details: (NSString*) details
    enabled: (NSNumber*) enabled
    serviceName: (NSString*) serviceName
    logLevel: (NSString*) logLevel
    allowedRoots: (NSArray<NSString*>*) allowedRoots
    requestAuthorizationStrategyTarget: (NSString*) requestAuthorizationStrategyTarget
    queueProviderFactoryTarget: (NSString*) queueProviderFactoryTarget
    packageBuilderTarget: (NSString*) packageBuilderTarget
    triggersTarget: (NSString*) triggersTarget
    priorityQueues: (NSArray<NSString*>*) priorityQueues
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (title != nil) {
        queryParams[@"title"] = title;
    }
    if (details != nil) {
        queryParams[@"details"] = details;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (logLevel != nil) {
        queryParams[@"log.level"] = logLevel;
    }
    if (allowedRoots != nil) {
        queryParams[@"allowed.roots"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowedRoots format: @"multi"];
    }
    if (requestAuthorizationStrategyTarget != nil) {
        queryParams[@"requestAuthorizationStrategy.target"] = requestAuthorizationStrategyTarget;
    }
    if (queueProviderFactoryTarget != nil) {
        queryParams[@"queueProviderFactory.target"] = queueProviderFactoryTarget;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    if (triggersTarget != nil) {
        queryParams[@"triggers.target"] = triggersTarget;
    }
    if (priorityQueues != nil) {
        queryParams[@"priorityQueues"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: priorityQueues format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param title  (optional)
///
///  @param details  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceName  (optional)
///
///  @param logLevel  (optional)
///
///  @param queueProcessingEnabled  (optional)
///
///  @param packageExporterEndpoints  (optional)
///
///  @param pullItems  (optional)
///
///  @param httpConnTimeout  (optional)
///
///  @param requestAuthorizationStrategyTarget  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @param triggersTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplReverseDistributionAgentFactoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    title: (NSString*) title
    details: (NSString*) details
    enabled: (NSNumber*) enabled
    serviceName: (NSString*) serviceName
    logLevel: (NSString*) logLevel
    queueProcessingEnabled: (NSNumber*) queueProcessingEnabled
    packageExporterEndpoints: (NSArray<NSString*>*) packageExporterEndpoints
    pullItems: (NSNumber*) pullItems
    httpConnTimeout: (NSNumber*) httpConnTimeout
    requestAuthorizationStrategyTarget: (NSString*) requestAuthorizationStrategyTarget
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    packageBuilderTarget: (NSString*) packageBuilderTarget
    triggersTarget: (NSString*) triggersTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (title != nil) {
        queryParams[@"title"] = title;
    }
    if (details != nil) {
        queryParams[@"details"] = details;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (logLevel != nil) {
        queryParams[@"log.level"] = logLevel;
    }
    if (queueProcessingEnabled != nil) {
        queryParams[@"queue.processing.enabled"] = [queueProcessingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (packageExporterEndpoints != nil) {
        queryParams[@"packageExporter.endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageExporterEndpoints format: @"multi"];
    }
    if (pullItems != nil) {
        queryParams[@"pull.items"] = pullItems;
    }
    if (httpConnTimeout != nil) {
        queryParams[@"http.conn.timeout"] = httpConnTimeout;
    }
    if (requestAuthorizationStrategyTarget != nil) {
        queryParams[@"requestAuthorizationStrategy.target"] = requestAuthorizationStrategyTarget;
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    if (triggersTarget != nil) {
        queryParams[@"triggers.target"] = triggersTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param title  (optional)
///
///  @param details  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceName  (optional)
///
///  @param logLevel  (optional)
///
///  @param queueProcessingEnabled  (optional)
///
///  @param packageExporterTarget  (optional)
///
///  @param packageImporterTarget  (optional)
///
///  @param requestAuthorizationStrategyTarget  (optional)
///
///  @param triggersTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    title: (NSString*) title
    details: (NSString*) details
    enabled: (NSNumber*) enabled
    serviceName: (NSString*) serviceName
    logLevel: (NSString*) logLevel
    queueProcessingEnabled: (NSNumber*) queueProcessingEnabled
    packageExporterTarget: (NSString*) packageExporterTarget
    packageImporterTarget: (NSString*) packageImporterTarget
    requestAuthorizationStrategyTarget: (NSString*) requestAuthorizationStrategyTarget
    triggersTarget: (NSString*) triggersTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (title != nil) {
        queryParams[@"title"] = title;
    }
    if (details != nil) {
        queryParams[@"details"] = details;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (logLevel != nil) {
        queryParams[@"log.level"] = logLevel;
    }
    if (queueProcessingEnabled != nil) {
        queryParams[@"queue.processing.enabled"] = [queueProcessingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (packageExporterTarget != nil) {
        queryParams[@"packageExporter.target"] = packageExporterTarget;
    }
    if (packageImporterTarget != nil) {
        queryParams[@"packageImporter.target"] = packageImporterTarget;
    }
    if (requestAuthorizationStrategyTarget != nil) {
        queryParams[@"requestAuthorizationStrategy.target"] = requestAuthorizationStrategyTarget;
    }
    if (triggersTarget != nil) {
        queryParams[@"triggers.target"] = triggersTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param title  (optional)
///
///  @param details  (optional)
///
///  @param enabled  (optional)
///
///  @param serviceName  (optional)
///
///  @param logLevel  (optional)
///
///  @param queueProcessingEnabled  (optional)
///
///  @param passiveQueues  (optional)
///
///  @param packageExporterEndpoints  (optional)
///
///  @param packageImporterEndpoints  (optional)
///
///  @param retryStrategy  (optional)
///
///  @param retryAttempts  (optional)
///
///  @param pullItems  (optional)
///
///  @param httpConnTimeout  (optional)
///
///  @param requestAuthorizationStrategyTarget  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @param triggersTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    title: (NSString*) title
    details: (NSString*) details
    enabled: (NSNumber*) enabled
    serviceName: (NSString*) serviceName
    logLevel: (NSString*) logLevel
    queueProcessingEnabled: (NSNumber*) queueProcessingEnabled
    passiveQueues: (NSArray<NSString*>*) passiveQueues
    packageExporterEndpoints: (NSArray<NSString*>*) packageExporterEndpoints
    packageImporterEndpoints: (NSArray<NSString*>*) packageImporterEndpoints
    retryStrategy: (NSString*) retryStrategy
    retryAttempts: (NSNumber*) retryAttempts
    pullItems: (NSNumber*) pullItems
    httpConnTimeout: (NSNumber*) httpConnTimeout
    requestAuthorizationStrategyTarget: (NSString*) requestAuthorizationStrategyTarget
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    packageBuilderTarget: (NSString*) packageBuilderTarget
    triggersTarget: (NSString*) triggersTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (title != nil) {
        queryParams[@"title"] = title;
    }
    if (details != nil) {
        queryParams[@"details"] = details;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (logLevel != nil) {
        queryParams[@"log.level"] = logLevel;
    }
    if (queueProcessingEnabled != nil) {
        queryParams[@"queue.processing.enabled"] = [queueProcessingEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (passiveQueues != nil) {
        queryParams[@"passiveQueues"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: passiveQueues format: @"multi"];
    }
    if (packageExporterEndpoints != nil) {
        queryParams[@"packageExporter.endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageExporterEndpoints format: @"multi"];
    }
    if (packageImporterEndpoints != nil) {
        queryParams[@"packageImporter.endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageImporterEndpoints format: @"multi"];
    }
    if (retryStrategy != nil) {
        queryParams[@"retry.strategy"] = retryStrategy;
    }
    if (retryAttempts != nil) {
        queryParams[@"retry.attempts"] = retryAttempts;
    }
    if (pullItems != nil) {
        queryParams[@"pull.items"] = pullItems;
    }
    if (httpConnTimeout != nil) {
        queryParams[@"http.conn.timeout"] = httpConnTimeout;
    }
    if (requestAuthorizationStrategyTarget != nil) {
        queryParams[@"requestAuthorizationStrategy.target"] = requestAuthorizationStrategyTarget;
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    if (triggersTarget != nil) {
        queryParams[@"triggers.target"] = triggersTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @param numberOfRetriesAllowed  (optional)
///
///  @returns OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionMonitorDistributionQueueHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    numberOfRetriesAllowed: (NSNumber*) numberOfRetriesAllowed
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    if (numberOfRetriesAllowed != nil) {
        queryParams[@"numberOfRetriesAllowed"] = numberOfRetriesAllowed;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param queue  (optional)
///
///  @param dropInvalidItems  (optional)
///
///  @param agentTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplExporterAgentDistributioWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    queue: (NSString*) queue
    dropInvalidItems: (NSNumber*) dropInvalidItems
    agentTarget: (NSString*) agentTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (queue != nil) {
        queryParams[@"queue"] = queue;
    }
    if (dropInvalidItems != nil) {
        queryParams[@"drop.invalid.items"] = [dropInvalidItems isEqual:@(YES)] ? @"true" : @"false";
    }
    if (agentTarget != nil) {
        queryParams[@"agent.target"] = agentTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplExporterLocalDistributioWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    packageBuilderTarget: (NSString*) packageBuilderTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param endpoints  (optional)
///
///  @param pullItems  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplExporterRemoteDistributiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    endpoints: (NSArray<NSString*>*) endpoints
    pullItems: (NSNumber*) pullItems
    packageBuilderTarget: (NSString*) packageBuilderTarget
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (endpoints != nil) {
        queryParams[@"endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: endpoints format: @"multi"];
    }
    if (pullItems != nil) {
        queryParams[@"pull.items"] = pullItems;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param packageBuilderTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplImporterLocalDistributioWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    packageBuilderTarget: (NSString*) packageBuilderTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (packageBuilderTarget != nil) {
        queryParams[@"packageBuilder.target"] = packageBuilderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param endpoints  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplImporterRemoteDistributiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    endpoints: (NSArray<NSString*>*) endpoints
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (endpoints != nil) {
        queryParams[@"endpoints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: endpoints format: @"multi"];
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param serviceName  (optional)
///
///  @param path  (optional)
///
///  @param privilegeName  (optional)
///
///  @returns OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionPackagingImplImporterRepositoryDistriWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    serviceName: (NSString*) serviceName
    path: (NSString*) path
    privilegeName: (NSString*) privilegeName
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (serviceName != nil) {
        queryParams[@"service.name"] = serviceName;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (privilegeName != nil) {
        queryParams[@"privilege.name"] = privilegeName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerRoots  (optional)
///
///  @param kind  (optional)
///
///  @returns OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionResourcesImplDistributionConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerRoots: (NSString*) providerRoots
    kind: (NSString*) kind
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerRoots != nil) {
        queryParams[@"provider.roots"] = providerRoots;
    }
    if (kind != nil) {
        queryParams[@"kind"] = kind;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerRoots  (optional)
///
///  @param kind  (optional)
///
///  @returns OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionResourcesImplDistributionServiceResourWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerRoots: (NSString*) providerRoots
    kind: (NSString*) kind
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerRoots != nil) {
        queryParams[@"provider.roots"] = providerRoots;
    }
    if (kind != nil) {
        queryParams[@"kind"] = kind;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param type  (optional)
///
///  @param formatTarget  (optional)
///
///  @param tempFsFolder  (optional)
///
///  @param fileThreshold  (optional)
///
///  @param memoryUnit  (optional)
///
///  @param useOffHeapMemory  (optional)
///
///  @param digestAlgorithm  (optional)
///
///  @param monitoringQueueSize  (optional)
///
///  @param cleanupDelay  (optional)
///
///  @param packageFilters  (optional)
///
///  @param propertyFilters  (optional)
///
///  @returns OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionSerializationImplDistributionPackageBuWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    type: (NSString*) type
    formatTarget: (NSString*) formatTarget
    tempFsFolder: (NSString*) tempFsFolder
    fileThreshold: (NSNumber*) fileThreshold
    memoryUnit: (NSString*) memoryUnit
    useOffHeapMemory: (NSNumber*) useOffHeapMemory
    digestAlgorithm: (NSString*) digestAlgorithm
    monitoringQueueSize: (NSNumber*) monitoringQueueSize
    cleanupDelay: (NSNumber*) cleanupDelay
    packageFilters: (NSArray<NSString*>*) packageFilters
    propertyFilters: (NSArray<NSString*>*) propertyFilters
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (type != nil) {
        queryParams[@"type"] = type;
    }
    if (formatTarget != nil) {
        queryParams[@"format.target"] = formatTarget;
    }
    if (tempFsFolder != nil) {
        queryParams[@"tempFsFolder"] = tempFsFolder;
    }
    if (fileThreshold != nil) {
        queryParams[@"fileThreshold"] = fileThreshold;
    }
    if (memoryUnit != nil) {
        queryParams[@"memoryUnit"] = memoryUnit;
    }
    if (useOffHeapMemory != nil) {
        queryParams[@"useOffHeapMemory"] = [useOffHeapMemory isEqual:@(YES)] ? @"true" : @"false";
    }
    if (digestAlgorithm != nil) {
        queryParams[@"digestAlgorithm"] = digestAlgorithm;
    }
    if (monitoringQueueSize != nil) {
        queryParams[@"monitoringQueueSize"] = monitoringQueueSize;
    }
    if (cleanupDelay != nil) {
        queryParams[@"cleanupDelay"] = cleanupDelay;
    }
    if (packageFilters != nil) {
        queryParams[@"package.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageFilters format: @"multi"];
    }
    if (propertyFilters != nil) {
        queryParams[@"property.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertyFilters format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param type  (optional)
///
///  @param importMode  (optional)
///
///  @param aclHandling  (optional)
///
///  @param packageRoots  (optional)
///
///  @param packageFilters  (optional)
///
///  @param propertyFilters  (optional)
///
///  @param tempFsFolder  (optional)
///
///  @param useBinaryReferences  (optional)
///
///  @param autoSaveThreshold  (optional)
///
///  @param cleanupDelay  (optional)
///
///  @param fileThreshold  (optional)
///
///  @param mEGABYTES  (optional)
///
///  @param useOffHeapMemory  (optional)
///
///  @param digestAlgorithm  (optional)
///
///  @param monitoringQueueSize  (optional)
///
///  @param pathsMapping  (optional)
///
///  @param strictImport  (optional)
///
///  @returns OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionSerializationImplVltVaultDistributionWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    type: (NSString*) type
    importMode: (NSString*) importMode
    aclHandling: (NSString*) aclHandling
    packageRoots: (NSString*) packageRoots
    packageFilters: (NSArray<NSString*>*) packageFilters
    propertyFilters: (NSArray<NSString*>*) propertyFilters
    tempFsFolder: (NSString*) tempFsFolder
    useBinaryReferences: (NSNumber*) useBinaryReferences
    autoSaveThreshold: (NSNumber*) autoSaveThreshold
    cleanupDelay: (NSNumber*) cleanupDelay
    fileThreshold: (NSNumber*) fileThreshold
    mEGABYTES: (NSString*) mEGABYTES
    useOffHeapMemory: (NSNumber*) useOffHeapMemory
    digestAlgorithm: (NSString*) digestAlgorithm
    monitoringQueueSize: (NSNumber*) monitoringQueueSize
    pathsMapping: (NSArray<NSString*>*) pathsMapping
    strictImport: (NSNumber*) strictImport
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (type != nil) {
        queryParams[@"type"] = type;
    }
    if (importMode != nil) {
        queryParams[@"importMode"] = importMode;
    }
    if (aclHandling != nil) {
        queryParams[@"aclHandling"] = aclHandling;
    }
    if (packageRoots != nil) {
        queryParams[@"package.roots"] = packageRoots;
    }
    if (packageFilters != nil) {
        queryParams[@"package.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: packageFilters format: @"multi"];
    }
    if (propertyFilters != nil) {
        queryParams[@"property.filters"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertyFilters format: @"multi"];
    }
    if (tempFsFolder != nil) {
        queryParams[@"tempFsFolder"] = tempFsFolder;
    }
    if (useBinaryReferences != nil) {
        queryParams[@"useBinaryReferences"] = [useBinaryReferences isEqual:@(YES)] ? @"true" : @"false";
    }
    if (autoSaveThreshold != nil) {
        queryParams[@"autoSaveThreshold"] = autoSaveThreshold;
    }
    if (cleanupDelay != nil) {
        queryParams[@"cleanupDelay"] = cleanupDelay;
    }
    if (fileThreshold != nil) {
        queryParams[@"fileThreshold"] = fileThreshold;
    }
    if (mEGABYTES != nil) {
        queryParams[@"MEGA_BYTES"] = mEGABYTES;
    }
    if (useOffHeapMemory != nil) {
        queryParams[@"useOffHeapMemory"] = [useOffHeapMemory isEqual:@(YES)] ? @"true" : @"false";
    }
    if (digestAlgorithm != nil) {
        queryParams[@"digestAlgorithm"] = digestAlgorithm;
    }
    if (monitoringQueueSize != nil) {
        queryParams[@"monitoringQueueSize"] = monitoringQueueSize;
    }
    if (pathsMapping != nil) {
        queryParams[@"pathsMapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: pathsMapping format: @"multi"];
    }
    if (strictImport != nil) {
        queryParams[@"strictImport"] = [strictImport isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param username  (optional)
///
///  @param password  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTransportImplUserCredentialsDistributiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    username: (NSString*) username
    password: (NSString*) password
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (username != nil) {
        queryParams[@"username"] = username;
    }
    if (password != nil) {
        queryParams[@"password"] = password;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param path  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplDistributionEventDistributeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    path: (NSString*) path
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param path  (optional)
///
///  @param ignoredPathsPatterns  (optional)
///
///  @param serviceName  (optional)
///
///  @param deep  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    path: (NSString*) path
    ignoredPathsPatterns: (NSArray<NSString*>*) ignoredPathsPatterns
    serviceName: (NSString*) serviceName
    deep: (NSNumber*) deep
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (ignoredPathsPatterns != nil) {
        queryParams[@"ignoredPathsPatterns"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: ignoredPathsPatterns format: @"multi"];
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (deep != nil) {
        queryParams[@"deep"] = [deep isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param path  (optional)
///
///  @param serviceName  (optional)
///
///  @param nuggetsPath  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    path: (NSString*) path
    serviceName: (NSString*) serviceName
    nuggetsPath: (NSString*) nuggetsPath
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    if (nuggetsPath != nil) {
        queryParams[@"nuggetsPath"] = nuggetsPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param endpoint  (optional)
///
///  @param transportSecretProviderTarget  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    endpoint: (NSString*) endpoint
    transportSecretProviderTarget: (NSString*) transportSecretProviderTarget
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (endpoint != nil) {
        queryParams[@"endpoint"] = endpoint;
    }
    if (transportSecretProviderTarget != nil) {
        queryParams[@"transportSecretProvider.target"] = transportSecretProviderTarget;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param path  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplResourceEventDistributionTrWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    path: (NSString*) path
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param path  (optional)
///
///  @param seconds  (optional)
///
///  @param serviceName  (optional)
///
///  @returns OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo*
///
-(NSURLSessionTask*) orgApacheSlingDistributionTriggerImplScheduledDistributionTriggeWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    path: (NSString*) path
    seconds: (NSString*) seconds
    serviceName: (NSString*) serviceName
    completionHandler: (void (^)(OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (seconds != nil) {
        queryParams[@"seconds"] = seconds;
    }
    if (serviceName != nil) {
        queryParams[@"serviceName"] = serviceName;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param osgiHttpWhiteboardContextSelect  (optional)
///
///  @param osgiHttpWhiteboardListener  (optional)
///
///  @param authSudoCookie  (optional)
///
///  @param authSudoParameter  (optional)
///
///  @param authAnnonymous  (optional)
///
///  @param slingAuthRequirements  (optional)
///
///  @param slingAuthAnonymousUser  (optional)
///
///  @param slingAuthAnonymousPassword  (optional)
///
///  @param authHttp  (optional)
///
///  @param authHttpRealm  (optional)
///
///  @param authUriSuffix  (optional)
///
///  @returns OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineImplAuthSlingAuthenticatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    osgiHttpWhiteboardContextSelect: (NSString*) osgiHttpWhiteboardContextSelect
    osgiHttpWhiteboardListener: (NSString*) osgiHttpWhiteboardListener
    authSudoCookie: (NSString*) authSudoCookie
    authSudoParameter: (NSString*) authSudoParameter
    authAnnonymous: (NSNumber*) authAnnonymous
    slingAuthRequirements: (NSArray<NSString*>*) slingAuthRequirements
    slingAuthAnonymousUser: (NSString*) slingAuthAnonymousUser
    slingAuthAnonymousPassword: (NSString*) slingAuthAnonymousPassword
    authHttp: (NSString*) authHttp
    authHttpRealm: (NSString*) authHttpRealm
    authUriSuffix: (NSArray<NSString*>*) authUriSuffix
    completionHandler: (void (^)(OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (osgiHttpWhiteboardContextSelect != nil) {
        queryParams[@"osgi.http.whiteboard.context.select"] = osgiHttpWhiteboardContextSelect;
    }
    if (osgiHttpWhiteboardListener != nil) {
        queryParams[@"osgi.http.whiteboard.listener"] = osgiHttpWhiteboardListener;
    }
    if (authSudoCookie != nil) {
        queryParams[@"auth.sudo.cookie"] = authSudoCookie;
    }
    if (authSudoParameter != nil) {
        queryParams[@"auth.sudo.parameter"] = authSudoParameter;
    }
    if (authAnnonymous != nil) {
        queryParams[@"auth.annonymous"] = [authAnnonymous isEqual:@(YES)] ? @"true" : @"false";
    }
    if (slingAuthRequirements != nil) {
        queryParams[@"sling.auth.requirements"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingAuthRequirements format: @"multi"];
    }
    if (slingAuthAnonymousUser != nil) {
        queryParams[@"sling.auth.anonymous.user"] = slingAuthAnonymousUser;
    }
    if (slingAuthAnonymousPassword != nil) {
        queryParams[@"sling.auth.anonymous.password"] = slingAuthAnonymousPassword;
    }
    if (authHttp != nil) {
        queryParams[@"auth.http"] = authHttp;
    }
    if (authHttpRealm != nil) {
        queryParams[@"auth.http.realm"] = authHttpRealm;
    }
    if (authUriSuffix != nil) {
        queryParams[@"auth.uri.suffix"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: authUriSuffix format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineImplAuthSlingAuthenticatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param extensions  (optional)
///
///  @param minDurationMs  (optional)
///
///  @param maxDurationMs  (optional)
///
///  @param compactLogFormat  (optional)
///
///  @returns OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    extensions: (NSArray<NSString*>*) extensions
    minDurationMs: (NSNumber*) minDurationMs
    maxDurationMs: (NSNumber*) maxDurationMs
    compactLogFormat: (NSNumber*) compactLogFormat
    completionHandler: (void (^)(OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (extensions != nil) {
        queryParams[@"extensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: extensions format: @"multi"];
    }
    if (minDurationMs != nil) {
        queryParams[@"minDurationMs"] = minDurationMs;
    }
    if (maxDurationMs != nil) {
        queryParams[@"maxDurationMs"] = maxDurationMs;
    }
    if (compactLogFormat != nil) {
        queryParams[@"compactLogFormat"] = [compactLogFormat isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param requestLogOutput  (optional)
///
///  @param requestLogOutputtype  (optional)
///
///  @param requestLogEnabled  (optional)
///
///  @param accessLogOutput  (optional)
///
///  @param accessLogOutputtype  (optional)
///
///  @param accessLogEnabled  (optional)
///
///  @returns OAIOrgApacheSlingEngineImplLogRequestLoggerInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineImplLogRequestLoggerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    requestLogOutput: (NSString*) requestLogOutput
    requestLogOutputtype: (NSNumber*) requestLogOutputtype
    requestLogEnabled: (NSNumber*) requestLogEnabled
    accessLogOutput: (NSString*) accessLogOutput
    accessLogOutputtype: (NSNumber*) accessLogOutputtype
    accessLogEnabled: (NSNumber*) accessLogEnabled
    completionHandler: (void (^)(OAIOrgApacheSlingEngineImplLogRequestLoggerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (requestLogOutput != nil) {
        queryParams[@"request.log.output"] = requestLogOutput;
    }
    if (requestLogOutputtype != nil) {
        queryParams[@"request.log.outputtype"] = requestLogOutputtype;
    }
    if (requestLogEnabled != nil) {
        queryParams[@"request.log.enabled"] = [requestLogEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (accessLogOutput != nil) {
        queryParams[@"access.log.output"] = accessLogOutput;
    }
    if (accessLogOutputtype != nil) {
        queryParams[@"access.log.outputtype"] = accessLogOutputtype;
    }
    if (accessLogEnabled != nil) {
        queryParams[@"access.log.enabled"] = [accessLogEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineImplLogRequestLoggerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineImplLogRequestLoggerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param requestLogServiceFormat  (optional)
///
///  @param requestLogServiceOutput  (optional)
///
///  @param requestLogServiceOutputtype  (optional)
///
///  @param requestLogServiceOnentry  (optional)
///
///  @returns OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineImplLogRequestLoggerServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    requestLogServiceFormat: (NSString*) requestLogServiceFormat
    requestLogServiceOutput: (NSString*) requestLogServiceOutput
    requestLogServiceOutputtype: (NSNumber*) requestLogServiceOutputtype
    requestLogServiceOnentry: (NSNumber*) requestLogServiceOnentry
    completionHandler: (void (^)(OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (requestLogServiceFormat != nil) {
        queryParams[@"request.log.service.format"] = requestLogServiceFormat;
    }
    if (requestLogServiceOutput != nil) {
        queryParams[@"request.log.service.output"] = requestLogServiceOutput;
    }
    if (requestLogServiceOutputtype != nil) {
        queryParams[@"request.log.service.outputtype"] = requestLogServiceOutputtype;
    }
    if (requestLogServiceOnentry != nil) {
        queryParams[@"request.log.service.onentry"] = [requestLogServiceOnentry isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineImplLogRequestLoggerServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingMaxCalls  (optional)
///
///  @param slingMaxInclusions  (optional)
///
///  @param slingTraceAllow  (optional)
///
///  @param slingMaxRecordRequests  (optional)
///
///  @param slingStorePatternRequests  (optional)
///
///  @param slingServerinfo  (optional)
///
///  @param slingAdditionalResponseHeaders  (optional)
///
///  @returns OAIOrgApacheSlingEngineImplSlingMainServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineImplSlingMainServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingMaxCalls: (NSNumber*) slingMaxCalls
    slingMaxInclusions: (NSNumber*) slingMaxInclusions
    slingTraceAllow: (NSNumber*) slingTraceAllow
    slingMaxRecordRequests: (NSNumber*) slingMaxRecordRequests
    slingStorePatternRequests: (NSArray<NSString*>*) slingStorePatternRequests
    slingServerinfo: (NSString*) slingServerinfo
    slingAdditionalResponseHeaders: (NSArray<NSString*>*) slingAdditionalResponseHeaders
    completionHandler: (void (^)(OAIOrgApacheSlingEngineImplSlingMainServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingMaxCalls != nil) {
        queryParams[@"sling.max.calls"] = slingMaxCalls;
    }
    if (slingMaxInclusions != nil) {
        queryParams[@"sling.max.inclusions"] = slingMaxInclusions;
    }
    if (slingTraceAllow != nil) {
        queryParams[@"sling.trace.allow"] = [slingTraceAllow isEqual:@(YES)] ? @"true" : @"false";
    }
    if (slingMaxRecordRequests != nil) {
        queryParams[@"sling.max.record.requests"] = slingMaxRecordRequests;
    }
    if (slingStorePatternRequests != nil) {
        queryParams[@"sling.store.pattern.requests"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingStorePatternRequests format: @"multi"];
    }
    if (slingServerinfo != nil) {
        queryParams[@"sling.serverinfo"] = slingServerinfo;
    }
    if (slingAdditionalResponseHeaders != nil) {
        queryParams[@"sling.additional.response.headers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingAdditionalResponseHeaders format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineImplSlingMainServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineImplSlingMainServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingDefaultParameterEncoding  (optional)
///
///  @param slingDefaultMaxParameters  (optional)
///
///  @param fileLocation  (optional)
///
///  @param fileThreshold  (optional)
///
///  @param fileMax  (optional)
///
///  @param requestMax  (optional)
///
///  @param slingDefaultParameterCheckForAdditionalContainerParameters  (optional)
///
///  @returns OAIOrgApacheSlingEngineParametersInfo*
///
-(NSURLSessionTask*) orgApacheSlingEngineParametersWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingDefaultParameterEncoding: (NSString*) slingDefaultParameterEncoding
    slingDefaultMaxParameters: (NSNumber*) slingDefaultMaxParameters
    fileLocation: (NSString*) fileLocation
    fileThreshold: (NSNumber*) fileThreshold
    fileMax: (NSNumber*) fileMax
    requestMax: (NSNumber*) requestMax
    slingDefaultParameterCheckForAdditionalContainerParameters: (NSNumber*) slingDefaultParameterCheckForAdditionalContainerParameters
    completionHandler: (void (^)(OAIOrgApacheSlingEngineParametersInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.engine.parameters"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingDefaultParameterEncoding != nil) {
        queryParams[@"sling.default.parameter.encoding"] = slingDefaultParameterEncoding;
    }
    if (slingDefaultMaxParameters != nil) {
        queryParams[@"sling.default.max.parameters"] = slingDefaultMaxParameters;
    }
    if (fileLocation != nil) {
        queryParams[@"file.location"] = fileLocation;
    }
    if (fileThreshold != nil) {
        queryParams[@"file.threshold"] = fileThreshold;
    }
    if (fileMax != nil) {
        queryParams[@"file.max"] = fileMax;
    }
    if (requestMax != nil) {
        queryParams[@"request.max"] = requestMax;
    }
    if (slingDefaultParameterCheckForAdditionalContainerParameters != nil) {
        queryParams[@"sling.default.parameter.checkForAdditionalContainerParameters"] = [slingDefaultParameterCheckForAdditionalContainerParameters isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEngineParametersInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEngineParametersInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param minPoolSize  (optional)
///
///  @returns OAIOrgApacheSlingEventImplEventingThreadPoolInfo*
///
-(NSURLSessionTask*) orgApacheSlingEventImplEventingThreadPoolWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    minPoolSize: (NSNumber*) minPoolSize
    completionHandler: (void (^)(OAIOrgApacheSlingEventImplEventingThreadPoolInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (minPoolSize != nil) {
        queryParams[@"minPoolSize"] = minPoolSize;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEventImplEventingThreadPoolInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEventImplEventingThreadPoolInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queuePriority  (optional)
///
///  @param queueRetries  (optional)
///
///  @param queueRetrydelay  (optional)
///
///  @param queueMaxparallel  (optional)
///
///  @returns OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo*
///
-(NSURLSessionTask*) orgApacheSlingEventImplJobsDefaultJobManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queuePriority: (NSString*) queuePriority
    queueRetries: (NSNumber*) queueRetries
    queueRetrydelay: (NSNumber*) queueRetrydelay
    queueMaxparallel: (NSNumber*) queueMaxparallel
    completionHandler: (void (^)(OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queuePriority != nil) {
        queryParams[@"queue.priority"] = queuePriority;
    }
    if (queueRetries != nil) {
        queryParams[@"queue.retries"] = queueRetries;
    }
    if (queueRetrydelay != nil) {
        queryParams[@"queue.retrydelay"] = queueRetrydelay;
    }
    if (queueMaxparallel != nil) {
        queryParams[@"queue.maxparallel"] = queueMaxparallel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEventImplJobsDefaultJobManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jobConsumermanagerDisableDistribution  (optional)
///
///  @param startupDelay  (optional)
///
///  @param cleanupPeriod  (optional)
///
///  @returns OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo*
///
-(NSURLSessionTask*) orgApacheSlingEventImplJobsJcrPersistenceHandlerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jobConsumermanagerDisableDistribution: (NSNumber*) jobConsumermanagerDisableDistribution
    startupDelay: (NSNumber*) startupDelay
    cleanupPeriod: (NSNumber*) cleanupPeriod
    completionHandler: (void (^)(OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jobConsumermanagerDisableDistribution != nil) {
        queryParams[@"job.consumermanager.disableDistribution"] = [jobConsumermanagerDisableDistribution isEqual:@(YES)] ? @"true" : @"false";
    }
    if (startupDelay != nil) {
        queryParams[@"startup.delay"] = startupDelay;
    }
    if (cleanupPeriod != nil) {
        queryParams[@"cleanup.period"] = cleanupPeriod;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingInstallerConfigurationPersist  (optional)
///
///  @param jobConsumermanagerWhitelist  (optional)
///
///  @param jobConsumermanagerBlacklist  (optional)
///
///  @returns OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo*
///
-(NSURLSessionTask*) orgApacheSlingEventImplJobsJobConsumerManagerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingInstallerConfigurationPersist: (NSNumber*) orgApacheSlingInstallerConfigurationPersist
    jobConsumermanagerWhitelist: (NSArray<NSString*>*) jobConsumermanagerWhitelist
    jobConsumermanagerBlacklist: (NSArray<NSString*>*) jobConsumermanagerBlacklist
    completionHandler: (void (^)(OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingInstallerConfigurationPersist != nil) {
        queryParams[@"org.apache.sling.installer.configuration.persist"] = [orgApacheSlingInstallerConfigurationPersist isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jobConsumermanagerWhitelist != nil) {
        queryParams[@"job.consumermanager.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: jobConsumermanagerWhitelist format: @"multi"];
    }
    if (jobConsumermanagerBlacklist != nil) {
        queryParams[@"job.consumermanager.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: jobConsumermanagerBlacklist format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEventImplJobsJobConsumerManagerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param queueName  (optional)
///
///  @param queueTopics  (optional)
///
///  @param queueType  (optional)
///
///  @param queuePriority  (optional)
///
///  @param queueRetries  (optional)
///
///  @param queueRetrydelay  (optional)
///
///  @param queueMaxparallel  (optional)
///
///  @param queueKeepJobs  (optional)
///
///  @param queuePreferRunOnCreationInstance  (optional)
///
///  @param queueThreadPoolSize  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIOrgApacheSlingEventJobsQueueConfigurationInfo*
///
-(NSURLSessionTask*) orgApacheSlingEventJobsQueueConfigurationWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    queueName: (NSString*) queueName
    queueTopics: (NSArray<NSString*>*) queueTopics
    queueType: (NSString*) queueType
    queuePriority: (NSString*) queuePriority
    queueRetries: (NSNumber*) queueRetries
    queueRetrydelay: (NSNumber*) queueRetrydelay
    queueMaxparallel: (NSNumber*) queueMaxparallel
    queueKeepJobs: (NSNumber*) queueKeepJobs
    queuePreferRunOnCreationInstance: (NSNumber*) queuePreferRunOnCreationInstance
    queueThreadPoolSize: (NSNumber*) queueThreadPoolSize
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIOrgApacheSlingEventJobsQueueConfigurationInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (queueName != nil) {
        queryParams[@"queue.name"] = queueName;
    }
    if (queueTopics != nil) {
        queryParams[@"queue.topics"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: queueTopics format: @"multi"];
    }
    if (queueType != nil) {
        queryParams[@"queue.type"] = queueType;
    }
    if (queuePriority != nil) {
        queryParams[@"queue.priority"] = queuePriority;
    }
    if (queueRetries != nil) {
        queryParams[@"queue.retries"] = queueRetries;
    }
    if (queueRetrydelay != nil) {
        queryParams[@"queue.retrydelay"] = queueRetrydelay;
    }
    if (queueMaxparallel != nil) {
        queryParams[@"queue.maxparallel"] = queueMaxparallel;
    }
    if (queueKeepJobs != nil) {
        queryParams[@"queue.keepJobs"] = [queueKeepJobs isEqual:@(YES)] ? @"true" : @"false";
    }
    if (queuePreferRunOnCreationInstance != nil) {
        queryParams[@"queue.preferRunOnCreationInstance"] = [queuePreferRunOnCreationInstance isEqual:@(YES)] ? @"true" : @"false";
    }
    if (queueThreadPoolSize != nil) {
        queryParams[@"queue.threadPoolSize"] = queueThreadPoolSize;
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingEventJobsQueueConfigurationInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingEventJobsQueueConfigurationInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param users  (optional)
///
///  @param groups  (optional)
///
///  @returns OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo*
///
-(NSURLSessionTask*) orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    users: (NSArray<NSString*>*) users
    groups: (NSArray<NSString*>*) groups
    completionHandler: (void (^)(OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (users != nil) {
        queryParams[@"users"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: users format: @"multi"];
    }
    if (groups != nil) {
        queryParams[@"groups"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: groups format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param _description  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheSlingFeatureflagsFeatureInfo*
///
-(NSURLSessionTask*) orgApacheSlingFeatureflagsFeatureWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    _description: (NSString*) _description
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheSlingFeatureflagsFeatureInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.featureflags.Feature"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (_description != nil) {
        queryParams[@"description"] = _description;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingFeatureflagsFeatureInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingFeatureflagsFeatureInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param name  (optional)
///
///  @param _description  (optional)
///
///  @param enabled  (optional)
///
///  @returns OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo*
///
-(NSURLSessionTask*) orgApacheSlingFeatureflagsImplConfiguredFeatureWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    name: (NSString*) name
    _description: (NSString*) _description
    enabled: (NSNumber*) enabled
    completionHandler: (void (^)(OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (name != nil) {
        queryParams[@"name"] = name;
    }
    if (_description != nil) {
        queryParams[@"description"] = _description;
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingFeatureflagsImplConfiguredFeatureInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingHapiToolsResourcetype  (optional)
///
///  @param orgApacheSlingHapiToolsCollectionresourcetype  (optional)
///
///  @param orgApacheSlingHapiToolsSearchpaths  (optional)
///
///  @param orgApacheSlingHapiToolsExternalurl  (optional)
///
///  @param orgApacheSlingHapiToolsEnabled  (optional)
///
///  @returns OAIOrgApacheSlingHapiImplHApiUtilImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingHapiImplHApiUtilImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingHapiToolsResourcetype: (NSString*) orgApacheSlingHapiToolsResourcetype
    orgApacheSlingHapiToolsCollectionresourcetype: (NSString*) orgApacheSlingHapiToolsCollectionresourcetype
    orgApacheSlingHapiToolsSearchpaths: (NSArray<NSString*>*) orgApacheSlingHapiToolsSearchpaths
    orgApacheSlingHapiToolsExternalurl: (NSString*) orgApacheSlingHapiToolsExternalurl
    orgApacheSlingHapiToolsEnabled: (NSNumber*) orgApacheSlingHapiToolsEnabled
    completionHandler: (void (^)(OAIOrgApacheSlingHapiImplHApiUtilImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingHapiToolsResourcetype != nil) {
        queryParams[@"org.apache.sling.hapi.tools.resourcetype"] = orgApacheSlingHapiToolsResourcetype;
    }
    if (orgApacheSlingHapiToolsCollectionresourcetype != nil) {
        queryParams[@"org.apache.sling.hapi.tools.collectionresourcetype"] = orgApacheSlingHapiToolsCollectionresourcetype;
    }
    if (orgApacheSlingHapiToolsSearchpaths != nil) {
        queryParams[@"org.apache.sling.hapi.tools.searchpaths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheSlingHapiToolsSearchpaths format: @"multi"];
    }
    if (orgApacheSlingHapiToolsExternalurl != nil) {
        queryParams[@"org.apache.sling.hapi.tools.externalurl"] = orgApacheSlingHapiToolsExternalurl;
    }
    if (orgApacheSlingHapiToolsEnabled != nil) {
        queryParams[@"org.apache.sling.hapi.tools.enabled"] = [orgApacheSlingHapiToolsEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHapiImplHApiUtilImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHapiImplHApiUtilImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @param filterTags  (optional)
///
///  @param filterCombineTagsWithOr  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplCompositeHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    filterTags: (NSArray<NSString*>*) filterTags
    filterCombineTagsWithOr: (NSNumber*) filterCombineTagsWithOr
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    if (filterTags != nil) {
        queryParams[@"filter.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterTags format: @"multi"];
    }
    if (filterCombineTagsWithOr != nil) {
        queryParams[@"filter.combineTagsWithOr"] = [filterCombineTagsWithOr isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplCompositeHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param timeoutInMs  (optional)
///
///  @param longRunningFutureThresholdForCriticalMs  (optional)
///
///  @param resultCacheTtlInMs  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    timeoutInMs: (NSNumber*) timeoutInMs
    longRunningFutureThresholdForCriticalMs: (NSNumber*) longRunningFutureThresholdForCriticalMs
    resultCacheTtlInMs: (NSNumber*) resultCacheTtlInMs
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (timeoutInMs != nil) {
        queryParams[@"timeoutInMs"] = timeoutInMs;
    }
    if (longRunningFutureThresholdForCriticalMs != nil) {
        queryParams[@"longRunningFutureThresholdForCriticalMs"] = longRunningFutureThresholdForCriticalMs;
    }
    if (resultCacheTtlInMs != nil) {
        queryParams[@"resultCacheTtlInMs"] = resultCacheTtlInMs;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @param mbeanName  (optional)
///
///  @param attributeName  (optional)
///
///  @param attributeValueConstraint  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplJmxAttributeHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    mbeanName: (NSString*) mbeanName
    attributeName: (NSString*) attributeName
    attributeValueConstraint: (NSString*) attributeValueConstraint
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    if (mbeanName != nil) {
        queryParams[@"mbean.name"] = mbeanName;
    }
    if (attributeName != nil) {
        queryParams[@"attribute.name"] = attributeName;
    }
    if (attributeValueConstraint != nil) {
        queryParams[@"attribute.value.constraint"] = attributeValueConstraint;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param hcName  (optional)
///
///  @param hcTags  (optional)
///
///  @param hcMbeanName  (optional)
///
///  @param expression  (optional)
///
///  @param languageExtension  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplScriptableHealthCheckWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    hcName: (NSString*) hcName
    hcTags: (NSArray<NSString*>*) hcTags
    hcMbeanName: (NSString*) hcMbeanName
    expression: (NSString*) expression
    languageExtension: (NSString*) languageExtension
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (hcName != nil) {
        queryParams[@"hc.name"] = hcName;
    }
    if (hcTags != nil) {
        queryParams[@"hc.tags"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: hcTags format: @"multi"];
    }
    if (hcMbeanName != nil) {
        queryParams[@"hc.mbean.name"] = hcMbeanName;
    }
    if (expression != nil) {
        queryParams[@"expression"] = expression;
    }
    if (languageExtension != nil) {
        queryParams[@"language.extension"] = languageExtension;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplScriptableHealthCheckInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param servletPath  (optional)
///
///  @param disabled  (optional)
///
///  @param corsAccessControlAllowOrigin  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplServletHealthCheckExecutorServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    servletPath: (NSString*) servletPath
    disabled: (NSNumber*) disabled
    corsAccessControlAllowOrigin: (NSString*) corsAccessControlAllowOrigin
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (servletPath != nil) {
        queryParams[@"servletPath"] = servletPath;
    }
    if (disabled != nil) {
        queryParams[@"disabled"] = [disabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (corsAccessControlAllowOrigin != nil) {
        queryParams[@"cors.accessControlAllowOrigin"] = corsAccessControlAllowOrigin;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param totalWidth  (optional)
///
///  @param colWidthName  (optional)
///
///  @param colWidthResult  (optional)
///
///  @param colWidthTiming  (optional)
///
///  @returns OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo*
///
-(NSURLSessionTask*) orgApacheSlingHcCoreImplServletResultTxtVerboseSerializerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    totalWidth: (NSNumber*) totalWidth
    colWidthName: (NSNumber*) colWidthName
    colWidthResult: (NSNumber*) colWidthResult
    colWidthTiming: (NSNumber*) colWidthTiming
    completionHandler: (void (^)(OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (totalWidth != nil) {
        queryParams[@"totalWidth"] = totalWidth;
    }
    if (colWidthName != nil) {
        queryParams[@"colWidthName"] = colWidthName;
    }
    if (colWidthResult != nil) {
        queryParams[@"colWidthResult"] = colWidthResult;
    }
    if (colWidthTiming != nil) {
        queryParams[@"colWidthTiming"] = colWidthTiming;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param slingFilterScope  (optional)
///
///  @returns OAIOrgApacheSlingI18nImplI18NFilterInfo*
///
-(NSURLSessionTask*) orgApacheSlingI18nImplI18NFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    slingFilterScope: (NSArray<NSString*>*) slingFilterScope
    completionHandler: (void (^)(OAIOrgApacheSlingI18nImplI18NFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (slingFilterScope != nil) {
        queryParams[@"sling.filter.scope"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingFilterScope format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingI18nImplI18NFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingI18nImplI18NFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param localeDefault  (optional)
///
///  @param preloadBundles  (optional)
///
///  @param invalidationDelay  (optional)
///
///  @returns OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo*
///
-(NSURLSessionTask*) orgApacheSlingI18nImplJcrResourceBundleProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    localeDefault: (NSString*) localeDefault
    preloadBundles: (NSNumber*) preloadBundles
    invalidationDelay: (NSNumber*) invalidationDelay
    completionHandler: (void (^)(OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (localeDefault != nil) {
        queryParams[@"locale.default"] = localeDefault;
    }
    if (preloadBundles != nil) {
        queryParams[@"preload.bundles"] = [preloadBundles isEqual:@(YES)] ? @"true" : @"false";
    }
    if (invalidationDelay != nil) {
        queryParams[@"invalidation.delay"] = invalidationDelay;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingI18nImplJcrResourceBundleProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param handlerSchemes  (optional)
///
///  @param slingJcrinstallFolderNameRegexp  (optional)
///
///  @param slingJcrinstallFolderMaxDepth  (optional)
///
///  @param slingJcrinstallSearchPath  (optional)
///
///  @param slingJcrinstallNewConfigPath  (optional)
///
///  @param slingJcrinstallSignalPath  (optional)
///
///  @param slingJcrinstallEnableWriteback  (optional)
///
///  @returns OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo*
///
-(NSURLSessionTask*) orgApacheSlingInstallerProviderJcrImplJcrInstallerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    handlerSchemes: (NSArray<NSString*>*) handlerSchemes
    slingJcrinstallFolderNameRegexp: (NSString*) slingJcrinstallFolderNameRegexp
    slingJcrinstallFolderMaxDepth: (NSNumber*) slingJcrinstallFolderMaxDepth
    slingJcrinstallSearchPath: (NSArray<NSString*>*) slingJcrinstallSearchPath
    slingJcrinstallNewConfigPath: (NSString*) slingJcrinstallNewConfigPath
    slingJcrinstallSignalPath: (NSString*) slingJcrinstallSignalPath
    slingJcrinstallEnableWriteback: (NSNumber*) slingJcrinstallEnableWriteback
    completionHandler: (void (^)(OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (handlerSchemes != nil) {
        queryParams[@"handler.schemes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: handlerSchemes format: @"multi"];
    }
    if (slingJcrinstallFolderNameRegexp != nil) {
        queryParams[@"sling.jcrinstall.folder.name.regexp"] = slingJcrinstallFolderNameRegexp;
    }
    if (slingJcrinstallFolderMaxDepth != nil) {
        queryParams[@"sling.jcrinstall.folder.max.depth"] = slingJcrinstallFolderMaxDepth;
    }
    if (slingJcrinstallSearchPath != nil) {
        queryParams[@"sling.jcrinstall.search.path"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingJcrinstallSearchPath format: @"multi"];
    }
    if (slingJcrinstallNewConfigPath != nil) {
        queryParams[@"sling.jcrinstall.new.config.path"] = slingJcrinstallNewConfigPath;
    }
    if (slingJcrinstallSignalPath != nil) {
        queryParams[@"sling.jcrinstall.signal.path"] = slingJcrinstallSignalPath;
    }
    if (slingJcrinstallEnableWriteback != nil) {
        queryParams[@"sling.jcrinstall.enable.writeback"] = [slingJcrinstallEnableWriteback isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param whitelistBypass  (optional)
///
///  @param whitelistBundlesRegexp  (optional)
///
///  @returns OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrBaseInternalLoginAdminWhitelistWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    whitelistBypass: (NSNumber*) whitelistBypass
    whitelistBundlesRegexp: (NSString*) whitelistBundlesRegexp
    completionHandler: (void (^)(OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (whitelistBypass != nil) {
        queryParams[@"whitelist.bypass"] = [whitelistBypass isEqual:@(YES)] ? @"true" : @"false";
    }
    if (whitelistBundlesRegexp != nil) {
        queryParams[@"whitelist.bundles.regexp"] = whitelistBundlesRegexp;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param whitelistName  (optional)
///
///  @param whitelistBundles  (optional)
///
///  @returns OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    whitelistName: (NSString*) whitelistName
    whitelistBundles: (NSArray<NSString*>*) whitelistBundles
    completionHandler: (void (^)(OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (whitelistName != nil) {
        queryParams[@"whitelist.name"] = whitelistName;
    }
    if (whitelistBundles != nil) {
        queryParams[@"whitelist.bundles"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: whitelistBundles format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param alias  (optional)
///
///  @param davCreateAbsoluteUri  (optional)
///
///  @param davProtectedhandlers  (optional)
///
///  @returns OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrDavexImplServletsSlingDavExServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    alias: (NSString*) alias
    davCreateAbsoluteUri: (NSNumber*) davCreateAbsoluteUri
    davProtectedhandlers: (NSString*) davProtectedhandlers
    completionHandler: (void (^)(OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (alias != nil) {
        queryParams[@"alias"] = alias;
    }
    if (davCreateAbsoluteUri != nil) {
        queryParams[@"dav.create-absolute-uri"] = [davCreateAbsoluteUri isEqual:@(YES)] ? @"true" : @"false";
    }
    if (davProtectedhandlers != nil) {
        queryParams[@"dav.protectedhandlers"] = davProtectedhandlers;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param javaNamingFactoryInitial  (optional)
///
///  @param javaNamingProviderUrl  (optional)
///
///  @returns OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrJackrabbitServerJndiRegistrationSupportWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    javaNamingFactoryInitial: (NSString*) javaNamingFactoryInitial
    javaNamingProviderUrl: (NSString*) javaNamingProviderUrl
    completionHandler: (void (^)(OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (javaNamingFactoryInitial != nil) {
        queryParams[@"java.naming.factory.initial"] = javaNamingFactoryInitial;
    }
    if (javaNamingProviderUrl != nil) {
        queryParams[@"java.naming.provider.url"] = javaNamingProviderUrl;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param port  (optional)
///
///  @returns OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrJackrabbitServerRmiRegistrationSupportWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    port: (NSNumber*) port
    completionHandler: (void (^)(OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (port != nil) {
        queryParams[@"port"] = port;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param references  (optional)
///
///  @returns OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrRepoinitImplRepositoryInitializerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    references: (NSArray<NSString*>*) references
    completionHandler: (void (^)(OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (references != nil) {
        queryParams[@"references"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: references format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param references  (optional)
///
///  @param scripts  (optional)
///
///  @returns OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrRepoinitRepositoryInitializerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    references: (NSArray<NSString*>*) references
    scripts: (NSArray<NSString*>*) scripts
    completionHandler: (void (^)(OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (references != nil) {
        queryParams[@"references"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: references format: @"multi"];
    }
    if (scripts != nil) {
        queryParams[@"scripts"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: scripts format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrRepoinitRepositoryInitializerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param resourceResolverSearchpath  (optional)
///
///  @param resourceResolverManglenamespaces  (optional)
///
///  @param resourceResolverAllowDirect  (optional)
///
///  @param resourceResolverRequiredProviders  (optional)
///
///  @param resourceResolverRequiredProvidernames  (optional)
///
///  @param resourceResolverVirtual  (optional)
///
///  @param resourceResolverMapping  (optional)
///
///  @param resourceResolverMapLocation  (optional)
///
///  @param resourceResolverMapObservation  (optional)
///
///  @param resourceResolverDefaultVanityRedirectStatus  (optional)
///
///  @param resourceResolverEnableVanitypath  (optional)
///
///  @param resourceResolverVanitypathMaxEntries  (optional)
///
///  @param resourceResolverVanitypathMaxEntriesStartup  (optional)
///
///  @param resourceResolverVanitypathBloomfilterMaxBytes  (optional)
///
///  @param resourceResolverOptimizeAliasResolution  (optional)
///
///  @param resourceResolverVanitypathWhitelist  (optional)
///
///  @param resourceResolverVanitypathBlacklist  (optional)
///
///  @param resourceResolverVanityPrecedence  (optional)
///
///  @param resourceResolverProviderhandlingParanoid  (optional)
///
///  @param resourceResolverLogClosing  (optional)
///
///  @param resourceResolverLogUnclosed  (optional)
///
///  @returns OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    resourceResolverSearchpath: (NSArray<NSString*>*) resourceResolverSearchpath
    resourceResolverManglenamespaces: (NSNumber*) resourceResolverManglenamespaces
    resourceResolverAllowDirect: (NSNumber*) resourceResolverAllowDirect
    resourceResolverRequiredProviders: (NSArray<NSString*>*) resourceResolverRequiredProviders
    resourceResolverRequiredProvidernames: (NSArray<NSString*>*) resourceResolverRequiredProvidernames
    resourceResolverVirtual: (NSArray<NSString*>*) resourceResolverVirtual
    resourceResolverMapping: (NSArray<NSString*>*) resourceResolverMapping
    resourceResolverMapLocation: (NSString*) resourceResolverMapLocation
    resourceResolverMapObservation: (NSArray<NSString*>*) resourceResolverMapObservation
    resourceResolverDefaultVanityRedirectStatus: (NSNumber*) resourceResolverDefaultVanityRedirectStatus
    resourceResolverEnableVanitypath: (NSNumber*) resourceResolverEnableVanitypath
    resourceResolverVanitypathMaxEntries: (NSNumber*) resourceResolverVanitypathMaxEntries
    resourceResolverVanitypathMaxEntriesStartup: (NSNumber*) resourceResolverVanitypathMaxEntriesStartup
    resourceResolverVanitypathBloomfilterMaxBytes: (NSNumber*) resourceResolverVanitypathBloomfilterMaxBytes
    resourceResolverOptimizeAliasResolution: (NSNumber*) resourceResolverOptimizeAliasResolution
    resourceResolverVanitypathWhitelist: (NSArray<NSString*>*) resourceResolverVanitypathWhitelist
    resourceResolverVanitypathBlacklist: (NSArray<NSString*>*) resourceResolverVanitypathBlacklist
    resourceResolverVanityPrecedence: (NSNumber*) resourceResolverVanityPrecedence
    resourceResolverProviderhandlingParanoid: (NSNumber*) resourceResolverProviderhandlingParanoid
    resourceResolverLogClosing: (NSNumber*) resourceResolverLogClosing
    resourceResolverLogUnclosed: (NSNumber*) resourceResolverLogUnclosed
    completionHandler: (void (^)(OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (resourceResolverSearchpath != nil) {
        queryParams[@"resource.resolver.searchpath"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverSearchpath format: @"multi"];
    }
    if (resourceResolverManglenamespaces != nil) {
        queryParams[@"resource.resolver.manglenamespaces"] = [resourceResolverManglenamespaces isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverAllowDirect != nil) {
        queryParams[@"resource.resolver.allowDirect"] = [resourceResolverAllowDirect isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverRequiredProviders != nil) {
        queryParams[@"resource.resolver.required.providers"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverRequiredProviders format: @"multi"];
    }
    if (resourceResolverRequiredProvidernames != nil) {
        queryParams[@"resource.resolver.required.providernames"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverRequiredProvidernames format: @"multi"];
    }
    if (resourceResolverVirtual != nil) {
        queryParams[@"resource.resolver.virtual"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverVirtual format: @"multi"];
    }
    if (resourceResolverMapping != nil) {
        queryParams[@"resource.resolver.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverMapping format: @"multi"];
    }
    if (resourceResolverMapLocation != nil) {
        queryParams[@"resource.resolver.map.location"] = resourceResolverMapLocation;
    }
    if (resourceResolverMapObservation != nil) {
        queryParams[@"resource.resolver.map.observation"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverMapObservation format: @"multi"];
    }
    if (resourceResolverDefaultVanityRedirectStatus != nil) {
        queryParams[@"resource.resolver.default.vanity.redirect.status"] = resourceResolverDefaultVanityRedirectStatus;
    }
    if (resourceResolverEnableVanitypath != nil) {
        queryParams[@"resource.resolver.enable.vanitypath"] = [resourceResolverEnableVanitypath isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverVanitypathMaxEntries != nil) {
        queryParams[@"resource.resolver.vanitypath.maxEntries"] = resourceResolverVanitypathMaxEntries;
    }
    if (resourceResolverVanitypathMaxEntriesStartup != nil) {
        queryParams[@"resource.resolver.vanitypath.maxEntries.startup"] = [resourceResolverVanitypathMaxEntriesStartup isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverVanitypathBloomfilterMaxBytes != nil) {
        queryParams[@"resource.resolver.vanitypath.bloomfilter.maxBytes"] = resourceResolverVanitypathBloomfilterMaxBytes;
    }
    if (resourceResolverOptimizeAliasResolution != nil) {
        queryParams[@"resource.resolver.optimize.alias.resolution"] = [resourceResolverOptimizeAliasResolution isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverVanitypathWhitelist != nil) {
        queryParams[@"resource.resolver.vanitypath.whitelist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverVanitypathWhitelist format: @"multi"];
    }
    if (resourceResolverVanitypathBlacklist != nil) {
        queryParams[@"resource.resolver.vanitypath.blacklist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: resourceResolverVanitypathBlacklist format: @"multi"];
    }
    if (resourceResolverVanityPrecedence != nil) {
        queryParams[@"resource.resolver.vanity.precedence"] = [resourceResolverVanityPrecedence isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverProviderhandlingParanoid != nil) {
        queryParams[@"resource.resolver.providerhandling.paranoid"] = [resourceResolverProviderhandlingParanoid isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverLogClosing != nil) {
        queryParams[@"resource.resolver.log.closing"] = [resourceResolverLogClosing isEqual:@(YES)] ? @"true" : @"false";
    }
    if (resourceResolverLogUnclosed != nil) {
        queryParams[@"resource.resolver.log.unclosed"] = [resourceResolverLogUnclosed isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param allowOnlySystemUser  (optional)
///
///  @returns OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrResourceInternalJcrSystemUserValidatorWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    allowOnlySystemUser: (NSNumber*) allowOnlySystemUser
    completionHandler: (void (^)(OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (allowOnlySystemUser != nil) {
        queryParams[@"allow.only.system.user"] = [allowOnlySystemUser isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param path  (optional)
///
///  @param checkpathPrefix  (optional)
///
///  @param jcrPath  (optional)
///
///  @returns OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    path: (NSString*) path
    checkpathPrefix: (NSString*) checkpathPrefix
    jcrPath: (NSString*) jcrPath
    completionHandler: (void (^)(OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    if (checkpathPrefix != nil) {
        queryParams[@"checkpath.prefix"] = checkpathPrefix;
    }
    if (jcrPath != nil) {
        queryParams[@"jcrPath"] = jcrPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param typeCollections  (optional)
///
///  @param typeNoncollections  (optional)
///
///  @param typeContent  (optional)
///
///  @returns OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    typeCollections: (NSString*) typeCollections
    typeNoncollections: (NSString*) typeNoncollections
    typeContent: (NSString*) typeContent
    completionHandler: (void (^)(OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (typeCollections != nil) {
        queryParams[@"type.collections"] = typeCollections;
    }
    if (typeNoncollections != nil) {
        queryParams[@"type.noncollections"] = typeNoncollections;
    }
    if (typeContent != nil) {
        queryParams[@"type.content"] = typeContent;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @returns OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    completionHandler: (void (^)(OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param davRoot  (optional)
///
///  @param davCreateAbsoluteUri  (optional)
///
///  @param davRealm  (optional)
///
///  @param collectionTypes  (optional)
///
///  @param filterPrefixes  (optional)
///
///  @param filterTypes  (optional)
///
///  @param filterUris  (optional)
///
///  @param typeCollections  (optional)
///
///  @param typeNoncollections  (optional)
///
///  @param typeContent  (optional)
///
///  @returns OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingJcrWebdavImplServletsSimpleWebDavServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    davRoot: (NSString*) davRoot
    davCreateAbsoluteUri: (NSNumber*) davCreateAbsoluteUri
    davRealm: (NSString*) davRealm
    collectionTypes: (NSArray<NSString*>*) collectionTypes
    filterPrefixes: (NSArray<NSString*>*) filterPrefixes
    filterTypes: (NSString*) filterTypes
    filterUris: (NSString*) filterUris
    typeCollections: (NSString*) typeCollections
    typeNoncollections: (NSString*) typeNoncollections
    typeContent: (NSString*) typeContent
    completionHandler: (void (^)(OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (davRoot != nil) {
        queryParams[@"dav.root"] = davRoot;
    }
    if (davCreateAbsoluteUri != nil) {
        queryParams[@"dav.create-absolute-uri"] = [davCreateAbsoluteUri isEqual:@(YES)] ? @"true" : @"false";
    }
    if (davRealm != nil) {
        queryParams[@"dav.realm"] = davRealm;
    }
    if (collectionTypes != nil) {
        queryParams[@"collection.types"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: collectionTypes format: @"multi"];
    }
    if (filterPrefixes != nil) {
        queryParams[@"filter.prefixes"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterPrefixes format: @"multi"];
    }
    if (filterTypes != nil) {
        queryParams[@"filter.types"] = filterTypes;
    }
    if (filterUris != nil) {
        queryParams[@"filter.uris"] = filterUris;
    }
    if (typeCollections != nil) {
        queryParams[@"type.collections"] = typeCollections;
    }
    if (typeNoncollections != nil) {
        queryParams[@"type.noncollections"] = typeNoncollections;
    }
    if (typeContent != nil) {
        queryParams[@"type.content"] = typeContent;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param providerRoots  (optional)
///
///  @returns OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo*
///
-(NSURLSessionTask*) orgApacheSlingJmxProviderImplJMXResourceProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    providerRoots: (NSString*) providerRoots
    completionHandler: (void (^)(OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (providerRoots != nil) {
        queryParams[@"provider.roots"] = providerRoots;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingJmxProviderImplJMXResourceProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param osgiHttpWhiteboardListener  (optional)
///
///  @param osgiHttpWhiteboardContextSelect  (optional)
///
///  @param maxRecursionDepth  (optional)
///
///  @param cleanupJobPeriod  (optional)
///
///  @returns OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingModelsImplModelAdapterFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    osgiHttpWhiteboardListener: (NSString*) osgiHttpWhiteboardListener
    osgiHttpWhiteboardContextSelect: (NSString*) osgiHttpWhiteboardContextSelect
    maxRecursionDepth: (NSNumber*) maxRecursionDepth
    cleanupJobPeriod: (NSNumber*) cleanupJobPeriod
    completionHandler: (void (^)(OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (osgiHttpWhiteboardListener != nil) {
        queryParams[@"osgi.http.whiteboard.listener"] = osgiHttpWhiteboardListener;
    }
    if (osgiHttpWhiteboardContextSelect != nil) {
        queryParams[@"osgi.http.whiteboard.context.select"] = osgiHttpWhiteboardContextSelect;
    }
    if (maxRecursionDepth != nil) {
        queryParams[@"max.recursion.depth"] = maxRecursionDepth;
    }
    if (cleanupJobPeriod != nil) {
        queryParams[@"cleanup.job.period"] = cleanupJobPeriod;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingModelsImplModelAdapterFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param maxRecursionLevels  (optional)
///
///  @returns OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo*
///
-(NSURLSessionTask*) orgApacheSlingModelsJacksonexporterImplResourceModuleProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    maxRecursionLevels: (NSNumber*) maxRecursionLevels
    completionHandler: (void (^)(OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (maxRecursionLevels != nil) {
        queryParams[@"max.recursion.levels"] = maxRecursionLevels;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param felixInventoryPrinterName  (optional)
///
///  @param felixInventoryPrinterTitle  (optional)
///
///  @param path  (optional)
///
///  @returns OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo*
///
-(NSURLSessionTask*) orgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    felixInventoryPrinterName: (NSString*) felixInventoryPrinterName
    felixInventoryPrinterTitle: (NSString*) felixInventoryPrinterTitle
    path: (NSString*) path
    completionHandler: (void (^)(OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (felixInventoryPrinterName != nil) {
        queryParams[@"felix.inventory.printer.name"] = felixInventoryPrinterName;
    }
    if (felixInventoryPrinterTitle != nil) {
        queryParams[@"felix.inventory.printer.title"] = felixInventoryPrinterTitle;
    }
    if (path != nil) {
        queryParams[@"path"] = path;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mergeRoot  (optional)
///
///  @param mergeReadOnly  (optional)
///
///  @returns OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingResourcemergerImplMergedResourceProviderFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mergeRoot: (NSString*) mergeRoot
    mergeReadOnly: (NSNumber*) mergeReadOnly
    completionHandler: (void (^)(OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mergeRoot != nil) {
        queryParams[@"merge.root"] = mergeRoot;
    }
    if (mergeReadOnly != nil) {
        queryParams[@"merge.readOnly"] = [mergeReadOnly isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param mergeRoot  (optional)
///
///  @param mergeReadOnly  (optional)
///
///  @returns OAIOrgApacheSlingResourcemergerPickerOverridingInfo*
///
-(NSURLSessionTask*) orgApacheSlingResourcemergerPickerOverridingWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    mergeRoot: (NSString*) mergeRoot
    mergeReadOnly: (NSNumber*) mergeReadOnly
    completionHandler: (void (^)(OAIOrgApacheSlingResourcemergerPickerOverridingInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (mergeRoot != nil) {
        queryParams[@"merge.root"] = mergeRoot;
    }
    if (mergeReadOnly != nil) {
        queryParams[@"merge.readOnly"] = [mergeReadOnly isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingResourcemergerPickerOverridingInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingResourcemergerPickerOverridingInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingScriptingCacheSize  (optional)
///
///  @param orgApacheSlingScriptingCacheAdditionalExtensions  (optional)
///
///  @returns OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingCoreImplScriptCacheImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingScriptingCacheSize: (NSNumber*) orgApacheSlingScriptingCacheSize
    orgApacheSlingScriptingCacheAdditionalExtensions: (NSArray<NSString*>*) orgApacheSlingScriptingCacheAdditionalExtensions
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingScriptingCacheSize != nil) {
        queryParams[@"org.apache.sling.scripting.cache.size"] = orgApacheSlingScriptingCacheSize;
    }
    if (orgApacheSlingScriptingCacheAdditionalExtensions != nil) {
        queryParams[@"org.apache.sling.scripting.cache.additional_extensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheSlingScriptingCacheAdditionalExtensions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingCoreImplScriptCacheImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param logStacktraceOnclose  (optional)
///
///  @returns OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingCoreImplScriptingResourceResolverProviderWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    logStacktraceOnclose: (NSNumber*) logStacktraceOnclose
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (logStacktraceOnclose != nil) {
        queryParams[@"log.stacktrace.onclose"] = [logStacktraceOnclose isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param javaClassdebuginfo  (optional)
///
///  @param javaJavaEncoding  (optional)
///
///  @param javaCompilerSourceVM  (optional)
///
///  @param javaCompilerTargetVM  (optional)
///
///  @returns OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingJavaImplJavaScriptEngineFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    javaClassdebuginfo: (NSNumber*) javaClassdebuginfo
    javaJavaEncoding: (NSString*) javaJavaEncoding
    javaCompilerSourceVM: (NSString*) javaCompilerSourceVM
    javaCompilerTargetVM: (NSString*) javaCompilerTargetVM
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (javaClassdebuginfo != nil) {
        queryParams[@"java.classdebuginfo"] = [javaClassdebuginfo isEqual:@(YES)] ? @"true" : @"false";
    }
    if (javaJavaEncoding != nil) {
        queryParams[@"java.javaEncoding"] = javaJavaEncoding;
    }
    if (javaCompilerSourceVM != nil) {
        queryParams[@"java.compilerSourceVM"] = javaCompilerSourceVM;
    }
    if (javaCompilerTargetVM != nil) {
        queryParams[@"java.compilerTargetVM"] = javaCompilerTargetVM;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingScriptingJavascriptRhinoOptLevel  (optional)
///
///  @returns OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingScriptingJavascriptRhinoOptLevel: (NSNumber*) orgApacheSlingScriptingJavascriptRhinoOptLevel
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingScriptingJavascriptRhinoOptLevel != nil) {
        queryParams[@"org.apache.sling.scripting.javascript.rhino.optLevel"] = orgApacheSlingScriptingJavascriptRhinoOptLevel;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param jasperCompilerTargetVM  (optional)
///
///  @param jasperCompilerSourceVM  (optional)
///
///  @param jasperClassdebuginfo  (optional)
///
///  @param jasperEnablePooling  (optional)
///
///  @param jasperIeClassId  (optional)
///
///  @param jasperGenStringAsCharArray  (optional)
///
///  @param jasperKeepgenerated  (optional)
///
///  @param jasperMappedfile  (optional)
///
///  @param jasperTrimSpaces  (optional)
///
///  @param jasperDisplaySourceFragments  (optional)
///
///  @param defaultIsSession  (optional)
///
///  @returns OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingJspJspScriptEngineFactoryWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    jasperCompilerTargetVM: (NSString*) jasperCompilerTargetVM
    jasperCompilerSourceVM: (NSString*) jasperCompilerSourceVM
    jasperClassdebuginfo: (NSNumber*) jasperClassdebuginfo
    jasperEnablePooling: (NSNumber*) jasperEnablePooling
    jasperIeClassId: (NSString*) jasperIeClassId
    jasperGenStringAsCharArray: (NSNumber*) jasperGenStringAsCharArray
    jasperKeepgenerated: (NSNumber*) jasperKeepgenerated
    jasperMappedfile: (NSNumber*) jasperMappedfile
    jasperTrimSpaces: (NSNumber*) jasperTrimSpaces
    jasperDisplaySourceFragments: (NSNumber*) jasperDisplaySourceFragments
    defaultIsSession: (NSNumber*) defaultIsSession
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (jasperCompilerTargetVM != nil) {
        queryParams[@"jasper.compilerTargetVM"] = jasperCompilerTargetVM;
    }
    if (jasperCompilerSourceVM != nil) {
        queryParams[@"jasper.compilerSourceVM"] = jasperCompilerSourceVM;
    }
    if (jasperClassdebuginfo != nil) {
        queryParams[@"jasper.classdebuginfo"] = [jasperClassdebuginfo isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperEnablePooling != nil) {
        queryParams[@"jasper.enablePooling"] = [jasperEnablePooling isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperIeClassId != nil) {
        queryParams[@"jasper.ieClassId"] = jasperIeClassId;
    }
    if (jasperGenStringAsCharArray != nil) {
        queryParams[@"jasper.genStringAsCharArray"] = [jasperGenStringAsCharArray isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperKeepgenerated != nil) {
        queryParams[@"jasper.keepgenerated"] = [jasperKeepgenerated isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperMappedfile != nil) {
        queryParams[@"jasper.mappedfile"] = [jasperMappedfile isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperTrimSpaces != nil) {
        queryParams[@"jasper.trimSpaces"] = [jasperTrimSpaces isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jasperDisplaySourceFragments != nil) {
        queryParams[@"jasper.displaySourceFragments"] = [jasperDisplaySourceFragments isEqual:@(YES)] ? @"true" : @"false";
    }
    if (defaultIsSession != nil) {
        queryParams[@"default.is.session"] = [defaultIsSession isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingJspJspScriptEngineFactoryInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param orgApacheSlingScriptingSightlyJsBindings  (optional)
///
///  @returns OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo*
///
-(NSURLSessionTask*) orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    orgApacheSlingScriptingSightlyJsBindings: (NSArray<NSString*>*) orgApacheSlingScriptingSightlyJsBindings
    completionHandler: (void (^)(OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (orgApacheSlingScriptingSightlyJsBindings != nil) {
        queryParams[@"org.apache.sling.scripting.sightly.js.bindings"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: orgApacheSlingScriptingSightlyJsBindings format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingContentDispositionPaths  (optional)
///
///  @param slingContentDispositionExcludedPaths  (optional)
///
///  @param slingContentDispositionAllPaths  (optional)
///
///  @returns OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo*
///
-(NSURLSessionTask*) orgApacheSlingSecurityImplContentDispositionFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingContentDispositionPaths: (NSArray<NSString*>*) slingContentDispositionPaths
    slingContentDispositionExcludedPaths: (NSArray<NSString*>*) slingContentDispositionExcludedPaths
    slingContentDispositionAllPaths: (NSNumber*) slingContentDispositionAllPaths
    completionHandler: (void (^)(OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingContentDispositionPaths != nil) {
        queryParams[@"sling.content.disposition.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingContentDispositionPaths format: @"multi"];
    }
    if (slingContentDispositionExcludedPaths != nil) {
        queryParams[@"sling.content.disposition.excluded.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingContentDispositionExcludedPaths format: @"multi"];
    }
    if (slingContentDispositionAllPaths != nil) {
        queryParams[@"sling.content.disposition.all.paths"] = [slingContentDispositionAllPaths isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingSecurityImplContentDispositionFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param allowEmpty  (optional)
///
///  @param allowHosts  (optional)
///
///  @param allowHostsRegexp  (optional)
///
///  @param filterMethods  (optional)
///
///  @param excludeAgentsRegexp  (optional)
///
///  @returns OAIOrgApacheSlingSecurityImplReferrerFilterInfo*
///
-(NSURLSessionTask*) orgApacheSlingSecurityImplReferrerFilterWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    allowEmpty: (NSNumber*) allowEmpty
    allowHosts: (NSArray<NSString*>*) allowHosts
    allowHostsRegexp: (NSArray<NSString*>*) allowHostsRegexp
    filterMethods: (NSArray<NSString*>*) filterMethods
    excludeAgentsRegexp: (NSArray<NSString*>*) excludeAgentsRegexp
    completionHandler: (void (^)(OAIOrgApacheSlingSecurityImplReferrerFilterInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (allowEmpty != nil) {
        queryParams[@"allow.empty"] = [allowEmpty isEqual:@(YES)] ? @"true" : @"false";
    }
    if (allowHosts != nil) {
        queryParams[@"allow.hosts"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowHosts format: @"multi"];
    }
    if (allowHostsRegexp != nil) {
        queryParams[@"allow.hosts.regexp"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: allowHostsRegexp format: @"multi"];
    }
    if (filterMethods != nil) {
        queryParams[@"filter.methods"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: filterMethods format: @"multi"];
    }
    if (excludeAgentsRegexp != nil) {
        queryParams[@"exclude.agents.regexp"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: excludeAgentsRegexp format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingSecurityImplReferrerFilterInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingSecurityImplReferrerFilterInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param userMapping  (optional)
///
///  @param userDefault  (optional)
///
///  @param userEnableDefaultMapping  (optional)
///
///  @param requireValidation  (optional)
///
///  @returns OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingServiceusermappingImplServiceUserMapperImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    userMapping: (NSArray<NSString*>*) userMapping
    userDefault: (NSString*) userDefault
    userEnableDefaultMapping: (NSNumber*) userEnableDefaultMapping
    requireValidation: (NSNumber*) requireValidation
    completionHandler: (void (^)(OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (userMapping != nil) {
        queryParams[@"user.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userMapping format: @"multi"];
    }
    if (userDefault != nil) {
        queryParams[@"user.default"] = userDefault;
    }
    if (userEnableDefaultMapping != nil) {
        queryParams[@"user.enable.default.mapping"] = [userEnableDefaultMapping isEqual:@(YES)] ? @"true" : @"false";
    }
    if (requireValidation != nil) {
        queryParams[@"require.validation"] = [requireValidation isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param serviceRanking  (optional)
///
///  @param userMapping  (optional)
///
///  @returns OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo*
///
-(NSURLSessionTask*) orgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    serviceRanking: (NSNumber*) serviceRanking
    userMapping: (NSArray<NSString*>*) userMapping
    completionHandler: (void (^)(OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (serviceRanking != nil) {
        queryParams[@"service.ranking"] = serviceRanking;
    }
    if (userMapping != nil) {
        queryParams[@"user.mapping"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: userMapping format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param aliases  (optional)
///
///  @param index  (optional)
///
///  @param indexFiles  (optional)
///
///  @param enableHtml  (optional)
///
///  @param enableJson  (optional)
///
///  @param enableTxt  (optional)
///
///  @param enableXml  (optional)
///
///  @param jsonMaximumresults  (optional)
///
///  @param ecmaSuport  (optional)
///
///  @returns OAIOrgApacheSlingServletsGetDefaultGetServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingServletsGetDefaultGetServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    aliases: (NSArray<NSString*>*) aliases
    index: (NSNumber*) index
    indexFiles: (NSArray<NSString*>*) indexFiles
    enableHtml: (NSNumber*) enableHtml
    enableJson: (NSNumber*) enableJson
    enableTxt: (NSNumber*) enableTxt
    enableXml: (NSNumber*) enableXml
    jsonMaximumresults: (NSNumber*) jsonMaximumresults
    ecmaSuport: (NSNumber*) ecmaSuport
    completionHandler: (void (^)(OAIOrgApacheSlingServletsGetDefaultGetServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (aliases != nil) {
        queryParams[@"aliases"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: aliases format: @"multi"];
    }
    if (index != nil) {
        queryParams[@"index"] = [index isEqual:@(YES)] ? @"true" : @"false";
    }
    if (indexFiles != nil) {
        queryParams[@"index.files"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: indexFiles format: @"multi"];
    }
    if (enableHtml != nil) {
        queryParams[@"enable.html"] = [enableHtml isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableJson != nil) {
        queryParams[@"enable.json"] = [enableJson isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableTxt != nil) {
        queryParams[@"enable.txt"] = [enableTxt isEqual:@(YES)] ? @"true" : @"false";
    }
    if (enableXml != nil) {
        queryParams[@"enable.xml"] = [enableXml isEqual:@(YES)] ? @"true" : @"false";
    }
    if (jsonMaximumresults != nil) {
        queryParams[@"json.maximumresults"] = jsonMaximumresults;
    }
    if (ecmaSuport != nil) {
        queryParams[@"ecmaSuport"] = [ecmaSuport isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServletsGetDefaultGetServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServletsGetDefaultGetServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingServletSelectors  (optional)
///
///  @param ecmaSuport  (optional)
///
///  @returns OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingServletsGetImplVersionVersionInfoServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingServletSelectors: (NSArray<NSString*>*) slingServletSelectors
    ecmaSuport: (NSNumber*) ecmaSuport
    completionHandler: (void (^)(OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingServletSelectors != nil) {
        queryParams[@"sling.servlet.selectors"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: slingServletSelectors format: @"multi"];
    }
    if (ecmaSuport != nil) {
        queryParams[@"ecmaSuport"] = [ecmaSuport isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServletsGetImplVersionVersionInfoServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param schedulerExpression  (optional)
///
///  @param schedulerConcurrent  (optional)
///
///  @param chunkCleanupAge  (optional)
///
///  @returns OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo*
///
-(NSURLSessionTask*) orgApacheSlingServletsPostImplHelperChunkCleanUpTaskWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    schedulerExpression: (NSString*) schedulerExpression
    schedulerConcurrent: (NSNumber*) schedulerConcurrent
    chunkCleanupAge: (NSNumber*) chunkCleanupAge
    completionHandler: (void (^)(OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (schedulerExpression != nil) {
        queryParams[@"scheduler.expression"] = schedulerExpression;
    }
    if (schedulerConcurrent != nil) {
        queryParams[@"scheduler.concurrent"] = [schedulerConcurrent isEqual:@(YES)] ? @"true" : @"false";
    }
    if (chunkCleanupAge != nil) {
        queryParams[@"chunk.cleanup.age"] = chunkCleanupAge;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param servletPostDateFormats  (optional)
///
///  @param servletPostNodeNameHints  (optional)
///
///  @param servletPostNodeNameMaxLength  (optional)
///
///  @param servletPostCheckinNewVersionableNodes  (optional)
///
///  @param servletPostAutoCheckout  (optional)
///
///  @param servletPostAutoCheckin  (optional)
///
///  @param servletPostIgnorePattern  (optional)
///
///  @returns OAIOrgApacheSlingServletsPostImplSlingPostServletInfo*
///
-(NSURLSessionTask*) orgApacheSlingServletsPostImplSlingPostServletWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    servletPostDateFormats: (NSArray<NSString*>*) servletPostDateFormats
    servletPostNodeNameHints: (NSArray<NSString*>*) servletPostNodeNameHints
    servletPostNodeNameMaxLength: (NSNumber*) servletPostNodeNameMaxLength
    servletPostCheckinNewVersionableNodes: (NSNumber*) servletPostCheckinNewVersionableNodes
    servletPostAutoCheckout: (NSNumber*) servletPostAutoCheckout
    servletPostAutoCheckin: (NSNumber*) servletPostAutoCheckin
    servletPostIgnorePattern: (NSString*) servletPostIgnorePattern
    completionHandler: (void (^)(OAIOrgApacheSlingServletsPostImplSlingPostServletInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (servletPostDateFormats != nil) {
        queryParams[@"servlet.post.dateFormats"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: servletPostDateFormats format: @"multi"];
    }
    if (servletPostNodeNameHints != nil) {
        queryParams[@"servlet.post.nodeNameHints"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: servletPostNodeNameHints format: @"multi"];
    }
    if (servletPostNodeNameMaxLength != nil) {
        queryParams[@"servlet.post.nodeNameMaxLength"] = servletPostNodeNameMaxLength;
    }
    if (servletPostCheckinNewVersionableNodes != nil) {
        queryParams[@"servlet.post.checkinNewVersionableNodes"] = [servletPostCheckinNewVersionableNodes isEqual:@(YES)] ? @"true" : @"false";
    }
    if (servletPostAutoCheckout != nil) {
        queryParams[@"servlet.post.autoCheckout"] = [servletPostAutoCheckout isEqual:@(YES)] ? @"true" : @"false";
    }
    if (servletPostAutoCheckin != nil) {
        queryParams[@"servlet.post.autoCheckin"] = [servletPostAutoCheckin isEqual:@(YES)] ? @"true" : @"false";
    }
    if (servletPostIgnorePattern != nil) {
        queryParams[@"servlet.post.ignorePattern"] = servletPostIgnorePattern;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServletsPostImplSlingPostServletInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServletsPostImplSlingPostServletInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param servletresolverServletRoot  (optional)
///
///  @param servletresolverCacheSize  (optional)
///
///  @param servletresolverPaths  (optional)
///
///  @param servletresolverDefaultExtensions  (optional)
///
///  @returns OAIOrgApacheSlingServletsResolverSlingServletResolverInfo*
///
-(NSURLSessionTask*) orgApacheSlingServletsResolverSlingServletResolverWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    servletresolverServletRoot: (NSString*) servletresolverServletRoot
    servletresolverCacheSize: (NSNumber*) servletresolverCacheSize
    servletresolverPaths: (NSArray<NSString*>*) servletresolverPaths
    servletresolverDefaultExtensions: (NSArray<NSString*>*) servletresolverDefaultExtensions
    completionHandler: (void (^)(OAIOrgApacheSlingServletsResolverSlingServletResolverInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (servletresolverServletRoot != nil) {
        queryParams[@"servletresolver.servletRoot"] = servletresolverServletRoot;
    }
    if (servletresolverCacheSize != nil) {
        queryParams[@"servletresolver.cacheSize"] = servletresolverCacheSize;
    }
    if (servletresolverPaths != nil) {
        queryParams[@"servletresolver.paths"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: servletresolverPaths format: @"multi"];
    }
    if (servletresolverDefaultExtensions != nil) {
        queryParams[@"servletresolver.defaultExtensions"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: servletresolverDefaultExtensions format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingServletsResolverSlingServletResolverInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingServletsResolverSlingServletResolverInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param slingName  (optional)
///
///  @param slingDescription  (optional)
///
///  @returns OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingSettingsImplSlingSettingsServiceImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    slingName: (NSString*) slingName
    slingDescription: (NSString*) slingDescription
    completionHandler: (void (^)(OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (slingName != nil) {
        queryParams[@"sling.name"] = slingName;
    }
    if (slingDescription != nil) {
        queryParams[@"sling.description"] = slingDescription;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingSettingsImplSlingSettingsServiceImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param activeByDefault  (optional)
///
///  @param defaultMessage  (optional)
///
///  @returns OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingStartupfilterImplStartupFilterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    activeByDefault: (NSNumber*) activeByDefault
    defaultMessage: (NSString*) defaultMessage
    completionHandler: (void (^)(OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (activeByDefault != nil) {
        queryParams[@"active.by.default"] = [activeByDefault isEqual:@(YES)] ? @"true" : @"false";
    }
    if (defaultMessage != nil) {
        queryParams[@"default.message"] = defaultMessage;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingStartupfilterImplStartupFilterImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param tenantRoot  (optional)
///
///  @param tenantPathMatcher  (optional)
///
///  @returns OAIOrgApacheSlingTenantInternalTenantProviderImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingTenantInternalTenantProviderImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    tenantRoot: (NSString*) tenantRoot
    tenantPathMatcher: (NSArray<NSString*>*) tenantPathMatcher
    completionHandler: (void (^)(OAIOrgApacheSlingTenantInternalTenantProviderImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (tenantRoot != nil) {
        queryParams[@"tenant.root"] = tenantRoot;
    }
    if (tenantPathMatcher != nil) {
        queryParams[@"tenant.path.matcher"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: tenantPathMatcher format: @"multi"];
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingTenantInternalTenantProviderImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingTenantInternalTenantProviderImplInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param tracerSets  (optional)
///
///  @param enabled  (optional)
///
///  @param servletEnabled  (optional)
///
///  @param recordingCacheSizeInMB  (optional)
///
///  @param recordingCacheDurationInSecs  (optional)
///
///  @param recordingCompressionEnabled  (optional)
///
///  @param gzipResponse  (optional)
///
///  @returns OAIOrgApacheSlingTracerInternalLogTracerInfo*
///
-(NSURLSessionTask*) orgApacheSlingTracerInternalLogTracerWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    tracerSets: (NSArray<NSString*>*) tracerSets
    enabled: (NSNumber*) enabled
    servletEnabled: (NSNumber*) servletEnabled
    recordingCacheSizeInMB: (NSNumber*) recordingCacheSizeInMB
    recordingCacheDurationInSecs: (NSNumber*) recordingCacheDurationInSecs
    recordingCompressionEnabled: (NSNumber*) recordingCompressionEnabled
    gzipResponse: (NSNumber*) gzipResponse
    completionHandler: (void (^)(OAIOrgApacheSlingTracerInternalLogTracerInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (tracerSets != nil) {
        queryParams[@"tracerSets"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: tracerSets format: @"multi"];
    }
    if (enabled != nil) {
        queryParams[@"enabled"] = [enabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (servletEnabled != nil) {
        queryParams[@"servletEnabled"] = [servletEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (recordingCacheSizeInMB != nil) {
        queryParams[@"recordingCacheSizeInMB"] = recordingCacheSizeInMB;
    }
    if (recordingCacheDurationInSecs != nil) {
        queryParams[@"recordingCacheDurationInSecs"] = recordingCacheDurationInSecs;
    }
    if (recordingCompressionEnabled != nil) {
        queryParams[@"recordingCompressionEnabled"] = [recordingCompressionEnabled isEqual:@(YES)] ? @"true" : @"false";
    }
    if (gzipResponse != nil) {
        queryParams[@"gzipResponse"] = [gzipResponse isEqual:@(YES)] ? @"true" : @"false";
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingTracerInternalLogTracerInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingTracerInternalLogTracerInfo*)data, error);
                                }
                            }];
}

///
/// 
/// 
///  @param post  (optional)
///
///  @param apply  (optional)
///
///  @param delete  (optional)
///
///  @param action  (optional)
///
///  @param location  (optional)
///
///  @param propertylist  (optional)
///
///  @param policyPath  (optional)
///
///  @returns OAIOrgApacheSlingXssImplXSSFilterImplInfo*
///
-(NSURLSessionTask*) orgApacheSlingXssImplXSSFilterImplWithPost: (NSNumber*) post
    apply: (NSNumber*) apply
    delete: (NSNumber*) delete
    action: (NSString*) action
    location: (NSString*) location
    propertylist: (NSArray<NSString*>*) propertylist
    policyPath: (NSString*) policyPath
    completionHandler: (void (^)(OAIOrgApacheSlingXssImplXSSFilterImplInfo* output, NSError* error)) handler {
    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    if (post != nil) {
        queryParams[@"post"] = [post isEqual:@(YES)] ? @"true" : @"false";
    }
    if (apply != nil) {
        queryParams[@"apply"] = [apply isEqual:@(YES)] ? @"true" : @"false";
    }
    if (delete != nil) {
        queryParams[@"delete"] = [delete isEqual:@(YES)] ? @"true" : @"false";
    }
    if (action != nil) {
        queryParams[@"action"] = action;
    }
    if (location != nil) {
        queryParams[@"$location"] = location;
    }
    if (propertylist != nil) {
        queryParams[@"propertylist"] = [[OAIQueryParamCollection alloc] initWithValuesAndFormat: propertylist format: @"csv"];
    }
    if (policyPath != nil) {
        queryParams[@"policyPath"] = policyPath;
    }
    NSMutableDictionary* headerParams = [NSMutableDictionary dictionaryWithDictionary:self.apiClient.configuration.defaultHeaders];
    [headerParams addEntriesFromDictionary:self.defaultHeaders];
    // HTTP header `Accept`
    NSString *acceptHeader = [self.apiClient.sanitizer selectHeaderAccept:@[@"application/json", @"text/plain"]];
    if(acceptHeader.length > 0) {
        headerParams[@"Accept"] = acceptHeader;
    }

    // response content type
    NSString *responseContentType = [[acceptHeader componentsSeparatedByString:@", "] firstObject] ?: @"";

    // request content type
    NSString *requestContentType = [self.apiClient.sanitizer selectHeaderContentType:@[]];

    // Authentication setting
    NSArray *authSettings = @[@"aemAuth"];

    id bodyParam = nil;
    NSMutableDictionary *formParams = [[NSMutableDictionary alloc] init];
    NSMutableDictionary *localVarFiles = [[NSMutableDictionary alloc] init];

    return [self.apiClient requestWithPath: resourcePath
                                    method: @"POST"
                                pathParams: pathParams
                               queryParams: queryParams
                                formParams: formParams
                                     files: localVarFiles
                                      body: bodyParam
                              headerParams: headerParams
                              authSettings: authSettings
                        requestContentType: requestContentType
                       responseContentType: responseContentType
                              responseType: @"OAIOrgApacheSlingXssImplXSSFilterImplInfo*"
                           completionBlock: ^(id data, NSError *error) {
                                if(handler) {
                                    handler((OAIOrgApacheSlingXssImplXSSFilterImplInfo*)data, error);
                                }
                            }];
}



@end
