//
// OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public class OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiProperties: JSONEncodable {
    public var providerName: ConfigNodePropertyString?
    public var hostName: ConfigNodePropertyString?
    public var hostPort: ConfigNodePropertyInteger?
    public var hostSsl: ConfigNodePropertyBoolean?
    public var hostTls: ConfigNodePropertyBoolean?
    public var hostNoCertCheck: ConfigNodePropertyBoolean?
    public var bindDn: ConfigNodePropertyString?
    public var bindPassword: ConfigNodePropertyString?
    public var searchTimeout: ConfigNodePropertyString?
    public var adminPoolMaxActive: ConfigNodePropertyInteger?
    public var adminPoolLookupOnValidate: ConfigNodePropertyBoolean?
    public var userPoolMaxActive: ConfigNodePropertyInteger?
    public var userPoolLookupOnValidate: ConfigNodePropertyBoolean?
    public var userBaseDN: ConfigNodePropertyString?
    public var userObjectclass: ConfigNodePropertyArray?
    public var userIdAttribute: ConfigNodePropertyString?
    public var userExtraFilter: ConfigNodePropertyString?
    public var userMakeDnPath: ConfigNodePropertyBoolean?
    public var groupBaseDN: ConfigNodePropertyString?
    public var groupObjectclass: ConfigNodePropertyArray?
    public var groupNameAttribute: ConfigNodePropertyString?
    public var groupExtraFilter: ConfigNodePropertyString?
    public var groupMakeDnPath: ConfigNodePropertyBoolean?
    public var groupMemberAttribute: ConfigNodePropertyString?
    public var useUidForExtId: ConfigNodePropertyBoolean?
    public var customattributes: ConfigNodePropertyArray?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["provider.name"] = self.providerName?.encodeToJSON()
        nillableDictionary["host.name"] = self.hostName?.encodeToJSON()
        nillableDictionary["host.port"] = self.hostPort?.encodeToJSON()
        nillableDictionary["host.ssl"] = self.hostSsl?.encodeToJSON()
        nillableDictionary["host.tls"] = self.hostTls?.encodeToJSON()
        nillableDictionary["host.noCertCheck"] = self.hostNoCertCheck?.encodeToJSON()
        nillableDictionary["bind.dn"] = self.bindDn?.encodeToJSON()
        nillableDictionary["bind.password"] = self.bindPassword?.encodeToJSON()
        nillableDictionary["searchTimeout"] = self.searchTimeout?.encodeToJSON()
        nillableDictionary["adminPool.maxActive"] = self.adminPoolMaxActive?.encodeToJSON()
        nillableDictionary["adminPool.lookupOnValidate"] = self.adminPoolLookupOnValidate?.encodeToJSON()
        nillableDictionary["userPool.maxActive"] = self.userPoolMaxActive?.encodeToJSON()
        nillableDictionary["userPool.lookupOnValidate"] = self.userPoolLookupOnValidate?.encodeToJSON()
        nillableDictionary["user.baseDN"] = self.userBaseDN?.encodeToJSON()
        nillableDictionary["user.objectclass"] = self.userObjectclass?.encodeToJSON()
        nillableDictionary["user.idAttribute"] = self.userIdAttribute?.encodeToJSON()
        nillableDictionary["user.extraFilter"] = self.userExtraFilter?.encodeToJSON()
        nillableDictionary["user.makeDnPath"] = self.userMakeDnPath?.encodeToJSON()
        nillableDictionary["group.baseDN"] = self.groupBaseDN?.encodeToJSON()
        nillableDictionary["group.objectclass"] = self.groupObjectclass?.encodeToJSON()
        nillableDictionary["group.nameAttribute"] = self.groupNameAttribute?.encodeToJSON()
        nillableDictionary["group.extraFilter"] = self.groupExtraFilter?.encodeToJSON()
        nillableDictionary["group.makeDnPath"] = self.groupMakeDnPath?.encodeToJSON()
        nillableDictionary["group.memberAttribute"] = self.groupMemberAttribute?.encodeToJSON()
        nillableDictionary["useUidForExtId"] = self.useUidForExtId?.encodeToJSON()
        nillableDictionary["customattributes"] = self.customattributes?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
