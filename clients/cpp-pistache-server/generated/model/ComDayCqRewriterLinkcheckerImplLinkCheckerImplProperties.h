/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties.h
 *
 * 
 */

#ifndef ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties_H_
#define ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties
    : public ModelBase
{
public:
    ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties();
    virtual ~ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getSchedulerPeriod() const;
    void setSchedulerPeriod(ConfigNodePropertyInteger const& value);
    bool schedulerPeriodIsSet() const;
    void unsetScheduler_period();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getSchedulerConcurrent() const;
    void setSchedulerConcurrent(ConfigNodePropertyBoolean const& value);
    bool schedulerConcurrentIsSet() const;
    void unsetScheduler_concurrent();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getServiceBadLinkToleranceInterval() const;
    void setServiceBadLinkToleranceInterval(ConfigNodePropertyInteger const& value);
    bool serviceBadLinkToleranceIntervalIsSet() const;
    void unsetService_bad_link_tolerance_interval();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getServiceCheckOverridePatterns() const;
    void setServiceCheckOverridePatterns(ConfigNodePropertyArray const& value);
    bool serviceCheckOverridePatternsIsSet() const;
    void unsetService_check_override_patterns();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getServiceCacheBrokenInternalLinks() const;
    void setServiceCacheBrokenInternalLinks(ConfigNodePropertyBoolean const& value);
    bool serviceCacheBrokenInternalLinksIsSet() const;
    void unsetService_cache_broken_internal_links();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getServiceSpecialLinkPrefix() const;
    void setServiceSpecialLinkPrefix(ConfigNodePropertyArray const& value);
    bool serviceSpecialLinkPrefixIsSet() const;
    void unsetService_special_link_prefix();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyArray getServiceSpecialLinkPatterns() const;
    void setServiceSpecialLinkPatterns(ConfigNodePropertyArray const& value);
    bool serviceSpecialLinkPatternsIsSet() const;
    void unsetService_special_link_patterns();

protected:
    ConfigNodePropertyInteger m_Scheduler_period;
    bool m_Scheduler_periodIsSet;
    ConfigNodePropertyBoolean m_Scheduler_concurrent;
    bool m_Scheduler_concurrentIsSet;
    ConfigNodePropertyInteger m_Service_bad_link_tolerance_interval;
    bool m_Service_bad_link_tolerance_intervalIsSet;
    ConfigNodePropertyArray m_Service_check_override_patterns;
    bool m_Service_check_override_patternsIsSet;
    ConfigNodePropertyBoolean m_Service_cache_broken_internal_links;
    bool m_Service_cache_broken_internal_linksIsSet;
    ConfigNodePropertyArray m_Service_special_link_prefix;
    bool m_Service_special_link_prefixIsSet;
    ConfigNodePropertyArray m_Service_special_link_patterns;
    bool m_Service_special_link_patternsIsSet;
};

}
}
}
}

#endif /* ComDayCqRewriterLinkcheckerImplLinkCheckerImplProperties_H_ */
