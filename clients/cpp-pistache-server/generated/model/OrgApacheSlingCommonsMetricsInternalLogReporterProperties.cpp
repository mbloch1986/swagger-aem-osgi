/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCommonsMetricsInternalLogReporterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsMetricsInternalLogReporterProperties::OrgApacheSlingCommonsMetricsInternalLogReporterProperties()
{
    m_PeriodIsSet = false;
    m_TimeUnitIsSet = false;
    m_LevelIsSet = false;
    m_LoggerNameIsSet = false;
    m_PrefixIsSet = false;
    m_PatternIsSet = false;
    m_RegistryNameIsSet = false;
    
}

OrgApacheSlingCommonsMetricsInternalLogReporterProperties::~OrgApacheSlingCommonsMetricsInternalLogReporterProperties()
{
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCommonsMetricsInternalLogReporterProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PeriodIsSet)
    {
        val["period"] = ModelBase::toJson(m_Period);
    }
    if(m_TimeUnitIsSet)
    {
        val["timeUnit"] = ModelBase::toJson(m_TimeUnit);
    }
    if(m_LevelIsSet)
    {
        val["level"] = ModelBase::toJson(m_Level);
    }
    if(m_LoggerNameIsSet)
    {
        val["loggerName"] = ModelBase::toJson(m_LoggerName);
    }
    if(m_PrefixIsSet)
    {
        val["prefix"] = ModelBase::toJson(m_Prefix);
    }
    if(m_PatternIsSet)
    {
        val["pattern"] = ModelBase::toJson(m_Pattern);
    }
    if(m_RegistryNameIsSet)
    {
        val["registryName"] = ModelBase::toJson(m_RegistryName);
    }
    

    return val;
}

void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::fromJson(nlohmann::json& val)
{
    if(val.find("period") != val.end())
    {
        if(!val["period"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["period"]);
            setPeriod( newItem );
        }
        
    }
    if(val.find("timeUnit") != val.end())
    {
        if(!val["timeUnit"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["timeUnit"]);
            setTimeUnit( newItem );
        }
        
    }
    if(val.find("level") != val.end())
    {
        if(!val["level"].is_null())
        {
            ConfigNodePropertyDropDown newItem;
            newItem.fromJson(val["level"]);
            setLevel( newItem );
        }
        
    }
    if(val.find("loggerName") != val.end())
    {
        if(!val["loggerName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["loggerName"]);
            setLoggerName( newItem );
        }
        
    }
    if(val.find("prefix") != val.end())
    {
        if(!val["prefix"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["prefix"]);
            setPrefix( newItem );
        }
        
    }
    if(val.find("pattern") != val.end())
    {
        if(!val["pattern"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["pattern"]);
            setPattern( newItem );
        }
        
    }
    if(val.find("registryName") != val.end())
    {
        if(!val["registryName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["registryName"]);
            setRegistryName( newItem );
        }
        
    }
    
}


ConfigNodePropertyInteger OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPeriod() const
{
    return m_Period;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPeriod(ConfigNodePropertyInteger const& value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::periodIsSet() const
{
    return m_PeriodIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPeriod()
{
    m_PeriodIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getTimeUnit() const
{
    return m_TimeUnit;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setTimeUnit(ConfigNodePropertyDropDown const& value)
{
    m_TimeUnit = value;
    m_TimeUnitIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::timeUnitIsSet() const
{
    return m_TimeUnitIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetTimeUnit()
{
    m_TimeUnitIsSet = false;
}
ConfigNodePropertyDropDown OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLevel() const
{
    return m_Level;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLevel(ConfigNodePropertyDropDown const& value)
{
    m_Level = value;
    m_LevelIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::levelIsSet() const
{
    return m_LevelIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetLevel()
{
    m_LevelIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getLoggerName() const
{
    return m_LoggerName;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setLoggerName(ConfigNodePropertyString const& value)
{
    m_LoggerName = value;
    m_LoggerNameIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::loggerNameIsSet() const
{
    return m_LoggerNameIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetLoggerName()
{
    m_LoggerNameIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPrefix() const
{
    return m_Prefix;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPrefix(ConfigNodePropertyString const& value)
{
    m_Prefix = value;
    m_PrefixIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::prefixIsSet() const
{
    return m_PrefixIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPrefix()
{
    m_PrefixIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getPattern() const
{
    return m_Pattern;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setPattern(ConfigNodePropertyString const& value)
{
    m_Pattern = value;
    m_PatternIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::patternIsSet() const
{
    return m_PatternIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetPattern()
{
    m_PatternIsSet = false;
}
ConfigNodePropertyString OrgApacheSlingCommonsMetricsInternalLogReporterProperties::getRegistryName() const
{
    return m_RegistryName;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::setRegistryName(ConfigNodePropertyString const& value)
{
    m_RegistryName = value;
    m_RegistryNameIsSet = true;
}
bool OrgApacheSlingCommonsMetricsInternalLogReporterProperties::registryNameIsSet() const
{
    return m_RegistryNameIsSet;
}
void OrgApacheSlingCommonsMetricsInternalLogReporterProperties::unsetRegistryName()
{
    m_RegistryNameIsSet = false;
}

}
}
}
}

