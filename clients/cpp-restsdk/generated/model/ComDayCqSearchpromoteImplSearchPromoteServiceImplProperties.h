/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties
    : public ModelBase
{
public:
    ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties();
    virtual ~ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqSearchpromoteConfigurationServerUri() const;
    bool cqSearchpromoteConfigurationServerUriIsSet() const;
    void unsetCq_searchpromote_configuration_server_uri();
    void setCqSearchpromoteConfigurationServerUri(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getCqSearchpromoteConfigurationEnvironment() const;
    bool cqSearchpromoteConfigurationEnvironmentIsSet() const;
    void unsetCq_searchpromote_configuration_environment();
    void setCqSearchpromoteConfigurationEnvironment(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectionTimeout() const;
    bool connectionTimeoutIsSet() const;
    void unsetConnection_timeout();
    void setConnectionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSocketTimeout() const;
    bool socketTimeoutIsSet() const;
    void unsetSocket_timeout();
    void setSocketTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Cq_searchpromote_configuration_server_uri;
    bool m_Cq_searchpromote_configuration_server_uriIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Cq_searchpromote_configuration_environment;
    bool m_Cq_searchpromote_configuration_environmentIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Connection_timeout;
    bool m_Connection_timeoutIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Socket_timeout;
    bool m_Socket_timeoutIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqSearchpromoteImplSearchPromoteServiceImplProperties_H_ */
