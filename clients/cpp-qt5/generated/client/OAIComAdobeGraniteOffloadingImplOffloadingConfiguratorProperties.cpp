/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties() {
    init();
}

OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::~OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::init() {
    offloading_transporter = new OAIConfigNodePropertyString();
    m_offloading_transporter_isSet = false;
    offloading_cleanup_payload = new OAIConfigNodePropertyBoolean();
    m_offloading_cleanup_payload_isSet = false;
}

void
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::cleanup() {
    if(offloading_transporter != nullptr) { 
        delete offloading_transporter;
    }
    if(offloading_cleanup_payload != nullptr) { 
        delete offloading_cleanup_payload;
    }
}

OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties*
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&offloading_transporter, pJson["offloading.transporter"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&offloading_cleanup_payload, pJson["offloading.cleanup.payload"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
}

QString
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::asJsonObject() {
    QJsonObject obj;
    if((offloading_transporter != nullptr) && (offloading_transporter->isSet())){
        toJsonValue(QString("offloading.transporter"), offloading_transporter, obj, QString("OAIConfigNodePropertyString"));
    }
    if((offloading_cleanup_payload != nullptr) && (offloading_cleanup_payload->isSet())){
        toJsonValue(QString("offloading.cleanup.payload"), offloading_cleanup_payload, obj, QString("OAIConfigNodePropertyBoolean"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingTransporter() {
    return offloading_transporter;
}
void
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingTransporter(OAIConfigNodePropertyString* offloading_transporter) {
    this->offloading_transporter = offloading_transporter;
    this->m_offloading_transporter_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::getOffloadingCleanupPayload() {
    return offloading_cleanup_payload;
}
void
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::setOffloadingCleanupPayload(OAIConfigNodePropertyBoolean* offloading_cleanup_payload) {
    this->offloading_cleanup_payload = offloading_cleanup_payload;
    this->m_offloading_cleanup_payload_isSet = true;
}


bool
OAIComAdobeGraniteOffloadingImplOffloadingConfiguratorProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(offloading_transporter != nullptr && offloading_transporter->isSet()){ isObjectUpdated = true; break;}
        if(offloading_cleanup_payload != nullptr && offloading_cleanup_payload->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

