/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties() {
    init();
}

OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::~OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::init() {
    scheduler_period = new OAIConfigNodePropertyInteger();
    m_scheduler_period_isSet = false;
    scheduler_run_on = new OAIConfigNodePropertyDropDown();
    m_scheduler_run_on_isSet = false;
    granite_threaddump_enabled = new OAIConfigNodePropertyBoolean();
    m_granite_threaddump_enabled_isSet = false;
    granite_threaddump_dumps_per_file = new OAIConfigNodePropertyInteger();
    m_granite_threaddump_dumps_per_file_isSet = false;
    granite_threaddump_enable_gzip_compression = new OAIConfigNodePropertyBoolean();
    m_granite_threaddump_enable_gzip_compression_isSet = false;
    granite_threaddump_enable_directories_compression = new OAIConfigNodePropertyBoolean();
    m_granite_threaddump_enable_directories_compression_isSet = false;
    granite_threaddump_enable_j_stack = new OAIConfigNodePropertyBoolean();
    m_granite_threaddump_enable_j_stack_isSet = false;
    granite_threaddump_max_backup_days = new OAIConfigNodePropertyInteger();
    m_granite_threaddump_max_backup_days_isSet = false;
    granite_threaddump_backup_clean_trigger = new OAIConfigNodePropertyString();
    m_granite_threaddump_backup_clean_trigger_isSet = false;
}

void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::cleanup() {
    if(scheduler_period != nullptr) { 
        delete scheduler_period;
    }
    if(scheduler_run_on != nullptr) { 
        delete scheduler_run_on;
    }
    if(granite_threaddump_enabled != nullptr) { 
        delete granite_threaddump_enabled;
    }
    if(granite_threaddump_dumps_per_file != nullptr) { 
        delete granite_threaddump_dumps_per_file;
    }
    if(granite_threaddump_enable_gzip_compression != nullptr) { 
        delete granite_threaddump_enable_gzip_compression;
    }
    if(granite_threaddump_enable_directories_compression != nullptr) { 
        delete granite_threaddump_enable_directories_compression;
    }
    if(granite_threaddump_enable_j_stack != nullptr) { 
        delete granite_threaddump_enable_j_stack;
    }
    if(granite_threaddump_max_backup_days != nullptr) { 
        delete granite_threaddump_max_backup_days;
    }
    if(granite_threaddump_backup_clean_trigger != nullptr) { 
        delete granite_threaddump_backup_clean_trigger;
    }
}

OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_period, pJson["scheduler.period"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&scheduler_run_on, pJson["scheduler.runOn"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
    ::OpenAPI::setValue(&granite_threaddump_enabled, pJson["granite.threaddump.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_threaddump_dumps_per_file, pJson["granite.threaddump.dumpsPerFile"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&granite_threaddump_enable_gzip_compression, pJson["granite.threaddump.enableGzipCompression"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_threaddump_enable_directories_compression, pJson["granite.threaddump.enableDirectoriesCompression"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_threaddump_enable_j_stack, pJson["granite.threaddump.enableJStack"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&granite_threaddump_max_backup_days, pJson["granite.threaddump.maxBackupDays"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&granite_threaddump_backup_clean_trigger, pJson["granite.threaddump.backupCleanTrigger"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_period != nullptr) && (scheduler_period->isSet())){
        toJsonValue(QString("scheduler.period"), scheduler_period, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((scheduler_run_on != nullptr) && (scheduler_run_on->isSet())){
        toJsonValue(QString("scheduler.runOn"), scheduler_run_on, obj, QString("OAIConfigNodePropertyDropDown"));
    }
    if((granite_threaddump_enabled != nullptr) && (granite_threaddump_enabled->isSet())){
        toJsonValue(QString("granite.threaddump.enabled"), granite_threaddump_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_threaddump_dumps_per_file != nullptr) && (granite_threaddump_dumps_per_file->isSet())){
        toJsonValue(QString("granite.threaddump.dumpsPerFile"), granite_threaddump_dumps_per_file, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((granite_threaddump_enable_gzip_compression != nullptr) && (granite_threaddump_enable_gzip_compression->isSet())){
        toJsonValue(QString("granite.threaddump.enableGzipCompression"), granite_threaddump_enable_gzip_compression, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_threaddump_enable_directories_compression != nullptr) && (granite_threaddump_enable_directories_compression->isSet())){
        toJsonValue(QString("granite.threaddump.enableDirectoriesCompression"), granite_threaddump_enable_directories_compression, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_threaddump_enable_j_stack != nullptr) && (granite_threaddump_enable_j_stack->isSet())){
        toJsonValue(QString("granite.threaddump.enableJStack"), granite_threaddump_enable_j_stack, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((granite_threaddump_max_backup_days != nullptr) && (granite_threaddump_max_backup_days->isSet())){
        toJsonValue(QString("granite.threaddump.maxBackupDays"), granite_threaddump_max_backup_days, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((granite_threaddump_backup_clean_trigger != nullptr) && (granite_threaddump_backup_clean_trigger->isSet())){
        toJsonValue(QString("granite.threaddump.backupCleanTrigger"), granite_threaddump_backup_clean_trigger, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerPeriod() {
    return scheduler_period;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerPeriod(OAIConfigNodePropertyInteger* scheduler_period) {
    this->scheduler_period = scheduler_period;
    this->m_scheduler_period_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getSchedulerRunOn() {
    return scheduler_run_on;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setSchedulerRunOn(OAIConfigNodePropertyDropDown* scheduler_run_on) {
    this->scheduler_run_on = scheduler_run_on;
    this->m_scheduler_run_on_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnabled() {
    return granite_threaddump_enabled;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnabled(OAIConfigNodePropertyBoolean* granite_threaddump_enabled) {
    this->granite_threaddump_enabled = granite_threaddump_enabled;
    this->m_granite_threaddump_enabled_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpDumpsPerFile() {
    return granite_threaddump_dumps_per_file;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpDumpsPerFile(OAIConfigNodePropertyInteger* granite_threaddump_dumps_per_file) {
    this->granite_threaddump_dumps_per_file = granite_threaddump_dumps_per_file;
    this->m_granite_threaddump_dumps_per_file_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableGzipCompression() {
    return granite_threaddump_enable_gzip_compression;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableGzipCompression(OAIConfigNodePropertyBoolean* granite_threaddump_enable_gzip_compression) {
    this->granite_threaddump_enable_gzip_compression = granite_threaddump_enable_gzip_compression;
    this->m_granite_threaddump_enable_gzip_compression_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableDirectoriesCompression() {
    return granite_threaddump_enable_directories_compression;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableDirectoriesCompression(OAIConfigNodePropertyBoolean* granite_threaddump_enable_directories_compression) {
    this->granite_threaddump_enable_directories_compression = granite_threaddump_enable_directories_compression;
    this->m_granite_threaddump_enable_directories_compression_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpEnableJStack() {
    return granite_threaddump_enable_j_stack;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpEnableJStack(OAIConfigNodePropertyBoolean* granite_threaddump_enable_j_stack) {
    this->granite_threaddump_enable_j_stack = granite_threaddump_enable_j_stack;
    this->m_granite_threaddump_enable_j_stack_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpMaxBackupDays() {
    return granite_threaddump_max_backup_days;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpMaxBackupDays(OAIConfigNodePropertyInteger* granite_threaddump_max_backup_days) {
    this->granite_threaddump_max_backup_days = granite_threaddump_max_backup_days;
    this->m_granite_threaddump_max_backup_days_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::getGraniteThreaddumpBackupCleanTrigger() {
    return granite_threaddump_backup_clean_trigger;
}
void
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::setGraniteThreaddumpBackupCleanTrigger(OAIConfigNodePropertyString* granite_threaddump_backup_clean_trigger) {
    this->granite_threaddump_backup_clean_trigger = granite_threaddump_backup_clean_trigger;
    this->m_granite_threaddump_backup_clean_trigger_isSet = true;
}


bool
OAIComAdobeGraniteThreaddumpThreadDumpCollectorProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_period != nullptr && scheduler_period->isSet()){ isObjectUpdated = true; break;}
        if(scheduler_run_on != nullptr && scheduler_run_on->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_enabled != nullptr && granite_threaddump_enabled->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_dumps_per_file != nullptr && granite_threaddump_dumps_per_file->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_enable_gzip_compression != nullptr && granite_threaddump_enable_gzip_compression->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_enable_directories_compression != nullptr && granite_threaddump_enable_directories_compression->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_enable_j_stack != nullptr && granite_threaddump_enable_j_stack->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_max_backup_days != nullptr && granite_threaddump_max_backup_days->isSet()){ isObjectUpdated = true; break;}
        if(granite_threaddump_backup_clean_trigger != nullptr && granite_threaddump_backup_clean_trigger->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

