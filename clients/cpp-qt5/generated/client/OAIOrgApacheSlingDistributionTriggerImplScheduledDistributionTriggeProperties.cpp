/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties() {
    init();
}

OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::~OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::init() {
    name = new OAIConfigNodePropertyString();
    m_name_isSet = false;
    path = new OAIConfigNodePropertyString();
    m_path_isSet = false;
    seconds = new OAIConfigNodePropertyString();
    m_seconds_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
}

void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(path != nullptr) { 
        delete path;
    }
    if(seconds != nullptr) { 
        delete seconds;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
}

OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties*
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&path, pJson["path"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&seconds, pJson["seconds"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::asJsonObject() {
    QJsonObject obj;
    if((name != nullptr) && (name->isSet())){
        toJsonValue(QString("name"), name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((path != nullptr) && (path->isSet())){
        toJsonValue(QString("path"), path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((seconds != nullptr) && (seconds->isSet())){
        toJsonValue(QString("seconds"), seconds, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::getName() {
    return name;
}
void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::setName(OAIConfigNodePropertyString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::getPath() {
    return path;
}
void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::setPath(OAIConfigNodePropertyString* path) {
    this->path = path;
    this->m_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::getSeconds() {
    return seconds;
}
void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::setSeconds(OAIConfigNodePropertyString* seconds) {
    this->seconds = seconds;
    this->m_seconds_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::getServiceName() {
    return service_name;
}
void
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}


bool
OAIOrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && name->isSet()){ isObjectUpdated = true; break;}
        if(path != nullptr && path->isSet()){ isObjectUpdated = true; break;}
        if(seconds != nullptr && seconds->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

