/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqDamCommonsHandlerStandardImageHandlerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqDamCommonsHandlerStandardImageHandlerProperties::ComDayCqDamCommonsHandlerStandardImageHandlerProperties()
{
    m_Large_file_thresholdIsSet = false;
    m_Large_comment_thresholdIsSet = false;
    m_Cq_dam_enable_ext_meta_extractionIsSet = false;
}

ComDayCqDamCommonsHandlerStandardImageHandlerProperties::~ComDayCqDamCommonsHandlerStandardImageHandlerProperties()
{
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqDamCommonsHandlerStandardImageHandlerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Large_file_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("large_file_threshold")] = ModelBase::toJson(m_Large_file_threshold);
    }
    if(m_Large_comment_thresholdIsSet)
    {
        val[utility::conversions::to_string_t("large_comment_threshold")] = ModelBase::toJson(m_Large_comment_threshold);
    }
    if(m_Cq_dam_enable_ext_meta_extractionIsSet)
    {
        val[utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")] = ModelBase::toJson(m_Cq_dam_enable_ext_meta_extraction);
    }

    return val;
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("large_file_threshold")))
    {
        if(!val[utility::conversions::to_string_t("large_file_threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("large_file_threshold")]);
            setLargeFileThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("large_comment_threshold")))
    {
        if(!val[utility::conversions::to_string_t("large_comment_threshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("large_comment_threshold")]);
            setLargeCommentThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")))
    {
        if(!val[utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")]);
            setCqDamEnableExtMetaExtraction( newItem );
        }
    }
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Large_file_thresholdIsSet)
    {
        if (m_Large_file_threshold.get())
        {
            m_Large_file_threshold->toMultipart(multipart, utility::conversions::to_string_t("large_file_threshold."));
        }
    }
    if(m_Large_comment_thresholdIsSet)
    {
        if (m_Large_comment_threshold.get())
        {
            m_Large_comment_threshold->toMultipart(multipart, utility::conversions::to_string_t("large_comment_threshold."));
        }
    }
    if(m_Cq_dam_enable_ext_meta_extractionIsSet)
    {
        if (m_Cq_dam_enable_ext_meta_extraction.get())
        {
            m_Cq_dam_enable_ext_meta_extraction->toMultipart(multipart, utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction."));
        }
    }
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("large_file_threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("large_file_threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("large_file_threshold."));
            setLargeFileThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("large_comment_threshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("large_comment_threshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("large_comment_threshold."));
            setLargeCommentThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.dam.enable.ext.meta.extraction."));
            setCqDamEnableExtMetaExtraction( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCommonsHandlerStandardImageHandlerProperties::getLargeFileThreshold() const
{
    return m_Large_file_threshold;
}


void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::setLargeFileThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Large_file_threshold = value;
    m_Large_file_thresholdIsSet = true;
}
bool ComDayCqDamCommonsHandlerStandardImageHandlerProperties::largeFileThresholdIsSet() const
{
    return m_Large_file_thresholdIsSet;
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::unsetLarge_file_threshold()
{
    m_Large_file_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComDayCqDamCommonsHandlerStandardImageHandlerProperties::getLargeCommentThreshold() const
{
    return m_Large_comment_threshold;
}


void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::setLargeCommentThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Large_comment_threshold = value;
    m_Large_comment_thresholdIsSet = true;
}
bool ComDayCqDamCommonsHandlerStandardImageHandlerProperties::largeCommentThresholdIsSet() const
{
    return m_Large_comment_thresholdIsSet;
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::unsetLarge_comment_threshold()
{
    m_Large_comment_thresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqDamCommonsHandlerStandardImageHandlerProperties::getCqDamEnableExtMetaExtraction() const
{
    return m_Cq_dam_enable_ext_meta_extraction;
}


void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::setCqDamEnableExtMetaExtraction(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_dam_enable_ext_meta_extraction = value;
    m_Cq_dam_enable_ext_meta_extractionIsSet = true;
}
bool ComDayCqDamCommonsHandlerStandardImageHandlerProperties::cqDamEnableExtMetaExtractionIsSet() const
{
    return m_Cq_dam_enable_ext_meta_extractionIsSet;
}

void ComDayCqDamCommonsHandlerStandardImageHandlerProperties::unsetCq_dam_enable_ext_meta_extraction()
{
    m_Cq_dam_enable_ext_meta_extractionIsSet = false;
}

}
}
}
}

