/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties()
{
    m_Com_adobe_granite_jetty_ssl_portIsSet = false;
    m_Com_adobe_granite_jetty_ssl_keystore_userIsSet = false;
    m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet = false;
    m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet = false;
    m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet = false;
    m_Com_adobe_granite_jetty_ssl_client_certificateIsSet = false;
}

ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::~ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties()
{
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Com_adobe_granite_jetty_ssl_portIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_port);
    }
    if(m_Com_adobe_granite_jetty_ssl_keystore_userIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_keystore_user);
    }
    if(m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_keystore_password);
    }
    if(m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded);
    }
    if(m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_ciphersuites_included);
    }
    if(m_Com_adobe_granite_jetty_ssl_client_certificateIsSet)
    {
        val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")] = ModelBase::toJson(m_Com_adobe_granite_jetty_ssl_client_certificate);
    }

    return val;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")]);
            setComAdobeGraniteJettySslPort( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")]);
            setComAdobeGraniteJettySslKeystoreUser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")]);
            setComAdobeGraniteJettySslKeystorePassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")]);
            setComAdobeGraniteJettySslCiphersuitesExcluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")]);
            setComAdobeGraniteJettySslCiphersuitesIncluded( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")))
    {
        if(!val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")]);
            setComAdobeGraniteJettySslClientCertificate( newItem );
        }
    }
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Com_adobe_granite_jetty_ssl_portIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_port.get())
        {
            m_Com_adobe_granite_jetty_ssl_port->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port."));
        }
    }
    if(m_Com_adobe_granite_jetty_ssl_keystore_userIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_keystore_user.get())
        {
            m_Com_adobe_granite_jetty_ssl_keystore_user->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user."));
        }
    }
    if(m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_keystore_password.get())
        {
            m_Com_adobe_granite_jetty_ssl_keystore_password->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password."));
        }
    }
    if(m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded.get())
        {
            m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded."));
        }
    }
    if(m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_ciphersuites_included.get())
        {
            m_Com_adobe_granite_jetty_ssl_ciphersuites_included->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included."));
        }
    }
    if(m_Com_adobe_granite_jetty_ssl_client_certificateIsSet)
    {
        if (m_Com_adobe_granite_jetty_ssl_client_certificate.get())
        {
            m_Com_adobe_granite_jetty_ssl_client_certificate->toMultipart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate."));
        }
    }
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.port."));
            setComAdobeGraniteJettySslPort( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.user."));
            setComAdobeGraniteJettySslKeystoreUser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.keystore.password."));
            setComAdobeGraniteJettySslKeystorePassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.excluded."));
            setComAdobeGraniteJettySslCiphersuitesExcluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.ciphersuites.included."));
            setComAdobeGraniteJettySslCiphersuitesIncluded( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("com.adobe.granite.jetty.ssl.client.certificate."));
            setComAdobeGraniteJettySslClientCertificate( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslPort() const
{
    return m_Com_adobe_granite_jetty_ssl_port;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslPort(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Com_adobe_granite_jetty_ssl_port = value;
    m_Com_adobe_granite_jetty_ssl_portIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslPortIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_portIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_port()
{
    m_Com_adobe_granite_jetty_ssl_portIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslKeystoreUser() const
{
    return m_Com_adobe_granite_jetty_ssl_keystore_user;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslKeystoreUser(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_jetty_ssl_keystore_user = value;
    m_Com_adobe_granite_jetty_ssl_keystore_userIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslKeystoreUserIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_keystore_userIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_keystore_user()
{
    m_Com_adobe_granite_jetty_ssl_keystore_userIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslKeystorePassword() const
{
    return m_Com_adobe_granite_jetty_ssl_keystore_password;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslKeystorePassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Com_adobe_granite_jetty_ssl_keystore_password = value;
    m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslKeystorePasswordIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_keystore_password()
{
    m_Com_adobe_granite_jetty_ssl_keystore_passwordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslCiphersuitesExcluded() const
{
    return m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslCiphersuitesExcluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Com_adobe_granite_jetty_ssl_ciphersuites_excluded = value;
    m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslCiphersuitesExcludedIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_ciphersuites_excluded()
{
    m_Com_adobe_granite_jetty_ssl_ciphersuites_excludedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslCiphersuitesIncluded() const
{
    return m_Com_adobe_granite_jetty_ssl_ciphersuites_included;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslCiphersuitesIncluded(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Com_adobe_granite_jetty_ssl_ciphersuites_included = value;
    m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslCiphersuitesIncludedIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_ciphersuites_included()
{
    m_Com_adobe_granite_jetty_ssl_ciphersuites_includedIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::getComAdobeGraniteJettySslClientCertificate() const
{
    return m_Com_adobe_granite_jetty_ssl_client_certificate;
}


void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::setComAdobeGraniteJettySslClientCertificate(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Com_adobe_granite_jetty_ssl_client_certificate = value;
    m_Com_adobe_granite_jetty_ssl_client_certificateIsSet = true;
}
bool ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::comAdobeGraniteJettySslClientCertificateIsSet() const
{
    return m_Com_adobe_granite_jetty_ssl_client_certificateIsSet;
}

void ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryProperties::unsetCom_adobe_granite_jetty_ssl_client_certificate()
{
    m_Com_adobe_granite_jetty_ssl_client_certificateIsSet = false;
}

}
}
}
}

