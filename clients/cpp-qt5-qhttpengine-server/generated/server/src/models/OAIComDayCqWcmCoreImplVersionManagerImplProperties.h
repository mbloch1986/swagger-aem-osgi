/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComDayCqWcmCoreImplVersionManagerImplProperties.h
 *
 * 
 */

#ifndef OAIComDayCqWcmCoreImplVersionManagerImplProperties_H
#define OAIComDayCqWcmCoreImplVersionManagerImplProperties_H

#include <QJsonObject>


#include "OAIConfigNodePropertyArray.h"
#include "OAIConfigNodePropertyBoolean.h"
#include "OAIConfigNodePropertyInteger.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIComDayCqWcmCoreImplVersionManagerImplProperties: public OAIObject {
public:
    OAIComDayCqWcmCoreImplVersionManagerImplProperties();
    OAIComDayCqWcmCoreImplVersionManagerImplProperties(QString json);
    ~OAIComDayCqWcmCoreImplVersionManagerImplProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConfigNodePropertyBoolean getVersionmanagerCreateVersionOnActivation() const;
    void setVersionmanagerCreateVersionOnActivation(const OAIConfigNodePropertyBoolean &versionmanager_create_version_on_activation);

    OAIConfigNodePropertyBoolean getVersionmanagerPurgingEnabled() const;
    void setVersionmanagerPurgingEnabled(const OAIConfigNodePropertyBoolean &versionmanager_purging_enabled);

    OAIConfigNodePropertyArray getVersionmanagerPurgePaths() const;
    void setVersionmanagerPurgePaths(const OAIConfigNodePropertyArray &versionmanager_purge_paths);

    OAIConfigNodePropertyArray getVersionmanagerIvPaths() const;
    void setVersionmanagerIvPaths(const OAIConfigNodePropertyArray &versionmanager_iv_paths);

    OAIConfigNodePropertyInteger getVersionmanagerMaxAgeDays() const;
    void setVersionmanagerMaxAgeDays(const OAIConfigNodePropertyInteger &versionmanager_max_age_days);

    OAIConfigNodePropertyInteger getVersionmanagerMaxNumberVersions() const;
    void setVersionmanagerMaxNumberVersions(const OAIConfigNodePropertyInteger &versionmanager_max_number_versions);

    OAIConfigNodePropertyInteger getVersionmanagerMinNumberVersions() const;
    void setVersionmanagerMinNumberVersions(const OAIConfigNodePropertyInteger &versionmanager_min_number_versions);

    virtual bool isSet() const override;

private:
    OAIConfigNodePropertyBoolean versionmanager_create_version_on_activation;
    bool m_versionmanager_create_version_on_activation_isSet;

    OAIConfigNodePropertyBoolean versionmanager_purging_enabled;
    bool m_versionmanager_purging_enabled_isSet;

    OAIConfigNodePropertyArray versionmanager_purge_paths;
    bool m_versionmanager_purge_paths_isSet;

    OAIConfigNodePropertyArray versionmanager_iv_paths;
    bool m_versionmanager_iv_paths_isSet;

    OAIConfigNodePropertyInteger versionmanager_max_age_days;
    bool m_versionmanager_max_age_days_isSet;

    OAIConfigNodePropertyInteger versionmanager_max_number_versions;
    bool m_versionmanager_max_number_versions_isSet;

    OAIConfigNodePropertyInteger versionmanager_min_number_versions;
    bool m_versionmanager_min_number_versions_isSet;

};

}

#endif // OAIComDayCqWcmCoreImplVersionManagerImplProperties_H
