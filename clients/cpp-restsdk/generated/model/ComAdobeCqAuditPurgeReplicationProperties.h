/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeCqAuditPurgeReplicationProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqAuditPurgeReplicationProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqAuditPurgeReplicationProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeCqAuditPurgeReplicationProperties
    : public ModelBase
{
public:
    ComAdobeCqAuditPurgeReplicationProperties();
    virtual ~ComAdobeCqAuditPurgeReplicationProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeCqAuditPurgeReplicationProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuditlogRuleName() const;
    bool auditlogRuleNameIsSet() const;
    void unsetAuditlog_rule_name();
    void setAuditlogRuleName(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuditlogRuleContentpath() const;
    bool auditlogRuleContentpathIsSet() const;
    void unsetAuditlog_rule_contentpath();
    void setAuditlogRuleContentpath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getAuditlogRuleMinimumage() const;
    bool auditlogRuleMinimumageIsSet() const;
    void unsetAuditlog_rule_minimumage();
    void setAuditlogRuleMinimumage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getAuditlogRuleTypes() const;
    bool auditlogRuleTypesIsSet() const;
    void unsetAuditlog_rule_types();
    void setAuditlogRuleTypes(std::shared_ptr<ConfigNodePropertyDropDown> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Auditlog_rule_name;
    bool m_Auditlog_rule_nameIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auditlog_rule_contentpath;
    bool m_Auditlog_rule_contentpathIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Auditlog_rule_minimumage;
    bool m_Auditlog_rule_minimumageIsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_Auditlog_rule_types;
    bool m_Auditlog_rule_typesIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeCqAuditPurgeReplicationProperties_H_ */
