/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties.h
 *
 * 
 */

#ifndef ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_
#define ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties
{
public:
    ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    virtual ~ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getSchedulerPeriod() const;
    void setSchedulerPeriod(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getSchedulerConcurrent() const;
    void setSchedulerConcurrent(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getGoodLinkTestInterval() const;
    void setGoodLinkTestInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBadLinkTestInterval() const;
    void setBadLinkTestInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getLinkUnusedInterval() const;
    void setLinkUnusedInterval(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConnectionTimeout() const;
    void setConnectionTimeout(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyInteger> m_Scheduler_period;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Scheduler_concurrent;
    std::shared_ptr<ConfigNodePropertyInteger> m_Good_link_test_interval;
    std::shared_ptr<ConfigNodePropertyInteger> m_Bad_link_test_interval;
    std::shared_ptr<ConfigNodePropertyInteger> m_Link_unused_interval;
    std::shared_ptr<ConfigNodePropertyInteger> m_Connection_timeout;
};

}
}
}
}

#endif /* ComDayCqRewriterLinkcheckerImplLinkCheckerTaskProperties_H_ */
