/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties()
{
    m_PoolNameIsSet = false;
    m_AllowedPoolNamesIsSet = false;
    m_Scheduler_useleaderforsingleIsSet = false;
    m_Metrics_filtersIsSet = false;
    m_SlowThresholdMillisIsSet = false;
    
}

OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::~OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties()
{
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PoolNameIsSet)
    {
        val["poolName"] = ModelBase::toJson(m_PoolName);
    }
    if(m_AllowedPoolNamesIsSet)
    {
        val["allowedPoolNames"] = ModelBase::toJson(m_AllowedPoolNames);
    }
    if(m_Scheduler_useleaderforsingleIsSet)
    {
        val["scheduler.useleaderforsingle"] = ModelBase::toJson(m_Scheduler_useleaderforsingle);
    }
    if(m_Metrics_filtersIsSet)
    {
        val["metrics.filters"] = ModelBase::toJson(m_Metrics_filters);
    }
    if(m_SlowThresholdMillisIsSet)
    {
        val["slowThresholdMillis"] = ModelBase::toJson(m_SlowThresholdMillis);
    }
    

    return val;
}

void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("poolName") != val.end())
    {
        if(!val["poolName"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["poolName"]);
            setPoolName( newItem );
        }
        
    }
    if(val.find("allowedPoolNames") != val.end())
    {
        if(!val["allowedPoolNames"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["allowedPoolNames"]);
            setAllowedPoolNames( newItem );
        }
        
    }
    if(val.find("scheduler.useleaderforsingle") != val.end())
    {
        if(!val["scheduler.useleaderforsingle"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["scheduler.useleaderforsingle"]);
            setSchedulerUseleaderforsingle( newItem );
        }
        
    }
    if(val.find("metrics.filters") != val.end())
    {
        if(!val["metrics.filters"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["metrics.filters"]);
            setMetricsFilters( newItem );
        }
        
    }
    if(val.find("slowThresholdMillis") != val.end())
    {
        if(!val["slowThresholdMillis"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["slowThresholdMillis"]);
            setSlowThresholdMillis( newItem );
        }
        
    }
    
}


ConfigNodePropertyString OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getPoolName() const
{
    return m_PoolName;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setPoolName(ConfigNodePropertyString const& value)
{
    m_PoolName = value;
    m_PoolNameIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::poolNameIsSet() const
{
    return m_PoolNameIsSet;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetPoolName()
{
    m_PoolNameIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getAllowedPoolNames() const
{
    return m_AllowedPoolNames;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setAllowedPoolNames(ConfigNodePropertyArray const& value)
{
    m_AllowedPoolNames = value;
    m_AllowedPoolNamesIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::allowedPoolNamesIsSet() const
{
    return m_AllowedPoolNamesIsSet;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetAllowedPoolNames()
{
    m_AllowedPoolNamesIsSet = false;
}
ConfigNodePropertyBoolean OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getSchedulerUseleaderforsingle() const
{
    return m_Scheduler_useleaderforsingle;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setSchedulerUseleaderforsingle(ConfigNodePropertyBoolean const& value)
{
    m_Scheduler_useleaderforsingle = value;
    m_Scheduler_useleaderforsingleIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::schedulerUseleaderforsingleIsSet() const
{
    return m_Scheduler_useleaderforsingleIsSet;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetScheduler_useleaderforsingle()
{
    m_Scheduler_useleaderforsingleIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getMetricsFilters() const
{
    return m_Metrics_filters;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setMetricsFilters(ConfigNodePropertyArray const& value)
{
    m_Metrics_filters = value;
    m_Metrics_filtersIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::metricsFiltersIsSet() const
{
    return m_Metrics_filtersIsSet;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetMetrics_filters()
{
    m_Metrics_filtersIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::getSlowThresholdMillis() const
{
    return m_SlowThresholdMillis;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::setSlowThresholdMillis(ConfigNodePropertyInteger const& value)
{
    m_SlowThresholdMillis = value;
    m_SlowThresholdMillisIsSet = true;
}
bool OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::slowThresholdMillisIsSet() const
{
    return m_SlowThresholdMillisIsSet;
}
void OrgApacheSlingCommonsSchedulerImplQuartzSchedulerProperties::unsetSlowThresholdMillis()
{
    m_SlowThresholdMillisIsSet = false;
}

}
}
}
}

