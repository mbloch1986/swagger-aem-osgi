/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmMsmImplRolloutManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::OAIComDayCqWcmMsmImplRolloutManagerImplProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::OAIComDayCqWcmMsmImplRolloutManagerImplProperties() {
    this->init();
}

OAIComDayCqWcmMsmImplRolloutManagerImplProperties::~OAIComDayCqWcmMsmImplRolloutManagerImplProperties() {
    
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::init() {
    m_event_filter_isSet = false;
    m_rolloutmgr_excludedprops_default_isSet = false;
    m_rolloutmgr_excludedparagraphprops_default_isSet = false;
    m_rolloutmgr_excludednodetypes_default_isSet = false;
    m_rolloutmgr_threadpool_maxsize_isSet = false;
    m_rolloutmgr_threadpool_maxshutdowntime_isSet = false;
    m_rolloutmgr_threadpool_priority_isSet = false;
    m_rolloutmgr_commit_size_isSet = false;
    m_rolloutmgr_conflicthandling_enabled_isSet = false;
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(event_filter, json[QString("event.filter")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_excludedprops_default, json[QString("rolloutmgr.excludedprops.default")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_excludedparagraphprops_default, json[QString("rolloutmgr.excludedparagraphprops.default")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_excludednodetypes_default, json[QString("rolloutmgr.excludednodetypes.default")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_threadpool_maxsize, json[QString("rolloutmgr.threadpool.maxsize")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_threadpool_maxshutdowntime, json[QString("rolloutmgr.threadpool.maxshutdowntime")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_threadpool_priority, json[QString("rolloutmgr.threadpool.priority")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_commit_size, json[QString("rolloutmgr.commit.size")]);
    
    ::OpenAPI::fromJsonValue(rolloutmgr_conflicthandling_enabled, json[QString("rolloutmgr.conflicthandling.enabled")]);
    
}

QString
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(event_filter.isSet()){
        obj.insert(QString("event.filter"), ::OpenAPI::toJsonValue(event_filter));
    }
	if(rolloutmgr_excludedprops_default.isSet()){
        obj.insert(QString("rolloutmgr.excludedprops.default"), ::OpenAPI::toJsonValue(rolloutmgr_excludedprops_default));
    }
	if(rolloutmgr_excludedparagraphprops_default.isSet()){
        obj.insert(QString("rolloutmgr.excludedparagraphprops.default"), ::OpenAPI::toJsonValue(rolloutmgr_excludedparagraphprops_default));
    }
	if(rolloutmgr_excludednodetypes_default.isSet()){
        obj.insert(QString("rolloutmgr.excludednodetypes.default"), ::OpenAPI::toJsonValue(rolloutmgr_excludednodetypes_default));
    }
	if(rolloutmgr_threadpool_maxsize.isSet()){
        obj.insert(QString("rolloutmgr.threadpool.maxsize"), ::OpenAPI::toJsonValue(rolloutmgr_threadpool_maxsize));
    }
	if(rolloutmgr_threadpool_maxshutdowntime.isSet()){
        obj.insert(QString("rolloutmgr.threadpool.maxshutdowntime"), ::OpenAPI::toJsonValue(rolloutmgr_threadpool_maxshutdowntime));
    }
	if(rolloutmgr_threadpool_priority.isSet()){
        obj.insert(QString("rolloutmgr.threadpool.priority"), ::OpenAPI::toJsonValue(rolloutmgr_threadpool_priority));
    }
	if(rolloutmgr_commit_size.isSet()){
        obj.insert(QString("rolloutmgr.commit.size"), ::OpenAPI::toJsonValue(rolloutmgr_commit_size));
    }
	if(rolloutmgr_conflicthandling_enabled.isSet()){
        obj.insert(QString("rolloutmgr.conflicthandling.enabled"), ::OpenAPI::toJsonValue(rolloutmgr_conflicthandling_enabled));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getEventFilter() const {
    return event_filter;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setEventFilter(const OAIConfigNodePropertyString &event_filter) {
    this->event_filter = event_filter;
    this->m_event_filter_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedpropsDefault() const {
    return rolloutmgr_excludedprops_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedpropsDefault(const OAIConfigNodePropertyArray &rolloutmgr_excludedprops_default) {
    this->rolloutmgr_excludedprops_default = rolloutmgr_excludedprops_default;
    this->m_rolloutmgr_excludedprops_default_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludedparagraphpropsDefault() const {
    return rolloutmgr_excludedparagraphprops_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludedparagraphpropsDefault(const OAIConfigNodePropertyArray &rolloutmgr_excludedparagraphprops_default) {
    this->rolloutmgr_excludedparagraphprops_default = rolloutmgr_excludedparagraphprops_default;
    this->m_rolloutmgr_excludedparagraphprops_default_isSet = true;
}

OAIConfigNodePropertyArray
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrExcludednodetypesDefault() const {
    return rolloutmgr_excludednodetypes_default;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrExcludednodetypesDefault(const OAIConfigNodePropertyArray &rolloutmgr_excludednodetypes_default) {
    this->rolloutmgr_excludednodetypes_default = rolloutmgr_excludednodetypes_default;
    this->m_rolloutmgr_excludednodetypes_default_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxsize() const {
    return rolloutmgr_threadpool_maxsize;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxsize(const OAIConfigNodePropertyInteger &rolloutmgr_threadpool_maxsize) {
    this->rolloutmgr_threadpool_maxsize = rolloutmgr_threadpool_maxsize;
    this->m_rolloutmgr_threadpool_maxsize_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolMaxshutdowntime() const {
    return rolloutmgr_threadpool_maxshutdowntime;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolMaxshutdowntime(const OAIConfigNodePropertyInteger &rolloutmgr_threadpool_maxshutdowntime) {
    this->rolloutmgr_threadpool_maxshutdowntime = rolloutmgr_threadpool_maxshutdowntime;
    this->m_rolloutmgr_threadpool_maxshutdowntime_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrThreadpoolPriority() const {
    return rolloutmgr_threadpool_priority;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrThreadpoolPriority(const OAIConfigNodePropertyDropDown &rolloutmgr_threadpool_priority) {
    this->rolloutmgr_threadpool_priority = rolloutmgr_threadpool_priority;
    this->m_rolloutmgr_threadpool_priority_isSet = true;
}

OAIConfigNodePropertyInteger
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrCommitSize() const {
    return rolloutmgr_commit_size;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrCommitSize(const OAIConfigNodePropertyInteger &rolloutmgr_commit_size) {
    this->rolloutmgr_commit_size = rolloutmgr_commit_size;
    this->m_rolloutmgr_commit_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::getRolloutmgrConflicthandlingEnabled() const {
    return rolloutmgr_conflicthandling_enabled;
}
void
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::setRolloutmgrConflicthandlingEnabled(const OAIConfigNodePropertyBoolean &rolloutmgr_conflicthandling_enabled) {
    this->rolloutmgr_conflicthandling_enabled = rolloutmgr_conflicthandling_enabled;
    this->m_rolloutmgr_conflicthandling_enabled_isSet = true;
}


bool
OAIComDayCqWcmMsmImplRolloutManagerImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(event_filter.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_excludedprops_default.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_excludedparagraphprops_default.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_excludednodetypes_default.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_threadpool_maxsize.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_threadpool_maxshutdowntime.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_threadpool_priority.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_commit_size.isSet()){ isObjectUpdated = true; break;}
    
        if(rolloutmgr_conflicthandling_enabled.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

