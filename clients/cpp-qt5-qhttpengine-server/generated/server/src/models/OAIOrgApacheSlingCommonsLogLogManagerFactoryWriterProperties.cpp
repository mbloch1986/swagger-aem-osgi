/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties() {
    this->init();
}

OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::~OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties() {
    
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::init() {
    m_org_apache_sling_commons_log_file_isSet = false;
    m_org_apache_sling_commons_log_file_number_isSet = false;
    m_org_apache_sling_commons_log_file_size_isSet = false;
    m_org_apache_sling_commons_log_file_buffered_isSet = false;
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_file, json[QString("org.apache.sling.commons.log.file")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_file_number, json[QString("org.apache.sling.commons.log.file.number")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_file_size, json[QString("org.apache.sling.commons.log.file.size")]);
    
    ::OpenAPI::fromJsonValue(org_apache_sling_commons_log_file_buffered, json[QString("org.apache.sling.commons.log.file.buffered")]);
    
}

QString
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::asJsonObject() const {
    QJsonObject obj;
	if(org_apache_sling_commons_log_file.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.file"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_file));
    }
	if(org_apache_sling_commons_log_file_number.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.file.number"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_file_number));
    }
	if(org_apache_sling_commons_log_file_size.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.file.size"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_file_size));
    }
	if(org_apache_sling_commons_log_file_buffered.isSet()){
        obj.insert(QString("org.apache.sling.commons.log.file.buffered"), ::OpenAPI::toJsonValue(org_apache_sling_commons_log_file_buffered));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFile() const {
    return org_apache_sling_commons_log_file;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFile(const OAIConfigNodePropertyString &org_apache_sling_commons_log_file) {
    this->org_apache_sling_commons_log_file = org_apache_sling_commons_log_file;
    this->m_org_apache_sling_commons_log_file_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileNumber() const {
    return org_apache_sling_commons_log_file_number;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileNumber(const OAIConfigNodePropertyInteger &org_apache_sling_commons_log_file_number) {
    this->org_apache_sling_commons_log_file_number = org_apache_sling_commons_log_file_number;
    this->m_org_apache_sling_commons_log_file_number_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileSize() const {
    return org_apache_sling_commons_log_file_size;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileSize(const OAIConfigNodePropertyString &org_apache_sling_commons_log_file_size) {
    this->org_apache_sling_commons_log_file_size = org_apache_sling_commons_log_file_size;
    this->m_org_apache_sling_commons_log_file_size_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::getOrgApacheSlingCommonsLogFileBuffered() const {
    return org_apache_sling_commons_log_file_buffered;
}
void
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::setOrgApacheSlingCommonsLogFileBuffered(const OAIConfigNodePropertyBoolean &org_apache_sling_commons_log_file_buffered) {
    this->org_apache_sling_commons_log_file_buffered = org_apache_sling_commons_log_file_buffered;
    this->m_org_apache_sling_commons_log_file_buffered_isSet = true;
}


bool
OAIOrgApacheSlingCommonsLogLogManagerFactoryWriterProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(org_apache_sling_commons_log_file.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_file_number.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_file_size.isSet()){ isObjectUpdated = true; break;}
    
        if(org_apache_sling_commons_log_file_buffered.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

