/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteAuthOauthImplGithubProviderImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::ComAdobeGraniteAuthOauthImplGithubProviderImplProperties()
{
    m_Oauth_provider_idIsSet = false;
    m_Oauth_provider_github_authorization_urlIsSet = false;
    m_Oauth_provider_github_token_urlIsSet = false;
    m_Oauth_provider_github_profile_urlIsSet = false;
}

ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::~ComAdobeGraniteAuthOauthImplGithubProviderImplProperties()
{
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Oauth_provider_idIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.id")] = ModelBase::toJson(m_Oauth_provider_id);
    }
    if(m_Oauth_provider_github_authorization_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.github.authorization.url")] = ModelBase::toJson(m_Oauth_provider_github_authorization_url);
    }
    if(m_Oauth_provider_github_token_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.github.token.url")] = ModelBase::toJson(m_Oauth_provider_github_token_url);
    }
    if(m_Oauth_provider_github_profile_urlIsSet)
    {
        val[utility::conversions::to_string_t("oauth.provider.github.profile.url")] = ModelBase::toJson(m_Oauth_provider_github_profile_url);
    }

    return val;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.id")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.id")]);
            setOauthProviderId( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.github.authorization.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.github.authorization.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.github.authorization.url")]);
            setOauthProviderGithubAuthorizationUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.github.token.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.github.token.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.github.token.url")]);
            setOauthProviderGithubTokenUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("oauth.provider.github.profile.url")))
    {
        if(!val[utility::conversions::to_string_t("oauth.provider.github.profile.url")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("oauth.provider.github.profile.url")]);
            setOauthProviderGithubProfileUrl( newItem );
        }
    }
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Oauth_provider_idIsSet)
    {
        if (m_Oauth_provider_id.get())
        {
            m_Oauth_provider_id->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
        }
    }
    if(m_Oauth_provider_github_authorization_urlIsSet)
    {
        if (m_Oauth_provider_github_authorization_url.get())
        {
            m_Oauth_provider_github_authorization_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.github.authorization.url."));
        }
    }
    if(m_Oauth_provider_github_token_urlIsSet)
    {
        if (m_Oauth_provider_github_token_url.get())
        {
            m_Oauth_provider_github_token_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.github.token.url."));
        }
    }
    if(m_Oauth_provider_github_profile_urlIsSet)
    {
        if (m_Oauth_provider_github_profile_url.get())
        {
            m_Oauth_provider_github_profile_url->toMultipart(multipart, utility::conversions::to_string_t("oauth.provider.github.profile.url."));
        }
    }
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.id")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.id."));
            setOauthProviderId( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.authorization.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.authorization.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.github.authorization.url."));
            setOauthProviderGithubAuthorizationUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.token.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.token.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.github.token.url."));
            setOauthProviderGithubTokenUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.profile.url")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("oauth.provider.github.profile.url")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("oauth.provider.github.profile.url."));
            setOauthProviderGithubProfileUrl( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderId() const
{
    return m_Oauth_provider_id;
}


void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderId(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_id = value;
    m_Oauth_provider_idIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderIdIsSet() const
{
    return m_Oauth_provider_idIsSet;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_id()
{
    m_Oauth_provider_idIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubAuthorizationUrl() const
{
    return m_Oauth_provider_github_authorization_url;
}


void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubAuthorizationUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_github_authorization_url = value;
    m_Oauth_provider_github_authorization_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubAuthorizationUrlIsSet() const
{
    return m_Oauth_provider_github_authorization_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_authorization_url()
{
    m_Oauth_provider_github_authorization_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubTokenUrl() const
{
    return m_Oauth_provider_github_token_url;
}


void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubTokenUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_github_token_url = value;
    m_Oauth_provider_github_token_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubTokenUrlIsSet() const
{
    return m_Oauth_provider_github_token_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_token_url()
{
    m_Oauth_provider_github_token_urlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubProfileUrl() const
{
    return m_Oauth_provider_github_profile_url;
}


void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubProfileUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Oauth_provider_github_profile_url = value;
    m_Oauth_provider_github_profile_urlIsSet = true;
}
bool ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::oauthProviderGithubProfileUrlIsSet() const
{
    return m_Oauth_provider_github_profile_urlIsSet;
}

void ComAdobeGraniteAuthOauthImplGithubProviderImplProperties::unsetOauth_provider_github_profile_url()
{
    m_Oauth_provider_github_profile_urlIsSet = false;
}

}
}
}
}

