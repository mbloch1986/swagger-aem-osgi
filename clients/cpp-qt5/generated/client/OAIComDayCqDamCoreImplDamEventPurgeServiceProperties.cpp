/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamCoreImplDamEventPurgeServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::OAIComDayCqDamCoreImplDamEventPurgeServiceProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::OAIComDayCqDamCoreImplDamEventPurgeServiceProperties() {
    init();
}

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::~OAIComDayCqDamCoreImplDamEventPurgeServiceProperties() {
    this->cleanup();
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::init() {
    scheduler_expression = new OAIConfigNodePropertyString();
    m_scheduler_expression_isSet = false;
    max_saved_activities = new OAIConfigNodePropertyInteger();
    m_max_saved_activities_isSet = false;
    save_interval = new OAIConfigNodePropertyInteger();
    m_save_interval_isSet = false;
    enable_activity_purge = new OAIConfigNodePropertyBoolean();
    m_enable_activity_purge_isSet = false;
    event_types = new OAIConfigNodePropertyDropDown();
    m_event_types_isSet = false;
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::cleanup() {
    if(scheduler_expression != nullptr) { 
        delete scheduler_expression;
    }
    if(max_saved_activities != nullptr) { 
        delete max_saved_activities;
    }
    if(save_interval != nullptr) { 
        delete save_interval;
    }
    if(enable_activity_purge != nullptr) { 
        delete enable_activity_purge;
    }
    if(event_types != nullptr) { 
        delete event_types;
    }
}

OAIComDayCqDamCoreImplDamEventPurgeServiceProperties*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&scheduler_expression, pJson["scheduler.expression"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&max_saved_activities, pJson["maxSavedActivities"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&save_interval, pJson["saveInterval"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&enable_activity_purge, pJson["enableActivityPurge"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&event_types, pJson["eventTypes"], "OAIConfigNodePropertyDropDown", "OAIConfigNodePropertyDropDown");
    
}

QString
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::asJsonObject() {
    QJsonObject obj;
    if((scheduler_expression != nullptr) && (scheduler_expression->isSet())){
        toJsonValue(QString("scheduler.expression"), scheduler_expression, obj, QString("OAIConfigNodePropertyString"));
    }
    if((max_saved_activities != nullptr) && (max_saved_activities->isSet())){
        toJsonValue(QString("maxSavedActivities"), max_saved_activities, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((save_interval != nullptr) && (save_interval->isSet())){
        toJsonValue(QString("saveInterval"), save_interval, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((enable_activity_purge != nullptr) && (enable_activity_purge->isSet())){
        toJsonValue(QString("enableActivityPurge"), enable_activity_purge, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((event_types != nullptr) && (event_types->isSet())){
        toJsonValue(QString("eventTypes"), event_types, obj, QString("OAIConfigNodePropertyDropDown"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getSchedulerExpression() {
    return scheduler_expression;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setSchedulerExpression(OAIConfigNodePropertyString* scheduler_expression) {
    this->scheduler_expression = scheduler_expression;
    this->m_scheduler_expression_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getMaxSavedActivities() {
    return max_saved_activities;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setMaxSavedActivities(OAIConfigNodePropertyInteger* max_saved_activities) {
    this->max_saved_activities = max_saved_activities;
    this->m_max_saved_activities_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getSaveInterval() {
    return save_interval;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setSaveInterval(OAIConfigNodePropertyInteger* save_interval) {
    this->save_interval = save_interval;
    this->m_save_interval_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getEnableActivityPurge() {
    return enable_activity_purge;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setEnableActivityPurge(OAIConfigNodePropertyBoolean* enable_activity_purge) {
    this->enable_activity_purge = enable_activity_purge;
    this->m_enable_activity_purge_isSet = true;
}

OAIConfigNodePropertyDropDown*
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::getEventTypes() {
    return event_types;
}
void
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::setEventTypes(OAIConfigNodePropertyDropDown* event_types) {
    this->event_types = event_types;
    this->m_event_types_isSet = true;
}


bool
OAIComDayCqDamCoreImplDamEventPurgeServiceProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(scheduler_expression != nullptr && scheduler_expression->isSet()){ isObjectUpdated = true; break;}
        if(max_saved_activities != nullptr && max_saved_activities->isSet()){ isObjectUpdated = true; break;}
        if(save_interval != nullptr && save_interval->isSet()){ isObjectUpdated = true; break;}
        if(enable_activity_purge != nullptr && enable_activity_purge->isSet()){ isObjectUpdated = true; break;}
        if(event_types != nullptr && event_types->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

