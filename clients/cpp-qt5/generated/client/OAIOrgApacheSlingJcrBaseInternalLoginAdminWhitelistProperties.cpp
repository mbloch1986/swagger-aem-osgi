/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties() {
    init();
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::~OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties() {
    this->cleanup();
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::init() {
    whitelist_bypass = new OAIConfigNodePropertyBoolean();
    m_whitelist_bypass_isSet = false;
    whitelist_bundles_regexp = new OAIConfigNodePropertyString();
    m_whitelist_bundles_regexp_isSet = false;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::cleanup() {
    if(whitelist_bypass != nullptr) { 
        delete whitelist_bypass;
    }
    if(whitelist_bundles_regexp != nullptr) { 
        delete whitelist_bundles_regexp;
    }
}

OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&whitelist_bypass, pJson["whitelist.bypass"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&whitelist_bundles_regexp, pJson["whitelist.bundles.regexp"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::asJsonObject() {
    QJsonObject obj;
    if((whitelist_bypass != nullptr) && (whitelist_bypass->isSet())){
        toJsonValue(QString("whitelist.bypass"), whitelist_bypass, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((whitelist_bundles_regexp != nullptr) && (whitelist_bundles_regexp->isSet())){
        toJsonValue(QString("whitelist.bundles.regexp"), whitelist_bundles_regexp, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBypass() {
    return whitelist_bypass;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBypass(OAIConfigNodePropertyBoolean* whitelist_bypass) {
    this->whitelist_bypass = whitelist_bypass;
    this->m_whitelist_bypass_isSet = true;
}

OAIConfigNodePropertyString*
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::getWhitelistBundlesRegexp() {
    return whitelist_bundles_regexp;
}
void
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::setWhitelistBundlesRegexp(OAIConfigNodePropertyString* whitelist_bundles_regexp) {
    this->whitelist_bundles_regexp = whitelist_bundles_regexp;
    this->m_whitelist_bundles_regexp_isSet = true;
}


bool
OAIOrgApacheSlingJcrBaseInternalLoginAdminWhitelistProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(whitelist_bypass != nullptr && whitelist_bypass->isSet()){ isObjectUpdated = true; break;}
        if(whitelist_bundles_regexp != nullptr && whitelist_bundles_regexp->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

