/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties.h
 *
 * 
 */

#ifndef OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_
#define OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties
{
public:
    OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    virtual ~OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDisabled() const;
    void setDisabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDebug() const;
    void setDebug(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getLocalIndexDir() const;
    void setLocalIndexDir(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableOpenIndexAsync() const;
    void setEnableOpenIndexAsync(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getThreadPoolSize() const;
    void setThreadPoolSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getPrefetchIndexFiles() const;
    void setPrefetchIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getExtractedTextCacheSizeInMB() const;
    void setExtractedTextCacheSizeInMB(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getExtractedTextCacheExpiryInSecs() const;
    void setExtractedTextCacheExpiryInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAlwaysUsePreExtractedCache() const;
    void setAlwaysUsePreExtractedCache(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getBooleanClauseLimit() const;
    void setBooleanClauseLimit(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableHybridIndexing() const;
    void setEnableHybridIndexing(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHybridQueueSize() const;
    void setHybridQueueSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDisableStoredIndexDefinition() const;
    void setDisableStoredIndexDefinition(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getDeletedBlobsCollectionEnabled() const;
    void setDeletedBlobsCollectionEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPropIndexCleanerIntervalInSecs() const;
    void setPropIndexCleanerIntervalInSecs(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnableSingleBlobIndexFiles() const;
    void setEnableSingleBlobIndexFiles(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Disabled;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Debug;
    std::shared_ptr<ConfigNodePropertyString> m_LocalIndexDir;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableOpenIndexAsync;
    std::shared_ptr<ConfigNodePropertyInteger> m_ThreadPoolSize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_PrefetchIndexFiles;
    std::shared_ptr<ConfigNodePropertyInteger> m_ExtractedTextCacheSizeInMB;
    std::shared_ptr<ConfigNodePropertyInteger> m_ExtractedTextCacheExpiryInSecs;
    std::shared_ptr<ConfigNodePropertyBoolean> m_AlwaysUsePreExtractedCache;
    std::shared_ptr<ConfigNodePropertyInteger> m_BooleanClauseLimit;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableHybridIndexing;
    std::shared_ptr<ConfigNodePropertyInteger> m_HybridQueueSize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DisableStoredIndexDefinition;
    std::shared_ptr<ConfigNodePropertyBoolean> m_DeletedBlobsCollectionEnabled;
    std::shared_ptr<ConfigNodePropertyInteger> m_PropIndexCleanerIntervalInSecs;
    std::shared_ptr<ConfigNodePropertyBoolean> m_EnableSingleBlobIndexFiles;
};

}
}
}
}

#endif /* OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServProperties_H_ */
