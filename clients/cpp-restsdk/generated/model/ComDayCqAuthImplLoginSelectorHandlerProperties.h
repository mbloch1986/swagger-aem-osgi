/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqAuthImplLoginSelectorHandlerProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqAuthImplLoginSelectorHandlerProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqAuthImplLoginSelectorHandlerProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqAuthImplLoginSelectorHandlerProperties
    : public ModelBase
{
public:
    ComDayCqAuthImplLoginSelectorHandlerProperties();
    virtual ~ComDayCqAuthImplLoginSelectorHandlerProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComDayCqAuthImplLoginSelectorHandlerProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPath() const;
    bool pathIsSet() const;
    void unsetPath();
    void setPath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getServiceRanking() const;
    bool serviceRankingIsSet() const;
    void unsetService_ranking();
    void setServiceRanking(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthLoginselectorMappings() const;
    bool authLoginselectorMappingsIsSet() const;
    void unsetAuth_loginselector_mappings();
    void setAuthLoginselectorMappings(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthLoginselectorChangepwMappings() const;
    bool authLoginselectorChangepwMappingsIsSet() const;
    void unsetAuth_loginselector_changepw_mappings();
    void setAuthLoginselectorChangepwMappings(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthLoginselectorDefaultloginpage() const;
    bool authLoginselectorDefaultloginpageIsSet() const;
    void unsetAuth_loginselector_defaultloginpage();
    void setAuthLoginselectorDefaultloginpage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getAuthLoginselectorDefaultchangepwpage() const;
    bool authLoginselectorDefaultchangepwpageIsSet() const;
    void unsetAuth_loginselector_defaultchangepwpage();
    void setAuthLoginselectorDefaultchangepwpage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAuthLoginselectorHandle() const;
    bool authLoginselectorHandleIsSet() const;
    void unsetAuth_loginselector_handle();
    void setAuthLoginselectorHandle(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getAuthLoginselectorHandleAllExtensions() const;
    bool authLoginselectorHandleAllExtensionsIsSet() const;
    void unsetAuth_loginselector_handle_all_extensions();
    void setAuthLoginselectorHandleAllExtensions(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Path;
    bool m_PathIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_Service_ranking;
    bool m_Service_rankingIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_loginselector_mappings;
    bool m_Auth_loginselector_mappingsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_loginselector_changepw_mappings;
    bool m_Auth_loginselector_changepw_mappingsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_loginselector_defaultloginpage;
    bool m_Auth_loginselector_defaultloginpageIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Auth_loginselector_defaultchangepwpage;
    bool m_Auth_loginselector_defaultchangepwpageIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_Auth_loginselector_handle;
    bool m_Auth_loginselector_handleIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Auth_loginselector_handle_all_extensions;
    bool m_Auth_loginselector_handle_all_extensionsIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComDayCqAuthImplLoginSelectorHandlerProperties_H_ */
