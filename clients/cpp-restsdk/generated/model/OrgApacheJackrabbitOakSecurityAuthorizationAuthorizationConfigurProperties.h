/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties();
    virtual ~OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getPermissionsJr2() const;
    bool permissionsJr2IsSet() const;
    void unsetPermissionsJr2();
    void setPermissionsJr2(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyDropDown> getImportBehavior() const;
    bool importBehaviorIsSet() const;
    void unsetImportBehavior();
    void setImportBehavior(std::shared_ptr<ConfigNodePropertyDropDown> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getReadPaths() const;
    bool readPathsIsSet() const;
    void unsetReadPaths();
    void setReadPaths(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getAdministrativePrincipals() const;
    bool administrativePrincipalsIsSet() const;
    void unsetAdministrativePrincipals();
    void setAdministrativePrincipals(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getConfigurationRanking() const;
    bool configurationRankingIsSet() const;
    void unsetConfigurationRanking();
    void setConfigurationRanking(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyDropDown> m_PermissionsJr2;
    bool m_PermissionsJr2IsSet;
    std::shared_ptr<ConfigNodePropertyDropDown> m_ImportBehavior;
    bool m_ImportBehaviorIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_ReadPaths;
    bool m_ReadPathsIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_AdministrativePrincipals;
    bool m_AdministrativePrincipalsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_ConfigurationRanking;
    bool m_ConfigurationRankingIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurProperties_H_ */
