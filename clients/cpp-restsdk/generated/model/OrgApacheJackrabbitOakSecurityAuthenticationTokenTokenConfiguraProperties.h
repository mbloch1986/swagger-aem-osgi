/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties
    : public ModelBase
{
public:
    OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();
    virtual ~OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTokenExpiration() const;
    bool tokenExpirationIsSet() const;
    void unsetTokenExpiration();
    void setTokenExpiration(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getTokenLength() const;
    bool tokenLengthIsSet() const;
    void unsetTokenLength();
    void setTokenLength(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getTokenRefresh() const;
    bool tokenRefreshIsSet() const;
    void unsetTokenRefresh();
    void setTokenRefresh(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getTokenCleanupThreshold() const;
    bool tokenCleanupThresholdIsSet() const;
    void unsetTokenCleanupThreshold();
    void setTokenCleanupThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getPasswordHashAlgorithm() const;
    bool passwordHashAlgorithmIsSet() const;
    void unsetPasswordHashAlgorithm();
    void setPasswordHashAlgorithm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordHashIterations() const;
    bool passwordHashIterationsIsSet() const;
    void unsetPasswordHashIterations();
    void setPasswordHashIterations(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getPasswordSaltSize() const;
    bool passwordSaltSizeIsSet() const;
    void unsetPasswordSaltSize();
    void setPasswordSaltSize(std::shared_ptr<ConfigNodePropertyInteger> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_TokenExpiration;
    bool m_TokenExpirationIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_TokenLength;
    bool m_TokenLengthIsSet;
    std::shared_ptr<ConfigNodePropertyBoolean> m_TokenRefresh;
    bool m_TokenRefreshIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_TokenCleanupThreshold;
    bool m_TokenCleanupThresholdIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_PasswordHashAlgorithm;
    bool m_PasswordHashAlgorithmIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordHashIterations;
    bool m_PasswordHashIterationsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_PasswordSaltSize;
    bool m_PasswordSaltSizeIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraProperties_H_ */
