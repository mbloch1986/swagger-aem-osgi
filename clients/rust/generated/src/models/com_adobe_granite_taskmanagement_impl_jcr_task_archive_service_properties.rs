/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
  #[serde(rename = "archiving.enabled")]
  archiving_enabled: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "scheduler.expression")]
  scheduler_expression: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "archive.since.days.completed")]
  archive_since_days_completed: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
  pub fn new() -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
      archiving_enabled: None,
      scheduler_expression: None,
      archive_since_days_completed: None
    }
  }

  pub fn set_archiving_enabled(&mut self, archiving_enabled: ::models::ConfigNodePropertyBoolean) {
    self.archiving_enabled = Some(archiving_enabled);
  }

  pub fn with_archiving_enabled(mut self, archiving_enabled: ::models::ConfigNodePropertyBoolean) -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    self.archiving_enabled = Some(archiving_enabled);
    self
  }

  pub fn archiving_enabled(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.archiving_enabled.as_ref()
  }

  pub fn reset_archiving_enabled(&mut self) {
    self.archiving_enabled = None;
  }

  pub fn set_scheduler_expression(&mut self, scheduler_expression: ::models::ConfigNodePropertyString) {
    self.scheduler_expression = Some(scheduler_expression);
  }

  pub fn with_scheduler_expression(mut self, scheduler_expression: ::models::ConfigNodePropertyString) -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    self.scheduler_expression = Some(scheduler_expression);
    self
  }

  pub fn scheduler_expression(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.scheduler_expression.as_ref()
  }

  pub fn reset_scheduler_expression(&mut self) {
    self.scheduler_expression = None;
  }

  pub fn set_archive_since_days_completed(&mut self, archive_since_days_completed: ::models::ConfigNodePropertyInteger) {
    self.archive_since_days_completed = Some(archive_since_days_completed);
  }

  pub fn with_archive_since_days_completed(mut self, archive_since_days_completed: ::models::ConfigNodePropertyInteger) -> ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceProperties {
    self.archive_since_days_completed = Some(archive_since_days_completed);
    self
  }

  pub fn archive_since_days_completed(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.archive_since_days_completed.as_ref()
  }

  pub fn reset_archive_since_days_completed(&mut self) {
    self.archive_since_days_completed = None;
  }

}



