/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties()
{
    m_EnabledIsSet = false;
    m_ConfigRefResourceNamesIsSet = false;
    m_ConfigRefPropertyNamesIsSet = false;
    m_Service_rankingIsSet = false;
    
}

OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::~OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties()
{
}

void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_EnabledIsSet)
    {
        val["enabled"] = ModelBase::toJson(m_Enabled);
    }
    if(m_ConfigRefResourceNamesIsSet)
    {
        val["configRefResourceNames"] = ModelBase::toJson(m_ConfigRefResourceNames);
    }
    if(m_ConfigRefPropertyNamesIsSet)
    {
        val["configRefPropertyNames"] = ModelBase::toJson(m_ConfigRefPropertyNames);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    

    return val;
}

void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::fromJson(nlohmann::json& val)
{
    if(val.find("enabled") != val.end())
    {
        if(!val["enabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["enabled"]);
            setEnabled( newItem );
        }
        
    }
    if(val.find("configRefResourceNames") != val.end())
    {
        if(!val["configRefResourceNames"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["configRefResourceNames"]);
            setConfigRefResourceNames( newItem );
        }
        
    }
    if(val.find("configRefPropertyNames") != val.end())
    {
        if(!val["configRefPropertyNames"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["configRefPropertyNames"]);
            setConfigRefPropertyNames( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::getEnabled() const
{
    return m_Enabled;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::setEnabled(ConfigNodePropertyBoolean const& value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::unsetEnabled()
{
    m_EnabledIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::getConfigRefResourceNames() const
{
    return m_ConfigRefResourceNames;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::setConfigRefResourceNames(ConfigNodePropertyArray const& value)
{
    m_ConfigRefResourceNames = value;
    m_ConfigRefResourceNamesIsSet = true;
}
bool OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::configRefResourceNamesIsSet() const
{
    return m_ConfigRefResourceNamesIsSet;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::unsetConfigRefResourceNames()
{
    m_ConfigRefResourceNamesIsSet = false;
}
ConfigNodePropertyArray OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::getConfigRefPropertyNames() const
{
    return m_ConfigRefPropertyNames;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::setConfigRefPropertyNames(ConfigNodePropertyArray const& value)
{
    m_ConfigRefPropertyNames = value;
    m_ConfigRefPropertyNamesIsSet = true;
}
bool OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::configRefPropertyNamesIsSet() const
{
    return m_ConfigRefPropertyNamesIsSet;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::unsetConfigRefPropertyNames()
{
    m_ConfigRefPropertyNamesIsSet = false;
}
ConfigNodePropertyInteger OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}

}
}
}
}

