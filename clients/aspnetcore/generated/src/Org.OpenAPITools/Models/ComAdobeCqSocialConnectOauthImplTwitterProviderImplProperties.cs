/*
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties : IEquatable<ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties>
    { 
        /// <summary>
        /// Gets or Sets OauthProviderId
        /// </summary>
        [DataMember(Name="oauth.provider.id")]
        public ConfigNodePropertyString OauthProviderId { get; set; }

        /// <summary>
        /// Gets or Sets OauthCloudConfigRoot
        /// </summary>
        [DataMember(Name="oauth.cloud.config.root")]
        public ConfigNodePropertyString OauthCloudConfigRoot { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigRoot
        /// </summary>
        [DataMember(Name="provider.config.root")]
        public ConfigNodePropertyString ProviderConfigRoot { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigUserFolder
        /// </summary>
        [DataMember(Name="provider.config.user.folder")]
        public ConfigNodePropertyDropDown ProviderConfigUserFolder { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigTwitterEnableParams
        /// </summary>
        [DataMember(Name="provider.config.twitter.enable.params")]
        public ConfigNodePropertyBoolean ProviderConfigTwitterEnableParams { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigTwitterParams
        /// </summary>
        [DataMember(Name="provider.config.twitter.params")]
        public ConfigNodePropertyArray ProviderConfigTwitterParams { get; set; }

        /// <summary>
        /// Gets or Sets ProviderConfigRefreshUserdataEnabled
        /// </summary>
        [DataMember(Name="provider.config.refresh.userdata.enabled")]
        public ConfigNodePropertyBoolean ProviderConfigRefreshUserdataEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties {\n");
            sb.Append("  OauthProviderId: ").Append(OauthProviderId).Append("\n");
            sb.Append("  OauthCloudConfigRoot: ").Append(OauthCloudConfigRoot).Append("\n");
            sb.Append("  ProviderConfigRoot: ").Append(ProviderConfigRoot).Append("\n");
            sb.Append("  ProviderConfigUserFolder: ").Append(ProviderConfigUserFolder).Append("\n");
            sb.Append("  ProviderConfigTwitterEnableParams: ").Append(ProviderConfigTwitterEnableParams).Append("\n");
            sb.Append("  ProviderConfigTwitterParams: ").Append(ProviderConfigTwitterParams).Append("\n");
            sb.Append("  ProviderConfigRefreshUserdataEnabled: ").Append(ProviderConfigRefreshUserdataEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties)obj);
        }

        /// <summary>
        /// Returns true if ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OauthProviderId == other.OauthProviderId ||
                    OauthProviderId != null &&
                    OauthProviderId.Equals(other.OauthProviderId)
                ) && 
                (
                    OauthCloudConfigRoot == other.OauthCloudConfigRoot ||
                    OauthCloudConfigRoot != null &&
                    OauthCloudConfigRoot.Equals(other.OauthCloudConfigRoot)
                ) && 
                (
                    ProviderConfigRoot == other.ProviderConfigRoot ||
                    ProviderConfigRoot != null &&
                    ProviderConfigRoot.Equals(other.ProviderConfigRoot)
                ) && 
                (
                    ProviderConfigUserFolder == other.ProviderConfigUserFolder ||
                    ProviderConfigUserFolder != null &&
                    ProviderConfigUserFolder.Equals(other.ProviderConfigUserFolder)
                ) && 
                (
                    ProviderConfigTwitterEnableParams == other.ProviderConfigTwitterEnableParams ||
                    ProviderConfigTwitterEnableParams != null &&
                    ProviderConfigTwitterEnableParams.Equals(other.ProviderConfigTwitterEnableParams)
                ) && 
                (
                    ProviderConfigTwitterParams == other.ProviderConfigTwitterParams ||
                    ProviderConfigTwitterParams != null &&
                    ProviderConfigTwitterParams.Equals(other.ProviderConfigTwitterParams)
                ) && 
                (
                    ProviderConfigRefreshUserdataEnabled == other.ProviderConfigRefreshUserdataEnabled ||
                    ProviderConfigRefreshUserdataEnabled != null &&
                    ProviderConfigRefreshUserdataEnabled.Equals(other.ProviderConfigRefreshUserdataEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OauthProviderId != null)
                    hashCode = hashCode * 59 + OauthProviderId.GetHashCode();
                    if (OauthCloudConfigRoot != null)
                    hashCode = hashCode * 59 + OauthCloudConfigRoot.GetHashCode();
                    if (ProviderConfigRoot != null)
                    hashCode = hashCode * 59 + ProviderConfigRoot.GetHashCode();
                    if (ProviderConfigUserFolder != null)
                    hashCode = hashCode * 59 + ProviderConfigUserFolder.GetHashCode();
                    if (ProviderConfigTwitterEnableParams != null)
                    hashCode = hashCode * 59 + ProviderConfigTwitterEnableParams.GetHashCode();
                    if (ProviderConfigTwitterParams != null)
                    hashCode = hashCode * 59 + ProviderConfigTwitterParams.GetHashCode();
                    if (ProviderConfigRefreshUserdataEnabled != null)
                    hashCode = hashCode * 59 + ProviderConfigRefreshUserdataEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties left, ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties left, ComAdobeCqSocialConnectOauthImplTwitterProviderImplProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
