/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamIdsImplIDSPoolManagerImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::OAIComDayCqDamIdsImplIDSPoolManagerImplProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::OAIComDayCqDamIdsImplIDSPoolManagerImplProperties() {
    init();
}

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::~OAIComDayCqDamIdsImplIDSPoolManagerImplProperties() {
    this->cleanup();
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::init() {
    max_errors_to_blacklist = new OAIConfigNodePropertyInteger();
    m_max_errors_to_blacklist_isSet = false;
    retry_interval_to_whitelist = new OAIConfigNodePropertyInteger();
    m_retry_interval_to_whitelist_isSet = false;
    connect_timeout = new OAIConfigNodePropertyInteger();
    m_connect_timeout_isSet = false;
    socket_timeout = new OAIConfigNodePropertyInteger();
    m_socket_timeout_isSet = false;
    process_label = new OAIConfigNodePropertyString();
    m_process_label_isSet = false;
    connection_use_max = new OAIConfigNodePropertyInteger();
    m_connection_use_max_isSet = false;
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::cleanup() {
    if(max_errors_to_blacklist != nullptr) { 
        delete max_errors_to_blacklist;
    }
    if(retry_interval_to_whitelist != nullptr) { 
        delete retry_interval_to_whitelist;
    }
    if(connect_timeout != nullptr) { 
        delete connect_timeout;
    }
    if(socket_timeout != nullptr) { 
        delete socket_timeout;
    }
    if(process_label != nullptr) { 
        delete process_label;
    }
    if(connection_use_max != nullptr) { 
        delete connection_use_max;
    }
}

OAIComDayCqDamIdsImplIDSPoolManagerImplProperties*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&max_errors_to_blacklist, pJson["max.errors.to.blacklist"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&retry_interval_to_whitelist, pJson["retry.interval.to.whitelist"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&connect_timeout, pJson["connect.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&socket_timeout, pJson["socket.timeout"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
    ::OpenAPI::setValue(&process_label, pJson["process.label"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&connection_use_max, pJson["connection.use.max"], "OAIConfigNodePropertyInteger", "OAIConfigNodePropertyInteger");
    
}

QString
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::asJsonObject() {
    QJsonObject obj;
    if((max_errors_to_blacklist != nullptr) && (max_errors_to_blacklist->isSet())){
        toJsonValue(QString("max.errors.to.blacklist"), max_errors_to_blacklist, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((retry_interval_to_whitelist != nullptr) && (retry_interval_to_whitelist->isSet())){
        toJsonValue(QString("retry.interval.to.whitelist"), retry_interval_to_whitelist, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((connect_timeout != nullptr) && (connect_timeout->isSet())){
        toJsonValue(QString("connect.timeout"), connect_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((socket_timeout != nullptr) && (socket_timeout->isSet())){
        toJsonValue(QString("socket.timeout"), socket_timeout, obj, QString("OAIConfigNodePropertyInteger"));
    }
    if((process_label != nullptr) && (process_label->isSet())){
        toJsonValue(QString("process.label"), process_label, obj, QString("OAIConfigNodePropertyString"));
    }
    if((connection_use_max != nullptr) && (connection_use_max->isSet())){
        toJsonValue(QString("connection.use.max"), connection_use_max, obj, QString("OAIConfigNodePropertyInteger"));
    }

    return obj;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getMaxErrorsToBlacklist() {
    return max_errors_to_blacklist;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setMaxErrorsToBlacklist(OAIConfigNodePropertyInteger* max_errors_to_blacklist) {
    this->max_errors_to_blacklist = max_errors_to_blacklist;
    this->m_max_errors_to_blacklist_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getRetryIntervalToWhitelist() {
    return retry_interval_to_whitelist;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setRetryIntervalToWhitelist(OAIConfigNodePropertyInteger* retry_interval_to_whitelist) {
    this->retry_interval_to_whitelist = retry_interval_to_whitelist;
    this->m_retry_interval_to_whitelist_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectTimeout() {
    return connect_timeout;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectTimeout(OAIConfigNodePropertyInteger* connect_timeout) {
    this->connect_timeout = connect_timeout;
    this->m_connect_timeout_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getSocketTimeout() {
    return socket_timeout;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setSocketTimeout(OAIConfigNodePropertyInteger* socket_timeout) {
    this->socket_timeout = socket_timeout;
    this->m_socket_timeout_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getProcessLabel() {
    return process_label;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setProcessLabel(OAIConfigNodePropertyString* process_label) {
    this->process_label = process_label;
    this->m_process_label_isSet = true;
}

OAIConfigNodePropertyInteger*
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::getConnectionUseMax() {
    return connection_use_max;
}
void
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::setConnectionUseMax(OAIConfigNodePropertyInteger* connection_use_max) {
    this->connection_use_max = connection_use_max;
    this->m_connection_use_max_isSet = true;
}


bool
OAIComDayCqDamIdsImplIDSPoolManagerImplProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(max_errors_to_blacklist != nullptr && max_errors_to_blacklist->isSet()){ isObjectUpdated = true; break;}
        if(retry_interval_to_whitelist != nullptr && retry_interval_to_whitelist->isSet()){ isObjectUpdated = true; break;}
        if(connect_timeout != nullptr && connect_timeout->isSet()){ isObjectUpdated = true; break;}
        if(socket_timeout != nullptr && socket_timeout->isSet()){ isObjectUpdated = true; break;}
        if(process_label != nullptr && process_label->isSet()){ isObjectUpdated = true; break;}
        if(connection_use_max != nullptr && connection_use_max->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

