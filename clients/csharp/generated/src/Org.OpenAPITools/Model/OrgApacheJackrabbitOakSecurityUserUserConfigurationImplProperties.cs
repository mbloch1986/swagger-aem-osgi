/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties :  IEquatable<OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties" /> class.
        /// </summary>
        /// <param name="usersPath">usersPath.</param>
        /// <param name="groupsPath">groupsPath.</param>
        /// <param name="systemRelativePath">systemRelativePath.</param>
        /// <param name="defaultDepth">defaultDepth.</param>
        /// <param name="importBehavior">importBehavior.</param>
        /// <param name="passwordHashAlgorithm">passwordHashAlgorithm.</param>
        /// <param name="passwordHashIterations">passwordHashIterations.</param>
        /// <param name="passwordSaltSize">passwordSaltSize.</param>
        /// <param name="omitAdminPw">omitAdminPw.</param>
        /// <param name="supportAutoSave">supportAutoSave.</param>
        /// <param name="passwordMaxAge">passwordMaxAge.</param>
        /// <param name="initialPasswordChange">initialPasswordChange.</param>
        /// <param name="passwordHistorySize">passwordHistorySize.</param>
        /// <param name="passwordExpiryForAdmin">passwordExpiryForAdmin.</param>
        /// <param name="cacheExpiration">cacheExpiration.</param>
        /// <param name="enableRFC7613UsercaseMappedProfile">enableRFC7613UsercaseMappedProfile.</param>
        public OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties(ConfigNodePropertyString usersPath = default(ConfigNodePropertyString), ConfigNodePropertyString groupsPath = default(ConfigNodePropertyString), ConfigNodePropertyString systemRelativePath = default(ConfigNodePropertyString), ConfigNodePropertyInteger defaultDepth = default(ConfigNodePropertyInteger), ConfigNodePropertyDropDown importBehavior = default(ConfigNodePropertyDropDown), ConfigNodePropertyString passwordHashAlgorithm = default(ConfigNodePropertyString), ConfigNodePropertyInteger passwordHashIterations = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger passwordSaltSize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean omitAdminPw = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean supportAutoSave = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger passwordMaxAge = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean initialPasswordChange = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger passwordHistorySize = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean passwordExpiryForAdmin = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger cacheExpiration = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean enableRFC7613UsercaseMappedProfile = default(ConfigNodePropertyBoolean))
        {
            this.UsersPath = usersPath;
            this.GroupsPath = groupsPath;
            this.SystemRelativePath = systemRelativePath;
            this.DefaultDepth = defaultDepth;
            this.ImportBehavior = importBehavior;
            this.PasswordHashAlgorithm = passwordHashAlgorithm;
            this.PasswordHashIterations = passwordHashIterations;
            this.PasswordSaltSize = passwordSaltSize;
            this.OmitAdminPw = omitAdminPw;
            this.SupportAutoSave = supportAutoSave;
            this.PasswordMaxAge = passwordMaxAge;
            this.InitialPasswordChange = initialPasswordChange;
            this.PasswordHistorySize = passwordHistorySize;
            this.PasswordExpiryForAdmin = passwordExpiryForAdmin;
            this.CacheExpiration = cacheExpiration;
            this.EnableRFC7613UsercaseMappedProfile = enableRFC7613UsercaseMappedProfile;
        }
        
        /// <summary>
        /// Gets or Sets UsersPath
        /// </summary>
        [DataMember(Name="usersPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString UsersPath { get; set; }

        /// <summary>
        /// Gets or Sets GroupsPath
        /// </summary>
        [DataMember(Name="groupsPath", EmitDefaultValue=false)]
        public ConfigNodePropertyString GroupsPath { get; set; }

        /// <summary>
        /// Gets or Sets SystemRelativePath
        /// </summary>
        [DataMember(Name="systemRelativePath", EmitDefaultValue=false)]
        public ConfigNodePropertyString SystemRelativePath { get; set; }

        /// <summary>
        /// Gets or Sets DefaultDepth
        /// </summary>
        [DataMember(Name="defaultDepth", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger DefaultDepth { get; set; }

        /// <summary>
        /// Gets or Sets ImportBehavior
        /// </summary>
        [DataMember(Name="importBehavior", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown ImportBehavior { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashAlgorithm
        /// </summary>
        [DataMember(Name="passwordHashAlgorithm", EmitDefaultValue=false)]
        public ConfigNodePropertyString PasswordHashAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHashIterations
        /// </summary>
        [DataMember(Name="passwordHashIterations", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordHashIterations { get; set; }

        /// <summary>
        /// Gets or Sets PasswordSaltSize
        /// </summary>
        [DataMember(Name="passwordSaltSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordSaltSize { get; set; }

        /// <summary>
        /// Gets or Sets OmitAdminPw
        /// </summary>
        [DataMember(Name="omitAdminPw", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean OmitAdminPw { get; set; }

        /// <summary>
        /// Gets or Sets SupportAutoSave
        /// </summary>
        [DataMember(Name="supportAutoSave", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SupportAutoSave { get; set; }

        /// <summary>
        /// Gets or Sets PasswordMaxAge
        /// </summary>
        [DataMember(Name="passwordMaxAge", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordMaxAge { get; set; }

        /// <summary>
        /// Gets or Sets InitialPasswordChange
        /// </summary>
        [DataMember(Name="initialPasswordChange", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean InitialPasswordChange { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHistorySize
        /// </summary>
        [DataMember(Name="passwordHistorySize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PasswordHistorySize { get; set; }

        /// <summary>
        /// Gets or Sets PasswordExpiryForAdmin
        /// </summary>
        [DataMember(Name="passwordExpiryForAdmin", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean PasswordExpiryForAdmin { get; set; }

        /// <summary>
        /// Gets or Sets CacheExpiration
        /// </summary>
        [DataMember(Name="cacheExpiration", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CacheExpiration { get; set; }

        /// <summary>
        /// Gets or Sets EnableRFC7613UsercaseMappedProfile
        /// </summary>
        [DataMember(Name="enableRFC7613UsercaseMappedProfile", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean EnableRFC7613UsercaseMappedProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties {\n");
            sb.Append("  UsersPath: ").Append(UsersPath).Append("\n");
            sb.Append("  GroupsPath: ").Append(GroupsPath).Append("\n");
            sb.Append("  SystemRelativePath: ").Append(SystemRelativePath).Append("\n");
            sb.Append("  DefaultDepth: ").Append(DefaultDepth).Append("\n");
            sb.Append("  ImportBehavior: ").Append(ImportBehavior).Append("\n");
            sb.Append("  PasswordHashAlgorithm: ").Append(PasswordHashAlgorithm).Append("\n");
            sb.Append("  PasswordHashIterations: ").Append(PasswordHashIterations).Append("\n");
            sb.Append("  PasswordSaltSize: ").Append(PasswordSaltSize).Append("\n");
            sb.Append("  OmitAdminPw: ").Append(OmitAdminPw).Append("\n");
            sb.Append("  SupportAutoSave: ").Append(SupportAutoSave).Append("\n");
            sb.Append("  PasswordMaxAge: ").Append(PasswordMaxAge).Append("\n");
            sb.Append("  InitialPasswordChange: ").Append(InitialPasswordChange).Append("\n");
            sb.Append("  PasswordHistorySize: ").Append(PasswordHistorySize).Append("\n");
            sb.Append("  PasswordExpiryForAdmin: ").Append(PasswordExpiryForAdmin).Append("\n");
            sb.Append("  CacheExpiration: ").Append(CacheExpiration).Append("\n");
            sb.Append("  EnableRFC7613UsercaseMappedProfile: ").Append(EnableRFC7613UsercaseMappedProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UsersPath == input.UsersPath ||
                    (this.UsersPath != null &&
                    this.UsersPath.Equals(input.UsersPath))
                ) && 
                (
                    this.GroupsPath == input.GroupsPath ||
                    (this.GroupsPath != null &&
                    this.GroupsPath.Equals(input.GroupsPath))
                ) && 
                (
                    this.SystemRelativePath == input.SystemRelativePath ||
                    (this.SystemRelativePath != null &&
                    this.SystemRelativePath.Equals(input.SystemRelativePath))
                ) && 
                (
                    this.DefaultDepth == input.DefaultDepth ||
                    (this.DefaultDepth != null &&
                    this.DefaultDepth.Equals(input.DefaultDepth))
                ) && 
                (
                    this.ImportBehavior == input.ImportBehavior ||
                    (this.ImportBehavior != null &&
                    this.ImportBehavior.Equals(input.ImportBehavior))
                ) && 
                (
                    this.PasswordHashAlgorithm == input.PasswordHashAlgorithm ||
                    (this.PasswordHashAlgorithm != null &&
                    this.PasswordHashAlgorithm.Equals(input.PasswordHashAlgorithm))
                ) && 
                (
                    this.PasswordHashIterations == input.PasswordHashIterations ||
                    (this.PasswordHashIterations != null &&
                    this.PasswordHashIterations.Equals(input.PasswordHashIterations))
                ) && 
                (
                    this.PasswordSaltSize == input.PasswordSaltSize ||
                    (this.PasswordSaltSize != null &&
                    this.PasswordSaltSize.Equals(input.PasswordSaltSize))
                ) && 
                (
                    this.OmitAdminPw == input.OmitAdminPw ||
                    (this.OmitAdminPw != null &&
                    this.OmitAdminPw.Equals(input.OmitAdminPw))
                ) && 
                (
                    this.SupportAutoSave == input.SupportAutoSave ||
                    (this.SupportAutoSave != null &&
                    this.SupportAutoSave.Equals(input.SupportAutoSave))
                ) && 
                (
                    this.PasswordMaxAge == input.PasswordMaxAge ||
                    (this.PasswordMaxAge != null &&
                    this.PasswordMaxAge.Equals(input.PasswordMaxAge))
                ) && 
                (
                    this.InitialPasswordChange == input.InitialPasswordChange ||
                    (this.InitialPasswordChange != null &&
                    this.InitialPasswordChange.Equals(input.InitialPasswordChange))
                ) && 
                (
                    this.PasswordHistorySize == input.PasswordHistorySize ||
                    (this.PasswordHistorySize != null &&
                    this.PasswordHistorySize.Equals(input.PasswordHistorySize))
                ) && 
                (
                    this.PasswordExpiryForAdmin == input.PasswordExpiryForAdmin ||
                    (this.PasswordExpiryForAdmin != null &&
                    this.PasswordExpiryForAdmin.Equals(input.PasswordExpiryForAdmin))
                ) && 
                (
                    this.CacheExpiration == input.CacheExpiration ||
                    (this.CacheExpiration != null &&
                    this.CacheExpiration.Equals(input.CacheExpiration))
                ) && 
                (
                    this.EnableRFC7613UsercaseMappedProfile == input.EnableRFC7613UsercaseMappedProfile ||
                    (this.EnableRFC7613UsercaseMappedProfile != null &&
                    this.EnableRFC7613UsercaseMappedProfile.Equals(input.EnableRFC7613UsercaseMappedProfile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsersPath != null)
                    hashCode = hashCode * 59 + this.UsersPath.GetHashCode();
                if (this.GroupsPath != null)
                    hashCode = hashCode * 59 + this.GroupsPath.GetHashCode();
                if (this.SystemRelativePath != null)
                    hashCode = hashCode * 59 + this.SystemRelativePath.GetHashCode();
                if (this.DefaultDepth != null)
                    hashCode = hashCode * 59 + this.DefaultDepth.GetHashCode();
                if (this.ImportBehavior != null)
                    hashCode = hashCode * 59 + this.ImportBehavior.GetHashCode();
                if (this.PasswordHashAlgorithm != null)
                    hashCode = hashCode * 59 + this.PasswordHashAlgorithm.GetHashCode();
                if (this.PasswordHashIterations != null)
                    hashCode = hashCode * 59 + this.PasswordHashIterations.GetHashCode();
                if (this.PasswordSaltSize != null)
                    hashCode = hashCode * 59 + this.PasswordSaltSize.GetHashCode();
                if (this.OmitAdminPw != null)
                    hashCode = hashCode * 59 + this.OmitAdminPw.GetHashCode();
                if (this.SupportAutoSave != null)
                    hashCode = hashCode * 59 + this.SupportAutoSave.GetHashCode();
                if (this.PasswordMaxAge != null)
                    hashCode = hashCode * 59 + this.PasswordMaxAge.GetHashCode();
                if (this.InitialPasswordChange != null)
                    hashCode = hashCode * 59 + this.InitialPasswordChange.GetHashCode();
                if (this.PasswordHistorySize != null)
                    hashCode = hashCode * 59 + this.PasswordHistorySize.GetHashCode();
                if (this.PasswordExpiryForAdmin != null)
                    hashCode = hashCode * 59 + this.PasswordExpiryForAdmin.GetHashCode();
                if (this.CacheExpiration != null)
                    hashCode = hashCode * 59 + this.CacheExpiration.GetHashCode();
                if (this.EnableRFC7613UsercaseMappedProfile != null)
                    hashCode = hashCode * 59 + this.EnableRFC7613UsercaseMappedProfile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
