/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties(QString json) {
    this->fromJson(json);
}

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() {
    this->init();
}

OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::~OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties() {
    
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::init() {
    m_mongouri_isSet = false;
    m_db_isSet = false;
    m_socket_keep_alive_isSet = false;
    m_cache_isSet = false;
    m_node_cache_percentage_isSet = false;
    m_prev_doc_cache_percentage_isSet = false;
    m_children_cache_percentage_isSet = false;
    m_diff_cache_percentage_isSet = false;
    m_cache_segment_count_isSet = false;
    m_cache_stack_move_distance_isSet = false;
    m_blob_cache_size_isSet = false;
    m_persistent_cache_isSet = false;
    m_journal_cache_isSet = false;
    m_custom_blob_store_isSet = false;
    m_journal_gc_interval_isSet = false;
    m_journal_gc_max_age_isSet = false;
    m_prefetch_external_changes_isSet = false;
    m_role_isSet = false;
    m_version_gc_max_age_in_secs_isSet = false;
    m_version_gc_expression_isSet = false;
    m_version_gc_time_limit_in_secs_isSet = false;
    m_blob_gc_max_age_in_secs_isSet = false;
    m_blob_track_snapshot_interval_in_secs_isSet = false;
    m_repository_home_isSet = false;
    m_max_replication_lag_in_secs_isSet = false;
    m_document_store_type_isSet = false;
    m_bundling_disabled_isSet = false;
    m_update_limit_isSet = false;
    m_persistent_cache_includes_isSet = false;
    m_lease_check_mode_isSet = false;
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(mongouri, json[QString("mongouri")]);
    
    ::OpenAPI::fromJsonValue(db, json[QString("db")]);
    
    ::OpenAPI::fromJsonValue(socket_keep_alive, json[QString("socketKeepAlive")]);
    
    ::OpenAPI::fromJsonValue(cache, json[QString("cache")]);
    
    ::OpenAPI::fromJsonValue(node_cache_percentage, json[QString("nodeCachePercentage")]);
    
    ::OpenAPI::fromJsonValue(prev_doc_cache_percentage, json[QString("prevDocCachePercentage")]);
    
    ::OpenAPI::fromJsonValue(children_cache_percentage, json[QString("childrenCachePercentage")]);
    
    ::OpenAPI::fromJsonValue(diff_cache_percentage, json[QString("diffCachePercentage")]);
    
    ::OpenAPI::fromJsonValue(cache_segment_count, json[QString("cacheSegmentCount")]);
    
    ::OpenAPI::fromJsonValue(cache_stack_move_distance, json[QString("cacheStackMoveDistance")]);
    
    ::OpenAPI::fromJsonValue(blob_cache_size, json[QString("blobCacheSize")]);
    
    ::OpenAPI::fromJsonValue(persistent_cache, json[QString("persistentCache")]);
    
    ::OpenAPI::fromJsonValue(journal_cache, json[QString("journalCache")]);
    
    ::OpenAPI::fromJsonValue(custom_blob_store, json[QString("customBlobStore")]);
    
    ::OpenAPI::fromJsonValue(journal_gc_interval, json[QString("journalGCInterval")]);
    
    ::OpenAPI::fromJsonValue(journal_gc_max_age, json[QString("journalGCMaxAge")]);
    
    ::OpenAPI::fromJsonValue(prefetch_external_changes, json[QString("prefetchExternalChanges")]);
    
    ::OpenAPI::fromJsonValue(role, json[QString("role")]);
    
    ::OpenAPI::fromJsonValue(version_gc_max_age_in_secs, json[QString("versionGcMaxAgeInSecs")]);
    
    ::OpenAPI::fromJsonValue(version_gc_expression, json[QString("versionGCExpression")]);
    
    ::OpenAPI::fromJsonValue(version_gc_time_limit_in_secs, json[QString("versionGCTimeLimitInSecs")]);
    
    ::OpenAPI::fromJsonValue(blob_gc_max_age_in_secs, json[QString("blobGcMaxAgeInSecs")]);
    
    ::OpenAPI::fromJsonValue(blob_track_snapshot_interval_in_secs, json[QString("blobTrackSnapshotIntervalInSecs")]);
    
    ::OpenAPI::fromJsonValue(repository_home, json[QString("repository.home")]);
    
    ::OpenAPI::fromJsonValue(max_replication_lag_in_secs, json[QString("maxReplicationLagInSecs")]);
    
    ::OpenAPI::fromJsonValue(document_store_type, json[QString("documentStoreType")]);
    
    ::OpenAPI::fromJsonValue(bundling_disabled, json[QString("bundlingDisabled")]);
    
    ::OpenAPI::fromJsonValue(update_limit, json[QString("updateLimit")]);
    
    ::OpenAPI::fromJsonValue(persistent_cache_includes, json[QString("persistentCacheIncludes")]);
    
    ::OpenAPI::fromJsonValue(lease_check_mode, json[QString("leaseCheckMode")]);
    
}

QString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::asJsonObject() const {
    QJsonObject obj;
	if(mongouri.isSet()){
        obj.insert(QString("mongouri"), ::OpenAPI::toJsonValue(mongouri));
    }
	if(db.isSet()){
        obj.insert(QString("db"), ::OpenAPI::toJsonValue(db));
    }
	if(socket_keep_alive.isSet()){
        obj.insert(QString("socketKeepAlive"), ::OpenAPI::toJsonValue(socket_keep_alive));
    }
	if(cache.isSet()){
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(cache));
    }
	if(node_cache_percentage.isSet()){
        obj.insert(QString("nodeCachePercentage"), ::OpenAPI::toJsonValue(node_cache_percentage));
    }
	if(prev_doc_cache_percentage.isSet()){
        obj.insert(QString("prevDocCachePercentage"), ::OpenAPI::toJsonValue(prev_doc_cache_percentage));
    }
	if(children_cache_percentage.isSet()){
        obj.insert(QString("childrenCachePercentage"), ::OpenAPI::toJsonValue(children_cache_percentage));
    }
	if(diff_cache_percentage.isSet()){
        obj.insert(QString("diffCachePercentage"), ::OpenAPI::toJsonValue(diff_cache_percentage));
    }
	if(cache_segment_count.isSet()){
        obj.insert(QString("cacheSegmentCount"), ::OpenAPI::toJsonValue(cache_segment_count));
    }
	if(cache_stack_move_distance.isSet()){
        obj.insert(QString("cacheStackMoveDistance"), ::OpenAPI::toJsonValue(cache_stack_move_distance));
    }
	if(blob_cache_size.isSet()){
        obj.insert(QString("blobCacheSize"), ::OpenAPI::toJsonValue(blob_cache_size));
    }
	if(persistent_cache.isSet()){
        obj.insert(QString("persistentCache"), ::OpenAPI::toJsonValue(persistent_cache));
    }
	if(journal_cache.isSet()){
        obj.insert(QString("journalCache"), ::OpenAPI::toJsonValue(journal_cache));
    }
	if(custom_blob_store.isSet()){
        obj.insert(QString("customBlobStore"), ::OpenAPI::toJsonValue(custom_blob_store));
    }
	if(journal_gc_interval.isSet()){
        obj.insert(QString("journalGCInterval"), ::OpenAPI::toJsonValue(journal_gc_interval));
    }
	if(journal_gc_max_age.isSet()){
        obj.insert(QString("journalGCMaxAge"), ::OpenAPI::toJsonValue(journal_gc_max_age));
    }
	if(prefetch_external_changes.isSet()){
        obj.insert(QString("prefetchExternalChanges"), ::OpenAPI::toJsonValue(prefetch_external_changes));
    }
	if(role.isSet()){
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(role));
    }
	if(version_gc_max_age_in_secs.isSet()){
        obj.insert(QString("versionGcMaxAgeInSecs"), ::OpenAPI::toJsonValue(version_gc_max_age_in_secs));
    }
	if(version_gc_expression.isSet()){
        obj.insert(QString("versionGCExpression"), ::OpenAPI::toJsonValue(version_gc_expression));
    }
	if(version_gc_time_limit_in_secs.isSet()){
        obj.insert(QString("versionGCTimeLimitInSecs"), ::OpenAPI::toJsonValue(version_gc_time_limit_in_secs));
    }
	if(blob_gc_max_age_in_secs.isSet()){
        obj.insert(QString("blobGcMaxAgeInSecs"), ::OpenAPI::toJsonValue(blob_gc_max_age_in_secs));
    }
	if(blob_track_snapshot_interval_in_secs.isSet()){
        obj.insert(QString("blobTrackSnapshotIntervalInSecs"), ::OpenAPI::toJsonValue(blob_track_snapshot_interval_in_secs));
    }
	if(repository_home.isSet()){
        obj.insert(QString("repository.home"), ::OpenAPI::toJsonValue(repository_home));
    }
	if(max_replication_lag_in_secs.isSet()){
        obj.insert(QString("maxReplicationLagInSecs"), ::OpenAPI::toJsonValue(max_replication_lag_in_secs));
    }
	if(document_store_type.isSet()){
        obj.insert(QString("documentStoreType"), ::OpenAPI::toJsonValue(document_store_type));
    }
	if(bundling_disabled.isSet()){
        obj.insert(QString("bundlingDisabled"), ::OpenAPI::toJsonValue(bundling_disabled));
    }
	if(update_limit.isSet()){
        obj.insert(QString("updateLimit"), ::OpenAPI::toJsonValue(update_limit));
    }
	if(persistent_cache_includes.isSet()){
        obj.insert(QString("persistentCacheIncludes"), ::OpenAPI::toJsonValue(persistent_cache_includes));
    }
	if(lease_check_mode.isSet()){
        obj.insert(QString("leaseCheckMode"), ::OpenAPI::toJsonValue(lease_check_mode));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMongouri() const {
    return mongouri;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMongouri(const OAIConfigNodePropertyString &mongouri) {
    this->mongouri = mongouri;
    this->m_mongouri_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDb() const {
    return db;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDb(const OAIConfigNodePropertyString &db) {
    this->db = db;
    this->m_db_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getSocketKeepAlive() const {
    return socket_keep_alive;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setSocketKeepAlive(const OAIConfigNodePropertyBoolean &socket_keep_alive) {
    this->socket_keep_alive = socket_keep_alive;
    this->m_socket_keep_alive_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCache() const {
    return cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCache(const OAIConfigNodePropertyInteger &cache) {
    this->cache = cache;
    this->m_cache_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getNodeCachePercentage() const {
    return node_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setNodeCachePercentage(const OAIConfigNodePropertyInteger &node_cache_percentage) {
    this->node_cache_percentage = node_cache_percentage;
    this->m_node_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrevDocCachePercentage() const {
    return prev_doc_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrevDocCachePercentage(const OAIConfigNodePropertyInteger &prev_doc_cache_percentage) {
    this->prev_doc_cache_percentage = prev_doc_cache_percentage;
    this->m_prev_doc_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getChildrenCachePercentage() const {
    return children_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setChildrenCachePercentage(const OAIConfigNodePropertyInteger &children_cache_percentage) {
    this->children_cache_percentage = children_cache_percentage;
    this->m_children_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDiffCachePercentage() const {
    return diff_cache_percentage;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDiffCachePercentage(const OAIConfigNodePropertyInteger &diff_cache_percentage) {
    this->diff_cache_percentage = diff_cache_percentage;
    this->m_diff_cache_percentage_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheSegmentCount() const {
    return cache_segment_count;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheSegmentCount(const OAIConfigNodePropertyInteger &cache_segment_count) {
    this->cache_segment_count = cache_segment_count;
    this->m_cache_segment_count_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCacheStackMoveDistance() const {
    return cache_stack_move_distance;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCacheStackMoveDistance(const OAIConfigNodePropertyInteger &cache_stack_move_distance) {
    this->cache_stack_move_distance = cache_stack_move_distance;
    this->m_cache_stack_move_distance_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobCacheSize() const {
    return blob_cache_size;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobCacheSize(const OAIConfigNodePropertyInteger &blob_cache_size) {
    this->blob_cache_size = blob_cache_size;
    this->m_blob_cache_size_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCache() const {
    return persistent_cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCache(const OAIConfigNodePropertyString &persistent_cache) {
    this->persistent_cache = persistent_cache;
    this->m_persistent_cache_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalCache() const {
    return journal_cache;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalCache(const OAIConfigNodePropertyString &journal_cache) {
    this->journal_cache = journal_cache;
    this->m_journal_cache_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getCustomBlobStore() const {
    return custom_blob_store;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setCustomBlobStore(const OAIConfigNodePropertyBoolean &custom_blob_store) {
    this->custom_blob_store = custom_blob_store;
    this->m_custom_blob_store_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGcInterval() const {
    return journal_gc_interval;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGcInterval(const OAIConfigNodePropertyInteger &journal_gc_interval) {
    this->journal_gc_interval = journal_gc_interval;
    this->m_journal_gc_interval_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getJournalGcMaxAge() const {
    return journal_gc_max_age;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setJournalGcMaxAge(const OAIConfigNodePropertyInteger &journal_gc_max_age) {
    this->journal_gc_max_age = journal_gc_max_age;
    this->m_journal_gc_max_age_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPrefetchExternalChanges() const {
    return prefetch_external_changes;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPrefetchExternalChanges(const OAIConfigNodePropertyBoolean &prefetch_external_changes) {
    this->prefetch_external_changes = prefetch_external_changes;
    this->m_prefetch_external_changes_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRole() const {
    return role;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRole(const OAIConfigNodePropertyString &role) {
    this->role = role;
    this->m_role_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcMaxAgeInSecs() const {
    return version_gc_max_age_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcMaxAgeInSecs(const OAIConfigNodePropertyInteger &version_gc_max_age_in_secs) {
    this->version_gc_max_age_in_secs = version_gc_max_age_in_secs;
    this->m_version_gc_max_age_in_secs_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcExpression() const {
    return version_gc_expression;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcExpression(const OAIConfigNodePropertyString &version_gc_expression) {
    this->version_gc_expression = version_gc_expression;
    this->m_version_gc_expression_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getVersionGcTimeLimitInSecs() const {
    return version_gc_time_limit_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setVersionGcTimeLimitInSecs(const OAIConfigNodePropertyInteger &version_gc_time_limit_in_secs) {
    this->version_gc_time_limit_in_secs = version_gc_time_limit_in_secs;
    this->m_version_gc_time_limit_in_secs_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobGcMaxAgeInSecs() const {
    return blob_gc_max_age_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobGcMaxAgeInSecs(const OAIConfigNodePropertyInteger &blob_gc_max_age_in_secs) {
    this->blob_gc_max_age_in_secs = blob_gc_max_age_in_secs;
    this->m_blob_gc_max_age_in_secs_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBlobTrackSnapshotIntervalInSecs() const {
    return blob_track_snapshot_interval_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBlobTrackSnapshotIntervalInSecs(const OAIConfigNodePropertyInteger &blob_track_snapshot_interval_in_secs) {
    this->blob_track_snapshot_interval_in_secs = blob_track_snapshot_interval_in_secs;
    this->m_blob_track_snapshot_interval_in_secs_isSet = true;
}

OAIConfigNodePropertyString
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getRepositoryHome() const {
    return repository_home;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setRepositoryHome(const OAIConfigNodePropertyString &repository_home) {
    this->repository_home = repository_home;
    this->m_repository_home_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getMaxReplicationLagInSecs() const {
    return max_replication_lag_in_secs;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setMaxReplicationLagInSecs(const OAIConfigNodePropertyInteger &max_replication_lag_in_secs) {
    this->max_replication_lag_in_secs = max_replication_lag_in_secs;
    this->m_max_replication_lag_in_secs_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getDocumentStoreType() const {
    return document_store_type;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setDocumentStoreType(const OAIConfigNodePropertyDropDown &document_store_type) {
    this->document_store_type = document_store_type;
    this->m_document_store_type_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getBundlingDisabled() const {
    return bundling_disabled;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setBundlingDisabled(const OAIConfigNodePropertyBoolean &bundling_disabled) {
    this->bundling_disabled = bundling_disabled;
    this->m_bundling_disabled_isSet = true;
}

OAIConfigNodePropertyInteger
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getUpdateLimit() const {
    return update_limit;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setUpdateLimit(const OAIConfigNodePropertyInteger &update_limit) {
    this->update_limit = update_limit;
    this->m_update_limit_isSet = true;
}

OAIConfigNodePropertyArray
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getPersistentCacheIncludes() const {
    return persistent_cache_includes;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setPersistentCacheIncludes(const OAIConfigNodePropertyArray &persistent_cache_includes) {
    this->persistent_cache_includes = persistent_cache_includes;
    this->m_persistent_cache_includes_isSet = true;
}

OAIConfigNodePropertyDropDown
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::getLeaseCheckMode() const {
    return lease_check_mode;
}
void
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::setLeaseCheckMode(const OAIConfigNodePropertyDropDown &lease_check_mode) {
    this->lease_check_mode = lease_check_mode;
    this->m_lease_check_mode_isSet = true;
}


bool
OAIOrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(mongouri.isSet()){ isObjectUpdated = true; break;}
    
        if(db.isSet()){ isObjectUpdated = true; break;}
    
        if(socket_keep_alive.isSet()){ isObjectUpdated = true; break;}
    
        if(cache.isSet()){ isObjectUpdated = true; break;}
    
        if(node_cache_percentage.isSet()){ isObjectUpdated = true; break;}
    
        if(prev_doc_cache_percentage.isSet()){ isObjectUpdated = true; break;}
    
        if(children_cache_percentage.isSet()){ isObjectUpdated = true; break;}
    
        if(diff_cache_percentage.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_segment_count.isSet()){ isObjectUpdated = true; break;}
    
        if(cache_stack_move_distance.isSet()){ isObjectUpdated = true; break;}
    
        if(blob_cache_size.isSet()){ isObjectUpdated = true; break;}
    
        if(persistent_cache.isSet()){ isObjectUpdated = true; break;}
    
        if(journal_cache.isSet()){ isObjectUpdated = true; break;}
    
        if(custom_blob_store.isSet()){ isObjectUpdated = true; break;}
    
        if(journal_gc_interval.isSet()){ isObjectUpdated = true; break;}
    
        if(journal_gc_max_age.isSet()){ isObjectUpdated = true; break;}
    
        if(prefetch_external_changes.isSet()){ isObjectUpdated = true; break;}
    
        if(role.isSet()){ isObjectUpdated = true; break;}
    
        if(version_gc_max_age_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(version_gc_expression.isSet()){ isObjectUpdated = true; break;}
    
        if(version_gc_time_limit_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(blob_gc_max_age_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(blob_track_snapshot_interval_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(repository_home.isSet()){ isObjectUpdated = true; break;}
    
        if(max_replication_lag_in_secs.isSet()){ isObjectUpdated = true; break;}
    
        if(document_store_type.isSet()){ isObjectUpdated = true; break;}
    
        if(bundling_disabled.isSet()){ isObjectUpdated = true; break;}
    
        if(update_limit.isSet()){ isObjectUpdated = true; break;}
    
        if(persistent_cache_includes.isSet()){ isObjectUpdated = true; break;}
    
        if(lease_check_mode.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

