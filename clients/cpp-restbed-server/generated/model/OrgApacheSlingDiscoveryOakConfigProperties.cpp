/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingDiscoveryOakConfigProperties.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

OrgApacheSlingDiscoveryOakConfigProperties::OrgApacheSlingDiscoveryOakConfigProperties()
{
    
}

OrgApacheSlingDiscoveryOakConfigProperties::~OrgApacheSlingDiscoveryOakConfigProperties()
{
}

std::string OrgApacheSlingDiscoveryOakConfigProperties::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void OrgApacheSlingDiscoveryOakConfigProperties::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingTimeout() const
{
    return m_ConnectorPingTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConnectorPingTimeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getConnectorPingInterval() const
{
    return m_ConnectorPingInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setConnectorPingInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ConnectorPingInterval = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getDiscoveryLiteCheckInterval() const
{
    return m_DiscoveryLiteCheckInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setDiscoveryLiteCheckInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_DiscoveryLiteCheckInterval = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceTimeout() const
{
    return m_ClusterSyncServiceTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ClusterSyncServiceTimeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getClusterSyncServiceInterval() const
{
    return m_ClusterSyncServiceInterval;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setClusterSyncServiceInterval(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_ClusterSyncServiceInterval = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getEnableSyncToken() const
{
    return m_EnableSyncToken;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setEnableSyncToken(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableSyncToken = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getMinEventDelay() const
{
    return m_MinEventDelay;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setMinEventDelay(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_MinEventDelay = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getSocketConnectTimeout() const
{
    return m_SocketConnectTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSocketConnectTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SocketConnectTimeout = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getSoTimeout() const
{
    return m_SoTimeout;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSoTimeout(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_SoTimeout = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorUrls() const
{
    return m_TopologyConnectorUrls;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorUrls(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_TopologyConnectorUrls = value;
}
std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingDiscoveryOakConfigProperties::getTopologyConnectorWhitelist() const
{
    return m_TopologyConnectorWhitelist;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setTopologyConnectorWhitelist(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_TopologyConnectorWhitelist = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getAutoStopLocalLoopEnabled() const
{
    return m_AutoStopLocalLoopEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setAutoStopLocalLoopEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_AutoStopLocalLoopEnabled = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getGzipConnectorRequestsEnabled() const
{
    return m_GzipConnectorRequestsEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setGzipConnectorRequestsEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_GzipConnectorRequestsEnabled = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getHmacEnabled() const
{
    return m_HmacEnabled;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setHmacEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_HmacEnabled = value;
}
std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingDiscoveryOakConfigProperties::getEnableEncryption() const
{
    return m_EnableEncryption;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setEnableEncryption(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_EnableEncryption = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getSharedKey() const
{
    return m_SharedKey;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setSharedKey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_SharedKey = value;
}
std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingDiscoveryOakConfigProperties::getHmacSharedKeyTTL() const
{
    return m_HmacSharedKeyTTL;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setHmacSharedKeyTTL(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_HmacSharedKeyTTL = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStandbyFactor() const
{
    return m_BackoffStandbyFactor;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStandbyFactor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_BackoffStandbyFactor = value;
}
std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingDiscoveryOakConfigProperties::getBackoffStableFactor() const
{
    return m_BackoffStableFactor;
}
void OrgApacheSlingDiscoveryOakConfigProperties::setBackoffStableFactor(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_BackoffStableFactor = value;
}

}
}
}
}

