/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamIdsImplIDSJobProcessorProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamIdsImplIDSJobProcessorProperties::OAIComDayCqDamIdsImplIDSJobProcessorProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqDamIdsImplIDSJobProcessorProperties::OAIComDayCqDamIdsImplIDSJobProcessorProperties() {
    init();
}

OAIComDayCqDamIdsImplIDSJobProcessorProperties::~OAIComDayCqDamIdsImplIDSJobProcessorProperties() {
    this->cleanup();
}

void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::init() {
    enable_multisession = new OAIConfigNodePropertyBoolean();
    m_enable_multisession_isSet = false;
    ids_cc_enable = new OAIConfigNodePropertyBoolean();
    m_ids_cc_enable_isSet = false;
    enable_retry = new OAIConfigNodePropertyBoolean();
    m_enable_retry_isSet = false;
    enable_retry_scripterror = new OAIConfigNodePropertyBoolean();
    m_enable_retry_scripterror_isSet = false;
    externalizer_domain_cqhost = new OAIConfigNodePropertyString();
    m_externalizer_domain_cqhost_isSet = false;
    externalizer_domain_http = new OAIConfigNodePropertyString();
    m_externalizer_domain_http_isSet = false;
}

void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::cleanup() {
    if(enable_multisession != nullptr) { 
        delete enable_multisession;
    }
    if(ids_cc_enable != nullptr) { 
        delete ids_cc_enable;
    }
    if(enable_retry != nullptr) { 
        delete enable_retry;
    }
    if(enable_retry_scripterror != nullptr) { 
        delete enable_retry_scripterror;
    }
    if(externalizer_domain_cqhost != nullptr) { 
        delete externalizer_domain_cqhost;
    }
    if(externalizer_domain_http != nullptr) { 
        delete externalizer_domain_http;
    }
}

OAIComDayCqDamIdsImplIDSJobProcessorProperties*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&enable_multisession, pJson["enable.multisession"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&ids_cc_enable, pJson["ids.cc.enable"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&enable_retry, pJson["enable.retry"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&enable_retry_scripterror, pJson["enable.retry.scripterror"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&externalizer_domain_cqhost, pJson["externalizer.domain.cqhost"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&externalizer_domain_http, pJson["externalizer.domain.http"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComDayCqDamIdsImplIDSJobProcessorProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamIdsImplIDSJobProcessorProperties::asJsonObject() {
    QJsonObject obj;
    if((enable_multisession != nullptr) && (enable_multisession->isSet())){
        toJsonValue(QString("enable.multisession"), enable_multisession, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((ids_cc_enable != nullptr) && (ids_cc_enable->isSet())){
        toJsonValue(QString("ids.cc.enable"), ids_cc_enable, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((enable_retry != nullptr) && (enable_retry->isSet())){
        toJsonValue(QString("enable.retry"), enable_retry, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((enable_retry_scripterror != nullptr) && (enable_retry_scripterror->isSet())){
        toJsonValue(QString("enable.retry.scripterror"), enable_retry_scripterror, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((externalizer_domain_cqhost != nullptr) && (externalizer_domain_cqhost->isSet())){
        toJsonValue(QString("externalizer.domain.cqhost"), externalizer_domain_cqhost, obj, QString("OAIConfigNodePropertyString"));
    }
    if((externalizer_domain_http != nullptr) && (externalizer_domain_http->isSet())){
        toJsonValue(QString("externalizer.domain.http"), externalizer_domain_http, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getEnableMultisession() {
    return enable_multisession;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setEnableMultisession(OAIConfigNodePropertyBoolean* enable_multisession) {
    this->enable_multisession = enable_multisession;
    this->m_enable_multisession_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getIdsCcEnable() {
    return ids_cc_enable;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setIdsCcEnable(OAIConfigNodePropertyBoolean* ids_cc_enable) {
    this->ids_cc_enable = ids_cc_enable;
    this->m_ids_cc_enable_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetry() {
    return enable_retry;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetry(OAIConfigNodePropertyBoolean* enable_retry) {
    this->enable_retry = enable_retry;
    this->m_enable_retry_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getEnableRetryScripterror() {
    return enable_retry_scripterror;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setEnableRetryScripterror(OAIConfigNodePropertyBoolean* enable_retry_scripterror) {
    this->enable_retry_scripterror = enable_retry_scripterror;
    this->m_enable_retry_scripterror_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainCqhost() {
    return externalizer_domain_cqhost;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainCqhost(OAIConfigNodePropertyString* externalizer_domain_cqhost) {
    this->externalizer_domain_cqhost = externalizer_domain_cqhost;
    this->m_externalizer_domain_cqhost_isSet = true;
}

OAIConfigNodePropertyString*
OAIComDayCqDamIdsImplIDSJobProcessorProperties::getExternalizerDomainHttp() {
    return externalizer_domain_http;
}
void
OAIComDayCqDamIdsImplIDSJobProcessorProperties::setExternalizerDomainHttp(OAIConfigNodePropertyString* externalizer_domain_http) {
    this->externalizer_domain_http = externalizer_domain_http;
    this->m_externalizer_domain_http_isSet = true;
}


bool
OAIComDayCqDamIdsImplIDSJobProcessorProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(enable_multisession != nullptr && enable_multisession->isSet()){ isObjectUpdated = true; break;}
        if(ids_cc_enable != nullptr && ids_cc_enable->isSet()){ isObjectUpdated = true; break;}
        if(enable_retry != nullptr && enable_retry->isSet()){ isObjectUpdated = true; break;}
        if(enable_retry_scripterror != nullptr && enable_retry_scripterror->isSet()){ isObjectUpdated = true; break;}
        if(externalizer_domain_cqhost != nullptr && externalizer_domain_cqhost->isSet()){ isObjectUpdated = true; break;}
        if(externalizer_domain_http != nullptr && externalizer_domain_http->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

