/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComAdobeGraniteFragsImplRandomFeatureProperties
    /// </summary>
    [DataContract]
    public partial class ComAdobeGraniteFragsImplRandomFeatureProperties :  IEquatable<ComAdobeGraniteFragsImplRandomFeatureProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComAdobeGraniteFragsImplRandomFeatureProperties" /> class.
        /// </summary>
        /// <param name="featureName">featureName.</param>
        /// <param name="featureDescription">featureDescription.</param>
        /// <param name="activePercentage">activePercentage.</param>
        /// <param name="cookieName">cookieName.</param>
        /// <param name="cookieMaxAge">cookieMaxAge.</param>
        public ComAdobeGraniteFragsImplRandomFeatureProperties(ConfigNodePropertyString featureName = default(ConfigNodePropertyString), ConfigNodePropertyString featureDescription = default(ConfigNodePropertyString), ConfigNodePropertyString activePercentage = default(ConfigNodePropertyString), ConfigNodePropertyString cookieName = default(ConfigNodePropertyString), ConfigNodePropertyInteger cookieMaxAge = default(ConfigNodePropertyInteger))
        {
            this.FeatureName = featureName;
            this.FeatureDescription = featureDescription;
            this.ActivePercentage = activePercentage;
            this.CookieName = cookieName;
            this.CookieMaxAge = cookieMaxAge;
        }
        
        /// <summary>
        /// Gets or Sets FeatureName
        /// </summary>
        [DataMember(Name="feature.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString FeatureName { get; set; }

        /// <summary>
        /// Gets or Sets FeatureDescription
        /// </summary>
        [DataMember(Name="feature.description", EmitDefaultValue=false)]
        public ConfigNodePropertyString FeatureDescription { get; set; }

        /// <summary>
        /// Gets or Sets ActivePercentage
        /// </summary>
        [DataMember(Name="active.percentage", EmitDefaultValue=false)]
        public ConfigNodePropertyString ActivePercentage { get; set; }

        /// <summary>
        /// Gets or Sets CookieName
        /// </summary>
        [DataMember(Name="cookie.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString CookieName { get; set; }

        /// <summary>
        /// Gets or Sets CookieMaxAge
        /// </summary>
        [DataMember(Name="cookie.maxAge", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CookieMaxAge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComAdobeGraniteFragsImplRandomFeatureProperties {\n");
            sb.Append("  FeatureName: ").Append(FeatureName).Append("\n");
            sb.Append("  FeatureDescription: ").Append(FeatureDescription).Append("\n");
            sb.Append("  ActivePercentage: ").Append(ActivePercentage).Append("\n");
            sb.Append("  CookieName: ").Append(CookieName).Append("\n");
            sb.Append("  CookieMaxAge: ").Append(CookieMaxAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComAdobeGraniteFragsImplRandomFeatureProperties);
        }

        /// <summary>
        /// Returns true if ComAdobeGraniteFragsImplRandomFeatureProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComAdobeGraniteFragsImplRandomFeatureProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComAdobeGraniteFragsImplRandomFeatureProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeatureName == input.FeatureName ||
                    (this.FeatureName != null &&
                    this.FeatureName.Equals(input.FeatureName))
                ) && 
                (
                    this.FeatureDescription == input.FeatureDescription ||
                    (this.FeatureDescription != null &&
                    this.FeatureDescription.Equals(input.FeatureDescription))
                ) && 
                (
                    this.ActivePercentage == input.ActivePercentage ||
                    (this.ActivePercentage != null &&
                    this.ActivePercentage.Equals(input.ActivePercentage))
                ) && 
                (
                    this.CookieName == input.CookieName ||
                    (this.CookieName != null &&
                    this.CookieName.Equals(input.CookieName))
                ) && 
                (
                    this.CookieMaxAge == input.CookieMaxAge ||
                    (this.CookieMaxAge != null &&
                    this.CookieMaxAge.Equals(input.CookieMaxAge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeatureName != null)
                    hashCode = hashCode * 59 + this.FeatureName.GetHashCode();
                if (this.FeatureDescription != null)
                    hashCode = hashCode * 59 + this.FeatureDescription.GetHashCode();
                if (this.ActivePercentage != null)
                    hashCode = hashCode * 59 + this.ActivePercentage.GetHashCode();
                if (this.CookieName != null)
                    hashCode = hashCode * 59 + this.CookieName.GetHashCode();
                if (this.CookieMaxAge != null)
                    hashCode = hashCode * 59 + this.CookieMaxAge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
