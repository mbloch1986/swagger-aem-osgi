/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties.h
 *
 * 
 */

#ifndef OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties_H_
#define OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties_H_

#include <QJsonObject>


#include "OAIOAIConfigNodePropertyArray.h"
#include "OAIOAIConfigNodePropertyBoolean.h"
#include "OAIOAIConfigNodePropertyInteger.h"
#include "OAIOAIConfigNodePropertyString.h"

#include "OAIObject.h"

namespace OpenAPI {

class OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties: public OAIObject {
public:
    OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
    OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties(QString json);
    ~OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties();
    void init();
    void cleanup();

    QString asJson () override;
    QJsonObject asJsonObject() override;
    void fromJsonObject(QJsonObject json) override;
    OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties* fromJson(QString jsonString) override;

    OAIConfigNodePropertyArray* getResourceResolverSearchpath();
    void setResourceResolverSearchpath(OAIConfigNodePropertyArray* resource_resolver_searchpath);

    OAIConfigNodePropertyBoolean* getResourceResolverManglenamespaces();
    void setResourceResolverManglenamespaces(OAIConfigNodePropertyBoolean* resource_resolver_manglenamespaces);

    OAIConfigNodePropertyBoolean* getResourceResolverAllowDirect();
    void setResourceResolverAllowDirect(OAIConfigNodePropertyBoolean* resource_resolver_allow_direct);

    OAIConfigNodePropertyArray* getResourceResolverRequiredProviders();
    void setResourceResolverRequiredProviders(OAIConfigNodePropertyArray* resource_resolver_required_providers);

    OAIConfigNodePropertyArray* getResourceResolverRequiredProvidernames();
    void setResourceResolverRequiredProvidernames(OAIConfigNodePropertyArray* resource_resolver_required_providernames);

    OAIConfigNodePropertyArray* getResourceResolverVirtual();
    void setResourceResolverVirtual(OAIConfigNodePropertyArray* resource_resolver_virtual);

    OAIConfigNodePropertyArray* getResourceResolverMapping();
    void setResourceResolverMapping(OAIConfigNodePropertyArray* resource_resolver_mapping);

    OAIConfigNodePropertyString* getResourceResolverMapLocation();
    void setResourceResolverMapLocation(OAIConfigNodePropertyString* resource_resolver_map_location);

    OAIConfigNodePropertyArray* getResourceResolverMapObservation();
    void setResourceResolverMapObservation(OAIConfigNodePropertyArray* resource_resolver_map_observation);

    OAIConfigNodePropertyInteger* getResourceResolverDefaultVanityRedirectStatus();
    void setResourceResolverDefaultVanityRedirectStatus(OAIConfigNodePropertyInteger* resource_resolver_default_vanity_redirect_status);

    OAIConfigNodePropertyBoolean* getResourceResolverEnableVanitypath();
    void setResourceResolverEnableVanitypath(OAIConfigNodePropertyBoolean* resource_resolver_enable_vanitypath);

    OAIConfigNodePropertyInteger* getResourceResolverVanitypathMaxEntries();
    void setResourceResolverVanitypathMaxEntries(OAIConfigNodePropertyInteger* resource_resolver_vanitypath_max_entries);

    OAIConfigNodePropertyBoolean* getResourceResolverVanitypathMaxEntriesStartup();
    void setResourceResolverVanitypathMaxEntriesStartup(OAIConfigNodePropertyBoolean* resource_resolver_vanitypath_max_entries_startup);

    OAIConfigNodePropertyInteger* getResourceResolverVanitypathBloomfilterMaxBytes();
    void setResourceResolverVanitypathBloomfilterMaxBytes(OAIConfigNodePropertyInteger* resource_resolver_vanitypath_bloomfilter_max_bytes);

    OAIConfigNodePropertyBoolean* getResourceResolverOptimizeAliasResolution();
    void setResourceResolverOptimizeAliasResolution(OAIConfigNodePropertyBoolean* resource_resolver_optimize_alias_resolution);

    OAIConfigNodePropertyArray* getResourceResolverVanitypathWhitelist();
    void setResourceResolverVanitypathWhitelist(OAIConfigNodePropertyArray* resource_resolver_vanitypath_whitelist);

    OAIConfigNodePropertyArray* getResourceResolverVanitypathBlacklist();
    void setResourceResolverVanitypathBlacklist(OAIConfigNodePropertyArray* resource_resolver_vanitypath_blacklist);

    OAIConfigNodePropertyBoolean* getResourceResolverVanityPrecedence();
    void setResourceResolverVanityPrecedence(OAIConfigNodePropertyBoolean* resource_resolver_vanity_precedence);

    OAIConfigNodePropertyBoolean* getResourceResolverProviderhandlingParanoid();
    void setResourceResolverProviderhandlingParanoid(OAIConfigNodePropertyBoolean* resource_resolver_providerhandling_paranoid);

    OAIConfigNodePropertyBoolean* getResourceResolverLogClosing();
    void setResourceResolverLogClosing(OAIConfigNodePropertyBoolean* resource_resolver_log_closing);

    OAIConfigNodePropertyBoolean* getResourceResolverLogUnclosed();
    void setResourceResolverLogUnclosed(OAIConfigNodePropertyBoolean* resource_resolver_log_unclosed);


    virtual bool isSet() override;

private:
    OAIConfigNodePropertyArray* resource_resolver_searchpath;
    bool m_resource_resolver_searchpath_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_manglenamespaces;
    bool m_resource_resolver_manglenamespaces_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_allow_direct;
    bool m_resource_resolver_allow_direct_isSet;

    OAIConfigNodePropertyArray* resource_resolver_required_providers;
    bool m_resource_resolver_required_providers_isSet;

    OAIConfigNodePropertyArray* resource_resolver_required_providernames;
    bool m_resource_resolver_required_providernames_isSet;

    OAIConfigNodePropertyArray* resource_resolver_virtual;
    bool m_resource_resolver_virtual_isSet;

    OAIConfigNodePropertyArray* resource_resolver_mapping;
    bool m_resource_resolver_mapping_isSet;

    OAIConfigNodePropertyString* resource_resolver_map_location;
    bool m_resource_resolver_map_location_isSet;

    OAIConfigNodePropertyArray* resource_resolver_map_observation;
    bool m_resource_resolver_map_observation_isSet;

    OAIConfigNodePropertyInteger* resource_resolver_default_vanity_redirect_status;
    bool m_resource_resolver_default_vanity_redirect_status_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_enable_vanitypath;
    bool m_resource_resolver_enable_vanitypath_isSet;

    OAIConfigNodePropertyInteger* resource_resolver_vanitypath_max_entries;
    bool m_resource_resolver_vanitypath_max_entries_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_vanitypath_max_entries_startup;
    bool m_resource_resolver_vanitypath_max_entries_startup_isSet;

    OAIConfigNodePropertyInteger* resource_resolver_vanitypath_bloomfilter_max_bytes;
    bool m_resource_resolver_vanitypath_bloomfilter_max_bytes_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_optimize_alias_resolution;
    bool m_resource_resolver_optimize_alias_resolution_isSet;

    OAIConfigNodePropertyArray* resource_resolver_vanitypath_whitelist;
    bool m_resource_resolver_vanitypath_whitelist_isSet;

    OAIConfigNodePropertyArray* resource_resolver_vanitypath_blacklist;
    bool m_resource_resolver_vanitypath_blacklist_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_vanity_precedence;
    bool m_resource_resolver_vanity_precedence_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_providerhandling_paranoid;
    bool m_resource_resolver_providerhandling_paranoid_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_log_closing;
    bool m_resource_resolver_log_closing_isSet;

    OAIConfigNodePropertyBoolean* resource_resolver_log_unclosed;
    bool m_resource_resolver_log_unclosed_isSet;

};

}

#endif /* OAIOrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplProperties_H_ */
