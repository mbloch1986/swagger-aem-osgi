/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties.h
 *
 * 
 */

#ifndef OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_
#define OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_


#include "ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyDropDown.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties
    : public ModelBase
{
public:
    OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();
    virtual ~OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyString getName() const;
    void setName(ConfigNodePropertyString const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMinPoolSize() const;
    void setMinPoolSize(ConfigNodePropertyInteger const& value);
    bool minPoolSizeIsSet() const;
    void unsetMinPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxPoolSize() const;
    void setMaxPoolSize(ConfigNodePropertyInteger const& value);
    bool maxPoolSizeIsSet() const;
    void unsetMaxPoolSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getQueueSize() const;
    void setQueueSize(ConfigNodePropertyInteger const& value);
    bool queueSizeIsSet() const;
    void unsetQueueSize();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getMaxThreadAge() const;
    void setMaxThreadAge(ConfigNodePropertyInteger const& value);
    bool maxThreadAgeIsSet() const;
    void unsetMaxThreadAge();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getKeepAliveTime() const;
    void setKeepAliveTime(ConfigNodePropertyInteger const& value);
    bool keepAliveTimeIsSet() const;
    void unsetKeepAliveTime();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getBlockPolicy() const;
    void setBlockPolicy(ConfigNodePropertyDropDown const& value);
    bool blockPolicyIsSet() const;
    void unsetBlockPolicy();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getShutdownGraceful() const;
    void setShutdownGraceful(ConfigNodePropertyBoolean const& value);
    bool shutdownGracefulIsSet() const;
    void unsetShutdownGraceful();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyBoolean getDaemon() const;
    void setDaemon(ConfigNodePropertyBoolean const& value);
    bool daemonIsSet() const;
    void unsetDaemon();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyInteger getShutdownWaitTime() const;
    void setShutdownWaitTime(ConfigNodePropertyInteger const& value);
    bool shutdownWaitTimeIsSet() const;
    void unsetShutdownWaitTime();
    /// <summary>
    /// 
    /// </summary>
    ConfigNodePropertyDropDown getPriority() const;
    void setPriority(ConfigNodePropertyDropDown const& value);
    bool priorityIsSet() const;
    void unsetPriority();

protected:
    ConfigNodePropertyString m_Name;
    bool m_NameIsSet;
    ConfigNodePropertyInteger m_MinPoolSize;
    bool m_MinPoolSizeIsSet;
    ConfigNodePropertyInteger m_MaxPoolSize;
    bool m_MaxPoolSizeIsSet;
    ConfigNodePropertyInteger m_QueueSize;
    bool m_QueueSizeIsSet;
    ConfigNodePropertyInteger m_MaxThreadAge;
    bool m_MaxThreadAgeIsSet;
    ConfigNodePropertyInteger m_KeepAliveTime;
    bool m_KeepAliveTimeIsSet;
    ConfigNodePropertyDropDown m_BlockPolicy;
    bool m_BlockPolicyIsSet;
    ConfigNodePropertyBoolean m_ShutdownGraceful;
    bool m_ShutdownGracefulIsSet;
    ConfigNodePropertyBoolean m_Daemon;
    bool m_DaemonIsSet;
    ConfigNodePropertyInteger m_ShutdownWaitTime;
    bool m_ShutdownWaitTimeIsSet;
    ConfigNodePropertyDropDown m_Priority;
    bool m_PriorityIsSet;
};

}
}
}
}

#endif /* OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryProperties_H_ */
