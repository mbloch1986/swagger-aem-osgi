/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties()
{
    m_Cq_dam_allow_all_mimeIsSet = false;
    m_Cq_dam_allowed_asset_mimesIsSet = false;
    
}

ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::~ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties()
{
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Cq_dam_allow_all_mimeIsSet)
    {
        val["cq.dam.allow.all.mime"] = ModelBase::toJson(m_Cq_dam_allow_all_mime);
    }
    if(m_Cq_dam_allowed_asset_mimesIsSet)
    {
        val["cq.dam.allowed.asset.mimes"] = ModelBase::toJson(m_Cq_dam_allowed_asset_mimes);
    }
    

    return val;
}

void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::fromJson(nlohmann::json& val)
{
    if(val.find("cq.dam.allow.all.mime") != val.end())
    {
        if(!val["cq.dam.allow.all.mime"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["cq.dam.allow.all.mime"]);
            setCqDamAllowAllMime( newItem );
        }
        
    }
    if(val.find("cq.dam.allowed.asset.mimes") != val.end())
    {
        if(!val["cq.dam.allowed.asset.mimes"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["cq.dam.allowed.asset.mimes"]);
            setCqDamAllowedAssetMimes( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::getCqDamAllowAllMime() const
{
    return m_Cq_dam_allow_all_mime;
}
void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::setCqDamAllowAllMime(ConfigNodePropertyBoolean const& value)
{
    m_Cq_dam_allow_all_mime = value;
    m_Cq_dam_allow_all_mimeIsSet = true;
}
bool ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::cqDamAllowAllMimeIsSet() const
{
    return m_Cq_dam_allow_all_mimeIsSet;
}
void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::unsetCq_dam_allow_all_mime()
{
    m_Cq_dam_allow_all_mimeIsSet = false;
}
ConfigNodePropertyArray ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::getCqDamAllowedAssetMimes() const
{
    return m_Cq_dam_allowed_asset_mimes;
}
void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::setCqDamAllowedAssetMimes(ConfigNodePropertyArray const& value)
{
    m_Cq_dam_allowed_asset_mimes = value;
    m_Cq_dam_allowed_asset_mimesIsSet = true;
}
bool ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::cqDamAllowedAssetMimesIsSet() const
{
    return m_Cq_dam_allowed_asset_mimesIsSet;
}
void ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperProperties::unsetCq_dam_allowed_asset_mimes()
{
    m_Cq_dam_allowed_asset_mimesIsSet = false;
}

}
}
}
}

