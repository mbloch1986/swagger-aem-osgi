/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties()
{
    m_DatasourcesIsSet = false;
    m_StepIsSet = false;
    m_ArchivesIsSet = false;
    m_PathIsSet = false;
}

OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::~OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties()
{
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DatasourcesIsSet)
    {
        val[utility::conversions::to_string_t("datasources")] = ModelBase::toJson(m_Datasources);
    }
    if(m_StepIsSet)
    {
        val[utility::conversions::to_string_t("step")] = ModelBase::toJson(m_Step);
    }
    if(m_ArchivesIsSet)
    {
        val[utility::conversions::to_string_t("archives")] = ModelBase::toJson(m_Archives);
    }
    if(m_PathIsSet)
    {
        val[utility::conversions::to_string_t("path")] = ModelBase::toJson(m_Path);
    }

    return val;
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("datasources")))
    {
        if(!val[utility::conversions::to_string_t("datasources")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("datasources")]);
            setDatasources( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("step")))
    {
        if(!val[utility::conversions::to_string_t("step")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("step")]);
            setStep( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("archives")))
    {
        if(!val[utility::conversions::to_string_t("archives")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("archives")]);
            setArchives( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("path")))
    {
        if(!val[utility::conversions::to_string_t("path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("path")]);
            setPath( newItem );
        }
    }
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_DatasourcesIsSet)
    {
        if (m_Datasources.get())
        {
            m_Datasources->toMultipart(multipart, utility::conversions::to_string_t("datasources."));
        }
    }
    if(m_StepIsSet)
    {
        if (m_Step.get())
        {
            m_Step->toMultipart(multipart, utility::conversions::to_string_t("step."));
        }
    }
    if(m_ArchivesIsSet)
    {
        if (m_Archives.get())
        {
            m_Archives->toMultipart(multipart, utility::conversions::to_string_t("archives."));
        }
    }
    if(m_PathIsSet)
    {
        if (m_Path.get())
        {
            m_Path->toMultipart(multipart, utility::conversions::to_string_t("path."));
        }
    }
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("datasources")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("datasources")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("datasources."));
            setDatasources( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("step")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("step")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("step."));
            setStep( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("archives")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("archives")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("archives."));
            setArchives( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("path")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("path."));
            setPath( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getDatasources() const
{
    return m_Datasources;
}


void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setDatasources(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Datasources = value;
    m_DatasourcesIsSet = true;
}
bool OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::datasourcesIsSet() const
{
    return m_DatasourcesIsSet;
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::unsetDatasources()
{
    m_DatasourcesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getStep() const
{
    return m_Step;
}


void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setStep(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Step = value;
    m_StepIsSet = true;
}
bool OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::stepIsSet() const
{
    return m_StepIsSet;
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::unsetStep()
{
    m_StepIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getArchives() const
{
    return m_Archives;
}


void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setArchives(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Archives = value;
    m_ArchivesIsSet = true;
}
bool OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::archivesIsSet() const
{
    return m_ArchivesIsSet;
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::unsetArchives()
{
    m_ArchivesIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::getPath() const
{
    return m_Path;
}


void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::setPath(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::pathIsSet() const
{
    return m_PathIsSet;
}

void OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterProperties::unsetPath()
{
    m_PathIsSet = false;
}

}
}
}
}

