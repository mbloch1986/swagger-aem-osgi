/*
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OAS-api/OAS-codegen.git
 * Do not edit the class manually.
 */

/**
 * OASComAdobeCqProjectsPurgeSchedulerP
 */
public class OASComAdobeCqProjectsPurgeSchedulerP implements OAS.MappedProperties {
    /**
     * Get scheduledpurgeName
     * @return scheduledpurgeName
     */
    public OASConfigNodePropertyString scheduledpurgeName { get; set; }

    /**
     * Get scheduledpurgePurgeActive
     * @return scheduledpurgePurgeActive
     */
    public OASConfigNodePropertyBoolean scheduledpurgePurgeActive { get; set; }

    /**
     * Get scheduledpurgeTemplates
     * @return scheduledpurgeTemplates
     */
    public OASConfigNodePropertyArray scheduledpurgeTemplates { get; set; }

    /**
     * Get scheduledpurgePurgeGroups
     * @return scheduledpurgePurgeGroups
     */
    public OASConfigNodePropertyBoolean scheduledpurgePurgeGroups { get; set; }

    /**
     * Get scheduledpurgePurgeAssets
     * @return scheduledpurgePurgeAssets
     */
    public OASConfigNodePropertyBoolean scheduledpurgePurgeAssets { get; set; }

    /**
     * Get scheduledpurgeTerminateRunningWorkflows
     * @return scheduledpurgeTerminateRunningWorkflows
     */
    public OASConfigNodePropertyBoolean scheduledpurgeTerminateRunningWorkflows { get; set; }

    /**
     * Get scheduledpurgeDaysold
     * @return scheduledpurgeDaysold
     */
    public OASConfigNodePropertyInteger scheduledpurgeDaysold { get; set; }

    /**
     * Get scheduledpurgeSaveThreshold
     * @return scheduledpurgeSaveThreshold
     */
    public OASConfigNodePropertyInteger scheduledpurgeSaveThreshold { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'scheduledpurge.name' => 'scheduledpurgeName',
        'scheduledpurge.purgeActive' => 'scheduledpurgePurgeActive',
        'scheduledpurge.templates' => 'scheduledpurgeTemplates',
        'scheduledpurge.purgeGroups' => 'scheduledpurgePurgeGroups',
        'scheduledpurge.purgeAssets' => 'scheduledpurgePurgeAssets',
        'scheduledpurge.terminateRunningWorkflows' => 'scheduledpurgeTerminateRunningWorkflows',
        'scheduledpurge.daysold' => 'scheduledpurgeDaysold',
        'scheduledpurge.saveThreshold' => 'scheduledpurgeSaveThreshold'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASComAdobeCqProjectsPurgeSchedulerP getExample() {
        OASComAdobeCqProjectsPurgeSchedulerP comAdobeCqProjectsPurgeSchedulerProperties = new OASComAdobeCqProjectsPurgeSchedulerP();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeName = OASConfigNodePropertyString.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeActive = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeTemplates = OASConfigNodePropertyArray.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeGroups = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeAssets = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeTerminateRunningWorkflows = OASConfigNodePropertyBoolean.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeDaysold = OASConfigNodePropertyInteger.getExample();
          comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeSaveThreshold = OASConfigNodePropertyInteger.getExample();
        return comAdobeCqProjectsPurgeSchedulerProperties;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASComAdobeCqProjectsPurgeSchedulerP) {           
            OASComAdobeCqProjectsPurgeSchedulerP comAdobeCqProjectsPurgeSchedulerProperties = (OASComAdobeCqProjectsPurgeSchedulerP) obj;
            return this.scheduledpurgeName == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeName
                && this.scheduledpurgePurgeActive == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeActive
                && this.scheduledpurgeTemplates == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeTemplates
                && this.scheduledpurgePurgeGroups == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeGroups
                && this.scheduledpurgePurgeAssets == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgePurgeAssets
                && this.scheduledpurgeTerminateRunningWorkflows == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeTerminateRunningWorkflows
                && this.scheduledpurgeDaysold == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeDaysold
                && this.scheduledpurgeSaveThreshold == comAdobeCqProjectsPurgeSchedulerProperties.scheduledpurgeSaveThreshold;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (scheduledpurgeName == null ? 0 : System.hashCode(scheduledpurgeName));
        hashCode = (17 * hashCode) + (scheduledpurgePurgeActive == null ? 0 : System.hashCode(scheduledpurgePurgeActive));
        hashCode = (17 * hashCode) + (scheduledpurgeTemplates == null ? 0 : System.hashCode(scheduledpurgeTemplates));
        hashCode = (17 * hashCode) + (scheduledpurgePurgeGroups == null ? 0 : System.hashCode(scheduledpurgePurgeGroups));
        hashCode = (17 * hashCode) + (scheduledpurgePurgeAssets == null ? 0 : System.hashCode(scheduledpurgePurgeAssets));
        hashCode = (17 * hashCode) + (scheduledpurgeTerminateRunningWorkflows == null ? 0 : System.hashCode(scheduledpurgeTerminateRunningWorkflows));
        hashCode = (17 * hashCode) + (scheduledpurgeDaysold == null ? 0 : System.hashCode(scheduledpurgeDaysold));
        hashCode = (17 * hashCode) + (scheduledpurgeSaveThreshold == null ? 0 : System.hashCode(scheduledpurgeSaveThreshold));
        return hashCode;
    }
}

