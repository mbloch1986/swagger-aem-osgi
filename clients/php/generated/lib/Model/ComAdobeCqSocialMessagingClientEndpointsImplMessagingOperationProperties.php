<?php
/**
 * ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comAdobeCqSocialMessagingClientEndpointsImplMessagingOperationProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'message_properties' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'message_box_size_limit' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'message_count_limit' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'notify_failure' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'failure_message_from' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'failure_template_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'max_retries' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'min_wait_between_retries' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'count_update_pool_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'inbox_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'sentitems_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'support_attachments' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'support_group_messaging' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'max_total_recipients' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'batch_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'max_total_attachment_size' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'attachment_type_blacklist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'allowed_attachment_types' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'service_selector' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'field_whitelist' => '\OpenAPI\Client\Model\ConfigNodePropertyArray'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'message_properties' => null,
        'message_box_size_limit' => null,
        'message_count_limit' => null,
        'notify_failure' => null,
        'failure_message_from' => null,
        'failure_template_path' => null,
        'max_retries' => null,
        'min_wait_between_retries' => null,
        'count_update_pool_size' => null,
        'inbox_path' => null,
        'sentitems_path' => null,
        'support_attachments' => null,
        'support_group_messaging' => null,
        'max_total_recipients' => null,
        'batch_size' => null,
        'max_total_attachment_size' => null,
        'attachment_type_blacklist' => null,
        'allowed_attachment_types' => null,
        'service_selector' => null,
        'field_whitelist' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_properties' => 'message.properties',
        'message_box_size_limit' => 'messageBoxSizeLimit',
        'message_count_limit' => 'messageCountLimit',
        'notify_failure' => 'notifyFailure',
        'failure_message_from' => 'failureMessageFrom',
        'failure_template_path' => 'failureTemplatePath',
        'max_retries' => 'maxRetries',
        'min_wait_between_retries' => 'minWaitBetweenRetries',
        'count_update_pool_size' => 'countUpdatePoolSize',
        'inbox_path' => 'inbox.path',
        'sentitems_path' => 'sentitems.path',
        'support_attachments' => 'supportAttachments',
        'support_group_messaging' => 'supportGroupMessaging',
        'max_total_recipients' => 'maxTotalRecipients',
        'batch_size' => 'batchSize',
        'max_total_attachment_size' => 'maxTotalAttachmentSize',
        'attachment_type_blacklist' => 'attachmentTypeBlacklist',
        'allowed_attachment_types' => 'allowedAttachmentTypes',
        'service_selector' => 'serviceSelector',
        'field_whitelist' => 'fieldWhitelist'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_properties' => 'setMessageProperties',
        'message_box_size_limit' => 'setMessageBoxSizeLimit',
        'message_count_limit' => 'setMessageCountLimit',
        'notify_failure' => 'setNotifyFailure',
        'failure_message_from' => 'setFailureMessageFrom',
        'failure_template_path' => 'setFailureTemplatePath',
        'max_retries' => 'setMaxRetries',
        'min_wait_between_retries' => 'setMinWaitBetweenRetries',
        'count_update_pool_size' => 'setCountUpdatePoolSize',
        'inbox_path' => 'setInboxPath',
        'sentitems_path' => 'setSentitemsPath',
        'support_attachments' => 'setSupportAttachments',
        'support_group_messaging' => 'setSupportGroupMessaging',
        'max_total_recipients' => 'setMaxTotalRecipients',
        'batch_size' => 'setBatchSize',
        'max_total_attachment_size' => 'setMaxTotalAttachmentSize',
        'attachment_type_blacklist' => 'setAttachmentTypeBlacklist',
        'allowed_attachment_types' => 'setAllowedAttachmentTypes',
        'service_selector' => 'setServiceSelector',
        'field_whitelist' => 'setFieldWhitelist'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_properties' => 'getMessageProperties',
        'message_box_size_limit' => 'getMessageBoxSizeLimit',
        'message_count_limit' => 'getMessageCountLimit',
        'notify_failure' => 'getNotifyFailure',
        'failure_message_from' => 'getFailureMessageFrom',
        'failure_template_path' => 'getFailureTemplatePath',
        'max_retries' => 'getMaxRetries',
        'min_wait_between_retries' => 'getMinWaitBetweenRetries',
        'count_update_pool_size' => 'getCountUpdatePoolSize',
        'inbox_path' => 'getInboxPath',
        'sentitems_path' => 'getSentitemsPath',
        'support_attachments' => 'getSupportAttachments',
        'support_group_messaging' => 'getSupportGroupMessaging',
        'max_total_recipients' => 'getMaxTotalRecipients',
        'batch_size' => 'getBatchSize',
        'max_total_attachment_size' => 'getMaxTotalAttachmentSize',
        'attachment_type_blacklist' => 'getAttachmentTypeBlacklist',
        'allowed_attachment_types' => 'getAllowedAttachmentTypes',
        'service_selector' => 'getServiceSelector',
        'field_whitelist' => 'getFieldWhitelist'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_properties'] = isset($data['message_properties']) ? $data['message_properties'] : null;
        $this->container['message_box_size_limit'] = isset($data['message_box_size_limit']) ? $data['message_box_size_limit'] : null;
        $this->container['message_count_limit'] = isset($data['message_count_limit']) ? $data['message_count_limit'] : null;
        $this->container['notify_failure'] = isset($data['notify_failure']) ? $data['notify_failure'] : null;
        $this->container['failure_message_from'] = isset($data['failure_message_from']) ? $data['failure_message_from'] : null;
        $this->container['failure_template_path'] = isset($data['failure_template_path']) ? $data['failure_template_path'] : null;
        $this->container['max_retries'] = isset($data['max_retries']) ? $data['max_retries'] : null;
        $this->container['min_wait_between_retries'] = isset($data['min_wait_between_retries']) ? $data['min_wait_between_retries'] : null;
        $this->container['count_update_pool_size'] = isset($data['count_update_pool_size']) ? $data['count_update_pool_size'] : null;
        $this->container['inbox_path'] = isset($data['inbox_path']) ? $data['inbox_path'] : null;
        $this->container['sentitems_path'] = isset($data['sentitems_path']) ? $data['sentitems_path'] : null;
        $this->container['support_attachments'] = isset($data['support_attachments']) ? $data['support_attachments'] : null;
        $this->container['support_group_messaging'] = isset($data['support_group_messaging']) ? $data['support_group_messaging'] : null;
        $this->container['max_total_recipients'] = isset($data['max_total_recipients']) ? $data['max_total_recipients'] : null;
        $this->container['batch_size'] = isset($data['batch_size']) ? $data['batch_size'] : null;
        $this->container['max_total_attachment_size'] = isset($data['max_total_attachment_size']) ? $data['max_total_attachment_size'] : null;
        $this->container['attachment_type_blacklist'] = isset($data['attachment_type_blacklist']) ? $data['attachment_type_blacklist'] : null;
        $this->container['allowed_attachment_types'] = isset($data['allowed_attachment_types']) ? $data['allowed_attachment_types'] : null;
        $this->container['service_selector'] = isset($data['service_selector']) ? $data['service_selector'] : null;
        $this->container['field_whitelist'] = isset($data['field_whitelist']) ? $data['field_whitelist'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_properties
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getMessageProperties()
    {
        return $this->container['message_properties'];
    }

    /**
     * Sets message_properties
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $message_properties message_properties
     *
     * @return $this
     */
    public function setMessageProperties($message_properties)
    {
        $this->container['message_properties'] = $message_properties;

        return $this;
    }

    /**
     * Gets message_box_size_limit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMessageBoxSizeLimit()
    {
        return $this->container['message_box_size_limit'];
    }

    /**
     * Sets message_box_size_limit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $message_box_size_limit message_box_size_limit
     *
     * @return $this
     */
    public function setMessageBoxSizeLimit($message_box_size_limit)
    {
        $this->container['message_box_size_limit'] = $message_box_size_limit;

        return $this;
    }

    /**
     * Gets message_count_limit
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMessageCountLimit()
    {
        return $this->container['message_count_limit'];
    }

    /**
     * Sets message_count_limit
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $message_count_limit message_count_limit
     *
     * @return $this
     */
    public function setMessageCountLimit($message_count_limit)
    {
        $this->container['message_count_limit'] = $message_count_limit;

        return $this;
    }

    /**
     * Gets notify_failure
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getNotifyFailure()
    {
        return $this->container['notify_failure'];
    }

    /**
     * Sets notify_failure
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $notify_failure notify_failure
     *
     * @return $this
     */
    public function setNotifyFailure($notify_failure)
    {
        $this->container['notify_failure'] = $notify_failure;

        return $this;
    }

    /**
     * Gets failure_message_from
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFailureMessageFrom()
    {
        return $this->container['failure_message_from'];
    }

    /**
     * Sets failure_message_from
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $failure_message_from failure_message_from
     *
     * @return $this
     */
    public function setFailureMessageFrom($failure_message_from)
    {
        $this->container['failure_message_from'] = $failure_message_from;

        return $this;
    }

    /**
     * Gets failure_template_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getFailureTemplatePath()
    {
        return $this->container['failure_template_path'];
    }

    /**
     * Sets failure_template_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $failure_template_path failure_template_path
     *
     * @return $this
     */
    public function setFailureTemplatePath($failure_template_path)
    {
        $this->container['failure_template_path'] = $failure_template_path;

        return $this;
    }

    /**
     * Gets max_retries
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxRetries()
    {
        return $this->container['max_retries'];
    }

    /**
     * Sets max_retries
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_retries max_retries
     *
     * @return $this
     */
    public function setMaxRetries($max_retries)
    {
        $this->container['max_retries'] = $max_retries;

        return $this;
    }

    /**
     * Gets min_wait_between_retries
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMinWaitBetweenRetries()
    {
        return $this->container['min_wait_between_retries'];
    }

    /**
     * Sets min_wait_between_retries
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $min_wait_between_retries min_wait_between_retries
     *
     * @return $this
     */
    public function setMinWaitBetweenRetries($min_wait_between_retries)
    {
        $this->container['min_wait_between_retries'] = $min_wait_between_retries;

        return $this;
    }

    /**
     * Gets count_update_pool_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getCountUpdatePoolSize()
    {
        return $this->container['count_update_pool_size'];
    }

    /**
     * Sets count_update_pool_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $count_update_pool_size count_update_pool_size
     *
     * @return $this
     */
    public function setCountUpdatePoolSize($count_update_pool_size)
    {
        $this->container['count_update_pool_size'] = $count_update_pool_size;

        return $this;
    }

    /**
     * Gets inbox_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getInboxPath()
    {
        return $this->container['inbox_path'];
    }

    /**
     * Sets inbox_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $inbox_path inbox_path
     *
     * @return $this
     */
    public function setInboxPath($inbox_path)
    {
        $this->container['inbox_path'] = $inbox_path;

        return $this;
    }

    /**
     * Gets sentitems_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getSentitemsPath()
    {
        return $this->container['sentitems_path'];
    }

    /**
     * Sets sentitems_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $sentitems_path sentitems_path
     *
     * @return $this
     */
    public function setSentitemsPath($sentitems_path)
    {
        $this->container['sentitems_path'] = $sentitems_path;

        return $this;
    }

    /**
     * Gets support_attachments
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSupportAttachments()
    {
        return $this->container['support_attachments'];
    }

    /**
     * Sets support_attachments
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $support_attachments support_attachments
     *
     * @return $this
     */
    public function setSupportAttachments($support_attachments)
    {
        $this->container['support_attachments'] = $support_attachments;

        return $this;
    }

    /**
     * Gets support_group_messaging
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSupportGroupMessaging()
    {
        return $this->container['support_group_messaging'];
    }

    /**
     * Sets support_group_messaging
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $support_group_messaging support_group_messaging
     *
     * @return $this
     */
    public function setSupportGroupMessaging($support_group_messaging)
    {
        $this->container['support_group_messaging'] = $support_group_messaging;

        return $this;
    }

    /**
     * Gets max_total_recipients
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxTotalRecipients()
    {
        return $this->container['max_total_recipients'];
    }

    /**
     * Sets max_total_recipients
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_total_recipients max_total_recipients
     *
     * @return $this
     */
    public function setMaxTotalRecipients($max_total_recipients)
    {
        $this->container['max_total_recipients'] = $max_total_recipients;

        return $this;
    }

    /**
     * Gets batch_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getBatchSize()
    {
        return $this->container['batch_size'];
    }

    /**
     * Sets batch_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $batch_size batch_size
     *
     * @return $this
     */
    public function setBatchSize($batch_size)
    {
        $this->container['batch_size'] = $batch_size;

        return $this;
    }

    /**
     * Gets max_total_attachment_size
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getMaxTotalAttachmentSize()
    {
        return $this->container['max_total_attachment_size'];
    }

    /**
     * Sets max_total_attachment_size
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $max_total_attachment_size max_total_attachment_size
     *
     * @return $this
     */
    public function setMaxTotalAttachmentSize($max_total_attachment_size)
    {
        $this->container['max_total_attachment_size'] = $max_total_attachment_size;

        return $this;
    }

    /**
     * Gets attachment_type_blacklist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAttachmentTypeBlacklist()
    {
        return $this->container['attachment_type_blacklist'];
    }

    /**
     * Sets attachment_type_blacklist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $attachment_type_blacklist attachment_type_blacklist
     *
     * @return $this
     */
    public function setAttachmentTypeBlacklist($attachment_type_blacklist)
    {
        $this->container['attachment_type_blacklist'] = $attachment_type_blacklist;

        return $this;
    }

    /**
     * Gets allowed_attachment_types
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getAllowedAttachmentTypes()
    {
        return $this->container['allowed_attachment_types'];
    }

    /**
     * Sets allowed_attachment_types
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $allowed_attachment_types allowed_attachment_types
     *
     * @return $this
     */
    public function setAllowedAttachmentTypes($allowed_attachment_types)
    {
        $this->container['allowed_attachment_types'] = $allowed_attachment_types;

        return $this;
    }

    /**
     * Gets service_selector
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getServiceSelector()
    {
        return $this->container['service_selector'];
    }

    /**
     * Sets service_selector
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $service_selector service_selector
     *
     * @return $this
     */
    public function setServiceSelector($service_selector)
    {
        $this->container['service_selector'] = $service_selector;

        return $this;
    }

    /**
     * Gets field_whitelist
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getFieldWhitelist()
    {
        return $this->container['field_whitelist'];
    }

    /**
     * Sets field_whitelist
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $field_whitelist field_whitelist
     *
     * @return $this
     */
    public function setFieldWhitelist($field_whitelist)
    {
        $this->container['field_whitelist'] = $field_whitelist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


