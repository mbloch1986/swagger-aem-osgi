/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
  #[serde(rename = "TcpPort")]
  tcp_port: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "AllowRemoteAccess")]
  allow_remote_access: Option<::models::ConfigNodePropertyBoolean>,
  #[serde(rename = "MaxRenderRgnPixels")]
  max_render_rgn_pixels: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "MaxMessageSize")]
  max_message_size: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "RandomAccessUrlTimeout")]
  random_access_url_timeout: Option<::models::ConfigNodePropertyInteger>,
  #[serde(rename = "WorkerThreads")]
  worker_threads: Option<::models::ConfigNodePropertyInteger>
}

impl ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
  pub fn new() -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
      tcp_port: None,
      allow_remote_access: None,
      max_render_rgn_pixels: None,
      max_message_size: None,
      random_access_url_timeout: None,
      worker_threads: None
    }
  }

  pub fn set_tcp_port(&mut self, tcp_port: ::models::ConfigNodePropertyString) {
    self.tcp_port = Some(tcp_port);
  }

  pub fn with_tcp_port(mut self, tcp_port: ::models::ConfigNodePropertyString) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.tcp_port = Some(tcp_port);
    self
  }

  pub fn tcp_port(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.tcp_port.as_ref()
  }

  pub fn reset_tcp_port(&mut self) {
    self.tcp_port = None;
  }

  pub fn set_allow_remote_access(&mut self, allow_remote_access: ::models::ConfigNodePropertyBoolean) {
    self.allow_remote_access = Some(allow_remote_access);
  }

  pub fn with_allow_remote_access(mut self, allow_remote_access: ::models::ConfigNodePropertyBoolean) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.allow_remote_access = Some(allow_remote_access);
    self
  }

  pub fn allow_remote_access(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.allow_remote_access.as_ref()
  }

  pub fn reset_allow_remote_access(&mut self) {
    self.allow_remote_access = None;
  }

  pub fn set_max_render_rgn_pixels(&mut self, max_render_rgn_pixels: ::models::ConfigNodePropertyString) {
    self.max_render_rgn_pixels = Some(max_render_rgn_pixels);
  }

  pub fn with_max_render_rgn_pixels(mut self, max_render_rgn_pixels: ::models::ConfigNodePropertyString) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.max_render_rgn_pixels = Some(max_render_rgn_pixels);
    self
  }

  pub fn max_render_rgn_pixels(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.max_render_rgn_pixels.as_ref()
  }

  pub fn reset_max_render_rgn_pixels(&mut self) {
    self.max_render_rgn_pixels = None;
  }

  pub fn set_max_message_size(&mut self, max_message_size: ::models::ConfigNodePropertyString) {
    self.max_message_size = Some(max_message_size);
  }

  pub fn with_max_message_size(mut self, max_message_size: ::models::ConfigNodePropertyString) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.max_message_size = Some(max_message_size);
    self
  }

  pub fn max_message_size(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.max_message_size.as_ref()
  }

  pub fn reset_max_message_size(&mut self) {
    self.max_message_size = None;
  }

  pub fn set_random_access_url_timeout(&mut self, random_access_url_timeout: ::models::ConfigNodePropertyInteger) {
    self.random_access_url_timeout = Some(random_access_url_timeout);
  }

  pub fn with_random_access_url_timeout(mut self, random_access_url_timeout: ::models::ConfigNodePropertyInteger) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.random_access_url_timeout = Some(random_access_url_timeout);
    self
  }

  pub fn random_access_url_timeout(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.random_access_url_timeout.as_ref()
  }

  pub fn reset_random_access_url_timeout(&mut self) {
    self.random_access_url_timeout = None;
  }

  pub fn set_worker_threads(&mut self, worker_threads: ::models::ConfigNodePropertyInteger) {
    self.worker_threads = Some(worker_threads);
  }

  pub fn with_worker_threads(mut self, worker_threads: ::models::ConfigNodePropertyInteger) -> ComAdobeCqDamS7imagingImplIsImageServerComponentProperties {
    self.worker_threads = Some(worker_threads);
    self
  }

  pub fn worker_threads(&self) -> Option<&::models::ConfigNodePropertyInteger> {
    self.worker_threads.as_ref()
  }

  pub fn reset_worker_threads(&mut self) {
    self.worker_threads = None;
  }

}



