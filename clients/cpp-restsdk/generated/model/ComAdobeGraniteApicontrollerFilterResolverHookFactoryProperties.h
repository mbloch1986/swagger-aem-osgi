/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties
    : public ModelBase
{
public:
    ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties();
    virtual ~ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCdnCdnRewriter() const;
    bool comAdobeCqCdnCdnRewriterIsSet() const;
    void unsetCom_adobe_cq_cdn_cdn_rewriter();
    void setComAdobeCqCdnCdnRewriter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCloudConfigComponents() const;
    bool comAdobeCqCloudConfigComponentsIsSet() const;
    void unsetCom_adobe_cq_cloud_config_components();
    void setComAdobeCqCloudConfigComponents(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCloudConfigCore() const;
    bool comAdobeCqCloudConfigCoreIsSet() const;
    void unsetCom_adobe_cq_cloud_config_core();
    void setComAdobeCqCloudConfigCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCloudConfigUi() const;
    bool comAdobeCqCloudConfigUiIsSet() const;
    void unsetCom_adobe_cq_cloud_config_ui();
    void setComAdobeCqCloudConfigUi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqComAdobeCqEditor() const;
    bool comAdobeCqComAdobeCqEditorIsSet() const;
    void unsetCom_adobe_cq_com_adobe_cq_editor();
    void setComAdobeCqComAdobeCqEditor(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqComAdobeCqProjectsCore() const;
    bool comAdobeCqComAdobeCqProjectsCoreIsSet() const;
    void unsetCom_adobe_cq_com_adobe_cq_projects_core();
    void setComAdobeCqComAdobeCqProjectsCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqComAdobeCqProjectsWcmCore() const;
    bool comAdobeCqComAdobeCqProjectsWcmCoreIsSet() const;
    void unsetCom_adobe_cq_com_adobe_cq_projects_wcm_core();
    void setComAdobeCqComAdobeCqProjectsWcmCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqComAdobeCqUiCommons() const;
    bool comAdobeCqComAdobeCqUiCommonsIsSet() const;
    void unsetCom_adobe_cq_com_adobe_cq_ui_commons();
    void setComAdobeCqComAdobeCqUiCommons(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqComAdobeCqWcmStyle() const;
    bool comAdobeCqComAdobeCqWcmStyleIsSet() const;
    void unsetCom_adobe_cq_com_adobe_cq_wcm_style();
    void setComAdobeCqComAdobeCqWcmStyle(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqActivitymapIntegration() const;
    bool comAdobeCqCqActivitymapIntegrationIsSet() const;
    void unsetCom_adobe_cq_cq_activitymap_integration();
    void setComAdobeCqCqActivitymapIntegration(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqContexthubCommons() const;
    bool comAdobeCqCqContexthubCommonsIsSet() const;
    void unsetCom_adobe_cq_cq_contexthub_commons();
    void setComAdobeCqCqContexthubCommons(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqDtm() const;
    bool comAdobeCqCqDtmIsSet() const;
    void unsetCom_adobe_cq_cq_dtm();
    void setComAdobeCqCqDtm(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqHealthcheck() const;
    bool comAdobeCqCqHealthcheckIsSet() const;
    void unsetCom_adobe_cq_cq_healthcheck();
    void setComAdobeCqCqHealthcheck(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqMultisiteTargeting() const;
    bool comAdobeCqCqMultisiteTargetingIsSet() const;
    void unsetCom_adobe_cq_cq_multisite_targeting();
    void setComAdobeCqCqMultisiteTargeting(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqPreUpgradeCleanup() const;
    bool comAdobeCqCqPreUpgradeCleanupIsSet() const;
    void unsetCom_adobe_cq_cq_pre_upgrade_cleanup();
    void setComAdobeCqCqPreUpgradeCleanup(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqProductInfoProvider() const;
    bool comAdobeCqCqProductInfoProviderIsSet() const;
    void unsetCom_adobe_cq_cq_product_info_provider();
    void setComAdobeCqCqProductInfoProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqRestSites() const;
    bool comAdobeCqCqRestSitesIsSet() const;
    void unsetCom_adobe_cq_cq_rest_sites();
    void setComAdobeCqCqRestSites(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqCqSecurityHc() const;
    bool comAdobeCqCqSecurityHcIsSet() const;
    void unsetCom_adobe_cq_cq_security_hc();
    void setComAdobeCqCqSecurityHc(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqDamCqDamSvgHandler() const;
    bool comAdobeCqDamCqDamSvgHandlerIsSet() const;
    void unsetCom_adobe_cq_dam_cq_dam_svg_handler();
    void setComAdobeCqDamCqDamSvgHandler(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqDamCqScene7Imaging() const;
    bool comAdobeCqDamCqScene7ImagingIsSet() const;
    void unsetCom_adobe_cq_dam_cq_scene7_imaging();
    void setComAdobeCqDamCqScene7Imaging(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqDtmReactorCore() const;
    bool comAdobeCqDtmReactorCoreIsSet() const;
    void unsetCom_adobe_cq_dtm_reactor_core();
    void setComAdobeCqDtmReactorCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqDtmReactorUi() const;
    bool comAdobeCqDtmReactorUiIsSet() const;
    void unsetCom_adobe_cq_dtm_reactor_ui();
    void setComAdobeCqDtmReactorUi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqExpJspelResolver() const;
    bool comAdobeCqExpJspelResolverIsSet() const;
    void unsetCom_adobe_cq_exp_jspel_resolver();
    void setComAdobeCqExpJspelResolver(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqInboxCqInbox() const;
    bool comAdobeCqInboxCqInboxIsSet() const;
    void unsetCom_adobe_cq_inbox_cq_inbox();
    void setComAdobeCqInboxCqInbox(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqJsonSchemaParser() const;
    bool comAdobeCqJsonSchemaParserIsSet() const;
    void unsetCom_adobe_cq_json_schema_parser();
    void setComAdobeCqJsonSchemaParser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqMediaCqMediaPublishingDpsFpCore() const;
    bool comAdobeCqMediaCqMediaPublishingDpsFpCoreIsSet() const;
    void unsetCom_adobe_cq_media_cq_media_publishing_dps_fp_core();
    void setComAdobeCqMediaCqMediaPublishingDpsFpCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqMobileCqMobileCaas() const;
    bool comAdobeCqMobileCqMobileCaasIsSet() const;
    void unsetCom_adobe_cq_mobile_cq_mobile_caas();
    void setComAdobeCqMobileCqMobileCaas(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqMobileCqMobileIndexBuilder() const;
    bool comAdobeCqMobileCqMobileIndexBuilderIsSet() const;
    void unsetCom_adobe_cq_mobile_cq_mobile_index_builder();
    void setComAdobeCqMobileCqMobileIndexBuilder(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqMobileCqMobilePhonegapBuild() const;
    bool comAdobeCqMobileCqMobilePhonegapBuildIsSet() const;
    void unsetCom_adobe_cq_mobile_cq_mobile_phonegap_build();
    void setComAdobeCqMobileCqMobilePhonegapBuild(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqMyspell() const;
    bool comAdobeCqMyspellIsSet() const;
    void unsetCom_adobe_cq_myspell();
    void setComAdobeCqMyspell(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSampleWeRetailCore() const;
    bool comAdobeCqSampleWeRetailCoreIsSet() const;
    void unsetCom_adobe_cq_sample_we_retail_core();
    void setComAdobeCqSampleWeRetailCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqScreensComAdobeCqScreensDcc() const;
    bool comAdobeCqScreensComAdobeCqScreensDccIsSet() const;
    void unsetCom_adobe_cq_screens_com_adobe_cq_screens_dcc();
    void setComAdobeCqScreensComAdobeCqScreensDcc(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqScreensComAdobeCqScreensMqCore() const;
    bool comAdobeCqScreensComAdobeCqScreensMqCoreIsSet() const;
    void unsetCom_adobe_cq_screens_com_adobe_cq_screens_mq_core();
    void setComAdobeCqScreensComAdobeCqScreensMqCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialAsProvider() const;
    bool comAdobeCqSocialCqSocialAsProviderIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_as_provider();
    void setComAdobeCqSocialCqSocialAsProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialBadgingBasicImpl() const;
    bool comAdobeCqSocialCqSocialBadgingBasicImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_badging_basic_impl();
    void setComAdobeCqSocialCqSocialBadgingBasicImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialBadgingImpl() const;
    bool comAdobeCqSocialCqSocialBadgingImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_badging_impl();
    void setComAdobeCqSocialCqSocialBadgingImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialCalendarImpl() const;
    bool comAdobeCqSocialCqSocialCalendarImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_calendar_impl();
    void setComAdobeCqSocialCqSocialCalendarImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialContentFragmentsImpl() const;
    bool comAdobeCqSocialCqSocialContentFragmentsImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_content_fragments_impl();
    void setComAdobeCqSocialCqSocialContentFragmentsImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialEnablementImpl() const;
    bool comAdobeCqSocialCqSocialEnablementImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_enablement_impl();
    void setComAdobeCqSocialCqSocialEnablementImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialGraphImpl() const;
    bool comAdobeCqSocialCqSocialGraphImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_graph_impl();
    void setComAdobeCqSocialCqSocialGraphImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialIdeationImpl() const;
    bool comAdobeCqSocialCqSocialIdeationImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_ideation_impl();
    void setComAdobeCqSocialCqSocialIdeationImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialJcrProvider() const;
    bool comAdobeCqSocialCqSocialJcrProviderIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_jcr_provider();
    void setComAdobeCqSocialCqSocialJcrProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialMembersImpl() const;
    bool comAdobeCqSocialCqSocialMembersImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_members_impl();
    void setComAdobeCqSocialCqSocialMembersImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialMsProvider() const;
    bool comAdobeCqSocialCqSocialMsProviderIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_ms_provider();
    void setComAdobeCqSocialCqSocialMsProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialNotificationsChannelsWeb() const;
    bool comAdobeCqSocialCqSocialNotificationsChannelsWebIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_notifications_channels_web();
    void setComAdobeCqSocialCqSocialNotificationsChannelsWeb(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialNotificationsImpl() const;
    bool comAdobeCqSocialCqSocialNotificationsImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_notifications_impl();
    void setComAdobeCqSocialCqSocialNotificationsImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialRdbProvider() const;
    bool comAdobeCqSocialCqSocialRdbProviderIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_rdb_provider();
    void setComAdobeCqSocialCqSocialRdbProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialScfImpl() const;
    bool comAdobeCqSocialCqSocialScfImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_scf_impl();
    void setComAdobeCqSocialCqSocialScfImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialScoringBasicImpl() const;
    bool comAdobeCqSocialCqSocialScoringBasicImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_scoring_basic_impl();
    void setComAdobeCqSocialCqSocialScoringBasicImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialScoringImpl() const;
    bool comAdobeCqSocialCqSocialScoringImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_scoring_impl();
    void setComAdobeCqSocialCqSocialScoringImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialServiceusersImpl() const;
    bool comAdobeCqSocialCqSocialServiceusersImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_serviceusers_impl();
    void setComAdobeCqSocialCqSocialServiceusersImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialSrpImpl() const;
    bool comAdobeCqSocialCqSocialSrpImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_srp_impl();
    void setComAdobeCqSocialCqSocialSrpImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeCqSocialCqSocialUgcbaseImpl() const;
    bool comAdobeCqSocialCqSocialUgcbaseImplIsSet() const;
    void unsetCom_adobe_cq_social_cq_social_ugcbase_impl();
    void setComAdobeCqSocialCqSocialUgcbaseImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeDamCqDamCfmImpl() const;
    bool comAdobeDamCqDamCfmImplIsSet() const;
    void unsetCom_adobe_dam_cq_dam_cfm_impl();
    void setComAdobeDamCqDamCfmImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeFormsFoundationFormsFoundationBase() const;
    bool comAdobeFormsFoundationFormsFoundationBaseIsSet() const;
    void unsetCom_adobe_forms_foundation_forms_foundation_base();
    void setComAdobeFormsFoundationFormsFoundationBase(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteApicontroller() const;
    bool comAdobeGraniteApicontrollerIsSet() const;
    void unsetCom_adobe_granite_apicontroller();
    void setComAdobeGraniteApicontroller(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteAssetCore() const;
    bool comAdobeGraniteAssetCoreIsSet() const;
    void unsetCom_adobe_granite_asset_core();
    void setComAdobeGraniteAssetCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteAuthSso() const;
    bool comAdobeGraniteAuthSsoIsSet() const;
    void unsetCom_adobe_granite_auth_sso();
    void setComAdobeGraniteAuthSso(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteBundlesHcImpl() const;
    bool comAdobeGraniteBundlesHcImplIsSet() const;
    void unsetCom_adobe_granite_bundles_hc_impl();
    void setComAdobeGraniteBundlesHcImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCompatRouter() const;
    bool comAdobeGraniteCompatRouterIsSet() const;
    void unsetCom_adobe_granite_compat_router();
    void setComAdobeGraniteCompatRouter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteConf() const;
    bool comAdobeGraniteConfIsSet() const;
    void unsetCom_adobe_granite_conf();
    void setComAdobeGraniteConf(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteConfUiCore() const;
    bool comAdobeGraniteConfUiCoreIsSet() const;
    void unsetCom_adobe_granite_conf_ui_core();
    void setComAdobeGraniteConfUiCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCors() const;
    bool comAdobeGraniteCorsIsSet() const;
    void unsetCom_adobe_granite_cors();
    void setComAdobeGraniteCors(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCrxExplorer() const;
    bool comAdobeGraniteCrxExplorerIsSet() const;
    void unsetCom_adobe_granite_crx_explorer();
    void setComAdobeGraniteCrxExplorer(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCrxdeLite() const;
    bool comAdobeGraniteCrxdeLiteIsSet() const;
    void unsetCom_adobe_granite_crxde_lite();
    void setComAdobeGraniteCrxdeLite(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCryptoConfig() const;
    bool comAdobeGraniteCryptoConfigIsSet() const;
    void unsetCom_adobe_granite_crypto_config();
    void setComAdobeGraniteCryptoConfig(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCryptoExtension() const;
    bool comAdobeGraniteCryptoExtensionIsSet() const;
    void unsetCom_adobe_granite_crypto_extension();
    void setComAdobeGraniteCryptoExtension(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCryptoFile() const;
    bool comAdobeGraniteCryptoFileIsSet() const;
    void unsetCom_adobe_granite_crypto_file();
    void setComAdobeGraniteCryptoFile(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCryptoJcr() const;
    bool comAdobeGraniteCryptoJcrIsSet() const;
    void unsetCom_adobe_granite_crypto_jcr();
    void setComAdobeGraniteCryptoJcr(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteCsrf() const;
    bool comAdobeGraniteCsrfIsSet() const;
    void unsetCom_adobe_granite_csrf();
    void setComAdobeGraniteCsrf(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteDistributionCore() const;
    bool comAdobeGraniteDistributionCoreIsSet() const;
    void unsetCom_adobe_granite_distribution_core();
    void setComAdobeGraniteDistributionCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteDropwizardMetrics() const;
    bool comAdobeGraniteDropwizardMetricsIsSet() const;
    void unsetCom_adobe_granite_dropwizard_metrics();
    void setComAdobeGraniteDropwizardMetrics(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteFragsImpl() const;
    bool comAdobeGraniteFragsImplIsSet() const;
    void unsetCom_adobe_granite_frags_impl();
    void setComAdobeGraniteFragsImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteGibson() const;
    bool comAdobeGraniteGibsonIsSet() const;
    void unsetCom_adobe_granite_gibson();
    void setComAdobeGraniteGibson(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteInfocollector() const;
    bool comAdobeGraniteInfocollectorIsSet() const;
    void unsetCom_adobe_granite_infocollector();
    void setComAdobeGraniteInfocollector(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteInstallerFactoryPackages() const;
    bool comAdobeGraniteInstallerFactoryPackagesIsSet() const;
    void unsetCom_adobe_granite_installer_factory_packages();
    void setComAdobeGraniteInstallerFactoryPackages(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJettySsl() const;
    bool comAdobeGraniteJettySslIsSet() const;
    void unsetCom_adobe_granite_jetty_ssl();
    void setComAdobeGraniteJettySsl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteJobsAsync() const;
    bool comAdobeGraniteJobsAsyncIsSet() const;
    void unsetCom_adobe_granite_jobs_async();
    void setComAdobeGraniteJobsAsync(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteMaintenanceOak() const;
    bool comAdobeGraniteMaintenanceOakIsSet() const;
    void unsetCom_adobe_granite_maintenance_oak();
    void setComAdobeGraniteMaintenanceOak(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteMonitoringCore() const;
    bool comAdobeGraniteMonitoringCoreIsSet() const;
    void unsetCom_adobe_granite_monitoring_core();
    void setComAdobeGraniteMonitoringCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteQueries() const;
    bool comAdobeGraniteQueriesIsSet() const;
    void unsetCom_adobe_granite_queries();
    void setComAdobeGraniteQueries(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteReplicationHcImpl() const;
    bool comAdobeGraniteReplicationHcImplIsSet() const;
    void unsetCom_adobe_granite_replication_hc_impl();
    void setComAdobeGraniteReplicationHcImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteRepositoryChecker() const;
    bool comAdobeGraniteRepositoryCheckerIsSet() const;
    void unsetCom_adobe_granite_repository_checker();
    void setComAdobeGraniteRepositoryChecker(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteRepositoryHcImpl() const;
    bool comAdobeGraniteRepositoryHcImplIsSet() const;
    void unsetCom_adobe_granite_repository_hc_impl();
    void setComAdobeGraniteRepositoryHcImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteRestAssets() const;
    bool comAdobeGraniteRestAssetsIsSet() const;
    void unsetCom_adobe_granite_rest_assets();
    void setComAdobeGraniteRestAssets(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteSecurityUi() const;
    bool comAdobeGraniteSecurityUiIsSet() const;
    void unsetCom_adobe_granite_security_ui();
    void setComAdobeGraniteSecurityUi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteStartup() const;
    bool comAdobeGraniteStartupIsSet() const;
    void unsetCom_adobe_granite_startup();
    void setComAdobeGraniteStartup(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteTagsoup() const;
    bool comAdobeGraniteTagsoupIsSet() const;
    void unsetCom_adobe_granite_tagsoup();
    void setComAdobeGraniteTagsoup(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteTaskmanagementCore() const;
    bool comAdobeGraniteTaskmanagementCoreIsSet() const;
    void unsetCom_adobe_granite_taskmanagement_core();
    void setComAdobeGraniteTaskmanagementCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteTaskmanagementWorkflow() const;
    bool comAdobeGraniteTaskmanagementWorkflowIsSet() const;
    void unsetCom_adobe_granite_taskmanagement_workflow();
    void setComAdobeGraniteTaskmanagementWorkflow(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteUiClientlibsCompilerLess() const;
    bool comAdobeGraniteUiClientlibsCompilerLessIsSet() const;
    void unsetCom_adobe_granite_ui_clientlibs_compiler_less();
    void setComAdobeGraniteUiClientlibsCompilerLess(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteUiClientlibsProcessorGcc() const;
    bool comAdobeGraniteUiClientlibsProcessorGccIsSet() const;
    void unsetCom_adobe_granite_ui_clientlibs_processor_gcc();
    void setComAdobeGraniteUiClientlibsProcessorGcc(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteWebconsolePlugins() const;
    bool comAdobeGraniteWebconsolePluginsIsSet() const;
    void unsetCom_adobe_granite_webconsole_plugins();
    void setComAdobeGraniteWebconsolePlugins(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeGraniteWorkflowConsole() const;
    bool comAdobeGraniteWorkflowConsoleIsSet() const;
    void unsetCom_adobe_granite_workflow_console();
    void setComAdobeGraniteWorkflowConsole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeXmpWorkerFilesNativeFragmentLinux() const;
    bool comAdobeXmpWorkerFilesNativeFragmentLinuxIsSet() const;
    void unsetCom_adobe_xmp_worker_files_native_fragment_linux();
    void setComAdobeXmpWorkerFilesNativeFragmentLinux(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeXmpWorkerFilesNativeFragmentMacosx() const;
    bool comAdobeXmpWorkerFilesNativeFragmentMacosxIsSet() const;
    void unsetCom_adobe_xmp_worker_files_native_fragment_macosx();
    void setComAdobeXmpWorkerFilesNativeFragmentMacosx(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComAdobeXmpWorkerFilesNativeFragmentWin() const;
    bool comAdobeXmpWorkerFilesNativeFragmentWinIsSet() const;
    void unsetCom_adobe_xmp_worker_files_native_fragment_win();
    void setComAdobeXmpWorkerFilesNativeFragmentWin(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCommonsOsgiWrapperSimpleJndi() const;
    bool comDayCommonsOsgiWrapperSimpleJndiIsSet() const;
    void unsetCom_day_commons_osgi_wrapper_simple_jndi();
    void setComDayCommonsOsgiWrapperSimpleJndi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqAuthhandler() const;
    bool comDayCqCqAuthhandlerIsSet() const;
    void unsetCom_day_cq_cq_authhandler();
    void setComDayCqCqAuthhandler(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqCompatConfigupdate() const;
    bool comDayCqCqCompatConfigupdateIsSet() const;
    void unsetCom_day_cq_cq_compat_configupdate();
    void setComDayCqCqCompatConfigupdate(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqLicensebranding() const;
    bool comDayCqCqLicensebrandingIsSet() const;
    void unsetCom_day_cq_cq_licensebranding();
    void setComDayCqCqLicensebranding(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqNotifcationImpl() const;
    bool comDayCqCqNotifcationImplIsSet() const;
    void unsetCom_day_cq_cq_notifcation_impl();
    void setComDayCqCqNotifcationImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqReplicationAudit() const;
    bool comDayCqCqReplicationAuditIsSet() const;
    void unsetCom_day_cq_cq_replication_audit();
    void setComDayCqCqReplicationAudit(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqCqSearchExt() const;
    bool comDayCqCqSearchExtIsSet() const;
    void unsetCom_day_cq_cq_search_ext();
    void setComDayCqCqSearchExt(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqDamCqDamAnnotationPrint() const;
    bool comDayCqDamCqDamAnnotationPrintIsSet() const;
    void unsetCom_day_cq_dam_cq_dam_annotation_print();
    void setComDayCqDamCqDamAnnotationPrint(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqDamCqDamAssetUsage() const;
    bool comDayCqDamCqDamAssetUsageIsSet() const;
    void unsetCom_day_cq_dam_cq_dam_asset_usage();
    void setComDayCqDamCqDamAssetUsage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqDamCqDamS7dam() const;
    bool comDayCqDamCqDamS7damIsSet() const;
    void unsetCom_day_cq_dam_cq_dam_s7dam();
    void setComDayCqDamCqDamS7dam(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqDamCqDamSimilaritysearch() const;
    bool comDayCqDamCqDamSimilaritysearchIsSet() const;
    void unsetCom_day_cq_dam_cq_dam_similaritysearch();
    void setComDayCqDamCqDamSimilaritysearch(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqDamDamWebdavSupport() const;
    bool comDayCqDamDamWebdavSupportIsSet() const;
    void unsetCom_day_cq_dam_dam_webdav_support();
    void setComDayCqDamDamWebdavSupport(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqPreUpgradeTasks() const;
    bool comDayCqPreUpgradeTasksIsSet() const;
    void unsetCom_day_cq_pre_upgrade_tasks();
    void setComDayCqPreUpgradeTasks(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqReplicationExtensions() const;
    bool comDayCqReplicationExtensionsIsSet() const;
    void unsetCom_day_cq_replication_extensions();
    void setComDayCqReplicationExtensions(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqWcmCqMsmCore() const;
    bool comDayCqWcmCqMsmCoreIsSet() const;
    void unsetCom_day_cq_wcm_cq_msm_core();
    void setComDayCqWcmCqMsmCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getComDayCqWcmCqWcmTranslation() const;
    bool comDayCqWcmCqWcmTranslationIsSet() const;
    void unsetCom_day_cq_wcm_cq_wcm_translation();
    void setComDayCqWcmCqWcmTranslation(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getDayCommonsJrawio() const;
    bool dayCommonsJrawioIsSet() const;
    void unsetDay_commons_jrawio();
    void setDayCommonsJrawio(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheAriesJmxWhiteboard() const;
    bool orgApacheAriesJmxWhiteboardIsSet() const;
    void unsetOrg_apache_aries_jmx_whiteboard();
    void setOrgApacheAriesJmxWhiteboard(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixHttpSslfilter() const;
    bool orgApacheFelixHttpSslfilterIsSet() const;
    void unsetOrg_apache_felix_http_sslfilter();
    void setOrgApacheFelixHttpSslfilter(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixOrgApacheFelixThreaddump() const;
    bool orgApacheFelixOrgApacheFelixThreaddumpIsSet() const;
    void unsetOrg_apache_felix_org_apache_felix_threaddump();
    void setOrgApacheFelixOrgApacheFelixThreaddump(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixWebconsolePluginsDs() const;
    bool orgApacheFelixWebconsolePluginsDsIsSet() const;
    void unsetOrg_apache_felix_webconsole_plugins_ds();
    void setOrgApacheFelixWebconsolePluginsDs(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixWebconsolePluginsEvent() const;
    bool orgApacheFelixWebconsolePluginsEventIsSet() const;
    void unsetOrg_apache_felix_webconsole_plugins_event();
    void setOrgApacheFelixWebconsolePluginsEvent(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixWebconsolePluginsMemoryusage() const;
    bool orgApacheFelixWebconsolePluginsMemoryusageIsSet() const;
    void unsetOrg_apache_felix_webconsole_plugins_memoryusage();
    void setOrgApacheFelixWebconsolePluginsMemoryusage(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheFelixWebconsolePluginsPackageadmin() const;
    bool orgApacheFelixWebconsolePluginsPackageadminIsSet() const;
    void unsetOrg_apache_felix_webconsole_plugins_packageadmin();
    void setOrgApacheFelixWebconsolePluginsPackageadmin(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheJackrabbitOakAuthLdap() const;
    bool orgApacheJackrabbitOakAuthLdapIsSet() const;
    void unsetOrg_apache_jackrabbit_oak_auth_ldap();
    void setOrgApacheJackrabbitOakAuthLdap(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheJackrabbitOakSegmentTar() const;
    bool orgApacheJackrabbitOakSegmentTarIsSet() const;
    void unsetOrg_apache_jackrabbit_oak_segment_tar();
    void setOrgApacheJackrabbitOakSegmentTar(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheJackrabbitOakSolrOsgi() const;
    bool orgApacheJackrabbitOakSolrOsgiIsSet() const;
    void unsetOrg_apache_jackrabbit_oak_solr_osgi();
    void setOrgApacheJackrabbitOakSolrOsgi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingBundleresourceImpl() const;
    bool orgApacheSlingBundleresourceImplIsSet() const;
    void unsetOrg_apache_sling_bundleresource_impl();
    void setOrgApacheSlingBundleresourceImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingCommonsFsclassloader() const;
    bool orgApacheSlingCommonsFsclassloaderIsSet() const;
    void unsetOrg_apache_sling_commons_fsclassloader();
    void setOrgApacheSlingCommonsFsclassloader(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingCommonsLogWebconsole() const;
    bool orgApacheSlingCommonsLogWebconsoleIsSet() const;
    void unsetOrg_apache_sling_commons_log_webconsole();
    void setOrgApacheSlingCommonsLogWebconsole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDatasource() const;
    bool orgApacheSlingDatasourceIsSet() const;
    void unsetOrg_apache_sling_datasource();
    void setOrgApacheSlingDatasource(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDiscoveryBase() const;
    bool orgApacheSlingDiscoveryBaseIsSet() const;
    void unsetOrg_apache_sling_discovery_base();
    void setOrgApacheSlingDiscoveryBase(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDiscoveryOak() const;
    bool orgApacheSlingDiscoveryOakIsSet() const;
    void unsetOrg_apache_sling_discovery_oak();
    void setOrgApacheSlingDiscoveryOak(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDiscoverySupport() const;
    bool orgApacheSlingDiscoverySupportIsSet() const;
    void unsetOrg_apache_sling_discovery_support();
    void setOrgApacheSlingDiscoverySupport(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDistributionApi() const;
    bool orgApacheSlingDistributionApiIsSet() const;
    void unsetOrg_apache_sling_distribution_api();
    void setOrgApacheSlingDistributionApi(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingDistributionCore() const;
    bool orgApacheSlingDistributionCoreIsSet() const;
    void unsetOrg_apache_sling_distribution_core();
    void setOrgApacheSlingDistributionCore(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingExtensionsWebconsolesecurityprovider() const;
    bool orgApacheSlingExtensionsWebconsolesecurityproviderIsSet() const;
    void unsetOrg_apache_sling_extensions_webconsolesecurityprovider();
    void setOrgApacheSlingExtensionsWebconsolesecurityprovider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingHcWebconsole() const;
    bool orgApacheSlingHcWebconsoleIsSet() const;
    void unsetOrg_apache_sling_hc_webconsole();
    void setOrgApacheSlingHcWebconsole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingInstallerConsole() const;
    bool orgApacheSlingInstallerConsoleIsSet() const;
    void unsetOrg_apache_sling_installer_console();
    void setOrgApacheSlingInstallerConsole(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingInstallerProviderFile() const;
    bool orgApacheSlingInstallerProviderFileIsSet() const;
    void unsetOrg_apache_sling_installer_provider_file();
    void setOrgApacheSlingInstallerProviderFile(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingInstallerProviderJcr() const;
    bool orgApacheSlingInstallerProviderJcrIsSet() const;
    void unsetOrg_apache_sling_installer_provider_jcr();
    void setOrgApacheSlingInstallerProviderJcr(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingJcrDavex() const;
    bool orgApacheSlingJcrDavexIsSet() const;
    void unsetOrg_apache_sling_jcr_davex();
    void setOrgApacheSlingJcrDavex(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingJcrResourcesecurity() const;
    bool orgApacheSlingJcrResourcesecurityIsSet() const;
    void unsetOrg_apache_sling_jcr_resourcesecurity();
    void setOrgApacheSlingJcrResourcesecurity(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingJmxProvider() const;
    bool orgApacheSlingJmxProviderIsSet() const;
    void unsetOrg_apache_sling_jmx_provider();
    void setOrgApacheSlingJmxProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingLaunchpadInstaller() const;
    bool orgApacheSlingLaunchpadInstallerIsSet() const;
    void unsetOrg_apache_sling_launchpad_installer();
    void setOrgApacheSlingLaunchpadInstaller(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingModelsImpl() const;
    bool orgApacheSlingModelsImplIsSet() const;
    void unsetOrg_apache_sling_models_impl();
    void setOrgApacheSlingModelsImpl(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingRepoinitParser() const;
    bool orgApacheSlingRepoinitParserIsSet() const;
    void unsetOrg_apache_sling_repoinit_parser();
    void setOrgApacheSlingRepoinitParser(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingResourceInventory() const;
    bool orgApacheSlingResourceInventoryIsSet() const;
    void unsetOrg_apache_sling_resource_inventory();
    void setOrgApacheSlingResourceInventory(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingResourceresolver() const;
    bool orgApacheSlingResourceresolverIsSet() const;
    void unsetOrg_apache_sling_resourceresolver();
    void setOrgApacheSlingResourceresolver(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingScriptingJavascript() const;
    bool orgApacheSlingScriptingJavascriptIsSet() const;
    void unsetOrg_apache_sling_scripting_javascript();
    void setOrgApacheSlingScriptingJavascript(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingScriptingJst() const;
    bool orgApacheSlingScriptingJstIsSet() const;
    void unsetOrg_apache_sling_scripting_jst();
    void setOrgApacheSlingScriptingJst(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingScriptingSightlyJsProvider() const;
    bool orgApacheSlingScriptingSightlyJsProviderIsSet() const;
    void unsetOrg_apache_sling_scripting_sightly_js_provider();
    void setOrgApacheSlingScriptingSightlyJsProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingScriptingSightlyModelsProvider() const;
    bool orgApacheSlingScriptingSightlyModelsProviderIsSet() const;
    void unsetOrg_apache_sling_scripting_sightly_models_provider();
    void setOrgApacheSlingScriptingSightlyModelsProvider(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingSecurity() const;
    bool orgApacheSlingSecurityIsSet() const;
    void unsetOrg_apache_sling_security();
    void setOrgApacheSlingSecurity(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingServletsCompat() const;
    bool orgApacheSlingServletsCompatIsSet() const;
    void unsetOrg_apache_sling_servlets_compat();
    void setOrgApacheSlingServletsCompat(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingServletsGet() const;
    bool orgApacheSlingServletsGetIsSet() const;
    void unsetOrg_apache_sling_servlets_get();
    void setOrgApacheSlingServletsGet(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingStartupfilterDisabler() const;
    bool orgApacheSlingStartupfilterDisablerIsSet() const;
    void unsetOrg_apache_sling_startupfilter_disabler();
    void setOrgApacheSlingStartupfilterDisabler(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getOrgApacheSlingTracer() const;
    bool orgApacheSlingTracerIsSet() const;
    void unsetOrg_apache_sling_tracer();
    void setOrgApacheSlingTracer(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getWeRetailClientAppCore() const;
    bool weRetailClientAppCoreIsSet() const;
    void unsetWe_retail_client_app_core();
    void setWeRetailClientAppCore(std::shared_ptr<ConfigNodePropertyString> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cdn_cdn_rewriter;
    bool m_Com_adobe_cq_cdn_cdn_rewriterIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cloud_config_components;
    bool m_Com_adobe_cq_cloud_config_componentsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cloud_config_core;
    bool m_Com_adobe_cq_cloud_config_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cloud_config_ui;
    bool m_Com_adobe_cq_cloud_config_uiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_com_adobe_cq_editor;
    bool m_Com_adobe_cq_com_adobe_cq_editorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_com_adobe_cq_projects_core;
    bool m_Com_adobe_cq_com_adobe_cq_projects_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_com_adobe_cq_projects_wcm_core;
    bool m_Com_adobe_cq_com_adobe_cq_projects_wcm_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_com_adobe_cq_ui_commons;
    bool m_Com_adobe_cq_com_adobe_cq_ui_commonsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_com_adobe_cq_wcm_style;
    bool m_Com_adobe_cq_com_adobe_cq_wcm_styleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_activitymap_integration;
    bool m_Com_adobe_cq_cq_activitymap_integrationIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_contexthub_commons;
    bool m_Com_adobe_cq_cq_contexthub_commonsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_dtm;
    bool m_Com_adobe_cq_cq_dtmIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_healthcheck;
    bool m_Com_adobe_cq_cq_healthcheckIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_multisite_targeting;
    bool m_Com_adobe_cq_cq_multisite_targetingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_pre_upgrade_cleanup;
    bool m_Com_adobe_cq_cq_pre_upgrade_cleanupIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_product_info_provider;
    bool m_Com_adobe_cq_cq_product_info_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_rest_sites;
    bool m_Com_adobe_cq_cq_rest_sitesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_cq_security_hc;
    bool m_Com_adobe_cq_cq_security_hcIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_dam_cq_dam_svg_handler;
    bool m_Com_adobe_cq_dam_cq_dam_svg_handlerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_dam_cq_scene7_imaging;
    bool m_Com_adobe_cq_dam_cq_scene7_imagingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_dtm_reactor_core;
    bool m_Com_adobe_cq_dtm_reactor_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_dtm_reactor_ui;
    bool m_Com_adobe_cq_dtm_reactor_uiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_exp_jspel_resolver;
    bool m_Com_adobe_cq_exp_jspel_resolverIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_inbox_cq_inbox;
    bool m_Com_adobe_cq_inbox_cq_inboxIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_json_schema_parser;
    bool m_Com_adobe_cq_json_schema_parserIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_media_cq_media_publishing_dps_fp_core;
    bool m_Com_adobe_cq_media_cq_media_publishing_dps_fp_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_mobile_cq_mobile_caas;
    bool m_Com_adobe_cq_mobile_cq_mobile_caasIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_mobile_cq_mobile_index_builder;
    bool m_Com_adobe_cq_mobile_cq_mobile_index_builderIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_mobile_cq_mobile_phonegap_build;
    bool m_Com_adobe_cq_mobile_cq_mobile_phonegap_buildIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_myspell;
    bool m_Com_adobe_cq_myspellIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_sample_we_retail_core;
    bool m_Com_adobe_cq_sample_we_retail_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_screens_com_adobe_cq_screens_dcc;
    bool m_Com_adobe_cq_screens_com_adobe_cq_screens_dccIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_core;
    bool m_Com_adobe_cq_screens_com_adobe_cq_screens_mq_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_as_provider;
    bool m_Com_adobe_cq_social_cq_social_as_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_badging_basic_impl;
    bool m_Com_adobe_cq_social_cq_social_badging_basic_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_badging_impl;
    bool m_Com_adobe_cq_social_cq_social_badging_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_calendar_impl;
    bool m_Com_adobe_cq_social_cq_social_calendar_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_content_fragments_impl;
    bool m_Com_adobe_cq_social_cq_social_content_fragments_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_enablement_impl;
    bool m_Com_adobe_cq_social_cq_social_enablement_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_graph_impl;
    bool m_Com_adobe_cq_social_cq_social_graph_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_ideation_impl;
    bool m_Com_adobe_cq_social_cq_social_ideation_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_jcr_provider;
    bool m_Com_adobe_cq_social_cq_social_jcr_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_members_impl;
    bool m_Com_adobe_cq_social_cq_social_members_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_ms_provider;
    bool m_Com_adobe_cq_social_cq_social_ms_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_notifications_channels_web;
    bool m_Com_adobe_cq_social_cq_social_notifications_channels_webIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_notifications_impl;
    bool m_Com_adobe_cq_social_cq_social_notifications_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_rdb_provider;
    bool m_Com_adobe_cq_social_cq_social_rdb_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_scf_impl;
    bool m_Com_adobe_cq_social_cq_social_scf_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_scoring_basic_impl;
    bool m_Com_adobe_cq_social_cq_social_scoring_basic_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_scoring_impl;
    bool m_Com_adobe_cq_social_cq_social_scoring_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_serviceusers_impl;
    bool m_Com_adobe_cq_social_cq_social_serviceusers_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_srp_impl;
    bool m_Com_adobe_cq_social_cq_social_srp_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_cq_social_cq_social_ugcbase_impl;
    bool m_Com_adobe_cq_social_cq_social_ugcbase_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_dam_cq_dam_cfm_impl;
    bool m_Com_adobe_dam_cq_dam_cfm_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_forms_foundation_forms_foundation_base;
    bool m_Com_adobe_forms_foundation_forms_foundation_baseIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_apicontroller;
    bool m_Com_adobe_granite_apicontrollerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_asset_core;
    bool m_Com_adobe_granite_asset_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_auth_sso;
    bool m_Com_adobe_granite_auth_ssoIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_bundles_hc_impl;
    bool m_Com_adobe_granite_bundles_hc_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_compat_router;
    bool m_Com_adobe_granite_compat_routerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_conf;
    bool m_Com_adobe_granite_confIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_conf_ui_core;
    bool m_Com_adobe_granite_conf_ui_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_cors;
    bool m_Com_adobe_granite_corsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crx_explorer;
    bool m_Com_adobe_granite_crx_explorerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crxde_lite;
    bool m_Com_adobe_granite_crxde_liteIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crypto_config;
    bool m_Com_adobe_granite_crypto_configIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crypto_extension;
    bool m_Com_adobe_granite_crypto_extensionIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crypto_file;
    bool m_Com_adobe_granite_crypto_fileIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_crypto_jcr;
    bool m_Com_adobe_granite_crypto_jcrIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_csrf;
    bool m_Com_adobe_granite_csrfIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_distribution_core;
    bool m_Com_adobe_granite_distribution_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_dropwizard_metrics;
    bool m_Com_adobe_granite_dropwizard_metricsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_frags_impl;
    bool m_Com_adobe_granite_frags_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_gibson;
    bool m_Com_adobe_granite_gibsonIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_infocollector;
    bool m_Com_adobe_granite_infocollectorIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_installer_factory_packages;
    bool m_Com_adobe_granite_installer_factory_packagesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jetty_ssl;
    bool m_Com_adobe_granite_jetty_sslIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_jobs_async;
    bool m_Com_adobe_granite_jobs_asyncIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_maintenance_oak;
    bool m_Com_adobe_granite_maintenance_oakIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_monitoring_core;
    bool m_Com_adobe_granite_monitoring_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_queries;
    bool m_Com_adobe_granite_queriesIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_replication_hc_impl;
    bool m_Com_adobe_granite_replication_hc_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_repository_checker;
    bool m_Com_adobe_granite_repository_checkerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_repository_hc_impl;
    bool m_Com_adobe_granite_repository_hc_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_rest_assets;
    bool m_Com_adobe_granite_rest_assetsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_security_ui;
    bool m_Com_adobe_granite_security_uiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_startup;
    bool m_Com_adobe_granite_startupIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_tagsoup;
    bool m_Com_adobe_granite_tagsoupIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_taskmanagement_core;
    bool m_Com_adobe_granite_taskmanagement_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_taskmanagement_workflow;
    bool m_Com_adobe_granite_taskmanagement_workflowIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_ui_clientlibs_compiler_less;
    bool m_Com_adobe_granite_ui_clientlibs_compiler_lessIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_ui_clientlibs_processor_gcc;
    bool m_Com_adobe_granite_ui_clientlibs_processor_gccIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_webconsole_plugins;
    bool m_Com_adobe_granite_webconsole_pluginsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_granite_workflow_console;
    bool m_Com_adobe_granite_workflow_consoleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_xmp_worker_files_native_fragment_linux;
    bool m_Com_adobe_xmp_worker_files_native_fragment_linuxIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_xmp_worker_files_native_fragment_macosx;
    bool m_Com_adobe_xmp_worker_files_native_fragment_macosxIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_adobe_xmp_worker_files_native_fragment_win;
    bool m_Com_adobe_xmp_worker_files_native_fragment_winIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_commons_osgi_wrapper_simple_jndi;
    bool m_Com_day_commons_osgi_wrapper_simple_jndiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_authhandler;
    bool m_Com_day_cq_cq_authhandlerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_compat_configupdate;
    bool m_Com_day_cq_cq_compat_configupdateIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_licensebranding;
    bool m_Com_day_cq_cq_licensebrandingIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_notifcation_impl;
    bool m_Com_day_cq_cq_notifcation_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_replication_audit;
    bool m_Com_day_cq_cq_replication_auditIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_cq_search_ext;
    bool m_Com_day_cq_cq_search_extIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_dam_cq_dam_annotation_print;
    bool m_Com_day_cq_dam_cq_dam_annotation_printIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_dam_cq_dam_asset_usage;
    bool m_Com_day_cq_dam_cq_dam_asset_usageIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_dam_cq_dam_s7dam;
    bool m_Com_day_cq_dam_cq_dam_s7damIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_dam_cq_dam_similaritysearch;
    bool m_Com_day_cq_dam_cq_dam_similaritysearchIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_dam_dam_webdav_support;
    bool m_Com_day_cq_dam_dam_webdav_supportIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_pre_upgrade_tasks;
    bool m_Com_day_cq_pre_upgrade_tasksIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_replication_extensions;
    bool m_Com_day_cq_replication_extensionsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_wcm_cq_msm_core;
    bool m_Com_day_cq_wcm_cq_msm_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Com_day_cq_wcm_cq_wcm_translation;
    bool m_Com_day_cq_wcm_cq_wcm_translationIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Day_commons_jrawio;
    bool m_Day_commons_jrawioIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_aries_jmx_whiteboard;
    bool m_Org_apache_aries_jmx_whiteboardIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_http_sslfilter;
    bool m_Org_apache_felix_http_sslfilterIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_org_apache_felix_threaddump;
    bool m_Org_apache_felix_org_apache_felix_threaddumpIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_webconsole_plugins_ds;
    bool m_Org_apache_felix_webconsole_plugins_dsIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_webconsole_plugins_event;
    bool m_Org_apache_felix_webconsole_plugins_eventIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_webconsole_plugins_memoryusage;
    bool m_Org_apache_felix_webconsole_plugins_memoryusageIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_felix_webconsole_plugins_packageadmin;
    bool m_Org_apache_felix_webconsole_plugins_packageadminIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_jackrabbit_oak_auth_ldap;
    bool m_Org_apache_jackrabbit_oak_auth_ldapIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_jackrabbit_oak_segment_tar;
    bool m_Org_apache_jackrabbit_oak_segment_tarIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_jackrabbit_oak_solr_osgi;
    bool m_Org_apache_jackrabbit_oak_solr_osgiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_bundleresource_impl;
    bool m_Org_apache_sling_bundleresource_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_commons_fsclassloader;
    bool m_Org_apache_sling_commons_fsclassloaderIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_commons_log_webconsole;
    bool m_Org_apache_sling_commons_log_webconsoleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_datasource;
    bool m_Org_apache_sling_datasourceIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_discovery_base;
    bool m_Org_apache_sling_discovery_baseIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_discovery_oak;
    bool m_Org_apache_sling_discovery_oakIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_discovery_support;
    bool m_Org_apache_sling_discovery_supportIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_distribution_api;
    bool m_Org_apache_sling_distribution_apiIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_distribution_core;
    bool m_Org_apache_sling_distribution_coreIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_extensions_webconsolesecurityprovider;
    bool m_Org_apache_sling_extensions_webconsolesecurityproviderIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_hc_webconsole;
    bool m_Org_apache_sling_hc_webconsoleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_installer_console;
    bool m_Org_apache_sling_installer_consoleIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_installer_provider_file;
    bool m_Org_apache_sling_installer_provider_fileIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_installer_provider_jcr;
    bool m_Org_apache_sling_installer_provider_jcrIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_jcr_davex;
    bool m_Org_apache_sling_jcr_davexIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_jcr_resourcesecurity;
    bool m_Org_apache_sling_jcr_resourcesecurityIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_jmx_provider;
    bool m_Org_apache_sling_jmx_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_launchpad_installer;
    bool m_Org_apache_sling_launchpad_installerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_models_impl;
    bool m_Org_apache_sling_models_implIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_repoinit_parser;
    bool m_Org_apache_sling_repoinit_parserIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_resource_inventory;
    bool m_Org_apache_sling_resource_inventoryIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_resourceresolver;
    bool m_Org_apache_sling_resourceresolverIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_scripting_javascript;
    bool m_Org_apache_sling_scripting_javascriptIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_scripting_jst;
    bool m_Org_apache_sling_scripting_jstIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_scripting_sightly_js_provider;
    bool m_Org_apache_sling_scripting_sightly_js_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_scripting_sightly_models_provider;
    bool m_Org_apache_sling_scripting_sightly_models_providerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_security;
    bool m_Org_apache_sling_securityIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_servlets_compat;
    bool m_Org_apache_sling_servlets_compatIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_servlets_get;
    bool m_Org_apache_sling_servlets_getIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_startupfilter_disabler;
    bool m_Org_apache_sling_startupfilter_disablerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_Org_apache_sling_tracer;
    bool m_Org_apache_sling_tracerIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_We_retail_client_app_core;
    bool m_We_retail_client_app_coreIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteApicontrollerFilterResolverHookFactoryProperties_H_ */
