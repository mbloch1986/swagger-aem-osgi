/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OrgApacheSlingDatasourceDataSourceFactoryProperties
    /// </summary>
    [DataContract]
    public partial class OrgApacheSlingDatasourceDataSourceFactoryProperties :  IEquatable<OrgApacheSlingDatasourceDataSourceFactoryProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrgApacheSlingDatasourceDataSourceFactoryProperties" /> class.
        /// </summary>
        /// <param name="datasourceName">datasourceName.</param>
        /// <param name="datasourceSvcPropName">datasourceSvcPropName.</param>
        /// <param name="driverClassName">driverClassName.</param>
        /// <param name="url">url.</param>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="defaultAutoCommit">defaultAutoCommit.</param>
        /// <param name="defaultReadOnly">defaultReadOnly.</param>
        /// <param name="defaultTransactionIsolation">defaultTransactionIsolation.</param>
        /// <param name="defaultCatalog">defaultCatalog.</param>
        /// <param name="maxActive">maxActive.</param>
        /// <param name="maxIdle">maxIdle.</param>
        /// <param name="minIdle">minIdle.</param>
        /// <param name="initialSize">initialSize.</param>
        /// <param name="maxWait">maxWait.</param>
        /// <param name="maxAge">maxAge.</param>
        /// <param name="testOnBorrow">testOnBorrow.</param>
        /// <param name="testOnReturn">testOnReturn.</param>
        /// <param name="testWhileIdle">testWhileIdle.</param>
        /// <param name="validationQuery">validationQuery.</param>
        /// <param name="validationQueryTimeout">validationQueryTimeout.</param>
        /// <param name="timeBetweenEvictionRunsMillis">timeBetweenEvictionRunsMillis.</param>
        /// <param name="minEvictableIdleTimeMillis">minEvictableIdleTimeMillis.</param>
        /// <param name="connectionProperties">connectionProperties.</param>
        /// <param name="initSQL">initSQL.</param>
        /// <param name="jdbcInterceptors">jdbcInterceptors.</param>
        /// <param name="validationInterval">validationInterval.</param>
        /// <param name="logValidationErrors">logValidationErrors.</param>
        /// <param name="datasourceSvcProperties">datasourceSvcProperties.</param>
        public OrgApacheSlingDatasourceDataSourceFactoryProperties(ConfigNodePropertyString datasourceName = default(ConfigNodePropertyString), ConfigNodePropertyString datasourceSvcPropName = default(ConfigNodePropertyString), ConfigNodePropertyString driverClassName = default(ConfigNodePropertyString), ConfigNodePropertyString url = default(ConfigNodePropertyString), ConfigNodePropertyString username = default(ConfigNodePropertyString), ConfigNodePropertyString password = default(ConfigNodePropertyString), ConfigNodePropertyDropDown defaultAutoCommit = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown defaultReadOnly = default(ConfigNodePropertyDropDown), ConfigNodePropertyDropDown defaultTransactionIsolation = default(ConfigNodePropertyDropDown), ConfigNodePropertyString defaultCatalog = default(ConfigNodePropertyString), ConfigNodePropertyInteger maxActive = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxIdle = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger minIdle = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger initialSize = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxWait = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger maxAge = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean testOnBorrow = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean testOnReturn = default(ConfigNodePropertyBoolean), ConfigNodePropertyBoolean testWhileIdle = default(ConfigNodePropertyBoolean), ConfigNodePropertyString validationQuery = default(ConfigNodePropertyString), ConfigNodePropertyInteger validationQueryTimeout = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger timeBetweenEvictionRunsMillis = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger minEvictableIdleTimeMillis = default(ConfigNodePropertyInteger), ConfigNodePropertyString connectionProperties = default(ConfigNodePropertyString), ConfigNodePropertyString initSQL = default(ConfigNodePropertyString), ConfigNodePropertyString jdbcInterceptors = default(ConfigNodePropertyString), ConfigNodePropertyInteger validationInterval = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean logValidationErrors = default(ConfigNodePropertyBoolean), ConfigNodePropertyArray datasourceSvcProperties = default(ConfigNodePropertyArray))
        {
            this.DatasourceName = datasourceName;
            this.DatasourceSvcPropName = datasourceSvcPropName;
            this.DriverClassName = driverClassName;
            this.Url = url;
            this.Username = username;
            this.Password = password;
            this.DefaultAutoCommit = defaultAutoCommit;
            this.DefaultReadOnly = defaultReadOnly;
            this.DefaultTransactionIsolation = defaultTransactionIsolation;
            this.DefaultCatalog = defaultCatalog;
            this.MaxActive = maxActive;
            this.MaxIdle = maxIdle;
            this.MinIdle = minIdle;
            this.InitialSize = initialSize;
            this.MaxWait = maxWait;
            this.MaxAge = maxAge;
            this.TestOnBorrow = testOnBorrow;
            this.TestOnReturn = testOnReturn;
            this.TestWhileIdle = testWhileIdle;
            this.ValidationQuery = validationQuery;
            this.ValidationQueryTimeout = validationQueryTimeout;
            this.TimeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
            this.MinEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
            this.ConnectionProperties = connectionProperties;
            this.InitSQL = initSQL;
            this.JdbcInterceptors = jdbcInterceptors;
            this.ValidationInterval = validationInterval;
            this.LogValidationErrors = logValidationErrors;
            this.DatasourceSvcProperties = datasourceSvcProperties;
        }
        
        /// <summary>
        /// Gets or Sets DatasourceName
        /// </summary>
        [DataMember(Name="datasource.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString DatasourceName { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceSvcPropName
        /// </summary>
        [DataMember(Name="datasource.svc.prop.name", EmitDefaultValue=false)]
        public ConfigNodePropertyString DatasourceSvcPropName { get; set; }

        /// <summary>
        /// Gets or Sets DriverClassName
        /// </summary>
        [DataMember(Name="driverClassName", EmitDefaultValue=false)]
        public ConfigNodePropertyString DriverClassName { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public ConfigNodePropertyString Url { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public ConfigNodePropertyString Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public ConfigNodePropertyString Password { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAutoCommit
        /// </summary>
        [DataMember(Name="defaultAutoCommit", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown DefaultAutoCommit { get; set; }

        /// <summary>
        /// Gets or Sets DefaultReadOnly
        /// </summary>
        [DataMember(Name="defaultReadOnly", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown DefaultReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTransactionIsolation
        /// </summary>
        [DataMember(Name="defaultTransactionIsolation", EmitDefaultValue=false)]
        public ConfigNodePropertyDropDown DefaultTransactionIsolation { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCatalog
        /// </summary>
        [DataMember(Name="defaultCatalog", EmitDefaultValue=false)]
        public ConfigNodePropertyString DefaultCatalog { get; set; }

        /// <summary>
        /// Gets or Sets MaxActive
        /// </summary>
        [DataMember(Name="maxActive", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxActive { get; set; }

        /// <summary>
        /// Gets or Sets MaxIdle
        /// </summary>
        [DataMember(Name="maxIdle", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxIdle { get; set; }

        /// <summary>
        /// Gets or Sets MinIdle
        /// </summary>
        [DataMember(Name="minIdle", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinIdle { get; set; }

        /// <summary>
        /// Gets or Sets InitialSize
        /// </summary>
        [DataMember(Name="initialSize", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger InitialSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxWait
        /// </summary>
        [DataMember(Name="maxWait", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxWait { get; set; }

        /// <summary>
        /// Gets or Sets MaxAge
        /// </summary>
        [DataMember(Name="maxAge", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MaxAge { get; set; }

        /// <summary>
        /// Gets or Sets TestOnBorrow
        /// </summary>
        [DataMember(Name="testOnBorrow", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TestOnBorrow { get; set; }

        /// <summary>
        /// Gets or Sets TestOnReturn
        /// </summary>
        [DataMember(Name="testOnReturn", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TestOnReturn { get; set; }

        /// <summary>
        /// Gets or Sets TestWhileIdle
        /// </summary>
        [DataMember(Name="testWhileIdle", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean TestWhileIdle { get; set; }

        /// <summary>
        /// Gets or Sets ValidationQuery
        /// </summary>
        [DataMember(Name="validationQuery", EmitDefaultValue=false)]
        public ConfigNodePropertyString ValidationQuery { get; set; }

        /// <summary>
        /// Gets or Sets ValidationQueryTimeout
        /// </summary>
        [DataMember(Name="validationQueryTimeout", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ValidationQueryTimeout { get; set; }

        /// <summary>
        /// Gets or Sets TimeBetweenEvictionRunsMillis
        /// </summary>
        [DataMember(Name="timeBetweenEvictionRunsMillis", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger TimeBetweenEvictionRunsMillis { get; set; }

        /// <summary>
        /// Gets or Sets MinEvictableIdleTimeMillis
        /// </summary>
        [DataMember(Name="minEvictableIdleTimeMillis", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger MinEvictableIdleTimeMillis { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>
        [DataMember(Name="connectionProperties", EmitDefaultValue=false)]
        public ConfigNodePropertyString ConnectionProperties { get; set; }

        /// <summary>
        /// Gets or Sets InitSQL
        /// </summary>
        [DataMember(Name="initSQL", EmitDefaultValue=false)]
        public ConfigNodePropertyString InitSQL { get; set; }

        /// <summary>
        /// Gets or Sets JdbcInterceptors
        /// </summary>
        [DataMember(Name="jdbcInterceptors", EmitDefaultValue=false)]
        public ConfigNodePropertyString JdbcInterceptors { get; set; }

        /// <summary>
        /// Gets or Sets ValidationInterval
        /// </summary>
        [DataMember(Name="validationInterval", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger ValidationInterval { get; set; }

        /// <summary>
        /// Gets or Sets LogValidationErrors
        /// </summary>
        [DataMember(Name="logValidationErrors", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean LogValidationErrors { get; set; }

        /// <summary>
        /// Gets or Sets DatasourceSvcProperties
        /// </summary>
        [DataMember(Name="datasource.svc.properties", EmitDefaultValue=false)]
        public ConfigNodePropertyArray DatasourceSvcProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrgApacheSlingDatasourceDataSourceFactoryProperties {\n");
            sb.Append("  DatasourceName: ").Append(DatasourceName).Append("\n");
            sb.Append("  DatasourceSvcPropName: ").Append(DatasourceSvcPropName).Append("\n");
            sb.Append("  DriverClassName: ").Append(DriverClassName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DefaultAutoCommit: ").Append(DefaultAutoCommit).Append("\n");
            sb.Append("  DefaultReadOnly: ").Append(DefaultReadOnly).Append("\n");
            sb.Append("  DefaultTransactionIsolation: ").Append(DefaultTransactionIsolation).Append("\n");
            sb.Append("  DefaultCatalog: ").Append(DefaultCatalog).Append("\n");
            sb.Append("  MaxActive: ").Append(MaxActive).Append("\n");
            sb.Append("  MaxIdle: ").Append(MaxIdle).Append("\n");
            sb.Append("  MinIdle: ").Append(MinIdle).Append("\n");
            sb.Append("  InitialSize: ").Append(InitialSize).Append("\n");
            sb.Append("  MaxWait: ").Append(MaxWait).Append("\n");
            sb.Append("  MaxAge: ").Append(MaxAge).Append("\n");
            sb.Append("  TestOnBorrow: ").Append(TestOnBorrow).Append("\n");
            sb.Append("  TestOnReturn: ").Append(TestOnReturn).Append("\n");
            sb.Append("  TestWhileIdle: ").Append(TestWhileIdle).Append("\n");
            sb.Append("  ValidationQuery: ").Append(ValidationQuery).Append("\n");
            sb.Append("  ValidationQueryTimeout: ").Append(ValidationQueryTimeout).Append("\n");
            sb.Append("  TimeBetweenEvictionRunsMillis: ").Append(TimeBetweenEvictionRunsMillis).Append("\n");
            sb.Append("  MinEvictableIdleTimeMillis: ").Append(MinEvictableIdleTimeMillis).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  InitSQL: ").Append(InitSQL).Append("\n");
            sb.Append("  JdbcInterceptors: ").Append(JdbcInterceptors).Append("\n");
            sb.Append("  ValidationInterval: ").Append(ValidationInterval).Append("\n");
            sb.Append("  LogValidationErrors: ").Append(LogValidationErrors).Append("\n");
            sb.Append("  DatasourceSvcProperties: ").Append(DatasourceSvcProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrgApacheSlingDatasourceDataSourceFactoryProperties);
        }

        /// <summary>
        /// Returns true if OrgApacheSlingDatasourceDataSourceFactoryProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of OrgApacheSlingDatasourceDataSourceFactoryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrgApacheSlingDatasourceDataSourceFactoryProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatasourceName == input.DatasourceName ||
                    (this.DatasourceName != null &&
                    this.DatasourceName.Equals(input.DatasourceName))
                ) && 
                (
                    this.DatasourceSvcPropName == input.DatasourceSvcPropName ||
                    (this.DatasourceSvcPropName != null &&
                    this.DatasourceSvcPropName.Equals(input.DatasourceSvcPropName))
                ) && 
                (
                    this.DriverClassName == input.DriverClassName ||
                    (this.DriverClassName != null &&
                    this.DriverClassName.Equals(input.DriverClassName))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.DefaultAutoCommit == input.DefaultAutoCommit ||
                    (this.DefaultAutoCommit != null &&
                    this.DefaultAutoCommit.Equals(input.DefaultAutoCommit))
                ) && 
                (
                    this.DefaultReadOnly == input.DefaultReadOnly ||
                    (this.DefaultReadOnly != null &&
                    this.DefaultReadOnly.Equals(input.DefaultReadOnly))
                ) && 
                (
                    this.DefaultTransactionIsolation == input.DefaultTransactionIsolation ||
                    (this.DefaultTransactionIsolation != null &&
                    this.DefaultTransactionIsolation.Equals(input.DefaultTransactionIsolation))
                ) && 
                (
                    this.DefaultCatalog == input.DefaultCatalog ||
                    (this.DefaultCatalog != null &&
                    this.DefaultCatalog.Equals(input.DefaultCatalog))
                ) && 
                (
                    this.MaxActive == input.MaxActive ||
                    (this.MaxActive != null &&
                    this.MaxActive.Equals(input.MaxActive))
                ) && 
                (
                    this.MaxIdle == input.MaxIdle ||
                    (this.MaxIdle != null &&
                    this.MaxIdle.Equals(input.MaxIdle))
                ) && 
                (
                    this.MinIdle == input.MinIdle ||
                    (this.MinIdle != null &&
                    this.MinIdle.Equals(input.MinIdle))
                ) && 
                (
                    this.InitialSize == input.InitialSize ||
                    (this.InitialSize != null &&
                    this.InitialSize.Equals(input.InitialSize))
                ) && 
                (
                    this.MaxWait == input.MaxWait ||
                    (this.MaxWait != null &&
                    this.MaxWait.Equals(input.MaxWait))
                ) && 
                (
                    this.MaxAge == input.MaxAge ||
                    (this.MaxAge != null &&
                    this.MaxAge.Equals(input.MaxAge))
                ) && 
                (
                    this.TestOnBorrow == input.TestOnBorrow ||
                    (this.TestOnBorrow != null &&
                    this.TestOnBorrow.Equals(input.TestOnBorrow))
                ) && 
                (
                    this.TestOnReturn == input.TestOnReturn ||
                    (this.TestOnReturn != null &&
                    this.TestOnReturn.Equals(input.TestOnReturn))
                ) && 
                (
                    this.TestWhileIdle == input.TestWhileIdle ||
                    (this.TestWhileIdle != null &&
                    this.TestWhileIdle.Equals(input.TestWhileIdle))
                ) && 
                (
                    this.ValidationQuery == input.ValidationQuery ||
                    (this.ValidationQuery != null &&
                    this.ValidationQuery.Equals(input.ValidationQuery))
                ) && 
                (
                    this.ValidationQueryTimeout == input.ValidationQueryTimeout ||
                    (this.ValidationQueryTimeout != null &&
                    this.ValidationQueryTimeout.Equals(input.ValidationQueryTimeout))
                ) && 
                (
                    this.TimeBetweenEvictionRunsMillis == input.TimeBetweenEvictionRunsMillis ||
                    (this.TimeBetweenEvictionRunsMillis != null &&
                    this.TimeBetweenEvictionRunsMillis.Equals(input.TimeBetweenEvictionRunsMillis))
                ) && 
                (
                    this.MinEvictableIdleTimeMillis == input.MinEvictableIdleTimeMillis ||
                    (this.MinEvictableIdleTimeMillis != null &&
                    this.MinEvictableIdleTimeMillis.Equals(input.MinEvictableIdleTimeMillis))
                ) && 
                (
                    this.ConnectionProperties == input.ConnectionProperties ||
                    (this.ConnectionProperties != null &&
                    this.ConnectionProperties.Equals(input.ConnectionProperties))
                ) && 
                (
                    this.InitSQL == input.InitSQL ||
                    (this.InitSQL != null &&
                    this.InitSQL.Equals(input.InitSQL))
                ) && 
                (
                    this.JdbcInterceptors == input.JdbcInterceptors ||
                    (this.JdbcInterceptors != null &&
                    this.JdbcInterceptors.Equals(input.JdbcInterceptors))
                ) && 
                (
                    this.ValidationInterval == input.ValidationInterval ||
                    (this.ValidationInterval != null &&
                    this.ValidationInterval.Equals(input.ValidationInterval))
                ) && 
                (
                    this.LogValidationErrors == input.LogValidationErrors ||
                    (this.LogValidationErrors != null &&
                    this.LogValidationErrors.Equals(input.LogValidationErrors))
                ) && 
                (
                    this.DatasourceSvcProperties == input.DatasourceSvcProperties ||
                    (this.DatasourceSvcProperties != null &&
                    this.DatasourceSvcProperties.Equals(input.DatasourceSvcProperties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatasourceName != null)
                    hashCode = hashCode * 59 + this.DatasourceName.GetHashCode();
                if (this.DatasourceSvcPropName != null)
                    hashCode = hashCode * 59 + this.DatasourceSvcPropName.GetHashCode();
                if (this.DriverClassName != null)
                    hashCode = hashCode * 59 + this.DriverClassName.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.DefaultAutoCommit != null)
                    hashCode = hashCode * 59 + this.DefaultAutoCommit.GetHashCode();
                if (this.DefaultReadOnly != null)
                    hashCode = hashCode * 59 + this.DefaultReadOnly.GetHashCode();
                if (this.DefaultTransactionIsolation != null)
                    hashCode = hashCode * 59 + this.DefaultTransactionIsolation.GetHashCode();
                if (this.DefaultCatalog != null)
                    hashCode = hashCode * 59 + this.DefaultCatalog.GetHashCode();
                if (this.MaxActive != null)
                    hashCode = hashCode * 59 + this.MaxActive.GetHashCode();
                if (this.MaxIdle != null)
                    hashCode = hashCode * 59 + this.MaxIdle.GetHashCode();
                if (this.MinIdle != null)
                    hashCode = hashCode * 59 + this.MinIdle.GetHashCode();
                if (this.InitialSize != null)
                    hashCode = hashCode * 59 + this.InitialSize.GetHashCode();
                if (this.MaxWait != null)
                    hashCode = hashCode * 59 + this.MaxWait.GetHashCode();
                if (this.MaxAge != null)
                    hashCode = hashCode * 59 + this.MaxAge.GetHashCode();
                if (this.TestOnBorrow != null)
                    hashCode = hashCode * 59 + this.TestOnBorrow.GetHashCode();
                if (this.TestOnReturn != null)
                    hashCode = hashCode * 59 + this.TestOnReturn.GetHashCode();
                if (this.TestWhileIdle != null)
                    hashCode = hashCode * 59 + this.TestWhileIdle.GetHashCode();
                if (this.ValidationQuery != null)
                    hashCode = hashCode * 59 + this.ValidationQuery.GetHashCode();
                if (this.ValidationQueryTimeout != null)
                    hashCode = hashCode * 59 + this.ValidationQueryTimeout.GetHashCode();
                if (this.TimeBetweenEvictionRunsMillis != null)
                    hashCode = hashCode * 59 + this.TimeBetweenEvictionRunsMillis.GetHashCode();
                if (this.MinEvictableIdleTimeMillis != null)
                    hashCode = hashCode * 59 + this.MinEvictableIdleTimeMillis.GetHashCode();
                if (this.ConnectionProperties != null)
                    hashCode = hashCode * 59 + this.ConnectionProperties.GetHashCode();
                if (this.InitSQL != null)
                    hashCode = hashCode * 59 + this.InitSQL.GetHashCode();
                if (this.JdbcInterceptors != null)
                    hashCode = hashCode * 59 + this.JdbcInterceptors.GetHashCode();
                if (this.ValidationInterval != null)
                    hashCode = hashCode * 59 + this.ValidationInterval.GetHashCode();
                if (this.LogValidationErrors != null)
                    hashCode = hashCode * 59 + this.LogValidationErrors.GetHashCode();
                if (this.DatasourceSvcProperties != null)
                    hashCode = hashCode * 59 + this.DatasourceSvcProperties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
