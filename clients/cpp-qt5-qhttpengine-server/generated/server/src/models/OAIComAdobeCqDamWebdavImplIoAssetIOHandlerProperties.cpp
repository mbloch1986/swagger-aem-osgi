/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties() {
    this->init();
}

OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::~OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties() {
    
}

void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::init() {
    m_service_ranking_isSet = false;
    m_path_prefix_isSet = false;
    m_create_version_isSet = false;
}

void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(service_ranking, json[QString("service.ranking")]);
    
    ::OpenAPI::fromJsonValue(path_prefix, json[QString("pathPrefix")]);
    
    ::OpenAPI::fromJsonValue(create_version, json[QString("createVersion")]);
    
}

QString
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::asJsonObject() const {
    QJsonObject obj;
	if(service_ranking.isSet()){
        obj.insert(QString("service.ranking"), ::OpenAPI::toJsonValue(service_ranking));
    }
	if(path_prefix.isSet()){
        obj.insert(QString("pathPrefix"), ::OpenAPI::toJsonValue(path_prefix));
    }
	if(create_version.isSet()){
        obj.insert(QString("createVersion"), ::OpenAPI::toJsonValue(create_version));
    }
    return obj;
}

OAIConfigNodePropertyInteger
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getServiceRanking() const {
    return service_ranking;
}
void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setServiceRanking(const OAIConfigNodePropertyInteger &service_ranking) {
    this->service_ranking = service_ranking;
    this->m_service_ranking_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getPathPrefix() const {
    return path_prefix;
}
void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setPathPrefix(const OAIConfigNodePropertyString &path_prefix) {
    this->path_prefix = path_prefix;
    this->m_path_prefix_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::getCreateVersion() const {
    return create_version;
}
void
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::setCreateVersion(const OAIConfigNodePropertyBoolean &create_version) {
    this->create_version = create_version;
    this->m_create_version_isSet = true;
}


bool
OAIComAdobeCqDamWebdavImplIoAssetIOHandlerProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(service_ranking.isSet()){ isObjectUpdated = true; break;}
    
        if(path_prefix.isSet()){ isObjectUpdated = true; break;}
    
        if(create_version.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

