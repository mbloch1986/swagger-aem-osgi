/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComDayCqWidgetImplHtmlLibraryManagerImplProperties.h
 *
 * 
 */

#ifndef ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_
#define ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_



#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"
#include <memory>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComDayCqWidgetImplHtmlLibraryManagerImplProperties
{
public:
    ComDayCqWidgetImplHtmlLibraryManagerImplProperties();
    virtual ~ComDayCqWidgetImplHtmlLibraryManagerImplProperties();
    
    std::string toJsonString();
    void fromJsonString(std::string const& jsonString);

    /////////////////////////////////////////////
    /// ComDayCqWidgetImplHtmlLibraryManagerImplProperties members
    
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerClientmanager() const;
    void setHtmllibmanagerClientmanager(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerDebug() const;
    void setHtmllibmanagerDebug(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerDebugConsole() const;
    void setHtmllibmanagerDebugConsole(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDebugInitJs() const;
    void setHtmllibmanagerDebugInitJs(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDefaultthemename() const;
    void setHtmllibmanagerDefaultthemename(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerDefaultuserthemename() const;
    void setHtmllibmanagerDefaultuserthemename(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getHtmllibmanagerFirebuglitePath() const;
    void setHtmllibmanagerFirebuglitePath(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerForceCQUrlInfo() const;
    void setHtmllibmanagerForceCQUrlInfo(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerGzip() const;
    void setHtmllibmanagerGzip(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHtmllibmanagerMaxage() const;
    void setHtmllibmanagerMaxage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getHtmllibmanagerMaxDataUriSize() const;
    void setHtmllibmanagerMaxDataUriSize(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerMinify() const;
    void setHtmllibmanagerMinify(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getHtmllibmanagerPathList() const;
    void setHtmllibmanagerPathList(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getHtmllibmanagerTiming() const;
    void setHtmllibmanagerTiming(std::shared_ptr<ConfigNodePropertyBoolean> value);

protected:
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_clientmanager;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_debug;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_debug_console;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_debug_init_js;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_defaultthemename;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_defaultuserthemename;
    std::shared_ptr<ConfigNodePropertyString> m_Htmllibmanager_firebuglite_path;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_forceCQUrlInfo;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_gzip;
    std::shared_ptr<ConfigNodePropertyInteger> m_Htmllibmanager_maxage;
    std::shared_ptr<ConfigNodePropertyInteger> m_Htmllibmanager_maxDataUriSize;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_minify;
    std::shared_ptr<ConfigNodePropertyArray> m_Htmllibmanager_path_list;
    std::shared_ptr<ConfigNodePropertyBoolean> m_Htmllibmanager_timing;
};

}
}
}
}

#endif /* ComDayCqWidgetImplHtmlLibraryManagerImplProperties_H_ */
