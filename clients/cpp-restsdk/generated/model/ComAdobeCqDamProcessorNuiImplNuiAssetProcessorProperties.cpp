/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties()
{
    m_NuiEnabledIsSet = false;
    m_NuiServiceUrlIsSet = false;
    m_NuiApiKeyIsSet = false;
}

ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::~ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties()
{
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NuiEnabledIsSet)
    {
        val[utility::conversions::to_string_t("nuiEnabled")] = ModelBase::toJson(m_NuiEnabled);
    }
    if(m_NuiServiceUrlIsSet)
    {
        val[utility::conversions::to_string_t("nuiServiceUrl")] = ModelBase::toJson(m_NuiServiceUrl);
    }
    if(m_NuiApiKeyIsSet)
    {
        val[utility::conversions::to_string_t("nuiApiKey")] = ModelBase::toJson(m_NuiApiKey);
    }

    return val;
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("nuiEnabled")))
    {
        if(!val[utility::conversions::to_string_t("nuiEnabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("nuiEnabled")]);
            setNuiEnabled( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nuiServiceUrl")))
    {
        if(!val[utility::conversions::to_string_t("nuiServiceUrl")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("nuiServiceUrl")]);
            setNuiServiceUrl( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nuiApiKey")))
    {
        if(!val[utility::conversions::to_string_t("nuiApiKey")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("nuiApiKey")]);
            setNuiApiKey( newItem );
        }
    }
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NuiEnabledIsSet)
    {
        if (m_NuiEnabled.get())
        {
            m_NuiEnabled->toMultipart(multipart, utility::conversions::to_string_t("nuiEnabled."));
        }
    }
    if(m_NuiServiceUrlIsSet)
    {
        if (m_NuiServiceUrl.get())
        {
            m_NuiServiceUrl->toMultipart(multipart, utility::conversions::to_string_t("nuiServiceUrl."));
        }
    }
    if(m_NuiApiKeyIsSet)
    {
        if (m_NuiApiKey.get())
        {
            m_NuiApiKey->toMultipart(multipart, utility::conversions::to_string_t("nuiApiKey."));
        }
    }
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("nuiEnabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nuiEnabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nuiEnabled."));
            setNuiEnabled( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nuiServiceUrl")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nuiServiceUrl")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nuiServiceUrl."));
            setNuiServiceUrl( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nuiApiKey")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("nuiApiKey")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("nuiApiKey."));
            setNuiApiKey( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiEnabled() const
{
    return m_NuiEnabled;
}


void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_NuiEnabled = value;
    m_NuiEnabledIsSet = true;
}
bool ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::nuiEnabledIsSet() const
{
    return m_NuiEnabledIsSet;
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::unsetNuiEnabled()
{
    m_NuiEnabledIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiServiceUrl() const
{
    return m_NuiServiceUrl;
}


void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiServiceUrl(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_NuiServiceUrl = value;
    m_NuiServiceUrlIsSet = true;
}
bool ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::nuiServiceUrlIsSet() const
{
    return m_NuiServiceUrlIsSet;
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::unsetNuiServiceUrl()
{
    m_NuiServiceUrlIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::getNuiApiKey() const
{
    return m_NuiApiKey;
}


void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::setNuiApiKey(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_NuiApiKey = value;
    m_NuiApiKeyIsSet = true;
}
bool ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::nuiApiKeyIsSet() const
{
    return m_NuiApiKeyIsSet;
}

void ComAdobeCqDamProcessorNuiImplNuiAssetProcessorProperties::unsetNuiApiKey()
{
    m_NuiApiKeyIsSet = false;
}

}
}
}
}

