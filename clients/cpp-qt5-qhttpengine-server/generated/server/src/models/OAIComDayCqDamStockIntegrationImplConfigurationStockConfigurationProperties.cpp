/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties(QString json) {
    this->fromJson(json);
}

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties() {
    this->init();
}

OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::~OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties() {
    
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::init() {
    m_name_isSet = false;
    m_locale_isSet = false;
    m_ims_config_isSet = false;
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    
    ::OpenAPI::fromJsonValue(locale, json[QString("locale")]);
    
    ::OpenAPI::fromJsonValue(ims_config, json[QString("imsConfig")]);
    
}

QString
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
	if(name.isSet()){
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
	if(locale.isSet()){
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(locale));
    }
	if(ims_config.isSet()){
        obj.insert(QString("imsConfig"), ::OpenAPI::toJsonValue(ims_config));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getName() const {
    return name;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setName(const OAIConfigNodePropertyString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getLocale() const {
    return locale;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setLocale(const OAIConfigNodePropertyString &locale) {
    this->locale = locale;
    this->m_locale_isSet = true;
}

OAIConfigNodePropertyString
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::getImsConfig() const {
    return ims_config;
}
void
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::setImsConfig(const OAIConfigNodePropertyString &ims_config) {
    this->ims_config = ims_config;
    this->m_ims_config_isSet = true;
}


bool
OAIComDayCqDamStockIntegrationImplConfigurationStockConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(name.isSet()){ isObjectUpdated = true; break;}
    
        if(locale.isSet()){ isObjectUpdated = true; break;}
    
        if(ims_config.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

