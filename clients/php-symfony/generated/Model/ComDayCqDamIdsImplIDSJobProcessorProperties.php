<?php
/**
 * ComDayCqDamIdsImplIDSJobProcessorProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComDayCqDamIdsImplIDSJobProcessorProperties model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ComDayCqDamIdsImplIDSJobProcessorProperties 
{
        /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("enable.multisession")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $enableMultisession;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("ids.cc.enable")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $idsCcEnable;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("enable.retry")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $enableRetry;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     * @SerializedName("enable.retry.scripterror")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyBoolean")
     */
    protected $enableRetryScripterror;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("externalizer.domain.cqhost")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $externalizerDomainCqhost;

    /**
     * @var OpenAPI\Server\Model\ConfigNodePropertyString|null
     * @SerializedName("externalizer.domain.http")
     * @Assert\Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     * @Type("OpenAPI\Server\Model\ConfigNodePropertyString")
     */
    protected $externalizerDomainHttp;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->enableMultisession = isset($data['enableMultisession']) ? $data['enableMultisession'] : null;
        $this->idsCcEnable = isset($data['idsCcEnable']) ? $data['idsCcEnable'] : null;
        $this->enableRetry = isset($data['enableRetry']) ? $data['enableRetry'] : null;
        $this->enableRetryScripterror = isset($data['enableRetryScripterror']) ? $data['enableRetryScripterror'] : null;
        $this->externalizerDomainCqhost = isset($data['externalizerDomainCqhost']) ? $data['externalizerDomainCqhost'] : null;
        $this->externalizerDomainHttp = isset($data['externalizerDomainHttp']) ? $data['externalizerDomainHttp'] : null;
    }

    /**
     * Gets enableMultisession.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableMultisession()
    {
        return $this->enableMultisession;
    }

    /**
     * Sets enableMultisession.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $enableMultisession
     *
     * @return $this
     */
    public function setEnableMultisession(ConfigNodePropertyBoolean $enableMultisession = null)
    {
        $this->enableMultisession = $enableMultisession;

        return $this;
    }

    /**
     * Gets idsCcEnable.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getIdsCcEnable()
    {
        return $this->idsCcEnable;
    }

    /**
     * Sets idsCcEnable.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $idsCcEnable
     *
     * @return $this
     */
    public function setIdsCcEnable(ConfigNodePropertyBoolean $idsCcEnable = null)
    {
        $this->idsCcEnable = $idsCcEnable;

        return $this;
    }

    /**
     * Gets enableRetry.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableRetry()
    {
        return $this->enableRetry;
    }

    /**
     * Sets enableRetry.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $enableRetry
     *
     * @return $this
     */
    public function setEnableRetry(ConfigNodePropertyBoolean $enableRetry = null)
    {
        $this->enableRetry = $enableRetry;

        return $this;
    }

    /**
     * Gets enableRetryScripterror.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyBoolean|null
     */
    public function getEnableRetryScripterror()
    {
        return $this->enableRetryScripterror;
    }

    /**
     * Sets enableRetryScripterror.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyBoolean|null $enableRetryScripterror
     *
     * @return $this
     */
    public function setEnableRetryScripterror(ConfigNodePropertyBoolean $enableRetryScripterror = null)
    {
        $this->enableRetryScripterror = $enableRetryScripterror;

        return $this;
    }

    /**
     * Gets externalizerDomainCqhost.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getExternalizerDomainCqhost()
    {
        return $this->externalizerDomainCqhost;
    }

    /**
     * Sets externalizerDomainCqhost.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $externalizerDomainCqhost
     *
     * @return $this
     */
    public function setExternalizerDomainCqhost(ConfigNodePropertyString $externalizerDomainCqhost = null)
    {
        $this->externalizerDomainCqhost = $externalizerDomainCqhost;

        return $this;
    }

    /**
     * Gets externalizerDomainHttp.
     *
     * @return OpenAPI\Server\Model\ConfigNodePropertyString|null
     */
    public function getExternalizerDomainHttp()
    {
        return $this->externalizerDomainHttp;
    }

    /**
     * Sets externalizerDomainHttp.
     *
     * @param OpenAPI\Server\Model\ConfigNodePropertyString|null $externalizerDomainHttp
     *
     * @return $this
     */
    public function setExternalizerDomainHttp(ConfigNodePropertyString $externalizerDomainHttp = null)
    {
        $this->externalizerDomainHttp = $externalizerDomainHttp;

        return $this;
    }
}


