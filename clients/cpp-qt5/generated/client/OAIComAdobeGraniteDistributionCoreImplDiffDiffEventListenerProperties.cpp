/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties() {
    init();
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::~OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties() {
    this->cleanup();
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::init() {
    diff_path = new OAIConfigNodePropertyString();
    m_diff_path_isSet = false;
    service_name = new OAIConfigNodePropertyString();
    m_service_name_isSet = false;
    service_user_target = new OAIConfigNodePropertyString();
    m_service_user_target_isSet = false;
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::cleanup() {
    if(diff_path != nullptr) { 
        delete diff_path;
    }
    if(service_name != nullptr) { 
        delete service_name;
    }
    if(service_user_target != nullptr) { 
        delete service_user_target;
    }
}

OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties*
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&diff_path, pJson["diffPath"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_name, pJson["serviceName"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
    ::OpenAPI::setValue(&service_user_target, pJson["serviceUser.target"], "OAIConfigNodePropertyString", "OAIConfigNodePropertyString");
    
}

QString
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::asJsonObject() {
    QJsonObject obj;
    if((diff_path != nullptr) && (diff_path->isSet())){
        toJsonValue(QString("diffPath"), diff_path, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_name != nullptr) && (service_name->isSet())){
        toJsonValue(QString("serviceName"), service_name, obj, QString("OAIConfigNodePropertyString"));
    }
    if((service_user_target != nullptr) && (service_user_target->isSet())){
        toJsonValue(QString("serviceUser.target"), service_user_target, obj, QString("OAIConfigNodePropertyString"));
    }

    return obj;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getDiffPath() {
    return diff_path;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setDiffPath(OAIConfigNodePropertyString* diff_path) {
    this->diff_path = diff_path;
    this->m_diff_path_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getServiceName() {
    return service_name;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setServiceName(OAIConfigNodePropertyString* service_name) {
    this->service_name = service_name;
    this->m_service_name_isSet = true;
}

OAIConfigNodePropertyString*
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::getServiceUserTarget() {
    return service_user_target;
}
void
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::setServiceUserTarget(OAIConfigNodePropertyString* service_user_target) {
    this->service_user_target = service_user_target;
    this->m_service_user_target_isSet = true;
}


bool
OAIComAdobeGraniteDistributionCoreImplDiffDiffEventListenerProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(diff_path != nullptr && diff_path->isSet()){ isObjectUpdated = true; break;}
        if(service_name != nullptr && service_name->isSet()){ isObjectUpdated = true; break;}
        if(service_user_target != nullptr && service_user_target->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

