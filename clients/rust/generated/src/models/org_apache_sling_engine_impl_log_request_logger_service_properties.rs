/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
  #[serde(rename = "request.log.service.format")]
  request_log_service_format: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "request.log.service.output")]
  request_log_service_output: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "request.log.service.outputtype")]
  request_log_service_outputtype: Option<::models::ConfigNodePropertyDropDown>,
  #[serde(rename = "request.log.service.onentry")]
  request_log_service_onentry: Option<::models::ConfigNodePropertyBoolean>
}

impl OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
  pub fn new() -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
      request_log_service_format: None,
      request_log_service_output: None,
      request_log_service_outputtype: None,
      request_log_service_onentry: None
    }
  }

  pub fn set_request_log_service_format(&mut self, request_log_service_format: ::models::ConfigNodePropertyString) {
    self.request_log_service_format = Some(request_log_service_format);
  }

  pub fn with_request_log_service_format(mut self, request_log_service_format: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    self.request_log_service_format = Some(request_log_service_format);
    self
  }

  pub fn request_log_service_format(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.request_log_service_format.as_ref()
  }

  pub fn reset_request_log_service_format(&mut self) {
    self.request_log_service_format = None;
  }

  pub fn set_request_log_service_output(&mut self, request_log_service_output: ::models::ConfigNodePropertyString) {
    self.request_log_service_output = Some(request_log_service_output);
  }

  pub fn with_request_log_service_output(mut self, request_log_service_output: ::models::ConfigNodePropertyString) -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    self.request_log_service_output = Some(request_log_service_output);
    self
  }

  pub fn request_log_service_output(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.request_log_service_output.as_ref()
  }

  pub fn reset_request_log_service_output(&mut self) {
    self.request_log_service_output = None;
  }

  pub fn set_request_log_service_outputtype(&mut self, request_log_service_outputtype: ::models::ConfigNodePropertyDropDown) {
    self.request_log_service_outputtype = Some(request_log_service_outputtype);
  }

  pub fn with_request_log_service_outputtype(mut self, request_log_service_outputtype: ::models::ConfigNodePropertyDropDown) -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    self.request_log_service_outputtype = Some(request_log_service_outputtype);
    self
  }

  pub fn request_log_service_outputtype(&self) -> Option<&::models::ConfigNodePropertyDropDown> {
    self.request_log_service_outputtype.as_ref()
  }

  pub fn reset_request_log_service_outputtype(&mut self) {
    self.request_log_service_outputtype = None;
  }

  pub fn set_request_log_service_onentry(&mut self, request_log_service_onentry: ::models::ConfigNodePropertyBoolean) {
    self.request_log_service_onentry = Some(request_log_service_onentry);
  }

  pub fn with_request_log_service_onentry(mut self, request_log_service_onentry: ::models::ConfigNodePropertyBoolean) -> OrgApacheSlingEngineImplLogRequestLoggerServiceProperties {
    self.request_log_service_onentry = Some(request_log_service_onentry);
    self
  }

  pub fn request_log_service_onentry(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.request_log_service_onentry.as_ref()
  }

  pub fn reset_request_log_service_onentry(&mut self) {
    self.request_log_service_onentry = None;
  }

}



