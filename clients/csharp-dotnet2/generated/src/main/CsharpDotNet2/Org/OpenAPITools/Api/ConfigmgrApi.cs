using System;
using System.Collections.Generic;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConfigmgrApi
    {
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="showPlaceholder"></param>
        /// <param name="maximumCacheEntries"></param>
        /// <param name="afScriptingCompatversion"></param>
        /// <param name="makeFileNameUnique"></param>
        /// <param name="generatingCompliantData"></param>
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo</returns>
        AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? showPlaceholder, int? maximumCacheEntries, string afScriptingCompatversion, bool? makeFileNameUnique, bool? generatingCompliantData);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fontList"></param>
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo</returns>
        AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontList);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsComponentQueryCacheSize"></param>
        /// <returns>AnalyticsComponentQueryCacheServiceInfo</returns>
        AnalyticsComponentQueryCacheServiceInfo AnalyticsComponentQueryCacheService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAnalyticsComponentQueryCacheSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="styleString"></param>
        /// <returns>ApacheSlingHealthCheckResultHTMLSerializerInfo</returns>
        ApacheSlingHealthCheckResultHTMLSerializerInfo ApacheSlingHealthCheckResultHTMLSerializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string styleString);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="formsManagerConfigIncludeOOTBTemplates"></param>
        /// <param name="formsManagerConfigIncludeDeprecatedTemplates"></param>
        /// <returns>ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo</returns>
        ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsManagerConfigIncludeOOTBTemplates, bool? formsManagerConfigIncludeDeprecatedTemplates);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isTransactionRecordingEnabled"></param>
        /// <returns>ComAdobeAemTransactionCoreImplTransactionRecorderInfo</returns>
        ComAdobeAemTransactionCoreImplTransactionRecorderInfo ComAdobeAemTransactionCoreImplTransactionRecorder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isTransactionRecordingEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <returns>ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo</returns>
        ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <returns>ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo</returns>
        ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="preUpgradeMaintenanceTasks"></param>
        /// <param name="preUpgradeHcTags"></param>
        /// <returns>ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo</returns>
        ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> preUpgradeMaintenanceTasks, List<string> preUpgradeHcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="rootPath"></param>
        /// <param name="fixInconsistencies"></param>
        /// <returns>ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo</returns>
        ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootPath, bool? fixInconsistencies);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAccountmanagerTokenValidityPeriod"></param>
        /// <param name="cqAccountmanagerConfigRequestnewaccountMail"></param>
        /// <param name="cqAccountmanagerConfigRequestnewpwdMail"></param>
        /// <returns>ComAdobeCqAccountApiAccountManagementServiceInfo</returns>
        ComAdobeCqAccountApiAccountManagementServiceInfo ComAdobeCqAccountApiAccountManagementService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAccountmanagerTokenValidityPeriod, string cqAccountmanagerConfigRequestnewaccountMail, string cqAccountmanagerConfigRequestnewpwdMail);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAccountmanagerConfigInformnewaccountMail"></param>
        /// <param name="cqAccountmanagerConfigInformnewpwdMail"></param>
        /// <returns>ComAdobeCqAccountImplAccountManagementServletInfo</returns>
        ComAdobeCqAccountImplAccountManagementServletInfo ComAdobeCqAccountImplAccountManagementServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAccountmanagerConfigInformnewaccountMail, string cqAccountmanagerConfigInformnewpwdMail);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAddressLocationDefaultMaxResults"></param>
        /// <returns>ComAdobeCqAddressImplLocationLocationListServletInfo</returns>
        ComAdobeCqAddressImplLocationLocationListServletInfo ComAdobeCqAddressImplLocationLocationListServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAddressLocationDefaultMaxResults);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="auditlogRuleName"></param>
        /// <param name="auditlogRuleContentpath"></param>
        /// <param name="auditlogRuleMinimumage"></param>
        /// <param name="auditlogRuleTypes"></param>
        /// <returns>ComAdobeCqAuditPurgeDamInfo</returns>
        ComAdobeCqAuditPurgeDamInfo ComAdobeCqAuditPurgeDam (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="auditlogRuleName"></param>
        /// <param name="auditlogRuleContentpath"></param>
        /// <param name="auditlogRuleMinimumage"></param>
        /// <param name="auditlogRuleTypes"></param>
        /// <returns>ComAdobeCqAuditPurgePagesInfo</returns>
        ComAdobeCqAuditPurgePagesInfo ComAdobeCqAuditPurgePages (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="auditlogRuleName"></param>
        /// <param name="auditlogRuleContentpath"></param>
        /// <param name="auditlogRuleMinimumage"></param>
        /// <param name="auditlogRuleTypes"></param>
        /// <returns>ComAdobeCqAuditPurgeReplicationInfo</returns>
        ComAdobeCqAuditPurgeReplicationInfo ComAdobeCqAuditPurgeReplication (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="keypairId"></param>
        /// <param name="keypairAlias"></param>
        /// <param name="cdnrewriterAttributes"></param>
        /// <param name="cdnRewriterDistributionDomain"></param>
        /// <returns>ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo</returns>
        ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string keypairId, string keypairAlias, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cdnConfigDistributionDomain"></param>
        /// <param name="cdnConfigEnableRewriting"></param>
        /// <param name="cdnConfigPathPrefixes"></param>
        /// <param name="cdnConfigCdnttl"></param>
        /// <param name="cdnConfigApplicationProtocol"></param>
        /// <returns>ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo</returns>
        ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo ComAdobeCqCdnRewriterImplCDNConfigServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cdnConfigDistributionDomain, bool? cdnConfigEnableRewriting, List<string> cdnConfigPathPrefixes, int? cdnConfigCdnttl, string cdnConfigApplicationProtocol);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="cdnrewriterAttributes"></param>
        /// <param name="cdnRewriterDistributionDomain"></param>
        /// <returns>ComAdobeCqCdnRewriterImplCDNRewriterInfo</returns>
        ComAdobeCqCdnRewriterImplCDNRewriterInfo ComAdobeCqCdnRewriterImplCDNRewriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="flushAgents"></param>
        /// <returns>ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo</returns>
        ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommerceAssetHandlerActive"></param>
        /// <param name="cqCommerceAssetHandlerName"></param>
        /// <returns>ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo ComAdobeCqCommerceImplAssetDynamicImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommerceAssetHandlerFallback"></param>
        /// <returns>ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo</returns>
        ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommerceAssetHandlerFallback);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommerceAssetHandlerActive"></param>
        /// <param name="cqCommerceAssetHandlerName"></param>
        /// <returns>ComAdobeCqCommerceImplAssetStaticImageHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetStaticImageHandlerInfo ComAdobeCqCommerceImplAssetStaticImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommerceAssetHandlerActive"></param>
        /// <param name="cqCommerceAssetHandlerName"></param>
        /// <returns>ComAdobeCqCommerceImplAssetVideoHandlerInfo</returns>
        ComAdobeCqCommerceImplAssetVideoHandlerInfo ComAdobeCqCommerceImplAssetVideoHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommercePromotionRoot"></param>
        /// <returns>ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo</returns>
        ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo ComAdobeCqCommerceImplPromotionPromotionManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommercePromotionRoot);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommerceCataloggeneratorBucketsize"></param>
        /// <param name="cqCommerceCataloggeneratorBucketname"></param>
        /// <param name="cqCommerceCataloggeneratorExcludedtemplateproperties"></param>
        /// <returns>ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo</returns>
        ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqCommerceCataloggeneratorBucketsize, string cqCommerceCataloggeneratorBucketname, List<string> cqCommerceCataloggeneratorExcludedtemplateproperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqCommercePageeventlistenerEnabled"></param>
        /// <returns>ComAdobeCqCommercePimImplPageEventListenerInfo</returns>
        ComAdobeCqCommercePimImplPageEventListenerInfo ComAdobeCqCommercePimImplPageEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommercePageeventlistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="feedGeneratorAlgorithm"></param>
        /// <returns>ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo</returns>
        ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string feedGeneratorAlgorithm);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="reportingservicesUrl"></param>
        /// <returns>ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo</returns>
        ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo ComAdobeCqContentinsightImplReportingServicesSettingsProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string reportingservicesUrl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="brightedgeUrl"></param>
        /// <returns>ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo</returns>
        ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string brightedgeUrl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="reportingservicesProxyWhitelist"></param>
        /// <returns>ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo</returns>
        ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo ComAdobeCqContentinsightImplServletsReportingServicesProxyServle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> reportingservicesProxyWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="damCfmComponentResourceType"></param>
        /// <param name="damCfmComponentFileReferenceProp"></param>
        /// <param name="damCfmComponentElementsProp"></param>
        /// <param name="damCfmComponentVariationProp"></param>
        /// <returns>ComAdobeCqDamCfmImplComponentComponentConfigImplInfo</returns>
        ComAdobeCqDamCfmImplComponentComponentConfigImplInfo ComAdobeCqDamCfmImplComponentComponentConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string damCfmComponentResourceType, string damCfmComponentFileReferenceProp, string damCfmComponentElementsProp, string damCfmComponentVariationProp);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="damCfmResourceTypes"></param>
        /// <param name="damCfmReferenceProperties"></param>
        /// <returns>ComAdobeCqDamCfmImplConfFeatureConfigImplInfo</returns>
        ComAdobeCqDamCfmImplConfFeatureConfigImplInfo ComAdobeCqDamCfmImplConfFeatureConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> damCfmResourceTypes, List<string> damCfmReferenceProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pipelineType"></param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo ComAdobeCqDamCfmImplContentRewriterAssetProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pipelineType"></param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo ComAdobeCqDamCfmImplContentRewriterParRangeFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pipelineType"></param>
        /// <returns>ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo</returns>
        ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo ComAdobeCqDamCfmImplContentRewriterPayloadFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxMemory"></param>
        /// <returns>ComAdobeCqDamDmProcessImagePTiffManagerImplInfo</returns>
        ComAdobeCqDamDmProcessImagePTiffManagerImplInfo ComAdobeCqDamDmProcessImagePTiffManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxMemory);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="dmreplicateonmodifyEnabled"></param>
        /// <param name="dmreplicateonmodifyForcesyncdeletes"></param>
        /// <returns>ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo</returns>
        ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? dmreplicateonmodifyEnabled, bool? dmreplicateonmodifyForcesyncdeletes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeDamMacSyncClientSoTimeout"></param>
        /// <returns>ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo</returns>
        ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeDamMacSyncClientSoTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths"></param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceSyncRenditions"></param>
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs"></param>
        /// <param name="comAdobeCqDamMacSyncDamsyncservicePlatform"></param>
        /// <returns>ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo</returns>
        ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo ComAdobeCqDamMacSyncImplDAMSyncServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, string comAdobeCqDamMacSyncDamsyncservicePlatform);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="nuiEnabled"></param>
        /// <param name="nuiServiceUrl"></param>
        /// <param name="nuiApiKey"></param>
        /// <returns>ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo</returns>
        ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo ComAdobeCqDamProcessorNuiImplNuiAssetProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? nuiEnabled, string nuiServiceUrl, string nuiApiKey);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="tcpPort"></param>
        /// <param name="allowRemoteAccess"></param>
        /// <param name="maxRenderRgnPixels"></param>
        /// <param name="maxMessageSize"></param>
        /// <param name="randomAccessUrlTimeout"></param>
        /// <param name="workerThreads"></param>
        /// <returns>ComAdobeCqDamS7imagingImplIsImageServerComponentInfo</returns>
        ComAdobeCqDamS7imagingImplIsImageServerComponentInfo ComAdobeCqDamS7imagingImplIsImageServerComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tcpPort, bool? allowRemoteAccess, string maxRenderRgnPixels, string maxMessageSize, int? randomAccessUrlTimeout, int? workerThreads);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cacheEnable"></param>
        /// <param name="cacheRootPaths"></param>
        /// <param name="cacheMaxSize"></param>
        /// <param name="cacheMaxEntries"></param>
        /// <returns>ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo</returns>
        ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo ComAdobeCqDamS7imagingImplPsPlatformServerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cacheEnable, List<string> cacheRootPaths, int? cacheMaxSize, int? cacheMaxEntries);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="pathPrefix"></param>
        /// <param name="createVersion"></param>
        /// <returns>ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo</returns>
        ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo ComAdobeCqDamWebdavImplIoAssetIOHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string pathPrefix, bool? createVersion);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamWebdavVersionLinkingEnable"></param>
        /// <param name="cqDamWebdavVersionLinkingSchedulerPeriod"></param>
        /// <param name="cqDamWebdavVersionLinkingStagingTimeout"></param>
        /// <returns>ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo</returns>
        ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamWebdavVersionLinkingEnable, int? cqDamWebdavVersionLinkingSchedulerPeriod, int? cqDamWebdavVersionLinkingStagingTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters"></param>
        /// <returns>ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo</returns>
        ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo ComAdobeCqDamWebdavImplIoSpecialFilesHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="firewallDeserializationWhitelist"></param>
        /// <param name="firewallDeserializationBlacklist"></param>
        /// <param name="firewallDeserializationDiagnostics"></param>
        /// <returns>ComAdobeCqDeserfwImplDeserializationFirewallImplInfo</returns>
        ComAdobeCqDeserfwImplDeserializationFirewallImplInfo ComAdobeCqDeserfwImplDeserializationFirewallImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> firewallDeserializationWhitelist, List<string> firewallDeserializationBlacklist, string firewallDeserializationDiagnostics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="connectionTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <returns>ComAdobeCqDtmImplServiceDTMWebServiceImplInfo</returns>
        ComAdobeCqDtmImplServiceDTMWebServiceImplInfo ComAdobeCqDtmImplServiceDTMWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectionTimeout, int? socketTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="dtmStagingIpWhitelist"></param>
        /// <param name="dtmProductionIpWhitelist"></param>
        /// <returns>ComAdobeCqDtmImplServletsDTMDeployHookServletInfo</returns>
        ComAdobeCqDtmImplServletsDTMDeployHookServletInfo ComAdobeCqDtmImplServletsDTMDeployHookServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> dtmStagingIpWhitelist, List<string> dtmProductionIpWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="endpointUri"></param>
        /// <param name="connectionTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <returns>ComAdobeCqDtmReactorImplServiceWebServiceImplInfo</returns>
        ComAdobeCqDtmReactorImplServiceWebServiceImplInfo ComAdobeCqDtmReactorImplServiceWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="disabledForGroups"></param>
        /// <returns>ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo</returns>
        ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo ComAdobeCqExperiencelogImplExperienceLogConfigServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> disabledForGroups);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <param name="packageNames"></param>
        /// <returns>ComAdobeCqHcContentPackagesHealthCheckInfo</returns>
        ComAdobeCqHcContentPackagesHealthCheckInfo ComAdobeCqHcContentPackagesHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> packageNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="historyRequestFilterExcludedSelectors"></param>
        /// <param name="historyRequestFilterExcludedExtensions"></param>
        /// <returns>ComAdobeCqHistoryImplHistoryRequestFilterInfo</returns>
        ComAdobeCqHistoryImplHistoryRequestFilterInfo ComAdobeCqHistoryImplHistoryRequestFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyRequestFilterExcludedSelectors, List<string> historyRequestFilterExcludedExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="historyServiceResourceTypes"></param>
        /// <param name="historyServicePathFilter"></param>
        /// <returns>ComAdobeCqHistoryImplHistoryServiceImplInfo</returns>
        ComAdobeCqHistoryImplHistoryServiceImplInfo ComAdobeCqHistoryImplHistoryServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyServiceResourceTypes, List<string> historyServicePathFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="inboxImplTypeproviderRegistrypaths"></param>
        /// <param name="inboxImplTypeproviderLegacypaths"></param>
        /// <param name="inboxImplTypeproviderDefaulturlFailureitem"></param>
        /// <param name="inboxImplTypeproviderDefaulturlWorkitem"></param>
        /// <param name="inboxImplTypeproviderDefaulturlTask"></param>
        /// <returns>ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo</returns>
        ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo ComAdobeCqInboxImplTypeproviderItemTypeProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> inboxImplTypeproviderRegistrypaths, List<string> inboxImplTypeproviderLegacypaths, string inboxImplTypeproviderDefaulturlFailureitem, string inboxImplTypeproviderDefaulturlWorkitem, string inboxImplTypeproviderDefaulturlTask);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="imageQuality"></param>
        /// <param name="imageSupportedResolutions"></param>
        /// <returns>ComAdobeCqProjectsImplServletProjectImageServletInfo</returns>
        ComAdobeCqProjectsImplServletProjectImageServletInfo ComAdobeCqProjectsImplServletProjectImageServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string imageQuality, string imageSupportedResolutions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="scheduledpurgeName"></param>
        /// <param name="scheduledpurgePurgeActive"></param>
        /// <param name="scheduledpurgeTemplates"></param>
        /// <param name="scheduledpurgePurgeGroups"></param>
        /// <param name="scheduledpurgePurgeAssets"></param>
        /// <param name="scheduledpurgeTerminateRunningWorkflows"></param>
        /// <param name="scheduledpurgeDaysold"></param>
        /// <param name="scheduledpurgeSaveThreshold"></param>
        /// <returns>ComAdobeCqProjectsPurgeSchedulerInfo</returns>
        ComAdobeCqProjectsPurgeSchedulerInfo ComAdobeCqProjectsPurgeScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, bool? scheduledpurgePurgeActive, List<string> scheduledpurgeTemplates, bool? scheduledpurgePurgeGroups, bool? scheduledpurgePurgeAssets, bool? scheduledpurgeTerminateRunningWorkflows, int? scheduledpurgeDaysold, int? scheduledpurgeSaveThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="includePaths"></param>
        /// <param name="exporterUser"></param>
        /// <returns>ComAdobeCqScheduledExporterImplScheduledExporterImplInfo</returns>
        ComAdobeCqScheduledExporterImplScheduledExporterImplInfo ComAdobeCqScheduledExporterImplScheduledExporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includePaths, string exporterUser);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeCqScreensAnalyticsImplUrl"></param>
        /// <param name="comAdobeCqScreensAnalyticsImplApikey"></param>
        /// <param name="comAdobeCqScreensAnalyticsImplProject"></param>
        /// <param name="comAdobeCqScreensAnalyticsImplEnvironment"></param>
        /// <param name="comAdobeCqScreensAnalyticsImplSendFrequency"></param>
        /// <returns>ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo</returns>
        ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqScreensAnalyticsImplUrl, string comAdobeCqScreensAnalyticsImplApikey, string comAdobeCqScreensAnalyticsImplProject, string comAdobeCqScreensAnalyticsImplEnvironment, int? comAdobeCqScreensAnalyticsImplSendFrequency);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeAemScreensPlayerPingfrequency"></param>
        /// <param name="comAdobeAemScreensDevicePaswordSpecialchars"></param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlowercasechars"></param>
        /// <param name="comAdobeAemScreensDevicePaswordMinuppercasechars"></param>
        /// <param name="comAdobeAemScreensDevicePaswordMinnumberchars"></param>
        /// <param name="comAdobeAemScreensDevicePaswordMinspecialchars"></param>
        /// <param name="comAdobeAemScreensDevicePaswordMinlength"></param>
        /// <returns>ComAdobeCqScreensDeviceImplDeviceServiceInfo</returns>
        ComAdobeCqScreensDeviceImplDeviceServiceInfo ComAdobeCqScreensDeviceImplDeviceService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensPlayerPingfrequency, string comAdobeAemScreensDevicePaswordSpecialchars, int? comAdobeAemScreensDevicePaswordMinlowercasechars, int? comAdobeAemScreensDevicePaswordMinuppercasechars, int? comAdobeAemScreensDevicePaswordMinnumberchars, int? comAdobeAemScreensDevicePaswordMinspecialchars, int? comAdobeAemScreensDevicePaswordMinlength);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="deviceRegistrationTimeout"></param>
        /// <returns>ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo</returns>
        ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? deviceRegistrationTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqPagesupdatehandlerImageresourcetypes"></param>
        /// <param name="cqPagesupdatehandlerProductresourcetypes"></param>
        /// <param name="cqPagesupdatehandlerVideoresourcetypes"></param>
        /// <param name="cqPagesupdatehandlerDynamicsequenceresourcetypes"></param>
        /// <param name="cqPagesupdatehandlerPreviewmodepaths"></param>
        /// <returns>ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo</returns>
        ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo ComAdobeCqScreensImplHandlerChannelsUpdateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes, List<string> cqPagesupdatehandlerProductresourcetypes, List<string> cqPagesupdatehandlerVideoresourcetypes, List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<string> cqPagesupdatehandlerPreviewmodepaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <returns>ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo</returns>
        ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeAemScreensImplRemoteRequestTimeout"></param>
        /// <returns>ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo</returns>
        ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensImplRemoteRequestTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="screensChannelsPropertiesToRemove"></param>
        /// <returns>ComAdobeCqScreensImplScreensChannelPostProcessorInfo</returns>
        ComAdobeCqScreensImplScreensChannelPostProcessorInfo ComAdobeCqScreensImplScreensChannelPostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> screensChannelsPropertiesToRemove);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername"></param>
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword"></param>
        /// <returns>ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo</returns>
        ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="globalSize"></param>
        /// <param name="maxDiskUsage"></param>
        /// <param name="persistenceEnabled"></param>
        /// <param name="threadPoolMaxSize"></param>
        /// <param name="scheduledThreadPoolMaxSize"></param>
        /// <param name="gracefulShutdownTimeout"></param>
        /// <param name="queues"></param>
        /// <param name="topics"></param>
        /// <param name="addressesMaxDeliveryAttempts"></param>
        /// <param name="addressesExpiryDelay"></param>
        /// <param name="addressesAddressFullMessagePolicy"></param>
        /// <param name="addressesMaxSizeBytes"></param>
        /// <param name="addressesPageSizeBytes"></param>
        /// <param name="addressesPageCacheMaxSize"></param>
        /// <param name="clusterUser"></param>
        /// <param name="clusterPassword"></param>
        /// <param name="clusterCallTimeout"></param>
        /// <param name="clusterCallFailoverTimeout"></param>
        /// <param name="clusterClientFailureCheckPeriod"></param>
        /// <param name="clusterNotificationAttempts"></param>
        /// <param name="clusterNotificationInterval"></param>
        /// <param name="idCacheSize"></param>
        /// <param name="clusterConfirmationWindowSize"></param>
        /// <param name="clusterConnectionTtl"></param>
        /// <param name="clusterDuplicateDetection"></param>
        /// <param name="clusterInitialConnectAttempts"></param>
        /// <param name="clusterMaxRetryInterval"></param>
        /// <param name="clusterMinLargeMessageSize"></param>
        /// <param name="clusterProducerWindowSize"></param>
        /// <param name="clusterReconnectAttempts"></param>
        /// <param name="clusterRetryInterval"></param>
        /// <param name="clusterRetryIntervalMultiplier"></param>
        /// <returns>ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo</returns>
        ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo ComAdobeCqScreensMqActivemqImplArtemisJMSProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, int? globalSize, int? maxDiskUsage, bool? persistenceEnabled, int? threadPoolMaxSize, int? scheduledThreadPoolMaxSize, int? gracefulShutdownTimeout, List<string> queues, List<string> topics, int? addressesMaxDeliveryAttempts, int? addressesExpiryDelay, string addressesAddressFullMessagePolicy, int? addressesMaxSizeBytes, int? addressesPageSizeBytes, int? addressesPageCacheMaxSize, string clusterUser, string clusterPassword, int? clusterCallTimeout, int? clusterCallFailoverTimeout, int? clusterClientFailureCheckPeriod, int? clusterNotificationAttempts, int? clusterNotificationInterval, int? idCacheSize, int? clusterConfirmationWindowSize, int? clusterConnectionTtl, bool? clusterDuplicateDetection, int? clusterInitialConnectAttempts, int? clusterMaxRetryInterval, int? clusterMinLargeMessageSize, int? clusterProducerWindowSize, int? clusterReconnectAttempts, int? clusterRetryInterval, decimal? clusterRetryIntervalMultiplier);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath"></param>
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency"></param>
        /// <returns>ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo</returns>
        ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disableSmartSync"></param>
        /// <returns>ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo</returns>
        ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disableSmartSync);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enableDataTriggeredContent"></param>
        /// <returns>ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo</returns>
        ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableDataTriggeredContent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo</returns>
        ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo</returns>
        ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="dispatcherAddress"></param>
        /// <param name="dispatcherFilterAllowed"></param>
        /// <param name="dispatcherFilterBlocked"></param>
        /// <returns>ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo</returns>
        ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string dispatcherAddress, List<string> dispatcherFilterAllowed, List<string> dispatcherFilterBlocked);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo</returns>
        ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="webserverAddress"></param>
        /// <returns>ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo</returns>
        ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string webserverAddress);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enable"></param>
        /// <param name="ttl1"></param>
        /// <param name="ttl2"></param>
        /// <returns>ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo</returns>
        ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? ttl1, int? ttl2);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo</returns>
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo</returns>
        ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="accepted"></param>
        /// <param name="ranked"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? accepted, int? ranked);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="ranking"></param>
        /// <param name="enable"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking, bool? enable);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="streamPath"></param>
        /// <param name="streamName"></param>
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo</returns>
        ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string streamPath, string streamName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxRetry"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo</returns>
        ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRetry, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <param name="extensionOrder"></param>
        /// <returns>ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo</returns>
        ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string attachmentTypeBlacklist, int? extensionOrder);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="timezonesExpirytime"></param>
        /// <returns>ComAdobeCqSocialCalendarServletsTimeZoneServletInfo</returns>
        ComAdobeCqSocialCalendarServletsTimeZoneServletInfo ComAdobeCqSocialCalendarServletsTimeZoneServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timezonesExpirytime);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="ranking"></param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo</returns>
        ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="numUserLimit"></param>
        /// <returns>ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo</returns>
        ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numUserLimit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enableScheduledPostsSearch"></param>
        /// <param name="numberOfMinutes"></param>
        /// <param name="maxSearchLimit"></param>
        /// <returns>ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo</returns>
        ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableScheduledPostsSearch, int? numberOfMinutes, int? maxSearchLimit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="corsEnabling"></param>
        /// <returns>ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo</returns>
        ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? corsEnabling);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="contextPath"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contextPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="patternTime"></param>
        /// <param name="patternNewline"></param>
        /// <param name="patternDayOfMonth"></param>
        /// <param name="patternMonth"></param>
        /// <param name="patternYear"></param>
        /// <param name="patternDate"></param>
        /// <param name="patternDateTime"></param>
        /// <param name="patternEmail"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string patternTime, string patternNewline, string patternDayOfMonth, string patternMonth, string patternYear, string patternDate, string patternDateTime, string patternEmail);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="emailName"></param>
        /// <param name="emailCreatePostFromReply"></param>
        /// <param name="emailAddCommentIdTo"></param>
        /// <param name="emailSubjectMaximumLength"></param>
        /// <param name="emailReplyToAddress"></param>
        /// <param name="emailReplyToDelimiter"></param>
        /// <param name="emailTrackerIdPrefixInSubject"></param>
        /// <param name="emailTrackerIdPrefixInBody"></param>
        /// <param name="emailAsHTML"></param>
        /// <param name="emailDefaultUserName"></param>
        /// <param name="emailTemplatesRootPath"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailName, bool? emailCreatePostFromReply, string emailAddCommentIdTo, int? emailSubjectMaximumLength, string emailReplyToAddress, string emailReplyToDelimiter, string emailTrackerIdPrefixInSubject, string emailTrackerIdPrefixInBody, bool? emailAsHTML, string emailDefaultUserName, string emailTemplatesRootPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="connectProtocol"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string connectProtocol);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <param name="priorityOrder"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replyEmailPatterns, int? priorityOrder);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priorityOrder"></param>
        /// <param name="replyEmailPatterns"></param>
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo</returns>
        ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="numberOfDays"></param>
        /// <param name="ageOfFile"></param>
        /// <returns>ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo</returns>
        ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfDays, int? ageOfFile);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <param name="verbs"></param>
        /// <returns>ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo</returns>
        ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> verbs);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enable"></param>
        /// <param name="uGCLimit"></param>
        /// <param name="ugcLimitDuration"></param>
        /// <param name="domains"></param>
        /// <param name="toList"></param>
        /// <returns>ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo</returns>
        ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? uGCLimit, int? ugcLimitDuration, List<string> domains, List<string> toList);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <param name="oauthCloudConfigRoot"></param>
        /// <param name="providerConfigRoot"></param>
        /// <param name="providerConfigCreateTagsEnabled"></param>
        /// <param name="providerConfigUserFolder"></param>
        /// <param name="providerConfigFacebookFetchFields"></param>
        /// <param name="providerConfigFacebookFields"></param>
        /// <param name="providerConfigRefreshUserdataEnabled"></param>
        /// <returns>ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo</returns>
        ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo ComAdobeCqSocialConnectOauthImplFacebookProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, bool? providerConfigCreateTagsEnabled, string providerConfigUserFolder, bool? providerConfigFacebookFetchFields, List<string> providerConfigFacebookFields, bool? providerConfigRefreshUserdataEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo</returns>
        ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="facebook"></param>
        /// <param name="twitter"></param>
        /// <param name="providerConfigUserFolder"></param>
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo</returns>
        ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> facebook, List<string> twitter, string providerConfigUserFolder);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <param name="oauthCloudConfigRoot"></param>
        /// <param name="providerConfigRoot"></param>
        /// <param name="providerConfigUserFolder"></param>
        /// <param name="providerConfigTwitterEnableParams"></param>
        /// <param name="providerConfigTwitterParams"></param>
        /// <param name="providerConfigRefreshUserdataEnabled"></param>
        /// <returns>ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo</returns>
        ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo ComAdobeCqSocialConnectOauthImplTwitterProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, string providerConfigUserFolder, bool? providerConfigTwitterEnableParams, List<string> providerConfigTwitterParams, bool? providerConfigRefreshUserdataEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSocialContentFragmentsServicesEnabled"></param>
        /// <param name="cqSocialContentFragmentsServicesWaitTimeSeconds"></param>
        /// <returns>ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo</returns>
        ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSocialContentFragmentsServicesEnabled, int? cqSocialContentFragmentsServicesWaitTimeSeconds);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="versionId"></param>
        /// <param name="cacheOn"></param>
        /// <param name="concurrencyLevel"></param>
        /// <param name="cacheStartSize"></param>
        /// <param name="cacheTtl"></param>
        /// <param name="cacheSize"></param>
        /// <param name="timeLimit"></param>
        /// <returns>ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo</returns>
        ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string versionId, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize, int? timeLimit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="solrZkTimeout"></param>
        /// <param name="solrCommit"></param>
        /// <param name="cacheOn"></param>
        /// <param name="concurrencyLevel"></param>
        /// <param name="cacheStartSize"></param>
        /// <param name="cacheTtl"></param>
        /// <param name="cacheSize"></param>
        /// <returns>ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo</returns>
        ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="solrZkTimeout"></param>
        /// <param name="solrCommit"></param>
        /// <param name="cacheOn"></param>
        /// <param name="concurrencyLevel"></param>
        /// <param name="cacheStartSize"></param>
        /// <param name="cacheTtl"></param>
        /// <param name="cacheSize"></param>
        /// <returns>ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo</returns>
        ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isMemberCheck"></param>
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo</returns>
        ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isMemberCheck"></param>
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo</returns>
        ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <returns>ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo</returns>
        ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <returns>ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo</returns>
        ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo</returns>
        ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="slingServletExtensions"></param>
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo</returns>
        ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo</returns>
        ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo</returns>
        ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo ComAdobeCqSocialForumClientEndpointsImplForumOperationsService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="extensionOrder"></param>
        /// <param name="flushForumontopic"></param>
        /// <returns>ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo</returns>
        ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo ComAdobeCqSocialForumDispatcherImplFlushOperations (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? extensionOrder, bool? flushForumontopic);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="groupListingPaginationEnable"></param>
        /// <param name="groupListingLazyloadingEnable"></param>
        /// <param name="pageSize"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo</returns>
        ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? groupListingPaginationEnable, bool? groupListingLazyloadingEnable, int? pageSize, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxWaitTime"></param>
        /// <param name="minWaitBetweenRetries"></param>
        /// <returns>ComAdobeCqSocialGroupImplGroupServiceImplInfo</returns>
        ComAdobeCqSocialGroupImplGroupServiceImplInfo ComAdobeCqSocialGroupImplGroupServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWaitTime, int? minWaitBetweenRetries);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="parameterGuavaCacheEnabled"></param>
        /// <param name="parameterGuavaCacheParams"></param>
        /// <param name="parameterGuavaCacheReload"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo</returns>
        ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? parameterGuavaCacheEnabled, string parameterGuavaCacheParams, bool? parameterGuavaCacheReload, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo</returns>
        ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo</returns>
        ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo</returns>
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo</returns>
        ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="everyoneLimit"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo</returns>
        ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? everyoneLimit, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="messageProperties"></param>
        /// <param name="messageBoxSizeLimit"></param>
        /// <param name="messageCountLimit"></param>
        /// <param name="notifyFailure"></param>
        /// <param name="failureMessageFrom"></param>
        /// <param name="failureTemplatePath"></param>
        /// <param name="maxRetries"></param>
        /// <param name="minWaitBetweenRetries"></param>
        /// <param name="countUpdatePoolSize"></param>
        /// <param name="inboxPath"></param>
        /// <param name="sentitemsPath"></param>
        /// <param name="supportAttachments"></param>
        /// <param name="supportGroupMessaging"></param>
        /// <param name="maxTotalRecipients"></param>
        /// <param name="batchSize"></param>
        /// <param name="maxTotalAttachmentSize"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <param name="allowedAttachmentTypes"></param>
        /// <param name="serviceSelector"></param>
        /// <param name="fieldWhitelist"></param>
        /// <returns>ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo</returns>
        ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> messageProperties, int? messageBoxSizeLimit, int? messageCountLimit, bool? notifyFailure, string failureMessageFrom, string failureTemplatePath, int? maxRetries, int? minWaitBetweenRetries, int? countUpdatePoolSize, string inboxPath, string sentitemsPath, bool? supportAttachments, bool? supportGroupMessaging, int? maxTotalRecipients, int? batchSize, int? maxTotalAttachmentSize, List<string> attachmentTypeBlacklist, List<string> allowedAttachmentTypes, string serviceSelector, List<string> fieldWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="resourceTypeFilters"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo</returns>
        ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo</returns>
        ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo</returns>
        ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="resourceTypeFilters"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo</returns>
        ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <returns>ComAdobeCqSocialNotificationsImplMentionsRouterInfo</returns>
        ComAdobeCqSocialNotificationsImplMentionsRouterInfo ComAdobeCqSocialNotificationsImplMentionsRouter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxUnreadNotificationCount"></param>
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo</returns>
        ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo ComAdobeCqSocialNotificationsImplNotificationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxUnreadNotificationCount);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationsRouterInfo</returns>
        ComAdobeCqSocialNotificationsImplNotificationsRouterInfo ComAdobeCqSocialNotificationsImplNotificationsRouter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo</returns>
        ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSocialReportingAnalyticsPollingImporterInterval"></param>
        /// <param name="cqSocialReportingAnalyticsPollingImporterPageSize"></param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqSocialReportingAnalyticsPollingImporterInterval, int? cqSocialReportingAnalyticsPollingImporterPageSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="reportFetchDelay"></param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchDelay);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSocialConsoleAnalyticsSitesMapping"></param>
        /// <param name="priority"></param>
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo</returns>
        ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsSitesMapping, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="attachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo</returns>
        ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="slingServletExtensions"></param>
        /// <returns>ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo</returns>
        ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="slingServletExtensions"></param>
        /// <returns>ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo</returns>
        ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, string slingServletExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <returns>ComAdobeCqSocialScoringImplScoringEventListenerInfo</returns>
        ComAdobeCqSocialScoringImplScoringEventListenerInfo ComAdobeCqSocialScoringImplScoringEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enableFallback"></param>
        /// <returns>ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo</returns>
        ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableFallback);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fieldWhitelist"></param>
        /// <param name="sitePathFilters"></param>
        /// <param name="sitePackageGroup"></param>
        /// <returns>ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo</returns>
        ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo ComAdobeCqSocialSiteEndpointsImplSiteOperationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> sitePathFilters, string sitePackageGroup);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSocialConsoleAnalyticsComponents"></param>
        /// <returns>ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo</returns>
        ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsComponents);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="componentsUsingTags"></param>
        /// <returns>ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo</returns>
        ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo ComAdobeCqSocialSiteImplSiteConfiguratorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsUsingTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="srpType"></param>
        /// <returns>ComAdobeCqSocialSrpImplSocialSolrConnectorInfo</returns>
        ComAdobeCqSocialSrpImplSocialSolrConnectorInfo ComAdobeCqSocialSrpImplSocialSolrConnector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string srpType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="agentName"></param>
        /// <param name="diffPath"></param>
        /// <param name="propertyNames"></param>
        /// <returns>ComAdobeCqSocialSyncImplDiffChangesObserverInfo</returns>
        ComAdobeCqSocialSyncImplDiffChangesObserverInfo ComAdobeCqSocialSyncImplDiffChangesObserver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string propertyNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="nodetypes"></param>
        /// <param name="ignorableprops"></param>
        /// <param name="ignorablenodes"></param>
        /// <param name="enabled"></param>
        /// <param name="distfolders"></param>
        /// <returns>ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo</returns>
        ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo ComAdobeCqSocialSyncImplGroupSyncListenerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, string ignorablenodes, bool? enabled, string distfolders);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="activeRunModes"></param>
        /// <returns>ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo</returns>
        ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo ComAdobeCqSocialSyncImplPublisherSyncServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> activeRunModes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="nodetypes"></param>
        /// <param name="ignorableprops"></param>
        /// <param name="ignorablenodes"></param>
        /// <param name="enabled"></param>
        /// <param name="distfolders"></param>
        /// <returns>ComAdobeCqSocialSyncImplUserSyncListenerImplInfo</returns>
        ComAdobeCqSocialSyncImplUserSyncListenerImplInfo ComAdobeCqSocialSyncImplUserSyncListenerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, List<string> ignorablenodes, bool? enabled, List<string> distfolders);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="translateLanguage"></param>
        /// <param name="translateDisplay"></param>
        /// <param name="translateAttribution"></param>
        /// <param name="translateCaching"></param>
        /// <param name="translateSmartRendering"></param>
        /// <param name="translateCachingDuration"></param>
        /// <param name="translateSessionSaveInterval"></param>
        /// <param name="translateSessionSaveBatchLimit"></param>
        /// <returns>ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo</returns>
        ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo ComAdobeCqSocialTranslationImplTranslationServiceConfigManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translateLanguage, string translateDisplay, bool? translateAttribution, string translateCaching, string translateSmartRendering, string translateCachingDuration, string translateSessionSaveInterval, string translateSessionSaveBatchLimit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <param name="eventFilter"></param>
        /// <param name="translateListenerType"></param>
        /// <param name="translatePropertyList"></param>
        /// <param name="poolSize"></param>
        /// <param name="maxPoolSize"></param>
        /// <param name="queueSize"></param>
        /// <param name="keepAliveTime"></param>
        /// <returns>ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo</returns>
        ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo ComAdobeCqSocialTranslationImplUGCLanguageDetector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> translateListenerType, List<string> translatePropertyList, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="threadPoolSize"></param>
        /// <param name="delayTime"></param>
        /// <param name="workerSleepTime"></param>
        /// <returns>ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo</returns>
        ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threadPoolSize, int? delayTime, int? workerSleepTime);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="poolSize"></param>
        /// <param name="maxPoolSize"></param>
        /// <param name="queueSize"></param>
        /// <param name="keepAliveTime"></param>
        /// <returns>ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isPrimaryPublisher"></param>
        /// <returns>ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isPrimaryPublisher);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="legacyCloudUGCPathMapping"></param>
        /// <returns>ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo</returns>
        ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo ComAdobeCqSocialUgcbaseImplSocialUtilsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? legacyCloudUGCPathMapping);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="automoderationSequence"></param>
        /// <param name="automoderationOnfailurestop"></param>
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo</returns>
        ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> automoderationSequence, bool? automoderationOnfailurestop);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="watchwordsPositive"></param>
        /// <param name="watchwordsNegative"></param>
        /// <param name="watchwordsPath"></param>
        /// <param name="sentimentPath"></param>
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo</returns>
        ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo ComAdobeCqSocialUgcbaseModerationImplSentimentProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> watchwordsPositive, List<string> watchwordsNegative, string watchwordsPath, string sentimentPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultAttachmentTypeBlacklist"></param>
        /// <param name="baselineAttachmentTypeBlacklist"></param>
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo</returns>
        ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="parameterWhitelist"></param>
        /// <param name="parameterWhitelistPrefixes"></param>
        /// <param name="binaryParameterWhitelist"></param>
        /// <param name="modifierWhitelist"></param>
        /// <param name="operationWhitelist"></param>
        /// <param name="operationWhitelistPrefixes"></param>
        /// <param name="typehintWhitelist"></param>
        /// <param name="resourcetypeWhitelist"></param>
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo</returns>
        ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletExtensions"></param>
        /// <param name="slingServletPaths"></param>
        /// <param name="slingServletMethods"></param>
        /// <returns>ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo</returns>
        ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletExtensions, string slingServletPaths, string slingServletMethods);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enable"></param>
        /// <param name="agentConfiguration"></param>
        /// <param name="contextPath"></param>
        /// <param name="disabledCipherSuites"></param>
        /// <param name="enabledCipherSuites"></param>
        /// <returns>ComAdobeCqSocialUserImplTransportHttpToPublisherInfo</returns>
        ComAdobeCqSocialUserImplTransportHttpToPublisherInfo ComAdobeCqSocialUserImplTransportHttpToPublisher (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, List<string> agentConfiguration, string contextPath, List<string> disabledCipherSuites, List<string> enabledCipherSuites);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="resourceTypes"></param>
        /// <returns>ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo</returns>
        ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="deletePathRegexps"></param>
        /// <param name="deleteSql2Query"></param>
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo</returns>
        ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deletePathRegexps, string deleteSql2Query);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="deleteNameRegexps"></param>
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo</returns>
        ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deleteNameRegexps);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="threshold"></param>
        /// <param name="jobTopicName"></param>
        /// <param name="emailEnabled"></param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="jobPurgeThreshold"></param>
        /// <param name="jobPurgeMaxJobs"></param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? jobPurgeThreshold, int? jobPurgeMaxJobs);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="threshold"></param>
        /// <param name="jobTopicName"></param>
        /// <param name="emailEnabled"></param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="threshold"></param>
        /// <param name="jobTopicName"></param>
        /// <param name="emailEnabled"></param>
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo</returns>
        ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="launchesEventhandlerThreadpoolMaxsize"></param>
        /// <param name="launchesEventhandlerThreadpoolPriority"></param>
        /// <param name="launchesEventhandlerUpdatelastmodification"></param>
        /// <returns>ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo</returns>
        ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo ComAdobeCqWcmLaunchesImplLaunchesEventHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? launchesEventhandlerThreadpoolMaxsize, string launchesEventhandlerThreadpoolPriority, bool? launchesEventhandlerUpdatelastmodification);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmQrcodeServletWhitelist"></param>
        /// <returns>ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo</returns>
        ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmQrcodeServletWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="size"></param>
        /// <returns>ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo</returns>
        ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? size);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="syncTranslationStateSchedulingFormat"></param>
        /// <param name="schedulingRepeatTranslationSchedulingFormat"></param>
        /// <param name="syncTranslationStateLockTimeoutInMinutes"></param>
        /// <param name="exportFormat"></param>
        /// <returns>ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo</returns>
        ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string syncTranslationStateSchedulingFormat, string schedulingRepeatTranslationSchedulingFormat, string syncTranslationStateLockTimeoutInMinutes, string exportFormat);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="portalOutboxes"></param>
        /// <param name="draftDataService"></param>
        /// <param name="draftMetadataService"></param>
        /// <param name="submitDataService"></param>
        /// <param name="submitMetadataService"></param>
        /// <param name="pendingSignDataService"></param>
        /// <param name="pendingSignMetadataService"></param>
        /// <returns>ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo</returns>
        ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> portalOutboxes, string draftDataService, string draftMetadataService, string submitDataService, string submitMetadataService, string pendingSignDataService, string pendingSignMetadataService);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="formportalInterval"></param>
        /// <returns>ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo</returns>
        ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo ComAdobeFdFpConfigFormsPortalSchedulerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string formportalInterval);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="alloweddataFileLocations"></param>
        /// <returns>ComAdobeFormsCommonServiceImplDefaultDataProviderInfo</returns>
        ComAdobeFormsCommonServiceImplDefaultDataProviderInfo ComAdobeFormsCommonServiceImplDefaultDataProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloweddataFileLocations);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="tempStorageConfig"></param>
        /// <returns>ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo</returns>
        ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tempStorageConfig);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="durationForTemporaryStorage"></param>
        /// <param name="durationForAnonymousStorage"></param>
        /// <returns>ComAdobeFormsCommonServletTempCleanUpTaskInfo</returns>
        ComAdobeFormsCommonServletTempCleanUpTaskInfo ComAdobeFormsCommonServletTempCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string durationForTemporaryStorage, string durationForAnonymousStorage);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queryLimit"></param>
        /// <param name="fileTypeExtensionMap"></param>
        /// <returns>ComAdobeGraniteAcpPlatformPlatformServletInfo</returns>
        ComAdobeGraniteAcpPlatformPlatformServletInfo ComAdobeGraniteAcpPlatformPlatformServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimit, List<string> fileTypeExtensionMap);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="aggregateRelationships"></param>
        /// <param name="aggregateDescendVirtual"></param>
        /// <returns>ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo</returns>
        ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo ComAdobeGraniteActivitystreamsImplActivityManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aggregateRelationships, bool? aggregateDescendVirtual);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disabled"></param>
        /// <returns>ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo</returns>
        ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo ComAdobeGraniteAnalyzerBaseSystemStatusServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disabled"></param>
        /// <returns>ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo</returns>
        ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeCqCdnCdnRewriter"></param>
        /// <param name="comAdobeCqCloudConfigComponents"></param>
        /// <param name="comAdobeCqCloudConfigCore"></param>
        /// <param name="comAdobeCqCloudConfigUi"></param>
        /// <param name="comAdobeCqComAdobeCqEditor"></param>
        /// <param name="comAdobeCqComAdobeCqProjectsCore"></param>
        /// <param name="comAdobeCqComAdobeCqProjectsWcmCore"></param>
        /// <param name="comAdobeCqComAdobeCqUiCommons"></param>
        /// <param name="comAdobeCqComAdobeCqWcmStyle"></param>
        /// <param name="comAdobeCqCqActivitymapIntegration"></param>
        /// <param name="comAdobeCqCqContexthubCommons"></param>
        /// <param name="comAdobeCqCqDtm"></param>
        /// <param name="comAdobeCqCqHealthcheck"></param>
        /// <param name="comAdobeCqCqMultisiteTargeting"></param>
        /// <param name="comAdobeCqCqPreUpgradeCleanup"></param>
        /// <param name="comAdobeCqCqProductInfoProvider"></param>
        /// <param name="comAdobeCqCqRestSites"></param>
        /// <param name="comAdobeCqCqSecurityHc"></param>
        /// <param name="comAdobeCqDamCqDamSvgHandler"></param>
        /// <param name="comAdobeCqDamCqScene7Imaging"></param>
        /// <param name="comAdobeCqDtmReactorCore"></param>
        /// <param name="comAdobeCqDtmReactorUi"></param>
        /// <param name="comAdobeCqExpJspelResolver"></param>
        /// <param name="comAdobeCqInboxCqInbox"></param>
        /// <param name="comAdobeCqJsonSchemaParser"></param>
        /// <param name="comAdobeCqMediaCqMediaPublishingDpsFpCore"></param>
        /// <param name="comAdobeCqMobileCqMobileCaas"></param>
        /// <param name="comAdobeCqMobileCqMobileIndexBuilder"></param>
        /// <param name="comAdobeCqMobileCqMobilePhonegapBuild"></param>
        /// <param name="comAdobeCqMyspell"></param>
        /// <param name="comAdobeCqSampleWeRetailCore"></param>
        /// <param name="comAdobeCqScreensComAdobeCqScreensDcc"></param>
        /// <param name="comAdobeCqScreensComAdobeCqScreensMqCore"></param>
        /// <param name="comAdobeCqSocialCqSocialAsProvider"></param>
        /// <param name="comAdobeCqSocialCqSocialBadgingBasicImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialBadgingImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialCalendarImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialContentFragmentsImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialEnablementImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialGraphImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialIdeationImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialJcrProvider"></param>
        /// <param name="comAdobeCqSocialCqSocialMembersImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialMsProvider"></param>
        /// <param name="comAdobeCqSocialCqSocialNotificationsChannelsWeb"></param>
        /// <param name="comAdobeCqSocialCqSocialNotificationsImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialRdbProvider"></param>
        /// <param name="comAdobeCqSocialCqSocialScfImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialScoringBasicImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialScoringImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialServiceusersImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialSrpImpl"></param>
        /// <param name="comAdobeCqSocialCqSocialUgcbaseImpl"></param>
        /// <param name="comAdobeDamCqDamCfmImpl"></param>
        /// <param name="comAdobeFormsFoundationFormsFoundationBase"></param>
        /// <param name="comAdobeGraniteApicontroller"></param>
        /// <param name="comAdobeGraniteAssetCore"></param>
        /// <param name="comAdobeGraniteAuthSso"></param>
        /// <param name="comAdobeGraniteBundlesHcImpl"></param>
        /// <param name="comAdobeGraniteCompatRouter"></param>
        /// <param name="comAdobeGraniteConf"></param>
        /// <param name="comAdobeGraniteConfUiCore"></param>
        /// <param name="comAdobeGraniteCors"></param>
        /// <param name="comAdobeGraniteCrxExplorer"></param>
        /// <param name="comAdobeGraniteCrxdeLite"></param>
        /// <param name="comAdobeGraniteCryptoConfig"></param>
        /// <param name="comAdobeGraniteCryptoExtension"></param>
        /// <param name="comAdobeGraniteCryptoFile"></param>
        /// <param name="comAdobeGraniteCryptoJcr"></param>
        /// <param name="comAdobeGraniteCsrf"></param>
        /// <param name="comAdobeGraniteDistributionCore"></param>
        /// <param name="comAdobeGraniteDropwizardMetrics"></param>
        /// <param name="comAdobeGraniteFragsImpl"></param>
        /// <param name="comAdobeGraniteGibson"></param>
        /// <param name="comAdobeGraniteInfocollector"></param>
        /// <param name="comAdobeGraniteInstallerFactoryPackages"></param>
        /// <param name="comAdobeGraniteJettySsl"></param>
        /// <param name="comAdobeGraniteJobsAsync"></param>
        /// <param name="comAdobeGraniteMaintenanceOak"></param>
        /// <param name="comAdobeGraniteMonitoringCore"></param>
        /// <param name="comAdobeGraniteQueries"></param>
        /// <param name="comAdobeGraniteReplicationHcImpl"></param>
        /// <param name="comAdobeGraniteRepositoryChecker"></param>
        /// <param name="comAdobeGraniteRepositoryHcImpl"></param>
        /// <param name="comAdobeGraniteRestAssets"></param>
        /// <param name="comAdobeGraniteSecurityUi"></param>
        /// <param name="comAdobeGraniteStartup"></param>
        /// <param name="comAdobeGraniteTagsoup"></param>
        /// <param name="comAdobeGraniteTaskmanagementCore"></param>
        /// <param name="comAdobeGraniteTaskmanagementWorkflow"></param>
        /// <param name="comAdobeGraniteUiClientlibsCompilerLess"></param>
        /// <param name="comAdobeGraniteUiClientlibsProcessorGcc"></param>
        /// <param name="comAdobeGraniteWebconsolePlugins"></param>
        /// <param name="comAdobeGraniteWorkflowConsole"></param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentLinux"></param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentMacosx"></param>
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentWin"></param>
        /// <param name="comDayCommonsOsgiWrapperSimpleJndi"></param>
        /// <param name="comDayCqCqAuthhandler"></param>
        /// <param name="comDayCqCqCompatConfigupdate"></param>
        /// <param name="comDayCqCqLicensebranding"></param>
        /// <param name="comDayCqCqNotifcationImpl"></param>
        /// <param name="comDayCqCqReplicationAudit"></param>
        /// <param name="comDayCqCqSearchExt"></param>
        /// <param name="comDayCqDamCqDamAnnotationPrint"></param>
        /// <param name="comDayCqDamCqDamAssetUsage"></param>
        /// <param name="comDayCqDamCqDamS7dam"></param>
        /// <param name="comDayCqDamCqDamSimilaritysearch"></param>
        /// <param name="comDayCqDamDamWebdavSupport"></param>
        /// <param name="comDayCqPreUpgradeTasks"></param>
        /// <param name="comDayCqReplicationExtensions"></param>
        /// <param name="comDayCqWcmCqMsmCore"></param>
        /// <param name="comDayCqWcmCqWcmTranslation"></param>
        /// <param name="dayCommonsJrawio"></param>
        /// <param name="orgApacheAriesJmxWhiteboard"></param>
        /// <param name="orgApacheFelixHttpSslfilter"></param>
        /// <param name="orgApacheFelixOrgApacheFelixThreaddump"></param>
        /// <param name="orgApacheFelixWebconsolePluginsDs"></param>
        /// <param name="orgApacheFelixWebconsolePluginsEvent"></param>
        /// <param name="orgApacheFelixWebconsolePluginsMemoryusage"></param>
        /// <param name="orgApacheFelixWebconsolePluginsPackageadmin"></param>
        /// <param name="orgApacheJackrabbitOakAuthLdap"></param>
        /// <param name="orgApacheJackrabbitOakSegmentTar"></param>
        /// <param name="orgApacheJackrabbitOakSolrOsgi"></param>
        /// <param name="orgApacheSlingBundleresourceImpl"></param>
        /// <param name="orgApacheSlingCommonsFsclassloader"></param>
        /// <param name="orgApacheSlingCommonsLogWebconsole"></param>
        /// <param name="orgApacheSlingDatasource"></param>
        /// <param name="orgApacheSlingDiscoveryBase"></param>
        /// <param name="orgApacheSlingDiscoveryOak"></param>
        /// <param name="orgApacheSlingDiscoverySupport"></param>
        /// <param name="orgApacheSlingDistributionApi"></param>
        /// <param name="orgApacheSlingDistributionCore"></param>
        /// <param name="orgApacheSlingExtensionsWebconsolesecurityprovider"></param>
        /// <param name="orgApacheSlingHcWebconsole"></param>
        /// <param name="orgApacheSlingInstallerConsole"></param>
        /// <param name="orgApacheSlingInstallerProviderFile"></param>
        /// <param name="orgApacheSlingInstallerProviderJcr"></param>
        /// <param name="orgApacheSlingJcrDavex"></param>
        /// <param name="orgApacheSlingJcrResourcesecurity"></param>
        /// <param name="orgApacheSlingJmxProvider"></param>
        /// <param name="orgApacheSlingLaunchpadInstaller"></param>
        /// <param name="orgApacheSlingModelsImpl"></param>
        /// <param name="orgApacheSlingRepoinitParser"></param>
        /// <param name="orgApacheSlingResourceInventory"></param>
        /// <param name="orgApacheSlingResourceresolver"></param>
        /// <param name="orgApacheSlingScriptingJavascript"></param>
        /// <param name="orgApacheSlingScriptingJst"></param>
        /// <param name="orgApacheSlingScriptingSightlyJsProvider"></param>
        /// <param name="orgApacheSlingScriptingSightlyModelsProvider"></param>
        /// <param name="orgApacheSlingSecurity"></param>
        /// <param name="orgApacheSlingServletsCompat"></param>
        /// <param name="orgApacheSlingServletsGet"></param>
        /// <param name="orgApacheSlingStartupfilterDisabler"></param>
        /// <param name="orgApacheSlingTracer"></param>
        /// <param name="weRetailClientAppCore"></param>
        /// <returns>ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo</returns>
        ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo ComAdobeGraniteApicontrollerFilterResolverHookFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqCdnCdnRewriter, string comAdobeCqCloudConfigComponents, string comAdobeCqCloudConfigCore, string comAdobeCqCloudConfigUi, string comAdobeCqComAdobeCqEditor, string comAdobeCqComAdobeCqProjectsCore, string comAdobeCqComAdobeCqProjectsWcmCore, string comAdobeCqComAdobeCqUiCommons, string comAdobeCqComAdobeCqWcmStyle, string comAdobeCqCqActivitymapIntegration, string comAdobeCqCqContexthubCommons, string comAdobeCqCqDtm, string comAdobeCqCqHealthcheck, string comAdobeCqCqMultisiteTargeting, string comAdobeCqCqPreUpgradeCleanup, string comAdobeCqCqProductInfoProvider, string comAdobeCqCqRestSites, string comAdobeCqCqSecurityHc, string comAdobeCqDamCqDamSvgHandler, string comAdobeCqDamCqScene7Imaging, string comAdobeCqDtmReactorCore, string comAdobeCqDtmReactorUi, string comAdobeCqExpJspelResolver, string comAdobeCqInboxCqInbox, string comAdobeCqJsonSchemaParser, string comAdobeCqMediaCqMediaPublishingDpsFpCore, string comAdobeCqMobileCqMobileCaas, string comAdobeCqMobileCqMobileIndexBuilder, string comAdobeCqMobileCqMobilePhonegapBuild, string comAdobeCqMyspell, string comAdobeCqSampleWeRetailCore, string comAdobeCqScreensComAdobeCqScreensDcc, string comAdobeCqScreensComAdobeCqScreensMqCore, string comAdobeCqSocialCqSocialAsProvider, string comAdobeCqSocialCqSocialBadgingBasicImpl, string comAdobeCqSocialCqSocialBadgingImpl, string comAdobeCqSocialCqSocialCalendarImpl, string comAdobeCqSocialCqSocialContentFragmentsImpl, string comAdobeCqSocialCqSocialEnablementImpl, string comAdobeCqSocialCqSocialGraphImpl, string comAdobeCqSocialCqSocialIdeationImpl, string comAdobeCqSocialCqSocialJcrProvider, string comAdobeCqSocialCqSocialMembersImpl, string comAdobeCqSocialCqSocialMsProvider, string comAdobeCqSocialCqSocialNotificationsChannelsWeb, string comAdobeCqSocialCqSocialNotificationsImpl, string comAdobeCqSocialCqSocialRdbProvider, string comAdobeCqSocialCqSocialScfImpl, string comAdobeCqSocialCqSocialScoringBasicImpl, string comAdobeCqSocialCqSocialScoringImpl, string comAdobeCqSocialCqSocialServiceusersImpl, string comAdobeCqSocialCqSocialSrpImpl, string comAdobeCqSocialCqSocialUgcbaseImpl, string comAdobeDamCqDamCfmImpl, string comAdobeFormsFoundationFormsFoundationBase, string comAdobeGraniteApicontroller, string comAdobeGraniteAssetCore, string comAdobeGraniteAuthSso, string comAdobeGraniteBundlesHcImpl, string comAdobeGraniteCompatRouter, string comAdobeGraniteConf, string comAdobeGraniteConfUiCore, string comAdobeGraniteCors, string comAdobeGraniteCrxExplorer, string comAdobeGraniteCrxdeLite, string comAdobeGraniteCryptoConfig, string comAdobeGraniteCryptoExtension, string comAdobeGraniteCryptoFile, string comAdobeGraniteCryptoJcr, string comAdobeGraniteCsrf, string comAdobeGraniteDistributionCore, string comAdobeGraniteDropwizardMetrics, string comAdobeGraniteFragsImpl, string comAdobeGraniteGibson, string comAdobeGraniteInfocollector, string comAdobeGraniteInstallerFactoryPackages, string comAdobeGraniteJettySsl, string comAdobeGraniteJobsAsync, string comAdobeGraniteMaintenanceOak, string comAdobeGraniteMonitoringCore, string comAdobeGraniteQueries, string comAdobeGraniteReplicationHcImpl, string comAdobeGraniteRepositoryChecker, string comAdobeGraniteRepositoryHcImpl, string comAdobeGraniteRestAssets, string comAdobeGraniteSecurityUi, string comAdobeGraniteStartup, string comAdobeGraniteTagsoup, string comAdobeGraniteTaskmanagementCore, string comAdobeGraniteTaskmanagementWorkflow, string comAdobeGraniteUiClientlibsCompilerLess, string comAdobeGraniteUiClientlibsProcessorGcc, string comAdobeGraniteWebconsolePlugins, string comAdobeGraniteWorkflowConsole, string comAdobeXmpWorkerFilesNativeFragmentLinux, string comAdobeXmpWorkerFilesNativeFragmentMacosx, string comAdobeXmpWorkerFilesNativeFragmentWin, string comDayCommonsOsgiWrapperSimpleJndi, string comDayCqCqAuthhandler, string comDayCqCqCompatConfigupdate, string comDayCqCqLicensebranding, string comDayCqCqNotifcationImpl, string comDayCqCqReplicationAudit, string comDayCqCqSearchExt, string comDayCqDamCqDamAnnotationPrint, string comDayCqDamCqDamAssetUsage, string comDayCqDamCqDamS7dam, string comDayCqDamCqDamSimilaritysearch, string comDayCqDamDamWebdavSupport, string comDayCqPreUpgradeTasks, string comDayCqReplicationExtensions, string comDayCqWcmCqMsmCore, string comDayCqWcmCqWcmTranslation, string dayCommonsJrawio, string orgApacheAriesJmxWhiteboard, string orgApacheFelixHttpSslfilter, string orgApacheFelixOrgApacheFelixThreaddump, string orgApacheFelixWebconsolePluginsDs, string orgApacheFelixWebconsolePluginsEvent, string orgApacheFelixWebconsolePluginsMemoryusage, string orgApacheFelixWebconsolePluginsPackageadmin, string orgApacheJackrabbitOakAuthLdap, string orgApacheJackrabbitOakSegmentTar, string orgApacheJackrabbitOakSolrOsgi, string orgApacheSlingBundleresourceImpl, string orgApacheSlingCommonsFsclassloader, string orgApacheSlingCommonsLogWebconsole, string orgApacheSlingDatasource, string orgApacheSlingDiscoveryBase, string orgApacheSlingDiscoveryOak, string orgApacheSlingDiscoverySupport, string orgApacheSlingDistributionApi, string orgApacheSlingDistributionCore, string orgApacheSlingExtensionsWebconsolesecurityprovider, string orgApacheSlingHcWebconsole, string orgApacheSlingInstallerConsole, string orgApacheSlingInstallerProviderFile, string orgApacheSlingInstallerProviderJcr, string orgApacheSlingJcrDavex, string orgApacheSlingJcrResourcesecurity, string orgApacheSlingJmxProvider, string orgApacheSlingLaunchpadInstaller, string orgApacheSlingModelsImpl, string orgApacheSlingRepoinitParser, string orgApacheSlingResourceInventory, string orgApacheSlingResourceresolver, string orgApacheSlingScriptingJavascript, string orgApacheSlingScriptingJst, string orgApacheSlingScriptingSightlyJsProvider, string orgApacheSlingScriptingSightlyModelsProvider, string orgApacheSlingSecurity, string orgApacheSlingServletsCompat, string orgApacheSlingServletsGet, string orgApacheSlingStartupfilterDisabler, string orgApacheSlingTracer, string weRetailClientAppCore);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo</returns>
        ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo ComAdobeGraniteAuthCertImplClientCertAuthHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="configid"></param>
        /// <param name="scope"></param>
        /// <returns>ComAdobeGraniteAuthImsInfo</returns>
        ComAdobeGraniteAuthImsInfo ComAdobeGraniteAuthIms (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configid, string scope);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <returns>ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo</returns>
        ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="authImsClientSecret"></param>
        /// <param name="customizerType"></param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo</returns>
        ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authImsClientSecret, string customizerType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo</returns>
        ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <param name="oauthProviderImsAuthorizationUrl"></param>
        /// <param name="oauthProviderImsTokenUrl"></param>
        /// <param name="oauthProviderImsProfileUrl"></param>
        /// <param name="oauthProviderImsExtendedDetailsUrls"></param>
        /// <param name="oauthProviderImsValidateTokenUrl"></param>
        /// <param name="oauthProviderImsSessionProperty"></param>
        /// <param name="oauthProviderImsServiceTokenClientId"></param>
        /// <param name="oauthProviderImsServiceTokenClientSecret"></param>
        /// <param name="oauthProviderImsServiceToken"></param>
        /// <param name="imsOrgRef"></param>
        /// <param name="imsGroupMapping"></param>
        /// <param name="oauthProviderImsOnlyLicenseGroup"></param>
        /// <returns>ComAdobeGraniteAuthImsImplIMSProviderImplInfo</returns>
        ComAdobeGraniteAuthImsImplIMSProviderImplInfo ComAdobeGraniteAuthImsImplIMSProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderImsAuthorizationUrl, string oauthProviderImsTokenUrl, string oauthProviderImsProfileUrl, List<string> oauthProviderImsExtendedDetailsUrls, string oauthProviderImsValidateTokenUrl, string oauthProviderImsSessionProperty, string oauthProviderImsServiceTokenClientId, string oauthProviderImsServiceTokenClientSecret, string oauthProviderImsServiceToken, string imsOrgRef, List<string> imsGroupMapping, bool? oauthProviderImsOnlyLicenseGroup);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthConfigmanagerImsConfigid"></param>
        /// <param name="imsOwningEntity"></param>
        /// <param name="aemInstanceId"></param>
        /// <param name="imsServiceCode"></param>
        /// <returns>ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo</returns>
        ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo ComAdobeGraniteAuthImsImplImsConfigProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigmanagerImsConfigid, string imsOwningEntity, string aemInstanceId, string imsServiceCode);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="authTokenProviderTitle"></param>
        /// <param name="authTokenProviderDefaultClaims"></param>
        /// <param name="authTokenProviderEndpoint"></param>
        /// <param name="authAccessTokenRequest"></param>
        /// <param name="authTokenProviderKeypairAlias"></param>
        /// <param name="authTokenProviderConnTimeout"></param>
        /// <param name="authTokenProviderSoTimeout"></param>
        /// <param name="authTokenProviderClientId"></param>
        /// <param name="authTokenProviderScope"></param>
        /// <param name="authTokenProviderReuseAccessToken"></param>
        /// <param name="authTokenProviderRelaxedSsl"></param>
        /// <param name="tokenRequestCustomizerType"></param>
        /// <param name="authTokenValidatorType"></param>
        /// <returns>ComAdobeGraniteAuthOauthAccesstokenProviderInfo</returns>
        ComAdobeGraniteAuthOauthAccesstokenProviderInfo ComAdobeGraniteAuthOauthAccesstokenProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string authTokenProviderTitle, List<string> authTokenProviderDefaultClaims, string authTokenProviderEndpoint, string authAccessTokenRequest, string authTokenProviderKeypairAlias, int? authTokenProviderConnTimeout, int? authTokenProviderSoTimeout, string authTokenProviderClientId, string authTokenProviderScope, bool? authTokenProviderReuseAccessToken, bool? authTokenProviderRelaxedSsl, string tokenRequestCustomizerType, string authTokenValidatorType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="oauthClientIdsAllowed"></param>
        /// <param name="authBearerSyncIms"></param>
        /// <param name="authTokenRequestParameter"></param>
        /// <param name="oauthBearerConfigid"></param>
        /// <param name="oauthJwtSupport"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, List<string> oauthClientIdsAllowed, bool? authBearerSyncIms, string authTokenRequestParameter, string oauthBearerConfigid, bool? oauthJwtSupport);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="authTokenValidatorType"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo</returns>
        ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authTokenValidatorType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo ComAdobeGraniteAuthOauthImplFacebookProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <param name="oauthProviderGithubAuthorizationUrl"></param>
        /// <param name="oauthProviderGithubTokenUrl"></param>
        /// <param name="oauthProviderGithubProfileUrl"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplGithubProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplGithubProviderImplInfo ComAdobeGraniteAuthOauthImplGithubProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGithubAuthorizationUrl, string oauthProviderGithubTokenUrl, string oauthProviderGithubProfileUrl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <param name="oauthProviderGraniteAuthorizationUrl"></param>
        /// <param name="oauthProviderGraniteTokenUrl"></param>
        /// <param name="oauthProviderGraniteProfileUrl"></param>
        /// <param name="oauthProviderGraniteExtendedDetailsUrls"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplGraniteProviderInfo</returns>
        ComAdobeGraniteAuthOauthImplGraniteProviderInfo ComAdobeGraniteAuthOauthImplGraniteProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGraniteAuthorizationUrl, string oauthProviderGraniteTokenUrl, string oauthProviderGraniteProfileUrl, string oauthProviderGraniteExtendedDetailsUrls);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthCookieLoginTimeout"></param>
        /// <param name="oauthCookieMaxAge"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo</returns>
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthCookieLoginTimeout"></param>
        /// <param name="oauthCookieMaxAge"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo</returns>
        ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthProviderId"></param>
        /// <returns>ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo</returns>
        ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo ComAdobeGraniteAuthOauthImplTwitterProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthConfigId"></param>
        /// <param name="oauthClientId"></param>
        /// <param name="oauthClientSecret"></param>
        /// <param name="oauthScope"></param>
        /// <param name="oauthConfigProviderId"></param>
        /// <param name="oauthCreateUsers"></param>
        /// <param name="oauthUseridProperty"></param>
        /// <param name="forceStrictUsernameMatching"></param>
        /// <param name="oauthEncodeUserids"></param>
        /// <param name="oauthHashUserids"></param>
        /// <param name="oauthCallBackUrl"></param>
        /// <param name="oauthAccessTokenPersist"></param>
        /// <param name="oauthAccessTokenPersistCookie"></param>
        /// <param name="oauthCsrfStateProtection"></param>
        /// <param name="oauthRedirectRequestParams"></param>
        /// <param name="oauthConfigSiblingsAllow"></param>
        /// <returns>ComAdobeGraniteAuthOauthProviderInfo</returns>
        ComAdobeGraniteAuthOauthProviderInfo ComAdobeGraniteAuthOauthProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigId, string oauthClientId, string oauthClientSecret, List<string> oauthScope, string oauthConfigProviderId, bool? oauthCreateUsers, string oauthUseridProperty, bool? forceStrictUsernameMatching, bool? oauthEncodeUserids, bool? oauthHashUserids, string oauthCallBackUrl, bool? oauthAccessTokenPersist, bool? oauthAccessTokenPersistCookie, bool? oauthCsrfStateProtection, bool? oauthRedirectRequestParams, bool? oauthConfigSiblingsAllow);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="supportedPaths"></param>
        /// <returns>ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo</returns>
        ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="idpUrl"></param>
        /// <param name="idpCertAlias"></param>
        /// <param name="idpHttpRedirect"></param>
        /// <param name="serviceProviderEntityId"></param>
        /// <param name="assertionConsumerServiceURL"></param>
        /// <param name="spPrivateKeyAlias"></param>
        /// <param name="keyStorePassword"></param>
        /// <param name="defaultRedirectUrl"></param>
        /// <param name="userIDAttribute"></param>
        /// <param name="useEncryption"></param>
        /// <param name="createUser"></param>
        /// <param name="userIntermediatePath"></param>
        /// <param name="addGroupMemberships"></param>
        /// <param name="groupMembershipAttribute"></param>
        /// <param name="defaultGroups"></param>
        /// <param name="nameIdFormat"></param>
        /// <param name="synchronizeAttributes"></param>
        /// <param name="handleLogout"></param>
        /// <param name="logoutUrl"></param>
        /// <param name="clockTolerance"></param>
        /// <param name="digestMethod"></param>
        /// <param name="signatureMethod"></param>
        /// <param name="identitySyncType"></param>
        /// <param name="idpIdentifier"></param>
        /// <returns>ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo ComAdobeGraniteAuthSamlSamlAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking, string idpUrl, string idpCertAlias, bool? idpHttpRedirect, string serviceProviderEntityId, string assertionConsumerServiceURL, string spPrivateKeyAlias, string keyStorePassword, string defaultRedirectUrl, string userIDAttribute, bool? useEncryption, bool? createUser, string userIntermediatePath, bool? addGroupMemberships, string groupMembershipAttribute, List<string> defaultGroups, string nameIdFormat, List<string> synchronizeAttributes, bool? handleLogout, string logoutUrl, int? clockTolerance, string digestMethod, string signatureMethod, string identitySyncType, string idpIdentifier);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="jaasControlFlag"></param>
        /// <param name="jaasRealmName"></param>
        /// <param name="jaasRanking"></param>
        /// <param name="headers"></param>
        /// <param name="cookies"></param>
        /// <param name="parameters"></param>
        /// <param name="usermap"></param>
        /// <param name="format"></param>
        /// <param name="trustedCredentialsAttribute"></param>
        /// <returns>ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo</returns>
        ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, string jaasControlFlag, string jaasRealmName, int? jaasRanking, List<string> headers, List<string> cookies, List<string> parameters, List<string> usermap, string format, string trustedCredentialsAttribute);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="minimumCodeCacheSize"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? minimumCodeCacheSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="ignoredBundles"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> ignoredBundles);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="maxQueuedJobs"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo ComAdobeGraniteBundlesHcImplJobsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? maxQueuedJobs);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo</returns>
        ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="replicateCommentResourceTypes"></param>
        /// <returns>ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo</returns>
        ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replicateCommentResourceTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="compatgroups"></param>
        /// <param name="enabled"></param>
        /// <returns>ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo</returns>
        ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> compatgroups, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="id"></param>
        /// <param name="compatPath"></param>
        /// <param name="newPath"></param>
        /// <returns>ComAdobeGraniteCompatrouterImplRoutingConfigInfo</returns>
        ComAdobeGraniteCompatrouterImplRoutingConfigInfo ComAdobeGraniteCompatrouterImplRoutingConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, string compatPath, string newPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="group"></param>
        /// <param name="ids"></param>
        /// <returns>ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo</returns>
        ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo ComAdobeGraniteCompatrouterImplSwitchMappingConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group, List<string> ids);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="fallbackPaths"></param>
        /// <returns>ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo</returns>
        ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> fallbackPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeGraniteContexthubSilentMode"></param>
        /// <param name="comAdobeGraniteContexthubShowUi"></param>
        /// <returns>ComAdobeGraniteContexthubImplContextHubImplInfo</returns>
        ComAdobeGraniteContexthubImplContextHubImplInfo ComAdobeGraniteContexthubImplContextHubImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? comAdobeGraniteContexthubSilentMode, bool? comAdobeGraniteContexthubShowUi);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="alloworigin"></param>
        /// <param name="alloworiginregexp"></param>
        /// <param name="allowedpaths"></param>
        /// <param name="exposedheaders"></param>
        /// <param name="maxage"></param>
        /// <param name="supportedheaders"></param>
        /// <param name="supportedmethods"></param>
        /// <param name="supportscredentials"></param>
        /// <returns>ComAdobeGraniteCorsImplCORSPolicyImplInfo</returns>
        ComAdobeGraniteCorsImplCORSPolicyImplInfo ComAdobeGraniteCorsImplCORSPolicyImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloworigin, List<string> alloworiginregexp, List<string> allowedpaths, List<string> exposedheaders, int? maxage, List<string> supportedheaders, List<string> supportedmethods, bool? supportscredentials);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="filterMethods"></param>
        /// <param name="filterEnableSafeUserAgents"></param>
        /// <param name="filterSafeUserAgents"></param>
        /// <param name="filterExcludedPaths"></param>
        /// <returns>ComAdobeGraniteCsrfImplCSRFFilterInfo</returns>
        ComAdobeGraniteCsrfImplCSRFFilterInfo ComAdobeGraniteCsrfImplCSRFFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> filterMethods, bool? filterEnableSafeUserAgents, List<string> filterSafeUserAgents, List<string> filterExcludedPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="csrfTokenExpiresIn"></param>
        /// <param name="slingAuthRequirements"></param>
        /// <returns>ComAdobeGraniteCsrfImplCSRFServletInfo</returns>
        ComAdobeGraniteCsrfImplCSRFServletInfo ComAdobeGraniteCsrfImplCSRFServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? csrfTokenExpiresIn, string slingAuthRequirements);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="encryptedPassword"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo</returns>
        ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string encryptedPassword);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="agentName"></param>
        /// <param name="diffPath"></param>
        /// <param name="observedPath"></param>
        /// <param name="serviceName"></param>
        /// <param name="propertyNames"></param>
        /// <param name="distributionDelay"></param>
        /// <param name="serviceUserTarget"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo</returns>
        ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string observedPath, string serviceName, string propertyNames, int? distributionDelay, string serviceUserTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="diffPath"></param>
        /// <param name="serviceName"></param>
        /// <param name="serviceUserTarget"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo</returns>
        ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo ComAdobeGraniteDistributionCoreImplDiffDiffEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string diffPath, string serviceName, string serviceUserTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="importerName"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo</returns>
        ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> importerName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerName"></param>
        /// <param name="forwardRequests"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo</returns>
        ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, bool? forwardRequests);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="forwardRequests"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo</returns>
        ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forwardRequests);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="serviceName"></param>
        /// <param name="userId"></param>
        /// <param name="accessTokenProviderTarget"></param>
        /// <returns>ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo</returns>
        ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string userId, string accessTokenProviderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="featureName"></param>
        /// <param name="featureDescription"></param>
        /// <param name="httpHeaderName"></param>
        /// <param name="httpHeaderValuepattern"></param>
        /// <returns>ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo</returns>
        ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo ComAdobeGraniteFragsImplCheckHttpHeaderFlag (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string httpHeaderName, string httpHeaderValuepattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="featureName"></param>
        /// <param name="featureDescription"></param>
        /// <param name="activePercentage"></param>
        /// <param name="cookieName"></param>
        /// <param name="cookieMaxAge"></param>
        /// <returns>ComAdobeGraniteFragsImplRandomFeatureInfo</returns>
        ComAdobeGraniteFragsImplRandomFeatureInfo ComAdobeGraniteFragsImplRandomFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string activePercentage, string cookieName, int? cookieMaxAge);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeGraniteHttpcacheFileDocumentRoot"></param>
        /// <param name="comAdobeGraniteHttpcacheFileIncludeHost"></param>
        /// <returns>ComAdobeGraniteHttpcacheFileFileCacheStoreInfo</returns>
        ComAdobeGraniteHttpcacheFileFileCacheStoreInfo ComAdobeGraniteHttpcacheFileFileCacheStore (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeGraniteHttpcacheFileDocumentRoot, string comAdobeGraniteHttpcacheFileIncludeHost);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeGraniteHttpcacheUrlPaths"></param>
        /// <returns>ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo</returns>
        ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo ComAdobeGraniteHttpcacheImplOuterCacheFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeGraniteHttpcacheUrlPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pseudoPatterns"></param>
        /// <returns>ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo</returns>
        ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo ComAdobeGraniteI18nImplBundlePseudoTranslations (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> pseudoPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="securityPreferencesName"></param>
        /// <returns>ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo</returns>
        ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo ComAdobeGraniteI18nImplPreferencesLocaleResolverService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string securityPreferencesName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="graniteInfocollectorIncludeThreadDumps"></param>
        /// <param name="graniteInfocollectorIncludeHeapDump"></param>
        /// <returns>ComAdobeGraniteInfocollectorInfoCollectorInfo</returns>
        ComAdobeGraniteInfocollectorInfoCollectorInfo ComAdobeGraniteInfocollectorInfoCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteInfocollectorIncludeThreadDumps, bool? graniteInfocollectorIncludeHeapDump);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comAdobeGraniteJettySslPort"></param>
        /// <param name="comAdobeGraniteJettySslKeystoreUser"></param>
        /// <param name="comAdobeGraniteJettySslKeystorePassword"></param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesExcluded"></param>
        /// <param name="comAdobeGraniteJettySslCiphersuitesIncluded"></param>
        /// <param name="comAdobeGraniteJettySslClientCertificate"></param>
        /// <returns>ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo</returns>
        ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeGraniteJettySslPort, string comAdobeGraniteJettySslKeystoreUser, string comAdobeGraniteJettySslKeystorePassword, List<string> comAdobeGraniteJettySslCiphersuitesExcluded, List<string> comAdobeGraniteJettySslCiphersuitesIncluded, string comAdobeGraniteJettySslClientCertificate);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="checkInternval"></param>
        /// <param name="excludeIds"></param>
        /// <param name="encryptPing"></param>
        /// <returns>ComAdobeGraniteLicenseImplLicenseCheckFilterInfo</returns>
        ComAdobeGraniteLicenseImplLicenseCheckFilterInfo ComAdobeGraniteLicenseImplLicenseCheckFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? checkInternval, List<string> excludeIds, bool? encryptPing);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="messagesQueueSize"></param>
        /// <param name="loggerConfig"></param>
        /// <param name="messagesSize"></param>
        /// <returns>ComAdobeGraniteLoggingImplLogAnalyserImplInfo</returns>
        ComAdobeGraniteLoggingImplLogAnalyserImplInfo ComAdobeGraniteLoggingImplLogAnalyserImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? messagesQueueSize, List<string> loggerConfig, int? messagesSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo</returns>
        ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo ComAdobeGraniteLoggingImplLogErrorHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="graniteMaintenanceMandatory"></param>
        /// <param name="jobTopics"></param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteMaintenanceMandatory, string jobTopics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jobTopics"></param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fullGcDays"></param>
        /// <returns>ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo</returns>
        ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fullGcDays);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="scriptFilename"></param>
        /// <param name="scriptDisplay"></param>
        /// <param name="scriptPath"></param>
        /// <param name="scriptPlatform"></param>
        /// <param name="interval"></param>
        /// <param name="jmxdomain"></param>
        /// <returns>ComAdobeGraniteMonitoringImplScriptConfigImplInfo</returns>
        ComAdobeGraniteMonitoringImplScriptConfigImplInfo ComAdobeGraniteMonitoringImplScriptConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scriptFilename, string scriptDisplay, string scriptPath, List<string> scriptPlatform, int? interval, string jmxdomain);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="jaasControlFlag"></param>
        /// <param name="jaasRealmName"></param>
        /// <param name="jaasRanking"></param>
        /// <param name="oauthOfflineValidation"></param>
        /// <returns>ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo</returns>
        ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string jaasControlFlag, string jaasRealmName, int? jaasRanking, bool? oauthOfflineValidation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <returns>ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo</returns>
        ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo ComAdobeGraniteOauthServerImplAccessTokenCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthClientRevocationActive"></param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthClientRevocationActive);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletPaths"></param>
        /// <param name="oauthRevocationActive"></param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, bool? oauthRevocationActive);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthIssuer"></param>
        /// <param name="oauthAccessTokenExpiresIn"></param>
        /// <param name="osgiHttpWhiteboardServletPattern"></param>
        /// <param name="osgiHttpWhiteboardContextSelect"></param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthIssuer, string oauthAccessTokenExpiresIn, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="oauthTokenRevocationActive"></param>
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo</returns>
        ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthTokenRevocationActive);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="offloadingTransporter"></param>
        /// <param name="offloadingCleanupPayload"></param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo ComAdobeGraniteOffloadingImplOffloadingConfigurator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string offloadingTransporter, bool? offloadingCleanupPayload);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="offloadingJobclonerEnabled"></param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo ComAdobeGraniteOffloadingImplOffloadingJobCloner (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingJobclonerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="offloadingOffloaderEnabled"></param>
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo</returns>
        ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo ComAdobeGraniteOffloadingImplOffloadingJobOffloader (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingOffloaderEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="offloadingAgentmanagerEnabled"></param>
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo</returns>
        ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingAgentmanagerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultTransportAgentToWorkerPrefix"></param>
        /// <param name="defaultTransportAgentToMasterPrefix"></param>
        /// <param name="defaultTransportInputPackage"></param>
        /// <param name="defaultTransportOutputPackage"></param>
        /// <param name="defaultTransportReplicationSynchronous"></param>
        /// <param name="defaultTransportContentpackage"></param>
        /// <param name="offloadingTransporterDefaultEnabled"></param>
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo</returns>
        ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultTransportAgentToWorkerPrefix, string defaultTransportAgentToMasterPrefix, string defaultTransportInputPackage, string defaultTransportOutputPackage, bool? defaultTransportReplicationSynchronous, bool? defaultTransportContentpackage, bool? offloadingTransporterDefaultEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="omnisearchSuggestionRequiretextMin"></param>
        /// <param name="omnisearchSuggestionSpellcheckRequire"></param>
        /// <returns>ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo</returns>
        ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? omnisearchSuggestionRequiretextMin, bool? omnisearchSuggestionSpellcheckRequire);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="optoutCookies"></param>
        /// <param name="optoutHeaders"></param>
        /// <param name="optoutWhitelistCookies"></param>
        /// <returns>ComAdobeGraniteOptoutImplOptOutServiceImplInfo</returns>
        ComAdobeGraniteOptoutImplOptOutServiceImplInfo ComAdobeGraniteOptoutImplOptOutServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> optoutCookies, List<string> optoutHeaders, List<string> optoutWhitelistCookies);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="indexingCriticalThreshold"></param>
        /// <param name="indexingWarnThreshold"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? indexingCriticalThreshold, int? indexingWarnThreshold, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="largeIndexCriticalThreshold"></param>
        /// <param name="largeIndexWarnThreshold"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeIndexCriticalThreshold, int? largeIndexWarnThreshold, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="getPeriod"></param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo</returns>
        ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? getPeriod);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo</returns>
        ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="numberOfRetriesAllowed"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo</returns>
        ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfRetriesAllowed, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo</returns>
        ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="excludeSearchPath"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo</returns>
        ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> excludeSearchPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo</returns>
        ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="accountLogins"></param>
        /// <param name="consoleLogins"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> accountLogins, List<string> consoleLogins);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <param name="diskSpaceWarnThreshold"></param>
        /// <param name="diskSpaceErrorThreshold"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? diskSpaceWarnThreshold, int? diskSpaceErrorThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo</returns>
        ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="intervalSeconds"></param>
        /// <param name="commitsPerIntervalThreshold"></param>
        /// <param name="maxLocationLength"></param>
        /// <param name="maxDetailsShown"></param>
        /// <param name="minDetailsPercentage"></param>
        /// <param name="threadMatchers"></param>
        /// <param name="maxGreedyDepth"></param>
        /// <param name="greedyStackMatchers"></param>
        /// <param name="stackFilters"></param>
        /// <param name="stackMatchers"></param>
        /// <param name="stackCategorizers"></param>
        /// <param name="stackShorteners"></param>
        /// <returns>ComAdobeGraniteRepositoryImplCommitStatsConfigInfo</returns>
        ComAdobeGraniteRepositoryImplCommitStatsConfigInfo ComAdobeGraniteRepositoryImplCommitStatsConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? intervalSeconds, int? commitsPerIntervalThreshold, int? maxLocationLength, int? maxDetailsShown, int? minDetailsPercentage, List<string> threadMatchers, int? maxGreedyDepth, string greedyStackMatchers, List<string> stackFilters, List<string> stackMatchers, List<string> stackCategorizers, List<string> stackShorteners);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="serviceusersSimpleSubjectPopulation"></param>
        /// <param name="serviceusersList"></param>
        /// <returns>ComAdobeGraniteRepositoryServiceUserConfigurationInfo</returns>
        ComAdobeGraniteRepositoryServiceUserConfigurationInfo ComAdobeGraniteRepositoryServiceUserConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, bool? serviceusersSimpleSubjectPopulation, List<string> serviceusersList);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo</returns>
        ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="types"></param>
        /// <returns>ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo</returns>
        ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo ComAdobeGraniteResourcestatusImplCompositeStatusType (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> types);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerRoot"></param>
        /// <returns>ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo</returns>
        ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoot);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mimeAllowEmpty"></param>
        /// <param name="mimeAllowed"></param>
        /// <returns>ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo</returns>
        ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mimeAllowEmpty, List<string> mimeAllowed);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerRoots"></param>
        /// <returns>ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo</returns>
        ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultLimit"></param>
        /// <param name="useAbsoluteUri"></param>
        /// <returns>ComAdobeGraniteRestImplServletDefaultGETServletInfo</returns>
        ComAdobeGraniteRestImplServletDefaultGETServletInfo ComAdobeGraniteRestImplServletDefaultGETServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultLimit, bool? useAbsoluteUri);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcTags"></param>
        /// <returns>ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo</returns>
        ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="adapterCondition"></param>
        /// <param name="graniteUserpropertiesNodetypes"></param>
        /// <param name="graniteUserpropertiesResourcetypes"></param>
        /// <returns>ComAdobeGraniteSecurityUserUserPropertiesServiceInfo</returns>
        ComAdobeGraniteSecurityUserUserPropertiesServiceInfo ComAdobeGraniteSecurityUserUserPropertiesService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> graniteUserpropertiesNodetypes, List<string> graniteUserpropertiesResourcetypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="group2memberRelationshipOutgoing"></param>
        /// <param name="group2memberExcludedOutgoing"></param>
        /// <param name="group2memberRelationshipIncoming"></param>
        /// <param name="group2memberExcludedIncoming"></param>
        /// <returns>ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo</returns>
        ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group2memberRelationshipOutgoing, List<string> group2memberExcludedOutgoing, string group2memberRelationshipIncoming, List<string> group2memberExcludedIncoming);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="jmxObjectname"></param>
        /// <returns>ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo</returns>
        ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string jmxObjectname);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="adapterCondition"></param>
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo</returns>
        ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="archivingEnabled"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="archiveSinceDaysCompleted"></param>
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo</returns>
        ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? archivingEnabled, string schedulerExpression, int? archiveSinceDaysCompleted);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="purgeCompleted"></param>
        /// <param name="completedAge"></param>
        /// <param name="purgeActive"></param>
        /// <param name="activeAge"></param>
        /// <param name="saveThreshold"></param>
        /// <returns>ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo</returns>
        ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? purgeCompleted, int? completedAge, bool? purgeActive, int? activeAge, int? saveThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="adapterCondition"></param>
        /// <param name="taskmanagerAdmingroups"></param>
        /// <returns>ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo</returns>
        ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> taskmanagerAdmingroups);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerPeriod"></param>
        /// <param name="schedulerRunOn"></param>
        /// <param name="graniteThreaddumpEnabled"></param>
        /// <param name="graniteThreaddumpDumpsPerFile"></param>
        /// <param name="graniteThreaddumpEnableGzipCompression"></param>
        /// <param name="graniteThreaddumpEnableDirectoriesCompression"></param>
        /// <param name="graniteThreaddumpEnableJStack"></param>
        /// <param name="graniteThreaddumpMaxBackupDays"></param>
        /// <param name="graniteThreaddumpBackupCleanTrigger"></param>
        /// <returns>ComAdobeGraniteThreaddumpThreadDumpCollectorInfo</returns>
        ComAdobeGraniteThreaddumpThreadDumpCollectorInfo ComAdobeGraniteThreaddumpThreadDumpCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, string schedulerRunOn, bool? graniteThreaddumpEnabled, int? graniteThreaddumpDumpsPerFile, bool? graniteThreaddumpEnableGzipCompression, bool? graniteThreaddumpEnableDirectoriesCompression, bool? graniteThreaddumpEnableJStack, int? graniteThreaddumpMaxBackupDays, string graniteThreaddumpBackupCleanTrigger);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="translationFactory"></param>
        /// <param name="defaultConnectorLabel"></param>
        /// <param name="defaultConnectorAttribution"></param>
        /// <param name="defaultConnectorWorkspaceId"></param>
        /// <param name="defaultConnectorSubscriptionKey"></param>
        /// <param name="languageMapLocation"></param>
        /// <param name="categoryMapLocation"></param>
        /// <param name="retryAttempts"></param>
        /// <param name="timeoutCount"></param>
        /// <returns>ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo</returns>
        ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translationFactory, string defaultConnectorLabel, string defaultConnectorAttribution, string defaultConnectorWorkspaceId, string defaultConnectorSubscriptionKey, string languageMapLocation, string categoryMapLocation, int? retryAttempts, int? timeoutCount);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultConnectorName"></param>
        /// <param name="defaultCategory"></param>
        /// <returns>ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo</returns>
        ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo ComAdobeGraniteTranslationCoreImplTranslationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultConnectorName, string defaultCategory);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="htmllibmanagerTiming"></param>
        /// <param name="htmllibmanagerDebugInitJs"></param>
        /// <param name="htmllibmanagerMinify"></param>
        /// <param name="htmllibmanagerDebug"></param>
        /// <param name="htmllibmanagerGzip"></param>
        /// <param name="htmllibmanagerMaxDataUriSize"></param>
        /// <param name="htmllibmanagerMaxage"></param>
        /// <param name="htmllibmanagerForceCQUrlInfo"></param>
        /// <param name="htmllibmanagerDefaultthemename"></param>
        /// <param name="htmllibmanagerDefaultuserthemename"></param>
        /// <param name="htmllibmanagerClientmanager"></param>
        /// <param name="htmllibmanagerPathList"></param>
        /// <param name="htmllibmanagerExcludedPathList"></param>
        /// <param name="htmllibmanagerProcessorJs"></param>
        /// <param name="htmllibmanagerProcessorCss"></param>
        /// <param name="htmllibmanagerLongcachePatterns"></param>
        /// <param name="htmllibmanagerLongcacheFormat"></param>
        /// <param name="htmllibmanagerUseFileSystemOutputCache"></param>
        /// <param name="htmllibmanagerFileSystemOutputCacheLocation"></param>
        /// <param name="htmllibmanagerDisableReplacement"></param>
        /// <returns>ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo</returns>
        ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? htmllibmanagerTiming, string htmllibmanagerDebugInitJs, bool? htmllibmanagerMinify, bool? htmllibmanagerDebug, bool? htmllibmanagerGzip, int? htmllibmanagerMaxDataUriSize, int? htmllibmanagerMaxage, bool? htmllibmanagerForceCQUrlInfo, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerClientmanager, List<string> htmllibmanagerPathList, List<string> htmllibmanagerExcludedPathList, List<string> htmllibmanagerProcessorJs, List<string> htmllibmanagerProcessorCss, List<string> htmllibmanagerLongcachePatterns, string htmllibmanagerLongcacheFormat, bool? htmllibmanagerUseFileSystemOutputCache, string htmllibmanagerFileSystemOutputCacheLocation, List<string> htmllibmanagerDisableReplacement);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo</returns>
        ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="graniteWorkflowWorkflowPublishEventServiceEnabled"></param>
        /// <returns>ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo</returns>
        ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteWorkflowWorkflowPublishEventServiceEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="bucketSize"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo</returns>
        ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? bucketSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultTimeout"></param>
        /// <param name="maxTimeout"></param>
        /// <param name="defaultPeriod"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo</returns>
        ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultTimeout, int? maxTimeout, int? defaultPeriod);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jobTopics"></param>
        /// <param name="allowSelfProcessTermination"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreJobJobHandlerInfo</returns>
        ComAdobeGraniteWorkflowCoreJobJobHandlerInfo ComAdobeGraniteWorkflowCoreJobJobHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> jobTopics, bool? allowSelfProcessTermination);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jobTopics"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo</returns>
        ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="getSystemWorkflowModels"></param>
        /// <param name="getPackageRootPath"></param>
        /// <returns>ComAdobeGraniteWorkflowCorePayloadMapCacheInfo</returns>
        ComAdobeGraniteWorkflowCorePayloadMapCacheInfo ComAdobeGraniteWorkflowCorePayloadMapCache (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> getSystemWorkflowModels, string getPackageRootPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="payloadMoveWhiteList"></param>
        /// <param name="payloadMoveHandleFromWorkflowProcess"></param>
        /// <returns>ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo</returns>
        ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> payloadMoveWhiteList, bool? payloadMoveHandleFromWorkflowProcess);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWorkflowConfigWorkflowPackagesRootPath"></param>
        /// <param name="cqWorkflowConfigWorkflowProcessLegacyMode"></param>
        /// <param name="cqWorkflowConfigAllowLocking"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowConfigInfo</returns>
        ComAdobeGraniteWorkflowCoreWorkflowConfigInfo ComAdobeGraniteWorkflowCoreWorkflowConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWorkflowConfigWorkflowPackagesRootPath, bool? cqWorkflowConfigWorkflowProcessLegacyMode, bool? cqWorkflowConfigAllowLocking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="graniteWorkflowinboxSortPropertyName"></param>
        /// <param name="graniteWorkflowinboxSortOrder"></param>
        /// <param name="cqWorkflowJobRetry"></param>
        /// <param name="cqWorkflowSuperuser"></param>
        /// <param name="graniteWorkflowInboxQuerySize"></param>
        /// <param name="graniteWorkflowAdminUserGroupFilter"></param>
        /// <param name="graniteWorkflowEnforceWorkitemAssigneePermissions"></param>
        /// <param name="graniteWorkflowEnforceWorkflowInitiatorPermissions"></param>
        /// <param name="graniteWorkflowInjectTenantIdInJobTopics"></param>
        /// <param name="graniteWorkflowMaxPurgeSaveThreshold"></param>
        /// <param name="graniteWorkflowMaxPurgeQueryCount"></param>
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo</returns>
        ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo ComAdobeGraniteWorkflowCoreWorkflowSessionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string graniteWorkflowinboxSortPropertyName, string graniteWorkflowinboxSortOrder, int? cqWorkflowJobRetry, List<string> cqWorkflowSuperuser, int? graniteWorkflowInboxQuerySize, bool? graniteWorkflowAdminUserGroupFilter, bool? graniteWorkflowEnforceWorkitemAssigneePermissions, bool? graniteWorkflowEnforceWorkflowInitiatorPermissions, bool? graniteWorkflowInjectTenantIdInJobTopics, int? graniteWorkflowMaxPurgeSaveThreshold, int? graniteWorkflowMaxPurgeQueryCount);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="scheduledpurgeName"></param>
        /// <param name="scheduledpurgeWorkflowStatus"></param>
        /// <param name="scheduledpurgeModelIds"></param>
        /// <param name="scheduledpurgeDaysold"></param>
        /// <returns>ComAdobeGraniteWorkflowPurgeSchedulerInfo</returns>
        ComAdobeGraniteWorkflowPurgeSchedulerInfo ComAdobeGraniteWorkflowPurgeScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, string scheduledpurgeWorkflowStatus, List<string> scheduledpurgeModelIds, int? scheduledpurgeDaysold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxConnections"></param>
        /// <param name="maxRequests"></param>
        /// <param name="requestTimeout"></param>
        /// <param name="requestRetries"></param>
        /// <param name="launchTimeout"></param>
        /// <returns>ComAdobeOctopusNcommBootstrapInfo</returns>
        ComAdobeOctopusNcommBootstrapInfo ComAdobeOctopusNcommBootstrap (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxConnections, int? maxRequests, int? requestTimeout, int? requestRetries, int? launchTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="communitiesIntegrationLivefyreSlingEventFilter"></param>
        /// <returns>ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo</returns>
        ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string communitiesIntegrationLivefyreSlingEventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxConnections"></param>
        /// <param name="maxRequests"></param>
        /// <param name="requestTimeout"></param>
        /// <param name="logDir"></param>
        /// <returns>ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo</returns>
        ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo ComAdobeXmpWorkerFilesNcommXMPFilesNComm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxConnections, string maxRequests, string requestTimeout, string logDir);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jdbcDriverClass"></param>
        /// <param name="jdbcConnectionUri"></param>
        /// <param name="jdbcUsername"></param>
        /// <param name="jdbcPassword"></param>
        /// <param name="jdbcValidationQuery"></param>
        /// <param name="defaultReadonly"></param>
        /// <param name="defaultAutocommit"></param>
        /// <param name="poolSize"></param>
        /// <param name="poolMaxWaitMsec"></param>
        /// <param name="datasourceName"></param>
        /// <param name="datasourceSvcProperties"></param>
        /// <returns>ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo</returns>
        ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo ComDayCommonsDatasourceJdbcpoolJdbcPoolService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jdbcDriverClass, string jdbcConnectionUri, string jdbcUsername, string jdbcPassword, string jdbcValidationQuery, bool? defaultReadonly, bool? defaultAutocommit, int? poolSize, int? poolMaxWaitMsec, string datasourceName, List<string> datasourceSvcProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="proxyEnabled"></param>
        /// <param name="proxyHost"></param>
        /// <param name="proxyUser"></param>
        /// <param name="proxyPassword"></param>
        /// <param name="proxyNtlmHost"></param>
        /// <param name="proxyNtlmDomain"></param>
        /// <param name="proxyExceptions"></param>
        /// <returns>ComDayCommonsHttpclientInfo</returns>
        ComDayCommonsHttpclientInfo ComDayCommonsHttpclient (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, string proxyUser, string proxyPassword, string proxyNtlmHost, string proxyNtlmDomain, List<string> proxyExceptions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqStoreListenerAdditionalStorePaths"></param>
        /// <returns>ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo</returns>
        ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo ComDayCqAnalyticsImplStorePropertiesChangeListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqStoreListenerAdditionalStorePaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="allowedPaths"></param>
        /// <param name="cqAnalyticsSaintExporterPagesize"></param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo</returns>
        ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> allowedPaths, int? cqAnalyticsSaintExporterPagesize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="reportFetchAttempts"></param>
        /// <param name="reportFetchDelay"></param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo</returns>
        ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo ComDayCqAnalyticsSitecatalystImplImporterReportImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchAttempts, int? reportFetchDelay);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsAdapterfactoryContextstores"></param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo</returns>
        ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsAdapterfactoryContextstores);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsSitecatalystServiceDatacenterUrl"></param>
        /// <param name="devhostnamepatterns"></param>
        /// <param name="connectionTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo</returns>
        ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsSitecatalystServiceDatacenterUrl, List<string> devhostnamepatterns, int? connectionTimeout, int? socketTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsTestandtargetAccountoptionsupdaterEnabled"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo</returns>
        ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo</returns>
        ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo</returns>
        ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsTestandtargetSegmentimporterEnabled"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo</returns>
        ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo ComDayCqAnalyticsTestandtargetImplSegmentImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetSegmentimporterEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="endpointUri"></param>
        /// <param name="connectionTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo</returns>
        ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="testandtargetEndpointUrl"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo</returns>
        ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string testandtargetEndpointUrl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAnalyticsTestandtargetApiUrl"></param>
        /// <param name="cqAnalyticsTestandtargetTimeout"></param>
        /// <param name="cqAnalyticsTestandtargetSockettimeout"></param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplace"></param>
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplacewith"></param>
        /// <returns>ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo</returns>
        ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAnalyticsTestandtargetApiUrl, int? cqAnalyticsTestandtargetTimeout, int? cqAnalyticsTestandtargetSockettimeout, string cqAnalyticsTestandtargetRecommendationsUrlReplace, string cqAnalyticsTestandtargetRecommendationsUrlReplacewith);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cugExemptedPrincipals"></param>
        /// <param name="cugEnabled"></param>
        /// <param name="cugPrincipalsRegex"></param>
        /// <param name="cugPrincipalsReplacement"></param>
        /// <returns>ComDayCqAuthImplCugCugSupportImplInfo</returns>
        ComDayCqAuthImplCugCugSupportImplInfo ComDayCqAuthImplCugCugSupportImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugExemptedPrincipals, bool? cugEnabled, string cugPrincipalsRegex, string cugPrincipalsReplacement);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="authLoginselectorMappings"></param>
        /// <param name="authLoginselectorChangepwMappings"></param>
        /// <param name="authLoginselectorDefaultloginpage"></param>
        /// <param name="authLoginselectorDefaultchangepwpage"></param>
        /// <param name="authLoginselectorHandle"></param>
        /// <param name="authLoginselectorHandleAllExtensions"></param>
        /// <returns>ComDayCqAuthImplLoginSelectorHandlerInfo</returns>
        ComDayCqAuthImplLoginSelectorHandlerInfo ComDayCqAuthImplLoginSelectorHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, List<string> authLoginselectorMappings, List<string> authLoginselectorChangepwMappings, string authLoginselectorDefaultloginpage, string authLoginselectorDefaultchangepwpage, List<string> authLoginselectorHandle, bool? authLoginselectorHandleAllExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="externalizerDomains"></param>
        /// <param name="externalizerHost"></param>
        /// <param name="externalizerContextpath"></param>
        /// <param name="externalizerEncodedpath"></param>
        /// <returns>ComDayCqCommonsImplExternalizerImplInfo</returns>
        ComDayCqCommonsImplExternalizerImplInfo ComDayCqCommonsImplExternalizerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> externalizerDomains, string externalizerHost, string externalizerContextpath, bool? externalizerEncodedpath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="rootmappingTarget"></param>
        /// <returns>ComDayCqCommonsServletsRootMappingServletInfo</returns>
        ComDayCqCommonsServletsRootMappingServletInfo ComDayCqCommonsServletsRootMappingServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootmappingTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="codeupgradetasks"></param>
        /// <param name="codeupgradetaskfilters"></param>
        /// <returns>ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo</returns>
        ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> codeupgradetasks, List<string> codeupgradetaskfilters);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="upgradeTaskIgnoreList"></param>
        /// <returns>ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo</returns>
        ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> upgradeTaskIgnoreList);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="effectiveBundleListPath"></param>
        /// <returns>ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo</returns>
        ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string effectiveBundleListPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="contentsyncFallbackAuthorizable"></param>
        /// <param name="contentsyncFallbackUpdateuser"></param>
        /// <returns>ComDayCqContentsyncImplContentSyncManagerImplInfo</returns>
        ComDayCqContentsyncImplContentSyncManagerImplInfo ComDayCqContentsyncImplContentSyncManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contentsyncFallbackAuthorizable, string contentsyncFallbackUpdateuser);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="largeFileThreshold"></param>
        /// <param name="largeCommentThreshold"></param>
        /// <param name="cqDamEnableExtMetaExtraction"></param>
        /// <returns>ComDayCqDamCommonsHandlerStandardImageHandlerInfo</returns>
        ComDayCqDamCommonsHandlerStandardImageHandlerInfo ComDayCqDamCommonsHandlerStandardImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold, int? largeCommentThreshold, bool? cqDamEnableExtMetaExtraction);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="xmpFilterApplyWhitelist"></param>
        /// <param name="xmpFilterWhitelist"></param>
        /// <param name="xmpFilterApplyBlacklist"></param>
        /// <param name="xmpFilterBlacklist"></param>
        /// <returns>ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo</returns>
        ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo ComDayCqDamCommonsMetadataXmpFilterBlackWhite (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpFilterApplyWhitelist, List<string> xmpFilterWhitelist, bool? xmpFilterApplyBlacklist, List<string> xmpFilterBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="largeFileMin"></param>
        /// <param name="cacheApply"></param>
        /// <param name="mimeTypes"></param>
        /// <returns>ComDayCqDamCommonsUtilImplAssetCacheImplInfo</returns>
        ComDayCqDamCommonsUtilImplAssetCacheImplInfo ComDayCqDamCommonsUtilImplAssetCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileMin, bool? cacheApply, List<string> mimeTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamConfigAnnotationPdfDocumentWidth"></param>
        /// <param name="cqDamConfigAnnotationPdfDocumentHeight"></param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingHorizontal"></param>
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingVertical"></param>
        /// <param name="cqDamConfigAnnotationPdfFontSize"></param>
        /// <param name="cqDamConfigAnnotationPdfFontColor"></param>
        /// <param name="cqDamConfigAnnotationPdfFontFamily"></param>
        /// <param name="cqDamConfigAnnotationPdfFontLight"></param>
        /// <param name="cqDamConfigAnnotationPdfMarginTextImage"></param>
        /// <param name="cqDamConfigAnnotationPdfMinImageHeight"></param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusWidth"></param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorApproved"></param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorRejected"></param>
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorChangesRequested"></param>
        /// <param name="cqDamConfigAnnotationPdfAnnotationMarkerWidth"></param>
        /// <param name="cqDamConfigAnnotationPdfAssetMinheight"></param>
        /// <returns>ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo</returns>
        ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigAnnotationPdfDocumentWidth, int? cqDamConfigAnnotationPdfDocumentHeight, int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal, int? cqDamConfigAnnotationPdfDocumentPaddingVertical, int? cqDamConfigAnnotationPdfFontSize, string cqDamConfigAnnotationPdfFontColor, string cqDamConfigAnnotationPdfFontFamily, string cqDamConfigAnnotationPdfFontLight, int? cqDamConfigAnnotationPdfMarginTextImage, int? cqDamConfigAnnotationPdfMinImageHeight, int? cqDamConfigAnnotationPdfReviewStatusWidth, string cqDamConfigAnnotationPdfReviewStatusColorApproved, string cqDamConfigAnnotationPdfReviewStatusColorRejected, string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, int? cqDamConfigAnnotationPdfAnnotationMarkerWidth, int? cqDamConfigAnnotationPdfAssetMinheight);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>ComDayCqDamCoreImplAssetMoveListenerInfo</returns>
        ComDayCqDamCoreImplAssetMoveListenerInfo ComDayCqDamCoreImplAssetMoveListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isEnabled"></param>
        /// <returns>ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo</returns>
        ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamAdhocAssetSharePrezipMaxcontentsize"></param>
        /// <returns>ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo</returns>
        ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamAdhocAssetSharePrezipMaxcontentsize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamImageCacheMaxMemory"></param>
        /// <param name="cqDamImageCacheMaxAge"></param>
        /// <param name="cqDamImageCacheMaxDimension"></param>
        /// <returns>ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo</returns>
        ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo ComDayCqDamCoreImplCacheCQBufferedImageCache (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamImageCacheMaxMemory, int? cqDamImageCacheMaxAge, string cqDamImageCacheMaxDimension);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="changeeventlistenerObservedPaths"></param>
        /// <returns>ComDayCqDamCoreImplDamChangeEventListenerInfo</returns>
        ComDayCqDamCoreImplDamChangeEventListenerInfo ComDayCqDamCoreImplDamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> changeeventlistenerObservedPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="maxSavedActivities"></param>
        /// <param name="saveInterval"></param>
        /// <param name="enableActivityPurge"></param>
        /// <param name="eventTypes"></param>
        /// <returns>ComDayCqDamCoreImplDamEventPurgeServiceInfo</returns>
        ComDayCqDamCoreImplDamEventPurgeServiceInfo ComDayCqDamCoreImplDamEventPurgeService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedActivities, int? saveInterval, bool? enableActivityPurge, string eventTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="eventQueueLength"></param>
        /// <param name="eventrecorderEnabled"></param>
        /// <param name="eventrecorderBlacklist"></param>
        /// <param name="eventrecorderEventtypes"></param>
        /// <returns>ComDayCqDamCoreImplDamEventRecorderImplInfo</returns>
        ComDayCqDamCoreImplDamEventRecorderImplInfo ComDayCqDamCoreImplDamEventRecorderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? eventQueueLength, bool? eventrecorderEnabled, List<string> eventrecorderBlacklist, string eventrecorderEventtypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="enabled"></param>
        /// <returns>ComDayCqDamCoreImplEventDamEventAuditListenerInfo</returns>
        ComDayCqDamCoreImplEventDamEventAuditListenerInfo ComDayCqDamCoreImplEventDamEventAuditListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamExpiryNotificationSchedulerIstimebased"></param>
        /// <param name="cqDamExpiryNotificationSchedulerTimebasedRule"></param>
        /// <param name="cqDamExpiryNotificationSchedulerPeriodRule"></param>
        /// <param name="sendEmail"></param>
        /// <param name="assetExpiredLimit"></param>
        /// <param name="priorNotificationSeconds"></param>
        /// <param name="cqDamExpiryNotificationUrlProtocol"></param>
        /// <returns>ComDayCqDamCoreImplExpiryNotificationJobImplInfo</returns>
        ComDayCqDamCoreImplExpiryNotificationJobImplInfo ComDayCqDamCoreImplExpiryNotificationJobImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamExpiryNotificationSchedulerIstimebased, string cqDamExpiryNotificationSchedulerTimebasedRule, int? cqDamExpiryNotificationSchedulerPeriodRule, bool? sendEmail, int? assetExpiredLimit, int? priorNotificationSeconds, string cqDamExpiryNotificationUrlProtocol);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="isEnabled"></param>
        /// <returns>ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo</returns>
        ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="skipBufferedcache"></param>
        /// <returns>ComDayCqDamCoreImplGfxCommonsGfxRendererInfo</returns>
        ComDayCqDamCoreImplGfxCommonsGfxRendererInfo ComDayCqDamCoreImplGfxCommonsGfxRenderer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? skipBufferedcache);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mimetype"></param>
        /// <returns>ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo ComDayCqDamCoreImplHandlerEPSFormatHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mimetype);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mimetype"></param>
        /// <returns>ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo ComDayCqDamCoreImplHandlerIndesignFormatHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimetype);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamEnableExtMetaExtraction"></param>
        /// <param name="largeFileThreshold"></param>
        /// <param name="largeCommentThreshold"></param>
        /// <returns>ComDayCqDamCoreImplHandlerJpegHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerJpegHandlerInfo ComDayCqDamCoreImplHandlerJpegHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamEnableExtMetaExtraction, int? largeFileThreshold, int? largeCommentThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="xmphandlerCqFormats"></param>
        /// <returns>ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo</returns>
        ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo ComDayCqDamCoreImplHandlerXmpNCommXMPHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> xmphandlerCqFormats);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jmxObjectname"></param>
        /// <param name="propertyMeasureEnabled"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyMaxWaitMs"></param>
        /// <param name="propertyMaxRate"></param>
        /// <param name="fulltextMeasureEnabled"></param>
        /// <param name="fulltextName"></param>
        /// <param name="fulltextMaxWaitMs"></param>
        /// <param name="fulltextMaxRate"></param>
        /// <returns>ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo</returns>
        ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? propertyMeasureEnabled, string propertyName, int? propertyMaxWaitMs, decimal? propertyMaxRate, bool? fulltextMeasureEnabled, string fulltextName, int? fulltextMaxWaitMs, decimal? fulltextMaxRate);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jmxObjectname"></param>
        /// <returns>ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo</returns>
        ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jmxObjectname"></param>
        /// <param name="active"></param>
        /// <returns>ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo</returns>
        ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? active);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="operation"></param>
        /// <param name="emailEnabled"></param>
        /// <returns>ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo</returns>
        ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, bool? emailEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="operation"></param>
        /// <param name="operationIcon"></param>
        /// <param name="topicName"></param>
        /// <param name="emailEnabled"></param>
        /// <returns>ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo</returns>
        ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, string operationIcon, string topicName, bool? emailEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletPaths"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="cqDamEnableAnonymous"></param>
        /// <returns>ComDayCqDamCoreImplLightboxLightboxServletInfo</returns>
        ComDayCqDamCoreImplLightboxLightboxServletInfo ComDayCqDamCoreImplLightboxLightboxServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, List<string> slingServletMethods, bool? cqDamEnableAnonymous);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="granitedata"></param>
        /// <returns>ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo</returns>
        ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo ComDayCqDamCoreImplMetadataEditorSelectComponentHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> granitedata);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamAllowAllMime"></param>
        /// <param name="cqDamAllowedAssetMimes"></param>
        /// <returns>ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo</returns>
        ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamAllowAllMime, List<string> cqDamAllowedAssetMimes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamDetectAssetMimeFromContent"></param>
        /// <returns>ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo</returns>
        ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDetectAssetMimeFromContent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerIstimebased"></param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerTimebasedRule"></param>
        /// <param name="cqDamMissingmetadataNotificationSchedulerPeriodRule"></param>
        /// <param name="cqDamMissingmetadataNotificationRecipient"></param>
        /// <returns>ComDayCqDamCoreImplMissingMetadataNotificationJobInfo</returns>
        ComDayCqDamCoreImplMissingMetadataNotificationJobInfo ComDayCqDamCoreImplMissingMetadataNotificationJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamMissingmetadataNotificationSchedulerIstimebased, string cqDamMissingmetadataNotificationSchedulerTimebasedRule, int? cqDamMissingmetadataNotificationSchedulerPeriodRule, string cqDamMissingmetadataNotificationRecipient);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="notifyOnComplete"></param>
        /// <returns>ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo</returns>
        ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? notifyOnComplete);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mimeTypes"></param>
        /// <param name="maxExtract"></param>
        /// <returns>ComDayCqDamCoreImplProcessTextExtractionProcessInfo</returns>
        ComDayCqDamCoreImplProcessTextExtractionProcessInfo ComDayCqDamCoreImplProcessTextExtractionProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes, int? maxExtract);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="xmpPropagate"></param>
        /// <param name="xmpExcludes"></param>
        /// <returns>ComDayCqDamCoreImplRenditionMakerImplInfo</returns>
        ComDayCqDamCoreImplRenditionMakerImplInfo ComDayCqDamCoreImplRenditionMakerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpPropagate, List<string> xmpExcludes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queryBatchSize"></param>
        /// <returns>ComDayCqDamCoreImplReportsReportExportServiceInfo</returns>
        ComDayCqDamCoreImplReportsReportExportServiceInfo ComDayCqDamCoreImplReportsReportExportService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryBatchSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="maxSavedReports"></param>
        /// <param name="timeDuration"></param>
        /// <param name="enableReportPurge"></param>
        /// <returns>ComDayCqDamCoreImplReportsReportPurgeServiceInfo</returns>
        ComDayCqDamCoreImplReportsReportPurgeServiceInfo ComDayCqDamCoreImplReportsReportPurgeService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedReports, int? timeDuration, bool? enableReportPurge);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>ComDayCqDamCoreImplServletAssetDownloadServletInfo</returns>
        ComDayCqDamCoreImplServletAssetDownloadServletInfo ComDayCqDamCoreImplServletAssetDownloadServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamBatchStatusMaxassets"></param>
        /// <returns>ComDayCqDamCoreImplServletAssetStatusServletInfo</returns>
        ComDayCqDamCoreImplServletAssetStatusServletInfo ComDayCqDamCoreImplServletAssetStatusServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchStatusMaxassets);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamBatchIndesignMaxassets"></param>
        /// <returns>ComDayCqDamCoreImplServletAssetXMPSearchServletInfo</returns>
        ComDayCqDamCoreImplServletAssetXMPSearchServletInfo ComDayCqDamCoreImplServletAssetXMPSearchServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchIndesignMaxassets);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamBatchMetadataAssetDefault"></param>
        /// <param name="cqDamBatchMetadataCollectionDefault"></param>
        /// <param name="cqDamBatchMetadataMaxresources"></param>
        /// <returns>ComDayCqDamCoreImplServletBatchMetadataServletInfo</returns>
        ComDayCqDamCoreImplServletBatchMetadataServletInfo ComDayCqDamCoreImplServletBatchMetadataServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchMetadataAssetDefault, List<string> cqDamBatchMetadataCollectionDefault, int? cqDamBatchMetadataMaxresources);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletResourceTypes"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="cqDamDrmEnable"></param>
        /// <returns>ComDayCqDamCoreImplServletBinaryProviderServletInfo</returns>
        ComDayCqDamCoreImplServletBinaryProviderServletInfo ComDayCqDamCoreImplServletBinaryProviderServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, List<string> slingServletMethods, bool? cqDamDrmEnable);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamBatchCollectionProperties"></param>
        /// <param name="cqDamBatchCollectionMaxcollections"></param>
        /// <returns>ComDayCqDamCoreImplServletCollectionServletInfo</returns>
        ComDayCqDamCoreImplServletCollectionServletInfo ComDayCqDamCoreImplServletCollectionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionProperties, int? cqDamBatchCollectionMaxcollections);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamBatchCollectionsProperties"></param>
        /// <param name="cqDamBatchCollectionsLimit"></param>
        /// <returns>ComDayCqDamCoreImplServletCollectionsServletInfo</returns>
        ComDayCqDamCoreImplServletCollectionsServletInfo ComDayCqDamCoreImplServletCollectionsServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionsProperties, int? cqDamBatchCollectionsLimit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="moreInfo"></param>
        /// <param name="mntoverlaydamguicontentassetsmoreinfoHtmlpath"></param>
        /// <returns>ComDayCqDamCoreImplServletCompanionServletInfo</returns>
        ComDayCqDamCoreImplServletCompanionServletInfo ComDayCqDamCoreImplServletCompanionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string moreInfo, string mntoverlaydamguicontentassetsmoreinfoHtmlpath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="detectDuplicate"></param>
        /// <returns>ComDayCqDamCoreImplServletCreateAssetServletInfo</returns>
        ComDayCqDamCoreImplServletCreateAssetServletInfo ComDayCqDamCoreImplServletCreateAssetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? detectDuplicate);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqMimeTypeBlacklist"></param>
        /// <param name="cqDamEmptyMime"></param>
        /// <returns>ComDayCqDamCoreImplServletDamContentDispositionFilterInfo</returns>
        ComDayCqDamCoreImplServletDamContentDispositionFilterInfo ComDayCqDamCoreImplServletDamContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqMimeTypeBlacklist, bool? cqDamEmptyMime);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamCoreGuidlookupfilterEnabled"></param>
        /// <returns>ComDayCqDamCoreImplServletGuidLookupFilterInfo</returns>
        ComDayCqDamCoreImplServletGuidLookupFilterInfo ComDayCqDamCoreImplServletGuidLookupFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamCoreGuidlookupfilterEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamSyncWorkflowId"></param>
        /// <param name="cqDamSyncFolderTypes"></param>
        /// <returns>ComDayCqDamCoreImplServletHealthCheckServletInfo</returns>
        ComDayCqDamCoreImplServletHealthCheckServletInfo ComDayCqDamCoreImplServletHealthCheckServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqDamSyncWorkflowId, List<string> cqDamSyncFolderTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletResourceTypes"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="slingServletExtensions"></param>
        /// <param name="slingServletSelectors"></param>
        /// <returns>ComDayCqDamCoreImplServletMetadataGetServletInfo</returns>
        ComDayCqDamCoreImplServletMetadataGetServletInfo ComDayCqDamCoreImplServletMetadataGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletMethods, string slingServletExtensions, string slingServletSelectors);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamDrmEnable"></param>
        /// <returns>ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo</returns>
        ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDrmEnable);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletResourceTypes"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="downloadConfig"></param>
        /// <param name="viewSelector"></param>
        /// <param name="sendEmail"></param>
        /// <returns>ComDayCqDamCoreImplServletResourceCollectionServletInfo</returns>
        ComDayCqDamCoreImplServletResourceCollectionServletInfo ComDayCqDamCoreImplServletResourceCollectionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, string slingServletMethods, string slingServletSelectors, string downloadConfig, string viewSelector, bool? sendEmail);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="createPreviewEnabled"></param>
        /// <param name="updatePreviewEnabled"></param>
        /// <param name="queueSize"></param>
        /// <param name="folderPreviewRenditionRegex"></param>
        /// <returns>ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo</returns>
        ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? createPreviewEnabled, bool? updatePreviewEnabled, int? queueSize, string folderPreviewRenditionRegex);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamConfigUnzipMaxuncompressedsize"></param>
        /// <param name="cqDamConfigUnzipEncoding"></param>
        /// <returns>ComDayCqDamCoreImplUnzipUnzipConfigInfo</returns>
        ComDayCqDamCoreImplUnzipUnzipConfigInfo ComDayCqDamCoreImplUnzipUnzipConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigUnzipMaxuncompressedsize, string cqDamConfigUnzipEncoding);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="cqDamEnableSha1"></param>
        /// <returns>ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo</returns>
        ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo ComDayCqDamCoreProcessExifToolExtractMetadataProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="cqDamEnableSha1"></param>
        /// <returns>ComDayCqDamCoreProcessExtractMetadataProcessInfo</returns>
        ComDayCqDamCoreProcessExtractMetadataProcessInfo ComDayCqDamCoreProcessExtractMetadataProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="cqDamEnableSha1"></param>
        /// <param name="cqDamMetadataXssprotectedProperties"></param>
        /// <returns>ComDayCqDamCoreProcessMetadataProcessorProcessInfo</returns>
        ComDayCqDamCoreProcessMetadataProcessorProcessInfo ComDayCqDamCoreProcessMetadataProcessorProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1, List<string> cqDamMetadataXssprotectedProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="executableSearchpath"></param>
        /// <returns>ComDayCqDamHandlerFfmpegLocatorImplInfo</returns>
        ComDayCqDamHandlerFfmpegLocatorImplInfo ComDayCqDamHandlerFfmpegLocatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> executableSearchpath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="fontmgrSystemFontDir"></param>
        /// <param name="fontmgrAdobeFontDir"></param>
        /// <param name="fontmgrCustomerFontDir"></param>
        /// <returns>ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo</returns>
        ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> fontmgrSystemFontDir, string fontmgrAdobeFontDir, string fontmgrCustomerFontDir);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="rasterAnnotation"></param>
        /// <returns>ComDayCqDamHandlerStandardPdfPdfHandlerInfo</returns>
        ComDayCqDamHandlerStandardPdfPdfHandlerInfo ComDayCqDamHandlerStandardPdfPdfHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="rasterAnnotation"></param>
        /// <returns>ComDayCqDamHandlerStandardPsPostScriptHandlerInfo</returns>
        ComDayCqDamHandlerStandardPsPostScriptHandlerInfo ComDayCqDamHandlerStandardPsPostScriptHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="largeFileThreshold"></param>
        /// <returns>ComDayCqDamHandlerStandardPsdPsdHandlerInfo</returns>
        ComDayCqDamHandlerStandardPsdPsdHandlerInfo ComDayCqDamHandlerStandardPsdPsdHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enableMultisession"></param>
        /// <param name="idsCcEnable"></param>
        /// <param name="enableRetry"></param>
        /// <param name="enableRetryScripterror"></param>
        /// <param name="externalizerDomainCqhost"></param>
        /// <param name="externalizerDomainHttp"></param>
        /// <returns>ComDayCqDamIdsImplIDSJobProcessorInfo</returns>
        ComDayCqDamIdsImplIDSJobProcessorInfo ComDayCqDamIdsImplIDSJobProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableMultisession, bool? idsCcEnable, bool? enableRetry, bool? enableRetryScripterror, string externalizerDomainCqhost, string externalizerDomainHttp);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxErrorsToBlacklist"></param>
        /// <param name="retryIntervalToWhitelist"></param>
        /// <param name="connectTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <param name="processLabel"></param>
        /// <param name="connectionUseMax"></param>
        /// <returns>ComDayCqDamIdsImplIDSPoolManagerImplInfo</returns>
        ComDayCqDamIdsImplIDSPoolManagerImplInfo ComDayCqDamIdsImplIDSPoolManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxErrorsToBlacklist, int? retryIntervalToWhitelist, int? connectTimeout, int? socketTimeout, string processLabel, int? connectionUseMax);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="extractPages"></param>
        /// <returns>ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo</returns>
        ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo ComDayCqDamInddImplHandlerIndesignXMPHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? extractPages);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="snippetcreationMaxcollections"></param>
        /// <returns>ComDayCqDamInddImplServletSnippetCreationServletInfo</returns>
        ComDayCqDamInddImplServletSnippetCreationServletInfo ComDayCqDamInddImplServletSnippetCreationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? snippetcreationMaxcollections);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <param name="cqDamInddPagesRegex"></param>
        /// <param name="idsJobDecoupled"></param>
        /// <param name="idsJobWorkflowModel"></param>
        /// <returns>ComDayCqDamInddProcessINDDMediaExtractProcessInfo</returns>
        ComDayCqDamInddProcessINDDMediaExtractProcessInfo ComDayCqDamInddProcessINDDMediaExtractProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, string cqDamInddPagesRegex, bool? idsJobDecoupled, string idsJobWorkflowModel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="batchCommitSize"></param>
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo</returns>
        ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? batchCommitSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo</returns>
        ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="deleteZipFile"></param>
        /// <returns>ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo</returns>
        ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deleteZipFile);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamS7damDynamicmediaconfigeventlistenerEnabled"></param>
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo</returns>
        ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="schedulerConcurrent"></param>
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo</returns>
        ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingPostOperation"></param>
        /// <param name="slingServletMethods"></param>
        /// <returns>ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo</returns>
        ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo ComDayCqDamS7damCommonPostServletsSetCreateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingPostOperation"></param>
        /// <param name="slingServletMethods"></param>
        /// <returns>ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo</returns>
        ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo ComDayCqDamS7damCommonPostServletsSetModifyHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="processLabel"></param>
        /// <returns>ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo</returns>
        ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamS7damDamchangeeventlistenerEnabled"></param>
        /// <returns>ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo</returns>
        ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo ComDayCqDamS7damCommonS7damDamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDamchangeeventlistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletPaths"></param>
        /// <param name="slingServletMethods"></param>
        /// <returns>ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo</returns>
        ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo ComDayCqDamS7damCommonServletsS7damProductInfoServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, string slingServletMethods);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpReadtimeoutName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceHttpMaxretrycountName"></param>
        /// <param name="cqDamS7damVideoproxyclientserviceUploadprogressIntervalName"></param>
        /// <returns>ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo</returns>
        ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamScene7ApiclientRecordsperpageNofilterName"></param>
        /// <param name="cqDamScene7ApiclientRecordsperpageWithfilterName"></param>
        /// <returns>ComDayCqDamScene7ImplScene7APIClientImplInfo</returns>
        ComDayCqDamScene7ImplScene7APIClientImplInfo ComDayCqDamScene7ImplScene7APIClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7ApiclientRecordsperpageNofilterName, int? cqDamScene7ApiclientRecordsperpageWithfilterName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamScene7AssetmimetypeserviceMapping"></param>
        /// <returns>ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamScene7AssetmimetypeserviceMapping);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamScene7ConfigurationeventlistenerEnabled"></param>
        /// <returns>ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo</returns>
        ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo ComDayCqDamScene7ImplScene7ConfigurationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7ConfigurationeventlistenerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamScene7DamchangeeventlistenerEnabled"></param>
        /// <param name="cqDamScene7DamchangeeventlistenerObservedPaths"></param>
        /// <returns>ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo</returns>
        ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo ComDayCqDamScene7ImplScene7DamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7DamchangeeventlistenerEnabled, List<string> cqDamScene7DamchangeeventlistenerObservedPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="scene7FlashTemplatesRti"></param>
        /// <param name="scene7FlashTemplatesRsi"></param>
        /// <param name="scene7FlashTemplatesRb"></param>
        /// <param name="scene7FlashTemplatesRurl"></param>
        /// <param name="scene7FlashTemplateUrlFormatParameter"></param>
        /// <returns>ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scene7FlashTemplatesRti, string scene7FlashTemplatesRsi, string scene7FlashTemplatesRb, string scene7FlashTemplatesRurl, string scene7FlashTemplateUrlFormatParameter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqDamScene7UploadserviceActivejobtimeoutLabel"></param>
        /// <param name="cqDamScene7UploadserviceConnectionmaxperrouteLabel"></param>
        /// <returns>ComDayCqDamScene7ImplScene7UploadServiceImplInfo</returns>
        ComDayCqDamScene7ImplScene7UploadServiceImplInfo ComDayCqDamScene7ImplScene7UploadServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7UploadserviceActivejobtimeoutLabel, int? cqDamScene7UploadserviceConnectionmaxperrouteLabel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="getCacheExpirationUnit"></param>
        /// <param name="getCacheExpirationValue"></param>
        /// <returns>ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo</returns>
        ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string getCacheExpirationUnit, int? getCacheExpirationValue);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="locale"></param>
        /// <param name="imsConfig"></param>
        /// <returns>ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo</returns>
        ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo ComDayCqDamStockIntegrationImplConfigurationStockConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string locale, string imsConfig);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>ComDayCqDamVideoImplServletVideoTestServletInfo</returns>
        ComDayCqDamVideoImplServletVideoTestServletInfo ComDayCqDamVideoImplServletVideoTestServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxWidth"></param>
        /// <param name="maxHeight"></param>
        /// <returns>ComDayCqExtwidgetServletsImageSpriteServletInfo</returns>
        ComDayCqExtwidgetServletsImageSpriteServletInfo ComDayCqExtwidgetServletsImageSpriteServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWidth, int? maxHeight);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fontpath"></param>
        /// <param name="oversamplingFactor"></param>
        /// <returns>ComDayCqImageInternalFontFontHelperInfo</returns>
        ComDayCqImageInternalFontFontHelperInfo ComDayCqImageInternalFontFontHelper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontpath, int? oversamplingFactor);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="clusterLevelEnable"></param>
        /// <param name="clusterMasterLevel"></param>
        /// <param name="clusterSlaveLevel"></param>
        /// <returns>ComDayCqJcrclustersupportClusterStartLevelControllerInfo</returns>
        ComDayCqJcrclustersupportClusterStartLevelControllerInfo ComDayCqJcrclustersupportClusterStartLevelController (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? clusterLevelEnable, int? clusterMasterLevel, int? clusterSlaveLevel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="smtpHost"></param>
        /// <param name="smtpPort"></param>
        /// <param name="smtpUser"></param>
        /// <param name="smtpPassword"></param>
        /// <param name="fromAddress"></param>
        /// <param name="smtpSsl"></param>
        /// <param name="smtpStarttls"></param>
        /// <param name="debugEmail"></param>
        /// <returns>ComDayCqMailerDefaultMailServiceInfo</returns>
        ComDayCqMailerDefaultMailServiceInfo ComDayCqMailerDefaultMailService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string smtpHost, int? smtpPort, string smtpUser, string smtpPassword, string fromAddress, bool? smtpSsl, bool? smtpStarttls, bool? debugEmail);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxRecipientCount"></param>
        /// <returns>ComDayCqMailerImplCqMailingServiceInfo</returns>
        ComDayCqMailerImplCqMailingServiceInfo ComDayCqMailerImplCqMailingService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxRecipientCount);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mailerEmailCharset"></param>
        /// <returns>ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo</returns>
        ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo ComDayCqMailerImplEmailCqEmailTemplateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mailerEmailCharset);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mailerEmailEmbed"></param>
        /// <param name="mailerEmailCharset"></param>
        /// <param name="mailerEmailRetrieverUserID"></param>
        /// <param name="mailerEmailRetrieverUserPWD"></param>
        /// <returns>ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo</returns>
        ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo ComDayCqMailerImplEmailCqRetrieverTemplateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mailerEmailEmbed, string mailerEmailCharset, string mailerEmailRetrieverUserID, string mailerEmailRetrieverUserPWD);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="aemMcmCampaignFormConstraints"></param>
        /// <param name="aemMcmCampaignPublicUrl"></param>
        /// <param name="aemMcmCampaignRelaxedSSL"></param>
        /// <returns>ComDayCqMcmCampaignImplIntegrationConfigImplInfo</returns>
        ComDayCqMcmCampaignImplIntegrationConfigImplInfo ComDayCqMcmCampaignImplIntegrationConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aemMcmCampaignFormConstraints, string aemMcmCampaignPublicUrl, bool? aemMcmCampaignRelaxedSSL);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo</returns>
        ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fromAddress"></param>
        /// <param name="senderHost"></param>
        /// <param name="maxBounceCount"></param>
        /// <returns>ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo</returns>
        ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string senderHost, string maxBounceCount);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="experienceIndirection"></param>
        /// <param name="touchpointIndirection"></param>
        /// <returns>ComDayCqMcmImplMCMConfigurationInfo</returns>
        ComDayCqMcmImplMCMConfigurationInfo ComDayCqMcmImplMCMConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> experienceIndirection, List<string> touchpointIndirection);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo</returns>
        ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <returns>ComDayCqNotificationImplNotificationServiceImplInfo</returns>
        ComDayCqNotificationImplNotificationServiceImplInfo ComDayCqNotificationImplNotificationServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="forcelocation"></param>
        /// <returns>ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo</returns>
        ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo ComDayCqPersonalizationImplServletsTargetingConfigurationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forcelocation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="id"></param>
        /// <param name="enabled"></param>
        /// <param name="reference"></param>
        /// <param name="interval"></param>
        /// <param name="expression"></param>
        /// <param name="source"></param>
        /// <param name="target"></param>
        /// <param name="login"></param>
        /// <param name="password"></param>
        /// <returns>ComDayCqPollingImporterImplManagedPollConfigImplInfo</returns>
        ComDayCqPollingImporterImplManagedPollConfigImplInfo ComDayCqPollingImporterImplManagedPollConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, bool? enabled, bool? reference, int? interval, string expression, string source, string target, string login, string password);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="importerUser"></param>
        /// <returns>ComDayCqPollingImporterImplManagedPollingImporterImplInfo</returns>
        ComDayCqPollingImporterImplManagedPollingImporterImplInfo ComDayCqPollingImporterImplManagedPollingImporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string importerUser);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="importerMinInterval"></param>
        /// <param name="importerUser"></param>
        /// <param name="excludePaths"></param>
        /// <param name="includePaths"></param>
        /// <returns>ComDayCqPollingImporterImplPollingImporterImplInfo</returns>
        ComDayCqPollingImporterImplPollingImporterImplInfo ComDayCqPollingImporterImplPollingImporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? importerMinInterval, string importerUser, List<string> excludePaths, List<string> includePaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>ComDayCqReplicationAuditReplicationEventListenerInfo</returns>
        ComDayCqReplicationAuditReplicationEventListenerInfo ComDayCqReplicationAuditReplicationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="host"></param>
        /// <param name="port"></param>
        /// <returns>ComDayCqReplicationContentStaticContentBuilderInfo</returns>
        ComDayCqReplicationContentStaticContentBuilderInfo ComDayCqReplicationContentStaticContentBuilder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string host, int? port);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jobTopics"></param>
        /// <param name="serviceUserTarget"></param>
        /// <param name="agentProviderTarget"></param>
        /// <returns>ComDayCqReplicationImplAgentManagerImplInfo</returns>
        ComDayCqReplicationImplAgentManagerImplInfo ComDayCqReplicationImplAgentManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics, string serviceUserTarget, string agentProviderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="binaryThreshold"></param>
        /// <returns>ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo</returns>
        ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo ComDayCqReplicationImplContentDurboBinaryLessContentBuilder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? binaryThreshold);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="preserveHierarchyNodes"></param>
        /// <param name="ignoreVersioning"></param>
        /// <param name="importAcl"></param>
        /// <param name="saveThreshold"></param>
        /// <param name="preserveUserPaths"></param>
        /// <param name="preserveUuid"></param>
        /// <param name="preserveUuidNodetypes"></param>
        /// <param name="preserveUuidSubtrees"></param>
        /// <param name="autoCommit"></param>
        /// <returns>ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo</returns>
        ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo ComDayCqReplicationImplContentDurboDurboImportConfigurationProv (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? preserveHierarchyNodes, bool? ignoreVersioning, bool? importAcl, int? saveThreshold, bool? preserveUserPaths, bool? preserveUuid, List<string> preserveUuidNodetypes, List<string> preserveUuidSubtrees, bool? autoCommit);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="replicationContentUseFileStorage"></param>
        /// <param name="replicationContentMaxCommitAttempts"></param>
        /// <returns>ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo</returns>
        ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo ComDayCqReplicationImplReplicationContentFactoryProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? replicationContentUseFileStorage, int? replicationContentMaxCommitAttempts);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="receiverTmpfileThreshold"></param>
        /// <param name="receiverPackagesUseInstall"></param>
        /// <returns>ComDayCqReplicationImplReplicationReceiverImplInfo</returns>
        ComDayCqReplicationImplReplicationReceiverImplInfo ComDayCqReplicationImplReplicationReceiverImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? receiverTmpfileThreshold, bool? receiverPackagesUseInstall);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="distributeEvents"></param>
        /// <returns>ComDayCqReplicationImplReplicatorImplInfo</returns>
        ComDayCqReplicationImplReplicatorImplInfo ComDayCqReplicationImplReplicatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? distributeEvents);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerPeriod"></param>
        /// <returns>ComDayCqReplicationImplReverseReplicatorInfo</returns>
        ComDayCqReplicationImplReverseReplicatorInfo ComDayCqReplicationImplReverseReplicator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disabledCipherSuites"></param>
        /// <param name="enabledCipherSuites"></param>
        /// <returns>ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo</returns>
        ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo ComDayCqReplicationImplTransportBinaryLessTransportHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disabledCipherSuites"></param>
        /// <param name="enabledCipherSuites"></param>
        /// <returns>ComDayCqReplicationImplTransportHttpInfo</returns>
        ComDayCqReplicationImplTransportHttpInfo ComDayCqReplicationImplTransportHttp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="repcacheEnable"></param>
        /// <param name="repcacheTtl"></param>
        /// <param name="repcacheMax"></param>
        /// <returns>ComDayCqReportingImplCacheCacheImplInfo</returns>
        ComDayCqReportingImplCacheCacheImplInfo ComDayCqReportingImplCacheCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? repcacheEnable, int? repcacheTtl, int? repcacheMax);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="repconfTimezone"></param>
        /// <param name="repconfLocale"></param>
        /// <param name="repconfSnapshots"></param>
        /// <param name="repconfRepdir"></param>
        /// <param name="repconfHourofday"></param>
        /// <param name="repconfMinofhour"></param>
        /// <param name="repconfMaxrows"></param>
        /// <param name="repconfFakedata"></param>
        /// <param name="repconfSnapshotuser"></param>
        /// <param name="repconfEnforcesnapshotuser"></param>
        /// <returns>ComDayCqReportingImplConfigServiceImplInfo</returns>
        ComDayCqReportingImplConfigServiceImplInfo ComDayCqReportingImplConfigServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repconfTimezone, string repconfLocale, string repconfSnapshots, string repconfRepdir, int? repconfHourofday, int? repconfMinofhour, int? repconfMaxrows, bool? repconfFakedata, string repconfSnapshotuser, bool? repconfEnforcesnapshotuser);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="requestLogOutput"></param>
        /// <returns>ComDayCqReportingImplRLogAnalyzerInfo</returns>
        ComDayCqReportingImplRLogAnalyzerInfo ComDayCqReportingImplRLogAnalyzer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerPeriod"></param>
        /// <param name="schedulerConcurrent"></param>
        /// <param name="serviceBadLinkToleranceInterval"></param>
        /// <param name="serviceCheckOverridePatterns"></param>
        /// <param name="serviceCacheBrokenInternalLinks"></param>
        /// <param name="serviceSpecialLinkPrefix"></param>
        /// <param name="serviceSpecialLinkPatterns"></param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo ComDayCqRewriterLinkcheckerImplLinkCheckerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? serviceBadLinkToleranceInterval, List<string> serviceCheckOverridePatterns, bool? serviceCacheBrokenInternalLinks, List<string> serviceSpecialLinkPrefix, List<string> serviceSpecialLinkPatterns);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerPeriod"></param>
        /// <param name="schedulerConcurrent"></param>
        /// <param name="goodLinkTestInterval"></param>
        /// <param name="badLinkTestInterval"></param>
        /// <param name="linkUnusedInterval"></param>
        /// <param name="connectionTimeout"></param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? goodLinkTestInterval, int? badLinkTestInterval, int? linkUnusedInterval, int? connectionTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="linkcheckertransformerDisableRewriting"></param>
        /// <param name="linkcheckertransformerDisableChecking"></param>
        /// <param name="linkcheckertransformerMapCacheSize"></param>
        /// <param name="linkcheckertransformerStrictExtensionCheck"></param>
        /// <param name="linkcheckertransformerStripHtmltExtension"></param>
        /// <param name="linkcheckertransformerRewriteElements"></param>
        /// <param name="linkcheckertransformerStripExtensionPathBlacklist"></param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? linkcheckertransformerDisableRewriting, bool? linkcheckertransformerDisableChecking, int? linkcheckertransformerMapCacheSize, bool? linkcheckertransformerStrictExtensionCheck, bool? linkcheckertransformerStripHtmltExtension, List<string> linkcheckertransformerRewriteElements, List<string> linkcheckertransformerStripExtensionPathBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceMaxLinksPerHost"></param>
        /// <param name="serviceSaveExternalLinkReferences"></param>
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo</returns>
        ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceMaxLinksPerHost, bool? serviceSaveExternalLinkReferences);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="htmlparserProcessTags"></param>
        /// <param name="htmlparserPreserveCamelCase"></param>
        /// <returns>ComDayCqRewriterProcessorImplHtmlParserFactoryInfo</returns>
        ComDayCqRewriterProcessorImplHtmlParserFactoryInfo ComDayCqRewriterProcessorImplHtmlParserFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> htmlparserProcessTags, bool? htmlparserPreserveCamelCase);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="excerptProperties"></param>
        /// <param name="cacheMaxEntries"></param>
        /// <param name="cacheEntryLifetime"></param>
        /// <param name="xpathUnion"></param>
        /// <returns>ComDayCqSearchImplBuilderQueryBuilderImplInfo</returns>
        ComDayCqSearchImplBuilderQueryBuilderImplInfo ComDayCqSearchImplBuilderQueryBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excerptProperties, int? cacheMaxEntries, int? cacheEntryLifetime, bool? xpathUnion);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pathBuilderTarget"></param>
        /// <param name="suggestBasepath"></param>
        /// <returns>ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo</returns>
        ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo ComDayCqSearchSuggestImplSuggestionIndexManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathBuilderTarget, string suggestBasepath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSearchpromoteConfighandlerEnabled"></param>
        /// <returns>ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo</returns>
        ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSearchpromoteConfighandlerEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqSearchpromoteConfigurationServerUri"></param>
        /// <param name="cqSearchpromoteConfigurationEnvironment"></param>
        /// <param name="connectionTimeout"></param>
        /// <param name="socketTimeout"></param>
        /// <returns>ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo</returns>
        ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo ComDayCqSearchpromoteImplSearchPromoteServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqSearchpromoteConfigurationServerUri, string cqSearchpromoteConfigurationEnvironment, int? connectionTimeout, int? socketTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqAclsetupRules"></param>
        /// <returns>ComDayCqSecurityACLSetupInfo</returns>
        ComDayCqSecurityACLSetupInfo ComDayCqSecurityACLSetup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAclsetupRules);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerPeriod"></param>
        /// <param name="schedulerConcurrent"></param>
        /// <param name="path"></param>
        /// <param name="workspace"></param>
        /// <param name="keywordsPath"></param>
        /// <param name="asyncEntries"></param>
        /// <returns>ComDayCqStatisticsImplStatisticsServiceImplInfo</returns>
        ComDayCqStatisticsImplStatisticsServiceImplInfo ComDayCqStatisticsImplStatisticsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, string path, string workspace, string keywordsPath, bool? asyncEntries);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="validationEnabled"></param>
        /// <returns>ComDayCqTaggingImplJcrTagManagerFactoryImplInfo</returns>
        ComDayCqTaggingImplJcrTagManagerFactoryImplInfo ComDayCqTaggingImplJcrTagManagerFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? validationEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="ignorePath"></param>
        /// <returns>ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo</returns>
        ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo ComDayCqTaggingImplSearchTagPredicateEvaluator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? ignorePath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <returns>ComDayCqTaggingImplTagGarbageCollectorInfo</returns>
        ComDayCqTaggingImplTagGarbageCollectorInfo ComDayCqTaggingImplTagGarbageCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqPagesupdatehandlerImageresourcetypes"></param>
        /// <returns>ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo</returns>
        ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqContentsyncPathrewritertransformerMappingLinks"></param>
        /// <param name="cqContentsyncPathrewritertransformerMappingClientlibs"></param>
        /// <param name="cqContentsyncPathrewritertransformerMappingImages"></param>
        /// <param name="cqContentsyncPathrewritertransformerAttributePattern"></param>
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryPattern"></param>
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryReplace"></param>
        /// <returns>ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo</returns>
        ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqContentsyncPathrewritertransformerMappingLinks, List<string> cqContentsyncPathrewritertransformerMappingClientlibs, List<string> cqContentsyncPathrewritertransformerMappingImages, string cqContentsyncPathrewritertransformerAttributePattern, string cqContentsyncPathrewritertransformerClientlibraryPattern, string cqContentsyncPathrewritertransformerClientlibraryReplace);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="authoringUIModeServiceDefault"></param>
        /// <returns>ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo</returns>
        ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo ComDayCqWcmCoreImplAuthoringUIModeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authoringUIModeServiceDefault);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="wcmcommandservletDeleteWhitelist"></param>
        /// <returns>ComDayCqWcmCoreImplCommandsWCMCommandServletInfo</returns>
        ComDayCqWcmCoreImplCommandsWCMCommandServletInfo ComDayCqWcmCoreImplCommandsWCMCommandServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> wcmcommandservletDeleteWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="dimDefaultMode"></param>
        /// <param name="dimAppcacheEnabled"></param>
        /// <returns>ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo</returns>
        ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dimDefaultMode, bool? dimAppcacheEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="configured"></param>
        /// <returns>ComDayCqWcmCoreImplEventPageEventAuditListenerInfo</returns>
        ComDayCqWcmCoreImplEventPageEventAuditListenerInfo ComDayCqWcmCoreImplEventPageEventAuditListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configured);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="paths"></param>
        /// <returns>ComDayCqWcmCoreImplEventPagePostProcessorInfo</returns>
        ComDayCqWcmCoreImplEventPagePostProcessorInfo ComDayCqWcmCoreImplEventPagePostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="paths"></param>
        /// <param name="excludedPaths"></param>
        /// <returns>ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo</returns>
        ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo ComDayCqWcmCoreImplEventRepositoryChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths, List<string> excludedPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="paths"></param>
        /// <returns>ComDayCqWcmCoreImplEventTemplatePostProcessorInfo</returns>
        ComDayCqWcmCoreImplEventTemplatePostProcessorInfo ComDayCqWcmCoreImplEventTemplatePostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string paths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="langmgrListPath"></param>
        /// <param name="langmgrCountryDefault"></param>
        /// <returns>ComDayCqWcmCoreImplLanguageManagerImplInfo</returns>
        ComDayCqWcmCoreImplLanguageManagerImplInfo ComDayCqWcmCoreImplLanguageManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string langmgrListPath, List<string> langmgrCountryDefault);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="linkExpiredPrefix"></param>
        /// <param name="linkExpiredRemove"></param>
        /// <param name="linkExpiredSuffix"></param>
        /// <param name="linkInvalidPrefix"></param>
        /// <param name="linkInvalidRemove"></param>
        /// <param name="linkInvalidSuffix"></param>
        /// <param name="linkPredatedPrefix"></param>
        /// <param name="linkPredatedRemove"></param>
        /// <param name="linkPredatedSuffix"></param>
        /// <param name="linkWcmmodes"></param>
        /// <returns>ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo</returns>
        ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string linkExpiredPrefix, bool? linkExpiredRemove, string linkExpiredSuffix, string linkInvalidPrefix, bool? linkInvalidRemove, string linkInvalidSuffix, string linkPredatedPrefix, bool? linkPredatedRemove, string linkPredatedSuffix, List<string> linkWcmmodes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pageInfoProviderPropertyRegexDefault"></param>
        /// <param name="pageInfoProviderPropertyName"></param>
        /// <returns>ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo</returns>
        ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo ComDayCqWcmCoreImplPagePageInfoAggregatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageInfoProviderPropertyRegexDefault, string pageInfoProviderPropertyName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="illegalCharMapping"></param>
        /// <param name="pageSubTreeActivationCheck"></param>
        /// <returns>ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo</returns>
        ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo ComDayCqWcmCoreImplPagePageManagerFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string illegalCharMapping, bool? pageSubTreeActivationCheck);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="contentReferenceConfigResourceTypes"></param>
        /// <returns>ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo</returns>
        ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo ComDayCqWcmCoreImplReferencesContentContentReferenceConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> contentReferenceConfigResourceTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="damShowexpired"></param>
        /// <param name="damShowhidden"></param>
        /// <param name="tagTitleSearch"></param>
        /// <param name="guessTotal"></param>
        /// <param name="damExpiryProperty"></param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? damShowexpired, bool? damShowhidden, bool? tagTitleSearch, string guessTotal, string damExpiryProperty);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="itemResourceTypes"></param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> itemResourceTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="guessTotal"></param>
        /// <param name="tagTitleSearch"></param>
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo</returns>
        ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderPageViewHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string guessTotal, bool? tagTitleSearch);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="scope"></param>
        /// <returns>ComDayCqWcmCoreImplServletsFindReplaceServletInfo</returns>
        ComDayCqWcmCoreImplServletsFindReplaceServletInfo ComDayCqWcmCoreImplServletsFindReplaceServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> scope);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="referencesearchservletMaxReferencesPerPage"></param>
        /// <param name="referencesearchservletMaxPages"></param>
        /// <returns>ComDayCqWcmCoreImplServletsReferenceSearchServletInfo</returns>
        ComDayCqWcmCoreImplServletsReferenceSearchServletInfo ComDayCqWcmCoreImplServletsReferenceSearchServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? referencesearchservletMaxReferencesPerPage, int? referencesearchservletMaxPages);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="workspace"></param>
        /// <param name="dimensions"></param>
        /// <returns>ComDayCqWcmCoreImplServletsThumbnailServletInfo</returns>
        ComDayCqWcmCoreImplServletsThumbnailServletInfo ComDayCqWcmCoreImplServletsThumbnailServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string workspace, List<string> dimensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="nonValidChars"></param>
        /// <returns>ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo</returns>
        ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo ComDayCqWcmCoreImplUtilsDefaultPageNameValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nonValidChars);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultExternalizerDomain"></param>
        /// <returns>ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo</returns>
        ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultExternalizerDomain);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="versionmanagerCreateVersionOnActivation"></param>
        /// <param name="versionmanagerPurgingEnabled"></param>
        /// <param name="versionmanagerPurgePaths"></param>
        /// <param name="versionmanagerIvPaths"></param>
        /// <param name="versionmanagerMaxAgeDays"></param>
        /// <param name="versionmanagerMaxNumberVersions"></param>
        /// <param name="versionmanagerMinNumberVersions"></param>
        /// <returns>ComDayCqWcmCoreImplVersionManagerImplInfo</returns>
        ComDayCqWcmCoreImplVersionManagerImplInfo ComDayCqWcmCoreImplVersionManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? versionmanagerCreateVersionOnActivation, bool? versionmanagerPurgingEnabled, List<string> versionmanagerPurgePaths, List<string> versionmanagerIvPaths, int? versionmanagerMaxAgeDays, int? versionmanagerMaxNumberVersions, int? versionmanagerMinNumberVersions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="versionpurgePaths"></param>
        /// <param name="versionpurgeRecursive"></param>
        /// <param name="versionpurgeMaxVersions"></param>
        /// <param name="versionpurgeMinVersions"></param>
        /// <param name="versionpurgeMaxAgeDays"></param>
        /// <returns>ComDayCqWcmCoreImplVersionPurgeTaskInfo</returns>
        ComDayCqWcmCoreImplVersionPurgeTaskInfo ComDayCqWcmCoreImplVersionPurgeTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> versionpurgePaths, bool? versionpurgeRecursive, int? versionpurgeMaxVersions, int? versionpurgeMinVersions, int? versionpurgeMaxAgeDays);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="wcmdbgfilterEnabled"></param>
        /// <param name="wcmdbgfilterJspDebug"></param>
        /// <returns>ComDayCqWcmCoreImplWCMDebugFilterInfo</returns>
        ComDayCqWcmCoreImplWCMDebugFilterInfo ComDayCqWcmCoreImplWCMDebugFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdbgfilterEnabled, bool? wcmdbgfilterJspDebug);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="wcmdevmodefilterEnabled"></param>
        /// <returns>ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo</returns>
        ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo ComDayCqWcmCoreImplWCMDeveloperModeFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdevmodefilterEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="filterOrder"></param>
        /// <param name="filterScope"></param>
        /// <returns>ComDayCqWcmCoreImplWarpTimeWarpFilterInfo</returns>
        ComDayCqWcmCoreImplWarpTimeWarpFilterInfo ComDayCqWcmCoreImplWarpTimeWarpFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filterOrder, string filterScope);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mvtstatisticsTrackingurl"></param>
        /// <returns>ComDayCqWcmCoreMvtMVTStatisticsImplInfo</returns>
        ComDayCqWcmCoreMvtMVTStatisticsImplInfo ComDayCqWcmCoreMvtMVTStatisticsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mvtstatisticsTrackingurl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pageviewstatisticsTrackingurl"></param>
        /// <param name="pageviewstatisticsTrackingscriptEnabled"></param>
        /// <returns>ComDayCqWcmCoreStatsPageViewStatisticsImplInfo</returns>
        ComDayCqWcmCoreStatsPageViewStatisticsImplInfo ComDayCqWcmCoreStatsPageViewStatisticsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageviewstatisticsTrackingurl, string pageviewstatisticsTrackingscriptEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="wcmfilterMode"></param>
        /// <returns>ComDayCqWcmCoreWCMRequestFilterInfo</returns>
        ComDayCqWcmCoreWCMRequestFilterInfo ComDayCqWcmCoreWCMRequestFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string wcmfilterMode);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="extractFilter"></param>
        /// <returns>ComDayCqWcmDesignimporterDesignPackageImporterInfo</returns>
        ComDayCqWcmDesignimporterDesignPackageImporterInfo ComDayCqWcmDesignimporterDesignPackageImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extractFilter);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="filepattern"></param>
        /// <param name="buildPageNodes"></param>
        /// <param name="buildClientLibs"></param>
        /// <param name="buildCanvasComponent"></param>
        /// <returns>ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo</returns>
        ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplCanvasBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="minThreadPoolSize"></param>
        /// <param name="maxThreadPoolSize"></param>
        /// <returns>ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo</returns>
        ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minThreadPoolSize, int? maxThreadPoolSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="searchPattern"></param>
        /// <param name="replacePattern"></param>
        /// <returns>ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo</returns>
        ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo ComDayCqWcmDesignimporterImplEntryPreprocessorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string searchPattern, string replacePattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="filepattern"></param>
        /// <param name="deviceGroups"></param>
        /// <param name="buildPageNodes"></param>
        /// <param name="buildClientLibs"></param>
        /// <param name="buildCanvasComponent"></param>
        /// <returns>ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo</returns>
        ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, List<string> deviceGroups, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <param name="componentResourceType"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="tagpattern"></param>
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo</returns>
        ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceName"></param>
        /// <param name="slingServletResourceTypes"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="formsFormchooserservletAdvansesearchRequire"></param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormChooserServletInfo</returns>
        ComDayCqWcmFoundationFormsImplFormChooserServletInfo ComDayCqWcmFoundationFormsImplFormChooserServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serviceName, string slingServletResourceTypes, string slingServletSelectors, List<string> slingServletMethods, bool? formsFormchooserservletAdvansesearchRequire);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="formsFormparagraphpostprocessorEnabled"></param>
        /// <param name="formsFormparagraphpostprocessorFormresourcetypes"></param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo</returns>
        ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsFormparagraphpostprocessorEnabled, List<string> formsFormparagraphpostprocessorFormresourcetypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="nameWhitelist"></param>
        /// <param name="allowExpressions"></param>
        /// <returns>ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo</returns>
        ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo ComDayCqWcmFoundationFormsImplFormsHandlingServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nameWhitelist, bool? allowExpressions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletResourceTypes"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="resourceWhitelist"></param>
        /// <param name="resourceBlacklist"></param>
        /// <returns>ComDayCqWcmFoundationFormsImplMailServletInfo</returns>
        ComDayCqWcmFoundationFormsImplMailServletInfo ComDayCqWcmFoundationFormsImplMailServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletSelectors, List<string> resourceWhitelist, string resourceBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="adaptSupportedWidths"></param>
        /// <returns>ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo</returns>
        ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo ComDayCqWcmFoundationImplAdaptiveImageComponentServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> adaptSupportedWidths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="authHttpNologin"></param>
        /// <param name="authHttpRealm"></param>
        /// <param name="authDefaultLoginpage"></param>
        /// <param name="authCredForm"></param>
        /// <param name="authCredUtf8"></param>
        /// <returns>ComDayCqWcmFoundationImplHTTPAuthHandlerInfo</returns>
        ComDayCqWcmFoundationImplHTTPAuthHandlerInfo ComDayCqWcmFoundationImplHTTPAuthHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, bool? authHttpNologin, string authHttpRealm, string authDefaultLoginpage, List<string> authCredForm, List<string> authCredUtf8);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingAuthRequirements"></param>
        /// <returns>ComDayCqWcmFoundationImplPageImpressionsTrackerInfo</returns>
        ComDayCqWcmFoundationImplPageImpressionsTrackerInfo ComDayCqWcmFoundationImplPageImpressionsTracker (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingAuthRequirements);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="excludedResourceTypes"></param>
        /// <returns>ComDayCqWcmFoundationImplPageRedirectServletInfo</returns>
        ComDayCqWcmFoundationImplPageRedirectServletInfo ComDayCqWcmFoundationImplPageRedirectServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excludedResourceTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="defaultAttachmentTypeBlacklist"></param>
        /// <param name="baselineAttachmentTypeBlacklist"></param>
        /// <returns>ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo</returns>
        ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="parameterWhitelist"></param>
        /// <param name="parameterWhitelistPrefixes"></param>
        /// <param name="binaryParameterWhitelist"></param>
        /// <param name="modifierWhitelist"></param>
        /// <param name="operationWhitelist"></param>
        /// <param name="operationWhitelistPrefixes"></param>
        /// <param name="typehintWhitelist"></param>
        /// <param name="resourcetypeWhitelist"></param>
        /// <returns>ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo</returns>
        ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="deviceInfoTransformerEnabled"></param>
        /// <param name="deviceInfoTransformerCssStyle"></param>
        /// <returns>ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo</returns>
        ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deviceInfoTransformerEnabled, string deviceInfoTransformerCssStyle);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="redirectEnabled"></param>
        /// <param name="redirectStatsEnabled"></param>
        /// <param name="redirectExtensions"></param>
        /// <param name="redirectPaths"></param>
        /// <returns>ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo</returns>
        ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo ComDayCqWcmMobileCoreImplRedirectRedirectFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? redirectEnabled, bool? redirectStatsEnabled, List<string> redirectExtensions, List<string> redirectPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <param name="contentcopyactionOrderStyle"></param>
        /// <returns>ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo ComDayCqWcmMsmImplActionsContentCopyActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, string contentcopyactionOrderStyle);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <returns>ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo ComDayCqWcmMsmImplActionsContentDeleteActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <param name="cqWcmMsmActionIgnoredMixin"></param>
        /// <returns>ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsContentUpdateActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, List<string> cqWcmMsmActionIgnoredMixin);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <returns>ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo ComDayCqWcmMsmImplActionsOrderChildrenActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <param name="cqWcmMsmImplActionsPagemovePropReferenceUpdate"></param>
        /// <returns>ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo ComDayCqWcmMsmImplActionsPageMoveActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <param name="cqWcmMsmImplActionReferencesupdatePropUpdateNested"></param>
        /// <returns>ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmMsmActionExcludednodetypes"></param>
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param>
        /// <param name="cqWcmMsmActionExcludedprops"></param>
        /// <returns>ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo</returns>
        ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo ComDayCqWcmMsmImplActionsVersionCopyActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="liverelationshipmgrRelationsconfigDefault"></param>
        /// <returns>ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo</returns>
        ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo ComDayCqWcmMsmImplLiveRelationshipManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string liverelationshipmgrRelationsconfigDefault);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="rolloutmgrExcludedpropsDefault"></param>
        /// <param name="rolloutmgrExcludedparagraphpropsDefault"></param>
        /// <param name="rolloutmgrExcludednodetypesDefault"></param>
        /// <param name="rolloutmgrThreadpoolMaxsize"></param>
        /// <param name="rolloutmgrThreadpoolMaxshutdowntime"></param>
        /// <param name="rolloutmgrThreadpoolPriority"></param>
        /// <param name="rolloutmgrCommitSize"></param>
        /// <param name="rolloutmgrConflicthandlingEnabled"></param>
        /// <returns>ComDayCqWcmMsmImplRolloutManagerImplInfo</returns>
        ComDayCqWcmMsmImplRolloutManagerImplInfo ComDayCqWcmMsmImplRolloutManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> rolloutmgrExcludedpropsDefault, List<string> rolloutmgrExcludedparagraphpropsDefault, List<string> rolloutmgrExcludednodetypesDefault, int? rolloutmgrThreadpoolMaxsize, int? rolloutmgrThreadpoolMaxshutdowntime, string rolloutmgrThreadpoolPriority, int? rolloutmgrCommitSize, bool? rolloutmgrConflicthandlingEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="auditlogservletDefaultEventsCount"></param>
        /// <param name="auditlogservletDefaultPath"></param>
        /// <returns>ComDayCqWcmMsmImplServletsAuditLogServletInfo</returns>
        ComDayCqWcmMsmImplServletsAuditLogServletInfo ComDayCqWcmMsmImplServletsAuditLogServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? auditlogservletDefaultEventsCount, string auditlogservletDefaultPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="emailFrom"></param>
        /// <returns>ComDayCqWcmNotificationEmailImplEmailChannelInfo</returns>
        ComDayCqWcmNotificationEmailImplEmailChannelInfo ComDayCqWcmNotificationEmailImplEmailChannel (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailFrom);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventTopics"></param>
        /// <returns>ComDayCqWcmNotificationImplNotificationManagerImplInfo</returns>
        ComDayCqWcmNotificationImplNotificationManagerImplInfo ComDayCqWcmNotificationImplNotificationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> eventTopics);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="comDayCqWcmScriptingBvpScriptEngines"></param>
        /// <returns>ComDayCqWcmScriptingImplBVPManagerInfo</returns>
        ComDayCqWcmScriptingImplBVPManagerInfo ComDayCqWcmScriptingImplBVPManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqWcmScriptingBvpScriptEngines);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cqWcmUndoEnabled"></param>
        /// <param name="cqWcmUndoPath"></param>
        /// <param name="cqWcmUndoValidity"></param>
        /// <param name="cqWcmUndoSteps"></param>
        /// <param name="cqWcmUndoPersistence"></param>
        /// <param name="cqWcmUndoPersistenceMode"></param>
        /// <param name="cqWcmUndoMarkermode"></param>
        /// <param name="cqWcmUndoWhitelist"></param>
        /// <param name="cqWcmUndoBlacklist"></param>
        /// <returns>ComDayCqWcmUndoUndoConfigInfo</returns>
        ComDayCqWcmUndoUndoConfigInfo ComDayCqWcmUndoUndoConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqWcmUndoEnabled, string cqWcmUndoPath, int? cqWcmUndoValidity, int? cqWcmUndoSteps, string cqWcmUndoPersistence, bool? cqWcmUndoPersistenceMode, string cqWcmUndoMarkermode, List<string> cqWcmUndoWhitelist, List<string> cqWcmUndoBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="flushAgents"></param>
        /// <returns>ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo</returns>
        ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo ComDayCqWcmWebservicesupportImplReplicationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="eventFilter"></param>
        /// <param name="minThreadPoolSize"></param>
        /// <param name="maxThreadPoolSize"></param>
        /// <param name="cqWcmWorkflowTerminateOnActivate"></param>
        /// <param name="cqWcmWorklfowTerminateExclusionList"></param>
        /// <returns>ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo</returns>
        ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? minThreadPoolSize, int? maxThreadPoolSize, bool? cqWcmWorkflowTerminateOnActivate, List<string> cqWcmWorklfowTerminateExclusionList);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="workflowpackageinfoproviderFilter"></param>
        /// <param name="workflowpackageinfoproviderFilterRootpath"></param>
        /// <returns>ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo</returns>
        ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> workflowpackageinfoproviderFilter, string workflowpackageinfoproviderFilterRootpath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="htmllibmanagerClientmanager"></param>
        /// <param name="htmllibmanagerDebug"></param>
        /// <param name="htmllibmanagerDebugConsole"></param>
        /// <param name="htmllibmanagerDebugInitJs"></param>
        /// <param name="htmllibmanagerDefaultthemename"></param>
        /// <param name="htmllibmanagerDefaultuserthemename"></param>
        /// <param name="htmllibmanagerFirebuglitePath"></param>
        /// <param name="htmllibmanagerForceCQUrlInfo"></param>
        /// <param name="htmllibmanagerGzip"></param>
        /// <param name="htmllibmanagerMaxage"></param>
        /// <param name="htmllibmanagerMaxDataUriSize"></param>
        /// <param name="htmllibmanagerMinify"></param>
        /// <param name="htmllibmanagerPathList"></param>
        /// <param name="htmllibmanagerTiming"></param>
        /// <returns>ComDayCqWidgetImplHtmlLibraryManagerImplInfo</returns>
        ComDayCqWidgetImplHtmlLibraryManagerImplInfo ComDayCqWidgetImplHtmlLibraryManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string htmllibmanagerClientmanager, bool? htmllibmanagerDebug, bool? htmllibmanagerDebugConsole, string htmllibmanagerDebugInitJs, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerFirebuglitePath, bool? htmllibmanagerForceCQUrlInfo, bool? htmllibmanagerGzip, int? htmllibmanagerMaxage, int? htmllibmanagerMaxDataUriSize, bool? htmllibmanagerMinify, List<string> htmllibmanagerPathList, bool? htmllibmanagerTiming);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="extendableWidgets"></param>
        /// <param name="widgetextensionproviderDebug"></param>
        /// <returns>ComDayCqWidgetImplWidgetExtensionProviderImplInfo</returns>
        ComDayCqWidgetImplWidgetExtensionProviderImplInfo ComDayCqWidgetImplWidgetExtensionProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extendableWidgets, bool? widgetextensionproviderDebug);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="fromAddress"></param>
        /// <param name="hostPrefix"></param>
        /// <param name="notifyOnabort"></param>
        /// <param name="notifyOncomplete"></param>
        /// <param name="notifyOncontainercomplete"></param>
        /// <param name="notifyUseronly"></param>
        /// <returns>ComDayCqWorkflowImplEmailEMailNotificationServiceInfo</returns>
        ComDayCqWorkflowImplEmailEMailNotificationServiceInfo ComDayCqWorkflowImplEmailEMailNotificationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string hostPrefix, bool? notifyOnabort, bool? notifyOncomplete, bool? notifyOncontainercomplete, bool? notifyUseronly);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="notifyOnupdate"></param>
        /// <param name="notifyOncomplete"></param>
        /// <returns>ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo</returns>
        ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo ComDayCqWorkflowImplEmailTaskEMailNotificationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? notifyOnupdate, bool? notifyOncomplete);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="tokenRequiredAttr"></param>
        /// <param name="tokenAlternateUrl"></param>
        /// <param name="tokenEncapsulated"></param>
        /// <param name="skipTokenRefresh"></param>
        /// <returns>ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo</returns>
        ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string tokenRequiredAttr, string tokenAlternateUrl, bool? tokenEncapsulated, List<string> skipTokenRefresh);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enableTokenCleanupTask"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="batchSize"></param>
        /// <returns>ComDayCrxSecurityTokenImplTokenCleanupTaskInfo</returns>
        ComDayCrxSecurityTokenImplTokenCleanupTaskInfo ComDayCrxSecurityTokenImplTokenCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableTokenCleanupTask, string schedulerExpression, int? batchSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="supportedLocales"></param>
        /// <param name="localizableProperties"></param>
        /// <returns>GuideLocalizationServiceInfo</returns>
        GuideLocalizationServiceInfo GuideLocalizationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedLocales, List<string> localizableProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="priority"></param>
        /// <returns>MessagingUserComponentFactoryInfo</returns>
        MessagingUserComponentFactoryInfo MessagingUserComponentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="attributeChangeNotificationEnabled"></param>
        /// <returns>OrgApacheAriesJmxFrameworkStateConfigInfo</returns>
        OrgApacheAriesJmxFrameworkStateConfigInfo OrgApacheAriesJmxFrameworkStateConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? attributeChangeNotificationEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheFelixEventadminThreadPoolSize"></param>
        /// <param name="orgApacheFelixEventadminAsyncToSyncThreadRatio"></param>
        /// <param name="orgApacheFelixEventadminTimeout"></param>
        /// <param name="orgApacheFelixEventadminRequireTopic"></param>
        /// <param name="orgApacheFelixEventadminIgnoreTimeout"></param>
        /// <param name="orgApacheFelixEventadminIgnoreTopic"></param>
        /// <returns>OrgApacheFelixEventadminImplEventAdminInfo</returns>
        OrgApacheFelixEventadminImplEventAdminInfo OrgApacheFelixEventadminImplEventAdmin (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheFelixEventadminThreadPoolSize, decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio, int? orgApacheFelixEventadminTimeout, bool? orgApacheFelixEventadminRequireTopic, List<string> orgApacheFelixEventadminIgnoreTimeout, List<string> orgApacheFelixEventadminIgnoreTopic);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheFelixHttpHost"></param>
        /// <param name="orgApacheFelixHttpEnable"></param>
        /// <param name="orgOsgiServiceHttpPort"></param>
        /// <param name="orgApacheFelixHttpTimeout"></param>
        /// <param name="orgApacheFelixHttpsEnable"></param>
        /// <param name="orgOsgiServiceHttpPortSecure"></param>
        /// <param name="orgApacheFelixHttpsKeystore"></param>
        /// <param name="orgApacheFelixHttpsKeystorePassword"></param>
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"></param>
        /// <param name="orgApacheFelixHttpsTruststore"></param>
        /// <param name="orgApacheFelixHttpsTruststorePassword"></param>
        /// <param name="orgApacheFelixHttpsClientcertificate"></param>
        /// <param name="orgApacheFelixHttpContextPath"></param>
        /// <param name="orgApacheFelixHttpMbeans"></param>
        /// <param name="orgApacheFelixHttpSessionTimeout"></param>
        /// <param name="orgApacheFelixHttpJettyThreadpoolMax"></param>
        /// <param name="orgApacheFelixHttpJettyAcceptors"></param>
        /// <param name="orgApacheFelixHttpJettySelectors"></param>
        /// <param name="orgApacheFelixHttpJettyHeaderBufferSize"></param>
        /// <param name="orgApacheFelixHttpJettyRequestBufferSize"></param>
        /// <param name="orgApacheFelixHttpJettyResponseBufferSize"></param>
        /// <param name="orgApacheFelixHttpJettyMaxFormSize"></param>
        /// <param name="orgApacheFelixHttpPathExclusions"></param>
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesExcluded"></param>
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesIncluded"></param>
        /// <param name="orgApacheFelixHttpJettySendServerHeader"></param>
        /// <param name="orgApacheFelixHttpsJettyProtocolsIncluded"></param>
        /// <param name="orgApacheFelixHttpsJettyProtocolsExcluded"></param>
        /// <param name="orgApacheFelixProxyLoadBalancerConnectionEnable"></param>
        /// <param name="orgApacheFelixHttpsJettyRenegotiateAllowed"></param>
        /// <param name="orgApacheFelixHttpsJettySessionCookieHttpOnly"></param>
        /// <param name="orgApacheFelixHttpsJettySessionCookieSecure"></param>
        /// <param name="orgEclipseJettyServletSessionIdPathParameterName"></param>
        /// <param name="orgEclipseJettyServletCheckingRemoteSessionIdEncoding"></param>
        /// <param name="orgEclipseJettyServletSessionCookie"></param>
        /// <param name="orgEclipseJettyServletSessionDomain"></param>
        /// <param name="orgEclipseJettyServletSessionPath"></param>
        /// <param name="orgEclipseJettyServletMaxAge"></param>
        /// <param name="orgApacheFelixHttpName"></param>
        /// <param name="orgApacheFelixJettyGziphandlerEnable"></param>
        /// <param name="orgApacheFelixJettyGzipMinGzipSize"></param>
        /// <param name="orgApacheFelixJettyGzipCompressionLevel"></param>
        /// <param name="orgApacheFelixJettyGzipInflateBufferSize"></param>
        /// <param name="orgApacheFelixJettyGzipSyncFlush"></param>
        /// <param name="orgApacheFelixJettyGzipExcludedUserAgents"></param>
        /// <param name="orgApacheFelixJettyGzipIncludedMethods"></param>
        /// <param name="orgApacheFelixJettyGzipExcludedMethods"></param>
        /// <param name="orgApacheFelixJettyGzipIncludedPaths"></param>
        /// <param name="orgApacheFelixJettyGzipExcludedPaths"></param>
        /// <param name="orgApacheFelixJettyGzipIncludedMimeTypes"></param>
        /// <param name="orgApacheFelixJettyGzipExcludedMimeTypes"></param>
        /// <param name="orgApacheFelixHttpSessionInvalidate"></param>
        /// <param name="orgApacheFelixHttpSessionUniqueid"></param>
        /// <returns>OrgApacheFelixHttpInfo</returns>
        OrgApacheFelixHttpInfo OrgApacheFelixHttp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheFelixHttpHost, bool? orgApacheFelixHttpEnable, int? orgOsgiServiceHttpPort, int? orgApacheFelixHttpTimeout, bool? orgApacheFelixHttpsEnable, int? orgOsgiServiceHttpPortSecure, string orgApacheFelixHttpsKeystore, string orgApacheFelixHttpsKeystorePassword, string orgApacheFelixHttpsKeystoreKeyPassword, string orgApacheFelixHttpsTruststore, string orgApacheFelixHttpsTruststorePassword, string orgApacheFelixHttpsClientcertificate, string orgApacheFelixHttpContextPath, bool? orgApacheFelixHttpMbeans, int? orgApacheFelixHttpSessionTimeout, int? orgApacheFelixHttpJettyThreadpoolMax, int? orgApacheFelixHttpJettyAcceptors, int? orgApacheFelixHttpJettySelectors, int? orgApacheFelixHttpJettyHeaderBufferSize, int? orgApacheFelixHttpJettyRequestBufferSize, int? orgApacheFelixHttpJettyResponseBufferSize, int? orgApacheFelixHttpJettyMaxFormSize, List<string> orgApacheFelixHttpPathExclusions, List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded, bool? orgApacheFelixHttpJettySendServerHeader, List<string> orgApacheFelixHttpsJettyProtocolsIncluded, List<string> orgApacheFelixHttpsJettyProtocolsExcluded, bool? orgApacheFelixProxyLoadBalancerConnectionEnable, bool? orgApacheFelixHttpsJettyRenegotiateAllowed, bool? orgApacheFelixHttpsJettySessionCookieHttpOnly, bool? orgApacheFelixHttpsJettySessionCookieSecure, string orgEclipseJettyServletSessionIdPathParameterName, bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding, string orgEclipseJettyServletSessionCookie, string orgEclipseJettyServletSessionDomain, string orgEclipseJettyServletSessionPath, int? orgEclipseJettyServletMaxAge, string orgApacheFelixHttpName, bool? orgApacheFelixJettyGziphandlerEnable, int? orgApacheFelixJettyGzipMinGzipSize, int? orgApacheFelixJettyGzipCompressionLevel, int? orgApacheFelixJettyGzipInflateBufferSize, bool? orgApacheFelixJettyGzipSyncFlush, List<string> orgApacheFelixJettyGzipExcludedUserAgents, List<string> orgApacheFelixJettyGzipIncludedMethods, List<string> orgApacheFelixJettyGzipExcludedMethods, List<string> orgApacheFelixJettyGzipIncludedPaths, List<string> orgApacheFelixJettyGzipExcludedPaths, List<string> orgApacheFelixJettyGzipIncludedMimeTypes, List<string> orgApacheFelixJettyGzipExcludedMimeTypes, bool? orgApacheFelixHttpSessionInvalidate, bool? orgApacheFelixHttpSessionUniqueid);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="sslForwardHeader"></param>
        /// <param name="sslForwardValue"></param>
        /// <param name="sslForwardCertHeader"></param>
        /// <param name="rewriteAbsoluteUrls"></param>
        /// <returns>OrgApacheFelixHttpSslfilterSslFilterInfo</returns>
        OrgApacheFelixHttpSslfilterSslFilterInfo OrgApacheFelixHttpSslfilterSslFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string sslForwardHeader, string sslForwardValue, string sslForwardCertHeader, bool? rewriteAbsoluteUrls);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jaasControlFlag"></param>
        /// <param name="jaasRanking"></param>
        /// <param name="jaasRealmName"></param>
        /// <param name="jaasClassname"></param>
        /// <param name="jaasOptions"></param>
        /// <returns>OrgApacheFelixJaasConfigurationFactoryInfo</returns>
        OrgApacheFelixJaasConfigurationFactoryInfo OrgApacheFelixJaasConfigurationFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasControlFlag, int? jaasRanking, string jaasRealmName, string jaasClassname, List<string> jaasOptions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jaasDefaultRealmName"></param>
        /// <param name="jaasConfigProviderName"></param>
        /// <param name="jaasGlobalConfigPolicy"></param>
        /// <returns>OrgApacheFelixJaasConfigurationSpiInfo</returns>
        OrgApacheFelixJaasConfigurationSpiInfo OrgApacheFelixJaasConfigurationSpi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasDefaultRealmName, string jaasConfigProviderName, string jaasGlobalConfigPolicy);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="dsLoglevel"></param>
        /// <param name="dsFactoryEnabled"></param>
        /// <param name="dsDelayedKeepInstances"></param>
        /// <param name="dsLockTimeoutMilliseconds"></param>
        /// <param name="dsStopTimeoutMilliseconds"></param>
        /// <param name="dsGlobalExtender"></param>
        /// <returns>OrgApacheFelixScrScrServiceInfo</returns>
        OrgApacheFelixScrScrServiceInfo OrgApacheFelixScrScrService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? dsLoglevel, bool? dsFactoryEnabled, bool? dsDelayedKeepInstances, int? dsLockTimeoutMilliseconds, int? dsStopTimeoutMilliseconds, bool? dsGlobalExtender);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="componentsList"></param>
        /// <param name="type"></param>
        /// <returns>OrgApacheFelixSystemreadyImplComponentsCheckInfo</returns>
        OrgApacheFelixSystemreadyImplComponentsCheckInfo OrgApacheFelixSystemreadyImplComponentsCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsList, string type);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="timeout"></param>
        /// <param name="targetStartLevel"></param>
        /// <param name="targetStartLevelPropName"></param>
        /// <param name="type"></param>
        /// <returns>OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo</returns>
        OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo OrgApacheFelixSystemreadyImplFrameworkStartCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeout, int? targetStartLevel, string targetStartLevelPropName, string type);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="servicesList"></param>
        /// <param name="type"></param>
        /// <returns>OrgApacheFelixSystemreadyImplServicesCheckInfo</returns>
        OrgApacheFelixSystemreadyImplServicesCheckInfo OrgApacheFelixSystemreadyImplServicesCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servicesList, string type);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="osgiHttpWhiteboardServletPattern"></param>
        /// <param name="osgiHttpWhiteboardContextSelect"></param>
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo</returns>
        OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo OrgApacheFelixSystemreadyImplServletSystemAliveServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="osgiHttpWhiteboardServletPattern"></param>
        /// <param name="osgiHttpWhiteboardContextSelect"></param>
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo</returns>
        OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo OrgApacheFelixSystemreadyImplServletSystemReadyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pollInterval"></param>
        /// <returns>OrgApacheFelixSystemreadySystemReadyMonitorInfo</returns>
        OrgApacheFelixSystemreadySystemReadyMonitorInfo OrgApacheFelixSystemreadySystemReadyMonitor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? pollInterval);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="managerRoot"></param>
        /// <param name="httpServiceFilter"></param>
        /// <param name="defaultRender"></param>
        /// <param name="realm"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="category"></param>
        /// <param name="locale"></param>
        /// <param name="loglevel"></param>
        /// <param name="plugins"></param>
        /// <returns>OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo</returns>
        OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo OrgApacheFelixWebconsoleInternalServletOsgiManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string managerRoot, string httpServiceFilter, string defaultRender, string realm, string username, string password, string category, string locale, int? loglevel, string plugins);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxSize"></param>
        /// <returns>OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo</returns>
        OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo OrgApacheFelixWebconsolePluginsEventInternalPluginServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="felixMemoryusageDumpThreshold"></param>
        /// <param name="felixMemoryusageDumpInterval"></param>
        /// <param name="felixMemoryusageDumpLocation"></param>
        /// <returns>OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo</returns>
        OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? felixMemoryusageDumpThreshold, int? felixMemoryusageDumpInterval, string felixMemoryusageDumpLocation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="proxyEnabled"></param>
        /// <param name="proxyHost"></param>
        /// <param name="proxyPort"></param>
        /// <param name="proxyUser"></param>
        /// <param name="proxyPassword"></param>
        /// <param name="proxyExceptions"></param>
        /// <returns>OrgApacheHttpProxyconfiguratorInfo</returns>
        OrgApacheHttpProxyconfiguratorInfo OrgApacheHttpProxyconfigurator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, int? proxyPort, string proxyUser, string proxyPassword, List<string> proxyExceptions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="dir"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo</returns>
        OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dir);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo</returns>
        OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mongouri"></param>
        /// <param name="db"></param>
        /// <param name="socketKeepAlive"></param>
        /// <param name="cache"></param>
        /// <param name="nodeCachePercentage"></param>
        /// <param name="prevDocCachePercentage"></param>
        /// <param name="childrenCachePercentage"></param>
        /// <param name="diffCachePercentage"></param>
        /// <param name="cacheSegmentCount"></param>
        /// <param name="cacheStackMoveDistance"></param>
        /// <param name="blobCacheSize"></param>
        /// <param name="persistentCache"></param>
        /// <param name="journalCache"></param>
        /// <param name="customBlobStore"></param>
        /// <param name="journalGCInterval"></param>
        /// <param name="journalGCMaxAge"></param>
        /// <param name="prefetchExternalChanges"></param>
        /// <param name="role"></param>
        /// <param name="versionGcMaxAgeInSecs"></param>
        /// <param name="versionGCExpression"></param>
        /// <param name="versionGCTimeLimitInSecs"></param>
        /// <param name="blobGcMaxAgeInSecs"></param>
        /// <param name="blobTrackSnapshotIntervalInSecs"></param>
        /// <param name="repositoryHome"></param>
        /// <param name="maxReplicationLagInSecs"></param>
        /// <param name="documentStoreType"></param>
        /// <param name="bundlingDisabled"></param>
        /// <param name="updateLimit"></param>
        /// <param name="persistentCacheIncludes"></param>
        /// <param name="leaseCheckMode"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mongouri, string db, bool? socketKeepAlive, int? cache, int? nodeCachePercentage, int? prevDocCachePercentage, int? childrenCachePercentage, int? diffCachePercentage, int? cacheSegmentCount, int? cacheStackMoveDistance, int? blobCacheSize, string persistentCache, string journalCache, bool? customBlobStore, int? journalGCInterval, int? journalGCMaxAge, bool? prefetchExternalChanges, string role, int? versionGcMaxAgeInSecs, string versionGCExpression, int? versionGCTimeLimitInSecs, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string repositoryHome, int? maxReplicationLagInSecs, string documentStoreType, bool? bundlingDisabled, int? updateLimit, List<string> persistentCacheIncludes, string leaseCheckMode);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="persistentCacheIncludes"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> persistentCacheIncludes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="includedPaths"></param>
        /// <param name="enableAsyncObserver"></param>
        /// <param name="observerQueueSize"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo</returns>
        OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includedPaths, bool? enableAsyncObserver, int? observerQueueSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="asyncConfigs"></param>
        /// <param name="leaseTimeOutMinutes"></param>
        /// <param name="failingIndexTimeoutSeconds"></param>
        /// <param name="errorWarnIntervalSeconds"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> asyncConfigs, int? leaseTimeOutMinutes, int? failingIndexTimeoutSeconds, int? errorWarnIntervalSeconds);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="disabled"></param>
        /// <param name="debug"></param>
        /// <param name="localIndexDir"></param>
        /// <param name="enableOpenIndexAsync"></param>
        /// <param name="threadPoolSize"></param>
        /// <param name="prefetchIndexFiles"></param>
        /// <param name="extractedTextCacheSizeInMB"></param>
        /// <param name="extractedTextCacheExpiryInSecs"></param>
        /// <param name="alwaysUsePreExtractedCache"></param>
        /// <param name="booleanClauseLimit"></param>
        /// <param name="enableHybridIndexing"></param>
        /// <param name="hybridQueueSize"></param>
        /// <param name="disableStoredIndexDefinition"></param>
        /// <param name="deletedBlobsCollectionEnabled"></param>
        /// <param name="propIndexCleanerIntervalInSecs"></param>
        /// <param name="enableSingleBlobIndexFiles"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled, bool? debug, string localIndexDir, bool? enableOpenIndexAsync, int? threadPoolSize, bool? prefetchIndexFiles, int? extractedTextCacheSizeInMB, int? extractedTextCacheExpiryInSecs, bool? alwaysUsePreExtractedCache, int? booleanClauseLimit, bool? enableHybridIndexing, int? hybridQueueSize, bool? disableStoredIndexDefinition, bool? deletedBlobsCollectionEnabled, int? propIndexCleanerIntervalInSecs, bool? enableSingleBlobIndexFiles);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="solrHomePath"></param>
        /// <param name="solrCoreName"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHomePath, string solrCoreName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="pathDescField"></param>
        /// <param name="pathChildField"></param>
        /// <param name="pathParentField"></param>
        /// <param name="pathExactField"></param>
        /// <param name="catchAllField"></param>
        /// <param name="collapsedPathField"></param>
        /// <param name="pathDepthField"></param>
        /// <param name="commitPolicy"></param>
        /// <param name="rows"></param>
        /// <param name="pathRestrictions"></param>
        /// <param name="propertyRestrictions"></param>
        /// <param name="primarytypesRestrictions"></param>
        /// <param name="ignoredProperties"></param>
        /// <param name="usedProperties"></param>
        /// <param name="typeMappings"></param>
        /// <param name="propertyMappings"></param>
        /// <param name="collapseJcrcontentNodes"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathDescField, string pathChildField, string pathParentField, string pathExactField, string catchAllField, string collapsedPathField, string pathDepthField, string commitPolicy, int? rows, bool? pathRestrictions, bool? propertyRestrictions, bool? primarytypesRestrictions, List<string> ignoredProperties, List<string> usedProperties, List<string> typeMappings, List<string> propertyMappings, bool? collapseJcrcontentNodes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="solrHttpUrl"></param>
        /// <param name="solrZkHost"></param>
        /// <param name="solrCollection"></param>
        /// <param name="solrSocketTimeout"></param>
        /// <param name="solrConnectionTimeout"></param>
        /// <param name="solrShardsNo"></param>
        /// <param name="solrReplicationFactor"></param>
        /// <param name="solrConfDir"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHttpUrl, string solrZkHost, string solrCollection, int? solrSocketTimeout, int? solrConnectionTimeout, int? solrShardsNo, int? solrReplicationFactor, string solrConfDir);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queryAggregation"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? queryAggregation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serverType"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo</returns>
        OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serverType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerType"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo</returns>
        OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxItems"></param>
        /// <param name="maxPathDepth"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo</returns>
        OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxItems, int? maxPathDepth, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queryLimitInMemory"></param>
        /// <param name="queryLimitReads"></param>
        /// <param name="queryFailTraversal"></param>
        /// <param name="fastQuerySize"></param>
        /// <returns>OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo</returns>
        OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo OrgApacheJackrabbitOakQueryQueryEngineSettingsService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimitInMemory, int? queryLimitReads, bool? queryFailTraversal, bool? fastQuerySize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheJackrabbitOakAuthenticationAppName"></param>
        /// <param name="orgApacheJackrabbitOakAuthenticationConfigSpiName"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheJackrabbitOakAuthenticationAppName, string orgApacheJackrabbitOakAuthenticationConfigSpiName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerName"></param>
        /// <param name="hostName"></param>
        /// <param name="hostPort"></param>
        /// <param name="hostSsl"></param>
        /// <param name="hostTls"></param>
        /// <param name="hostNoCertCheck"></param>
        /// <param name="bindDn"></param>
        /// <param name="bindPassword"></param>
        /// <param name="searchTimeout"></param>
        /// <param name="adminPoolMaxActive"></param>
        /// <param name="adminPoolLookupOnValidate"></param>
        /// <param name="userPoolMaxActive"></param>
        /// <param name="userPoolLookupOnValidate"></param>
        /// <param name="userBaseDN"></param>
        /// <param name="userObjectclass"></param>
        /// <param name="userIdAttribute"></param>
        /// <param name="userExtraFilter"></param>
        /// <param name="userMakeDnPath"></param>
        /// <param name="groupBaseDN"></param>
        /// <param name="groupObjectclass"></param>
        /// <param name="groupNameAttribute"></param>
        /// <param name="groupExtraFilter"></param>
        /// <param name="groupMakeDnPath"></param>
        /// <param name="groupMemberAttribute"></param>
        /// <param name="useUidForExtId"></param>
        /// <param name="customattributes"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, string hostName, int? hostPort, bool? hostSsl, bool? hostTls, bool? hostNoCertCheck, string bindDn, string bindPassword, string searchTimeout, int? adminPoolMaxActive, bool? adminPoolLookupOnValidate, int? userPoolMaxActive, bool? userPoolLookupOnValidate, string userBaseDN, List<string> userObjectclass, string userIdAttribute, string userExtraFilter, bool? userMakeDnPath, string groupBaseDN, List<string> groupObjectclass, string groupNameAttribute, string groupExtraFilter, bool? groupMakeDnPath, string groupMemberAttribute, bool? useUidForExtId, List<string> customattributes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="tokenExpiration"></param>
        /// <param name="tokenLength"></param>
        /// <param name="tokenRefresh"></param>
        /// <param name="tokenCleanupThreshold"></param>
        /// <param name="passwordHashAlgorithm"></param>
        /// <param name="passwordHashIterations"></param>
        /// <param name="passwordSaltSize"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tokenExpiration, string tokenLength, bool? tokenRefresh, int? tokenCleanupThreshold, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="permissionsJr2"></param>
        /// <param name="importBehavior"></param>
        /// <param name="readPaths"></param>
        /// <param name="administrativePrincipals"></param>
        /// <param name="configurationRanking"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo</returns>
        OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string permissionsJr2, string importBehavior, List<string> readPaths, List<string> administrativePrincipals, int? configurationRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="requiredServicePids"></param>
        /// <param name="authorizationCompositionType"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo</returns>
        OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> requiredServicePids, string authorizationCompositionType);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="length"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo</returns>
        OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? length);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="usersPath"></param>
        /// <param name="groupsPath"></param>
        /// <param name="systemRelativePath"></param>
        /// <param name="defaultDepth"></param>
        /// <param name="importBehavior"></param>
        /// <param name="passwordHashAlgorithm"></param>
        /// <param name="passwordHashIterations"></param>
        /// <param name="passwordSaltSize"></param>
        /// <param name="omitAdminPw"></param>
        /// <param name="supportAutoSave"></param>
        /// <param name="passwordMaxAge"></param>
        /// <param name="initialPasswordChange"></param>
        /// <param name="passwordHistorySize"></param>
        /// <param name="passwordExpiryForAdmin"></param>
        /// <param name="cacheExpiration"></param>
        /// <param name="enableRFC7613UsercaseMappedProfile"></param>
        /// <returns>OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo</returns>
        OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string usersPath, string groupsPath, string systemRelativePath, int? defaultDepth, string importBehavior, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize, bool? omitAdminPw, bool? supportAutoSave, int? passwordMaxAge, bool? initialPasswordChange, int? passwordHistorySize, bool? passwordExpiryForAdmin, int? cacheExpiration, bool? enableRFC7613UsercaseMappedProfile);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="accountName"></param>
        /// <param name="containerName"></param>
        /// <param name="accessKey"></param>
        /// <param name="rootPath"></param>
        /// <param name="connectionURL"></param>
        /// <returns>OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string accountName, string containerName, string accessKey, string rootPath, string connectionURL);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="repositoryHome"></param>
        /// <param name="tarmkMode"></param>
        /// <param name="tarmkSize"></param>
        /// <param name="segmentCacheSize"></param>
        /// <param name="stringCacheSize"></param>
        /// <param name="templateCacheSize"></param>
        /// <param name="stringDeduplicationCacheSize"></param>
        /// <param name="templateDeduplicationCacheSize"></param>
        /// <param name="nodeDeduplicationCacheSize"></param>
        /// <param name="pauseCompaction"></param>
        /// <param name="compactionRetryCount"></param>
        /// <param name="compactionForceTimeout"></param>
        /// <param name="compactionSizeDeltaEstimation"></param>
        /// <param name="compactionDisableEstimation"></param>
        /// <param name="compactionRetainedGenerations"></param>
        /// <param name="compactionMemoryThreshold"></param>
        /// <param name="compactionProgressLog"></param>
        /// <param name="standby"></param>
        /// <param name="customBlobStore"></param>
        /// <param name="customSegmentStore"></param>
        /// <param name="splitPersistence"></param>
        /// <param name="repositoryBackupDir"></param>
        /// <param name="blobGcMaxAgeInSecs"></param>
        /// <param name="blobTrackSnapshotIntervalInSecs"></param>
        /// <param name="role"></param>
        /// <param name="registerDescriptors"></param>
        /// <param name="dispatchChanges"></param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string role, bool? registerDescriptors, bool? dispatchChanges);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="commitsTrackerWriterGroups"></param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> commitsTrackerWriterGroups);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="repositoryHome"></param>
        /// <param name="tarmkMode"></param>
        /// <param name="tarmkSize"></param>
        /// <param name="segmentCacheSize"></param>
        /// <param name="stringCacheSize"></param>
        /// <param name="templateCacheSize"></param>
        /// <param name="stringDeduplicationCacheSize"></param>
        /// <param name="templateDeduplicationCacheSize"></param>
        /// <param name="nodeDeduplicationCacheSize"></param>
        /// <param name="pauseCompaction"></param>
        /// <param name="compactionRetryCount"></param>
        /// <param name="compactionForceTimeout"></param>
        /// <param name="compactionSizeDeltaEstimation"></param>
        /// <param name="compactionDisableEstimation"></param>
        /// <param name="compactionRetainedGenerations"></param>
        /// <param name="compactionMemoryThreshold"></param>
        /// <param name="compactionProgressLog"></param>
        /// <param name="standby"></param>
        /// <param name="customBlobStore"></param>
        /// <param name="customSegmentStore"></param>
        /// <param name="splitPersistence"></param>
        /// <param name="repositoryBackupDir"></param>
        /// <param name="blobGcMaxAgeInSecs"></param>
        /// <param name="blobTrackSnapshotIntervalInSecs"></param>
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingInstallerConfigurationPersist"></param>
        /// <param name="mode"></param>
        /// <param name="port"></param>
        /// <param name="primaryHost"></param>
        /// <param name="interval"></param>
        /// <param name="primaryAllowedClientIpRanges"></param>
        /// <param name="secure"></param>
        /// <param name="standbyReadtimeout"></param>
        /// <param name="standbyAutoclean"></param>
        /// <returns>OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo</returns>
        OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, string mode, int? port, string primaryHost, int? interval, List<string> primaryAllowedClientIpRanges, bool? secure, int? standbyReadtimeout, bool? standbyAutoclean);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="handlerName"></param>
        /// <param name="userExpirationTime"></param>
        /// <param name="userAutoMembership"></param>
        /// <param name="userPropertyMapping"></param>
        /// <param name="userPathPrefix"></param>
        /// <param name="userMembershipExpTime"></param>
        /// <param name="userMembershipNestingDepth"></param>
        /// <param name="userDynamicMembership"></param>
        /// <param name="userDisableMissing"></param>
        /// <param name="groupExpirationTime"></param>
        /// <param name="groupAutoMembership"></param>
        /// <param name="groupPropertyMapping"></param>
        /// <param name="groupPathPrefix"></param>
        /// <param name="enableRFC7613UsercaseMappedProfile"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string handlerName, string userExpirationTime, List<string> userAutoMembership, List<string> userPropertyMapping, string userPathPrefix, string userMembershipExpTime, int? userMembershipNestingDepth, bool? userDynamicMembership, bool? userDisableMissing, string groupExpirationTime, List<string> groupAutoMembership, List<string> groupPropertyMapping, string groupPathPrefix, bool? enableRFC7613UsercaseMappedProfile);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jaasRanking"></param>
        /// <param name="jaasControlFlag"></param>
        /// <param name="jaasRealmName"></param>
        /// <param name="idpName"></param>
        /// <param name="syncHandlerName"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? jaasRanking, string jaasControlFlag, string jaasRealmName, string idpName, string syncHandlerName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="protectExternalId"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? protectExternalId);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="cugSupportedPaths"></param>
        /// <param name="cugEnabled"></param>
        /// <param name="configurationRanking"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugSupportedPaths, bool? cugEnabled, int? configurationRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="principalNames"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> principalNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabledActions"></param>
        /// <param name="userPrivilegeNames"></param>
        /// <param name="groupPrivilegeNames"></param>
        /// <param name="constraint"></param>
        /// <returns>OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo</returns>
        OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string enabledActions, List<string> userPrivilegeNames, List<string> groupPrivilegeNames, string constraint);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="packageRoots"></param>
        /// <returns>OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo</returns>
        OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo OrgApacheJackrabbitVaultPackagingImplPackagingImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> packageRoots);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="homePath"></param>
        /// <returns>OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo</returns>
        OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string homePath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletMethods"></param>
        /// <param name="slingServletPaths"></param>
        /// <returns>OrgApacheSlingAuthCoreImplLogoutServletInfo</returns>
        OrgApacheSlingAuthCoreImplLogoutServletInfo OrgApacheSlingAuthCoreImplLogoutServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletMethods, string slingServletPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo</returns>
        OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="configBucketNames"></param>
        /// <returns>OrgApacheSlingCaconfigImplConfigurationResolverImplInfo</returns>
        OrgApacheSlingCaconfigImplConfigurationResolverImplInfo OrgApacheSlingCaconfigImplConfigurationResolverImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> configBucketNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="configPropertyInheritancePropertyNames"></param>
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo</returns>
        OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configPropertyInheritancePropertyNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo</returns>
        OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="description"></param>
        /// <param name="overrides"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo</returns>
        OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string description, List<string> overrides, bool? enabled, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo</returns>
        OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="ignorePropertyNameRegex"></param>
        /// <param name="configCollectionPropertiesResourceNames"></param>
        /// <returns>OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo</returns>
        OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> ignorePropertyNameRegex, List<string> configCollectionPropertiesResourceNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="configPath"></param>
        /// <param name="fallbackPaths"></param>
        /// <param name="configCollectionInheritancePropertyNames"></param>
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo</returns>
        OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string configPath, List<string> fallbackPaths, List<string> configCollectionInheritancePropertyNames);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="enabled"></param>
        /// <param name="configRefResourceNames"></param>
        /// <param name="configRefPropertyNames"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo</returns>
        OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configRefResourceNames, List<string> configRefPropertyNames, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="parserFeatures"></param>
        /// <returns>OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo</returns>
        OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parserFeatures);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingCommonsLogLevel"></param>
        /// <param name="orgApacheSlingCommonsLogFile"></param>
        /// <param name="orgApacheSlingCommonsLogFileNumber"></param>
        /// <param name="orgApacheSlingCommonsLogFileSize"></param>
        /// <param name="orgApacheSlingCommonsLogPattern"></param>
        /// <param name="orgApacheSlingCommonsLogConfigurationFile"></param>
        /// <param name="orgApacheSlingCommonsLogPackagingDataEnabled"></param>
        /// <param name="orgApacheSlingCommonsLogMaxCallerDataDepth"></param>
        /// <param name="orgApacheSlingCommonsLogMaxOldFileCountInDump"></param>
        /// <param name="orgApacheSlingCommonsLogNumOfLines"></param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerInfo</returns>
        OrgApacheSlingCommonsLogLogManagerInfo OrgApacheSlingCommonsLogLogManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, string orgApacheSlingCommonsLogPattern, string orgApacheSlingCommonsLogConfigurationFile, bool? orgApacheSlingCommonsLogPackagingDataEnabled, int? orgApacheSlingCommonsLogMaxCallerDataDepth, int? orgApacheSlingCommonsLogMaxOldFileCountInDump, int? orgApacheSlingCommonsLogNumOfLines);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingCommonsLogLevel"></param>
        /// <param name="orgApacheSlingCommonsLogFile"></param>
        /// <param name="orgApacheSlingCommonsLogPattern"></param>
        /// <param name="orgApacheSlingCommonsLogNames"></param>
        /// <param name="orgApacheSlingCommonsLogAdditiv"></param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo</returns>
        OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo OrgApacheSlingCommonsLogLogManagerFactoryConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, string orgApacheSlingCommonsLogPattern, List<string> orgApacheSlingCommonsLogNames, bool? orgApacheSlingCommonsLogAdditiv);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingCommonsLogFile"></param>
        /// <param name="orgApacheSlingCommonsLogFileNumber"></param>
        /// <param name="orgApacheSlingCommonsLogFileSize"></param>
        /// <param name="orgApacheSlingCommonsLogFileBuffered"></param>
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo</returns>
        OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo OrgApacheSlingCommonsLogLogManagerFactoryWriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, bool? orgApacheSlingCommonsLogFileBuffered);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="period"></param>
        /// <param name="timeUnit"></param>
        /// <param name="level"></param>
        /// <param name="loggerName"></param>
        /// <param name="prefix"></param>
        /// <param name="pattern"></param>
        /// <param name="registryName"></param>
        /// <returns>OrgApacheSlingCommonsMetricsInternalLogReporterInfo</returns>
        OrgApacheSlingCommonsMetricsInternalLogReporterInfo OrgApacheSlingCommonsMetricsInternalLogReporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? period, string timeUnit, string level, string loggerName, string prefix, string pattern, string registryName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="datasources"></param>
        /// <param name="step"></param>
        /// <param name="archives"></param>
        /// <param name="path"></param>
        /// <returns>OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo</returns>
        OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> datasources, int? step, List<string> archives, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mimeTypes"></param>
        /// <returns>OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo</returns>
        OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="poolName"></param>
        /// <param name="allowedPoolNames"></param>
        /// <param name="schedulerUseleaderforsingle"></param>
        /// <param name="metricsFilters"></param>
        /// <param name="slowThresholdMillis"></param>
        /// <returns>OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo</returns>
        OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo OrgApacheSlingCommonsSchedulerImplQuartzScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string poolName, List<string> allowedPoolNames, bool? schedulerUseleaderforsingle, List<string> metricsFilters, int? slowThresholdMillis);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxQuartzJobDurationAcceptable"></param>
        /// <returns>OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo</returns>
        OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxQuartzJobDurationAcceptable);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="minPoolSize"></param>
        /// <param name="maxPoolSize"></param>
        /// <param name="queueSize"></param>
        /// <param name="maxThreadAge"></param>
        /// <param name="keepAliveTime"></param>
        /// <param name="blockPolicy"></param>
        /// <param name="shutdownGraceful"></param>
        /// <param name="daemon"></param>
        /// <param name="shutdownWaitTime"></param>
        /// <param name="priority"></param>
        /// <returns>OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo</returns>
        OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, int? minPoolSize, int? maxPoolSize, int? queueSize, int? maxThreadAge, int? keepAliveTime, string blockPolicy, bool? shutdownGraceful, bool? daemon, int? shutdownWaitTime, string priority);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="datasourceName"></param>
        /// <param name="datasourceSvcPropName"></param>
        /// <param name="driverClassName"></param>
        /// <param name="url"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="defaultAutoCommit"></param>
        /// <param name="defaultReadOnly"></param>
        /// <param name="defaultTransactionIsolation"></param>
        /// <param name="defaultCatalog"></param>
        /// <param name="maxActive"></param>
        /// <param name="maxIdle"></param>
        /// <param name="minIdle"></param>
        /// <param name="initialSize"></param>
        /// <param name="maxWait"></param>
        /// <param name="maxAge"></param>
        /// <param name="testOnBorrow"></param>
        /// <param name="testOnReturn"></param>
        /// <param name="testWhileIdle"></param>
        /// <param name="validationQuery"></param>
        /// <param name="validationQueryTimeout"></param>
        /// <param name="timeBetweenEvictionRunsMillis"></param>
        /// <param name="minEvictableIdleTimeMillis"></param>
        /// <param name="connectionProperties"></param>
        /// <param name="initSQL"></param>
        /// <param name="jdbcInterceptors"></param>
        /// <param name="validationInterval"></param>
        /// <param name="logValidationErrors"></param>
        /// <param name="datasourceSvcProperties"></param>
        /// <returns>OrgApacheSlingDatasourceDataSourceFactoryInfo</returns>
        OrgApacheSlingDatasourceDataSourceFactoryInfo OrgApacheSlingDatasourceDataSourceFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string driverClassName, string url, string username, string password, string defaultAutoCommit, string defaultReadOnly, string defaultTransactionIsolation, string defaultCatalog, int? maxActive, int? maxIdle, int? minIdle, int? initialSize, int? maxWait, int? maxAge, bool? testOnBorrow, bool? testOnReturn, bool? testWhileIdle, string validationQuery, int? validationQueryTimeout, int? timeBetweenEvictionRunsMillis, int? minEvictableIdleTimeMillis, string connectionProperties, string initSQL, string jdbcInterceptors, int? validationInterval, bool? logValidationErrors, List<string> datasourceSvcProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="datasourceName"></param>
        /// <param name="datasourceSvcPropName"></param>
        /// <param name="datasourceJndiName"></param>
        /// <param name="jndiProperties"></param>
        /// <returns>OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo</returns>
        OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo OrgApacheSlingDatasourceJNDIDataSourceFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string datasourceJndiName, List<string> jndiProperties);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="connectorPingTimeout"></param>
        /// <param name="connectorPingInterval"></param>
        /// <param name="discoveryLiteCheckInterval"></param>
        /// <param name="clusterSyncServiceTimeout"></param>
        /// <param name="clusterSyncServiceInterval"></param>
        /// <param name="enableSyncToken"></param>
        /// <param name="minEventDelay"></param>
        /// <param name="socketConnectTimeout"></param>
        /// <param name="soTimeout"></param>
        /// <param name="topologyConnectorUrls"></param>
        /// <param name="topologyConnectorWhitelist"></param>
        /// <param name="autoStopLocalLoopEnabled"></param>
        /// <param name="gzipConnectorRequestsEnabled"></param>
        /// <param name="hmacEnabled"></param>
        /// <param name="enableEncryption"></param>
        /// <param name="sharedKey"></param>
        /// <param name="hmacSharedKeyTTL"></param>
        /// <param name="backoffStandbyFactor"></param>
        /// <param name="backoffStableFactor"></param>
        /// <returns>OrgApacheSlingDiscoveryOakConfigInfo</returns>
        OrgApacheSlingDiscoveryOakConfigInfo OrgApacheSlingDiscoveryOakConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectorPingTimeout, int? connectorPingInterval, int? discoveryLiteCheckInterval, int? clusterSyncServiceTimeout, int? clusterSyncServiceInterval, bool? enableSyncToken, int? minEventDelay, int? socketConnectTimeout, int? soTimeout, List<string> topologyConnectorUrls, List<string> topologyConnectorWhitelist, bool? autoStopLocalLoopEnabled, bool? gzipConnectorRequestsEnabled, bool? hmacEnabled, bool? enableEncryption, string sharedKey, int? hmacSharedKeyTTL, string backoffStandbyFactor, string backoffStableFactor);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <returns>OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo</returns>
        OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="title"></param>
        /// <param name="details"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceName"></param>
        /// <param name="logLevel"></param>
        /// <param name="allowedRoots"></param>
        /// <param name="queueProcessingEnabled"></param>
        /// <param name="packageImporterEndpoints"></param>
        /// <param name="passiveQueues"></param>
        /// <param name="priorityQueues"></param>
        /// <param name="retryStrategy"></param>
        /// <param name="retryAttempts"></param>
        /// <param name="requestAuthorizationStrategyTarget"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <param name="triggersTarget"></param>
        /// <param name="queueProvider"></param>
        /// <param name="asyncDelivery"></param>
        /// <param name="httpConnTimeout"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo</returns>
        OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, bool? queueProcessingEnabled, List<string> packageImporterEndpoints, List<string> passiveQueues, List<string> priorityQueues, string retryStrategy, int? retryAttempts, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget, string queueProvider, bool? asyncDelivery, int? httpConnTimeout);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="jcrPrivilege"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo</returns>
        OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string jcrPrivilege);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="title"></param>
        /// <param name="details"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceName"></param>
        /// <param name="logLevel"></param>
        /// <param name="allowedRoots"></param>
        /// <param name="requestAuthorizationStrategyTarget"></param>
        /// <param name="queueProviderFactoryTarget"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <param name="triggersTarget"></param>
        /// <param name="priorityQueues"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo</returns>
        OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, string requestAuthorizationStrategyTarget, string queueProviderFactoryTarget, string packageBuilderTarget, string triggersTarget, List<string> priorityQueues);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="title"></param>
        /// <param name="details"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceName"></param>
        /// <param name="logLevel"></param>
        /// <param name="queueProcessingEnabled"></param>
        /// <param name="packageExporterEndpoints"></param>
        /// <param name="pullItems"></param>
        /// <param name="httpConnTimeout"></param>
        /// <param name="requestAuthorizationStrategyTarget"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <param name="triggersTarget"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo</returns>
        OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> packageExporterEndpoints, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="title"></param>
        /// <param name="details"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceName"></param>
        /// <param name="logLevel"></param>
        /// <param name="queueProcessingEnabled"></param>
        /// <param name="packageExporterTarget"></param>
        /// <param name="packageImporterTarget"></param>
        /// <param name="requestAuthorizationStrategyTarget"></param>
        /// <param name="triggersTarget"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo</returns>
        OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, string packageExporterTarget, string packageImporterTarget, string requestAuthorizationStrategyTarget, string triggersTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="title"></param>
        /// <param name="details"></param>
        /// <param name="enabled"></param>
        /// <param name="serviceName"></param>
        /// <param name="logLevel"></param>
        /// <param name="queueProcessingEnabled"></param>
        /// <param name="passiveQueues"></param>
        /// <param name="packageExporterEndpoints"></param>
        /// <param name="packageImporterEndpoints"></param>
        /// <param name="retryStrategy"></param>
        /// <param name="retryAttempts"></param>
        /// <param name="pullItems"></param>
        /// <param name="httpConnTimeout"></param>
        /// <param name="requestAuthorizationStrategyTarget"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <param name="triggersTarget"></param>
        /// <returns>OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo</returns>
        OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> passiveQueues, List<string> packageExporterEndpoints, List<string> packageImporterEndpoints, string retryStrategy, int? retryAttempts, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <param name="numberOfRetriesAllowed"></param>
        /// <returns>OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo</returns>
        OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, int? numberOfRetriesAllowed);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="queue"></param>
        /// <param name="dropInvalidItems"></param>
        /// <param name="agentTarget"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo OrgApacheSlingDistributionPackagingImplExporterAgentDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string queue, bool? dropInvalidItems, string agentTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplExporterLocalDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="endpoints"></param>
        /// <param name="pullItems"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo</returns>
        OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, int? pullItems, string packageBuilderTarget, string transportSecretProviderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="packageBuilderTarget"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplImporterLocalDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="endpoints"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, string transportSecretProviderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="serviceName"></param>
        /// <param name="path"></param>
        /// <param name="privilegeName"></param>
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo</returns>
        OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string path, string privilegeName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerRoots"></param>
        /// <param name="kind"></param>
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo</returns>
        OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo OrgApacheSlingDistributionResourcesImplDistributionConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerRoots"></param>
        /// <param name="kind"></param>
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo</returns>
        OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo OrgApacheSlingDistributionResourcesImplDistributionServiceResour (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="formatTarget"></param>
        /// <param name="tempFsFolder"></param>
        /// <param name="fileThreshold"></param>
        /// <param name="memoryUnit"></param>
        /// <param name="useOffHeapMemory"></param>
        /// <param name="digestAlgorithm"></param>
        /// <param name="monitoringQueueSize"></param>
        /// <param name="cleanupDelay"></param>
        /// <param name="packageFilters"></param>
        /// <param name="propertyFilters"></param>
        /// <returns>OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo</returns>
        OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo OrgApacheSlingDistributionSerializationImplDistributionPackageBu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string formatTarget, string tempFsFolder, int? fileThreshold, string memoryUnit, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, int? cleanupDelay, List<string> packageFilters, List<string> propertyFilters);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="importMode"></param>
        /// <param name="aclHandling"></param>
        /// <param name="packageRoots"></param>
        /// <param name="packageFilters"></param>
        /// <param name="propertyFilters"></param>
        /// <param name="tempFsFolder"></param>
        /// <param name="useBinaryReferences"></param>
        /// <param name="autoSaveThreshold"></param>
        /// <param name="cleanupDelay"></param>
        /// <param name="fileThreshold"></param>
        /// <param name="MEGA_BYTES"></param>
        /// <param name="useOffHeapMemory"></param>
        /// <param name="digestAlgorithm"></param>
        /// <param name="monitoringQueueSize"></param>
        /// <param name="pathsMapping"></param>
        /// <param name="strictImport"></param>
        /// <returns>OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo</returns>
        OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo OrgApacheSlingDistributionSerializationImplVltVaultDistribution (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string importMode, string aclHandling, string packageRoots, List<string> packageFilters, List<string> propertyFilters, string tempFsFolder, bool? useBinaryReferences, int? autoSaveThreshold, int? cleanupDelay, int? fileThreshold, string MEGA_BYTES, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, List<string> pathsMapping, bool? strictImport);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <returns>OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo</returns>
        OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo OrgApacheSlingDistributionTransportImplUserCredentialsDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string password);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="path"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo</returns>
        OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo OrgApacheSlingDistributionTriggerImplDistributionEventDistribute (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="path"></param>
        /// <param name="ignoredPathsPatterns"></param>
        /// <param name="serviceName"></param>
        /// <param name="deep"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo</returns>
        OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, List<string> ignoredPathsPatterns, string serviceName, bool? deep);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="path"></param>
        /// <param name="serviceName"></param>
        /// <param name="nuggetsPath"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo</returns>
        OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string serviceName, string nuggetsPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="endpoint"></param>
        /// <param name="transportSecretProviderTarget"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo</returns>
        OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string endpoint, string transportSecretProviderTarget);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="path"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo</returns>
        OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="path"></param>
        /// <param name="seconds"></param>
        /// <param name="serviceName"></param>
        /// <returns>OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo</returns>
        OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string seconds, string serviceName);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="osgiHttpWhiteboardContextSelect"></param>
        /// <param name="osgiHttpWhiteboardListener"></param>
        /// <param name="authSudoCookie"></param>
        /// <param name="authSudoParameter"></param>
        /// <param name="authAnnonymous"></param>
        /// <param name="slingAuthRequirements"></param>
        /// <param name="slingAuthAnonymousUser"></param>
        /// <param name="slingAuthAnonymousPassword"></param>
        /// <param name="authHttp"></param>
        /// <param name="authHttpRealm"></param>
        /// <param name="authUriSuffix"></param>
        /// <returns>OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo</returns>
        OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo OrgApacheSlingEngineImplAuthSlingAuthenticator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardContextSelect, string osgiHttpWhiteboardListener, string authSudoCookie, string authSudoParameter, bool? authAnnonymous, List<string> slingAuthRequirements, string slingAuthAnonymousUser, string slingAuthAnonymousPassword, string authHttp, string authHttpRealm, List<string> authUriSuffix);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="extensions"></param>
        /// <param name="minDurationMs"></param>
        /// <param name="maxDurationMs"></param>
        /// <param name="compactLogFormat"></param>
        /// <returns>OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo</returns>
        OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extensions, int? minDurationMs, int? maxDurationMs, bool? compactLogFormat);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="requestLogOutput"></param>
        /// <param name="requestLogOutputtype"></param>
        /// <param name="requestLogEnabled"></param>
        /// <param name="accessLogOutput"></param>
        /// <param name="accessLogOutputtype"></param>
        /// <param name="accessLogEnabled"></param>
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerInfo</returns>
        OrgApacheSlingEngineImplLogRequestLoggerInfo OrgApacheSlingEngineImplLogRequestLogger (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput, int? requestLogOutputtype, bool? requestLogEnabled, string accessLogOutput, int? accessLogOutputtype, bool? accessLogEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="requestLogServiceFormat"></param>
        /// <param name="requestLogServiceOutput"></param>
        /// <param name="requestLogServiceOutputtype"></param>
        /// <param name="requestLogServiceOnentry"></param>
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerServiceInfo</returns>
        OrgApacheSlingEngineImplLogRequestLoggerServiceInfo OrgApacheSlingEngineImplLogRequestLoggerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogServiceFormat, string requestLogServiceOutput, int? requestLogServiceOutputtype, bool? requestLogServiceOnentry);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingMaxCalls"></param>
        /// <param name="slingMaxInclusions"></param>
        /// <param name="slingTraceAllow"></param>
        /// <param name="slingMaxRecordRequests"></param>
        /// <param name="slingStorePatternRequests"></param>
        /// <param name="slingServerinfo"></param>
        /// <param name="slingAdditionalResponseHeaders"></param>
        /// <returns>OrgApacheSlingEngineImplSlingMainServletInfo</returns>
        OrgApacheSlingEngineImplSlingMainServletInfo OrgApacheSlingEngineImplSlingMainServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? slingMaxCalls, int? slingMaxInclusions, bool? slingTraceAllow, int? slingMaxRecordRequests, List<string> slingStorePatternRequests, string slingServerinfo, List<string> slingAdditionalResponseHeaders);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingDefaultParameterEncoding"></param>
        /// <param name="slingDefaultMaxParameters"></param>
        /// <param name="fileLocation"></param>
        /// <param name="fileThreshold"></param>
        /// <param name="fileMax"></param>
        /// <param name="requestMax"></param>
        /// <param name="slingDefaultParameterCheckForAdditionalContainerParameters"></param>
        /// <returns>OrgApacheSlingEngineParametersInfo</returns>
        OrgApacheSlingEngineParametersInfo OrgApacheSlingEngineParameters (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingDefaultParameterEncoding, int? slingDefaultMaxParameters, string fileLocation, int? fileThreshold, int? fileMax, int? requestMax, bool? slingDefaultParameterCheckForAdditionalContainerParameters);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="minPoolSize"></param>
        /// <returns>OrgApacheSlingEventImplEventingThreadPoolInfo</returns>
        OrgApacheSlingEventImplEventingThreadPoolInfo OrgApacheSlingEventImplEventingThreadPool (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minPoolSize);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queuePriority"></param>
        /// <param name="queueRetries"></param>
        /// <param name="queueRetrydelay"></param>
        /// <param name="queueMaxparallel"></param>
        /// <returns>OrgApacheSlingEventImplJobsDefaultJobManagerInfo</returns>
        OrgApacheSlingEventImplJobsDefaultJobManagerInfo OrgApacheSlingEventImplJobsDefaultJobManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queuePriority, int? queueRetries, int? queueRetrydelay, int? queueMaxparallel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jobConsumermanagerDisableDistribution"></param>
        /// <param name="startupDelay"></param>
        /// <param name="cleanupPeriod"></param>
        /// <returns>OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo</returns>
        OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo OrgApacheSlingEventImplJobsJcrPersistenceHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? jobConsumermanagerDisableDistribution, int? startupDelay, int? cleanupPeriod);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingInstallerConfigurationPersist"></param>
        /// <param name="jobConsumermanagerWhitelist"></param>
        /// <param name="jobConsumermanagerBlacklist"></param>
        /// <returns>OrgApacheSlingEventImplJobsJobConsumerManagerInfo</returns>
        OrgApacheSlingEventImplJobsJobConsumerManagerInfo OrgApacheSlingEventImplJobsJobConsumerManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, List<string> jobConsumermanagerWhitelist, List<string> jobConsumermanagerBlacklist);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="queueName"></param>
        /// <param name="queueTopics"></param>
        /// <param name="queueType"></param>
        /// <param name="queuePriority"></param>
        /// <param name="queueRetries"></param>
        /// <param name="queueRetrydelay"></param>
        /// <param name="queueMaxparallel"></param>
        /// <param name="queueKeepJobs"></param>
        /// <param name="queuePreferRunOnCreationInstance"></param>
        /// <param name="queueThreadPoolSize"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>OrgApacheSlingEventJobsQueueConfigurationInfo</returns>
        OrgApacheSlingEventJobsQueueConfigurationInfo OrgApacheSlingEventJobsQueueConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queueName, List<string> queueTopics, string queueType, string queuePriority, int? queueRetries, int? queueRetrydelay, decimal? queueMaxparallel, bool? queueKeepJobs, bool? queuePreferRunOnCreationInstance, int? queueThreadPoolSize, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="users"></param>
        /// <param name="groups"></param>
        /// <returns>OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo</returns>
        OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> users, List<string> groups);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheSlingFeatureflagsFeatureInfo</returns>
        OrgApacheSlingFeatureflagsFeatureInfo OrgApacheSlingFeatureflagsFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="enabled"></param>
        /// <returns>OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo</returns>
        OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo OrgApacheSlingFeatureflagsImplConfiguredFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingHapiToolsResourcetype"></param>
        /// <param name="orgApacheSlingHapiToolsCollectionresourcetype"></param>
        /// <param name="orgApacheSlingHapiToolsSearchpaths"></param>
        /// <param name="orgApacheSlingHapiToolsExternalurl"></param>
        /// <param name="orgApacheSlingHapiToolsEnabled"></param>
        /// <returns>OrgApacheSlingHapiImplHApiUtilImplInfo</returns>
        OrgApacheSlingHapiImplHApiUtilImplInfo OrgApacheSlingHapiImplHApiUtilImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingHapiToolsResourcetype, string orgApacheSlingHapiToolsCollectionresourcetype, List<string> orgApacheSlingHapiToolsSearchpaths, string orgApacheSlingHapiToolsExternalurl, bool? orgApacheSlingHapiToolsEnabled);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <param name="filterTags"></param>
        /// <param name="filterCombineTagsWithOr"></param>
        /// <returns>OrgApacheSlingHcCoreImplCompositeHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplCompositeHealthCheckInfo OrgApacheSlingHcCoreImplCompositeHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> filterTags, bool? filterCombineTagsWithOr);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="timeoutInMs"></param>
        /// <param name="longRunningFutureThresholdForCriticalMs"></param>
        /// <param name="resultCacheTtlInMs"></param>
        /// <returns>OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo</returns>
        OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeoutInMs, int? longRunningFutureThresholdForCriticalMs, int? resultCacheTtlInMs);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <param name="mbeanName"></param>
        /// <param name="attributeName"></param>
        /// <param name="attributeValueConstraint"></param>
        /// <returns>OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo OrgApacheSlingHcCoreImplJmxAttributeHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string mbeanName, string attributeName, string attributeValueConstraint);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="hcName"></param>
        /// <param name="hcTags"></param>
        /// <param name="hcMbeanName"></param>
        /// <param name="expression"></param>
        /// <param name="languageExtension"></param>
        /// <returns>OrgApacheSlingHcCoreImplScriptableHealthCheckInfo</returns>
        OrgApacheSlingHcCoreImplScriptableHealthCheckInfo OrgApacheSlingHcCoreImplScriptableHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string expression, string languageExtension);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="servletPath"></param>
        /// <param name="disabled"></param>
        /// <param name="corsAccessControlAllowOrigin"></param>
        /// <returns>OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo</returns>
        OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletPath, bool? disabled, string corsAccessControlAllowOrigin);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="totalWidth"></param>
        /// <param name="colWidthName"></param>
        /// <param name="colWidthResult"></param>
        /// <param name="colWidthTiming"></param>
        /// <returns>OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo</returns>
        OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? totalWidth, int? colWidthName, int? colWidthResult, int? colWidthTiming);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="slingFilterScope"></param>
        /// <returns>OrgApacheSlingI18nImplI18NFilterInfo</returns>
        OrgApacheSlingI18nImplI18NFilterInfo OrgApacheSlingI18nImplI18NFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> slingFilterScope);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="localeDefault"></param>
        /// <param name="preloadBundles"></param>
        /// <param name="invalidationDelay"></param>
        /// <returns>OrgApacheSlingI18nImplJcrResourceBundleProviderInfo</returns>
        OrgApacheSlingI18nImplJcrResourceBundleProviderInfo OrgApacheSlingI18nImplJcrResourceBundleProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string localeDefault, bool? preloadBundles, int? invalidationDelay);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="handlerSchemes"></param>
        /// <param name="slingJcrinstallFolderNameRegexp"></param>
        /// <param name="slingJcrinstallFolderMaxDepth"></param>
        /// <param name="slingJcrinstallSearchPath"></param>
        /// <param name="slingJcrinstallNewConfigPath"></param>
        /// <param name="slingJcrinstallSignalPath"></param>
        /// <param name="slingJcrinstallEnableWriteback"></param>
        /// <returns>OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo</returns>
        OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo OrgApacheSlingInstallerProviderJcrImplJcrInstaller (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> handlerSchemes, string slingJcrinstallFolderNameRegexp, int? slingJcrinstallFolderMaxDepth, List<string> slingJcrinstallSearchPath, string slingJcrinstallNewConfigPath, string slingJcrinstallSignalPath, bool? slingJcrinstallEnableWriteback);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="whitelistBypass"></param>
        /// <param name="whitelistBundlesRegexp"></param>
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo</returns>
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? whitelistBypass, string whitelistBundlesRegexp);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="whitelistName"></param>
        /// <param name="whitelistBundles"></param>
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo</returns>
        OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string whitelistName, List<string> whitelistBundles);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="alias"></param>
        /// <param name="davCreateAbsoluteUri"></param>
        /// <param name="davProtectedhandlers"></param>
        /// <returns>OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo</returns>
        OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo OrgApacheSlingJcrDavexImplServletsSlingDavExServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string alias, bool? davCreateAbsoluteUri, string davProtectedhandlers);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="javaNamingFactoryInitial"></param>
        /// <param name="javaNamingProviderUrl"></param>
        /// <returns>OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo</returns>
        OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string javaNamingFactoryInitial, string javaNamingProviderUrl);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="port"></param>
        /// <returns>OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo</returns>
        OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? port);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="references"></param>
        /// <returns>OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo</returns>
        OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo OrgApacheSlingJcrRepoinitImplRepositoryInitializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="references"></param>
        /// <param name="scripts"></param>
        /// <returns>OrgApacheSlingJcrRepoinitRepositoryInitializerInfo</returns>
        OrgApacheSlingJcrRepoinitRepositoryInitializerInfo OrgApacheSlingJcrRepoinitRepositoryInitializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references, List<string> scripts);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="resourceResolverSearchpath"></param>
        /// <param name="resourceResolverManglenamespaces"></param>
        /// <param name="resourceResolverAllowDirect"></param>
        /// <param name="resourceResolverRequiredProviders"></param>
        /// <param name="resourceResolverRequiredProvidernames"></param>
        /// <param name="resourceResolverVirtual"></param>
        /// <param name="resourceResolverMapping"></param>
        /// <param name="resourceResolverMapLocation"></param>
        /// <param name="resourceResolverMapObservation"></param>
        /// <param name="resourceResolverDefaultVanityRedirectStatus"></param>
        /// <param name="resourceResolverEnableVanitypath"></param>
        /// <param name="resourceResolverVanitypathMaxEntries"></param>
        /// <param name="resourceResolverVanitypathMaxEntriesStartup"></param>
        /// <param name="resourceResolverVanitypathBloomfilterMaxBytes"></param>
        /// <param name="resourceResolverOptimizeAliasResolution"></param>
        /// <param name="resourceResolverVanitypathWhitelist"></param>
        /// <param name="resourceResolverVanitypathBlacklist"></param>
        /// <param name="resourceResolverVanityPrecedence"></param>
        /// <param name="resourceResolverProviderhandlingParanoid"></param>
        /// <param name="resourceResolverLogClosing"></param>
        /// <param name="resourceResolverLogUnclosed"></param>
        /// <returns>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo</returns>
        OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceResolverSearchpath, bool? resourceResolverManglenamespaces, bool? resourceResolverAllowDirect, List<string> resourceResolverRequiredProviders, List<string> resourceResolverRequiredProvidernames, List<string> resourceResolverVirtual, List<string> resourceResolverMapping, string resourceResolverMapLocation, List<string> resourceResolverMapObservation, int? resourceResolverDefaultVanityRedirectStatus, bool? resourceResolverEnableVanitypath, int? resourceResolverVanitypathMaxEntries, bool? resourceResolverVanitypathMaxEntriesStartup, int? resourceResolverVanitypathBloomfilterMaxBytes, bool? resourceResolverOptimizeAliasResolution, List<string> resourceResolverVanitypathWhitelist, List<string> resourceResolverVanitypathBlacklist, bool? resourceResolverVanityPrecedence, bool? resourceResolverProviderhandlingParanoid, bool? resourceResolverLogClosing, bool? resourceResolverLogUnclosed);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="allowOnlySystemUser"></param>
        /// <returns>OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo</returns>
        OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo OrgApacheSlingJcrResourceInternalJcrSystemUserValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowOnlySystemUser);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="path"></param>
        /// <param name="checkpathPrefix"></param>
        /// <param name="jcrPath"></param>
        /// <returns>OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo</returns>
        OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string checkpathPrefix, string jcrPath);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="typeCollections"></param>
        /// <param name="typeNoncollections"></param>
        /// <param name="typeContent"></param>
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo</returns>
        OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string typeCollections, string typeNoncollections, string typeContent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo</returns>
        OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="davRoot"></param>
        /// <param name="davCreateAbsoluteUri"></param>
        /// <param name="davRealm"></param>
        /// <param name="collectionTypes"></param>
        /// <param name="filterPrefixes"></param>
        /// <param name="filterTypes"></param>
        /// <param name="filterUris"></param>
        /// <param name="typeCollections"></param>
        /// <param name="typeNoncollections"></param>
        /// <param name="typeContent"></param>
        /// <returns>OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo</returns>
        OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string davRoot, bool? davCreateAbsoluteUri, string davRealm, List<string> collectionTypes, List<string> filterPrefixes, string filterTypes, string filterUris, string typeCollections, string typeNoncollections, string typeContent);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="providerRoots"></param>
        /// <returns>OrgApacheSlingJmxProviderImplJMXResourceProviderInfo</returns>
        OrgApacheSlingJmxProviderImplJMXResourceProviderInfo OrgApacheSlingJmxProviderImplJMXResourceProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="osgiHttpWhiteboardListener"></param>
        /// <param name="osgiHttpWhiteboardContextSelect"></param>
        /// <param name="maxRecursionDepth"></param>
        /// <param name="cleanupJobPeriod"></param>
        /// <returns>OrgApacheSlingModelsImplModelAdapterFactoryInfo</returns>
        OrgApacheSlingModelsImplModelAdapterFactoryInfo OrgApacheSlingModelsImplModelAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardListener, string osgiHttpWhiteboardContextSelect, int? maxRecursionDepth, int? cleanupJobPeriod);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="maxRecursionLevels"></param>
        /// <returns>OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo</returns>
        OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRecursionLevels);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="felixInventoryPrinterName"></param>
        /// <param name="felixInventoryPrinterTitle"></param>
        /// <param name="path"></param>
        /// <returns>OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo</returns>
        OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string felixInventoryPrinterName, string felixInventoryPrinterTitle, string path);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mergeRoot"></param>
        /// <param name="mergeReadOnly"></param>
        /// <returns>OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo</returns>
        OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo OrgApacheSlingResourcemergerImplMergedResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="mergeRoot"></param>
        /// <param name="mergeReadOnly"></param>
        /// <returns>OrgApacheSlingResourcemergerPickerOverridingInfo</returns>
        OrgApacheSlingResourcemergerPickerOverridingInfo OrgApacheSlingResourcemergerPickerOverriding (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingScriptingCacheSize"></param>
        /// <param name="orgApacheSlingScriptingCacheAdditionalExtensions"></param>
        /// <returns>OrgApacheSlingScriptingCoreImplScriptCacheImplInfo</returns>
        OrgApacheSlingScriptingCoreImplScriptCacheImplInfo OrgApacheSlingScriptingCoreImplScriptCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingCacheSize, List<string> orgApacheSlingScriptingCacheAdditionalExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="logStacktraceOnclose"></param>
        /// <returns>OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo</returns>
        OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? logStacktraceOnclose);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="javaClassdebuginfo"></param>
        /// <param name="javaJavaEncoding"></param>
        /// <param name="javaCompilerSourceVM"></param>
        /// <param name="javaCompilerTargetVM"></param>
        /// <returns>OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo</returns>
        OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? javaClassdebuginfo, string javaJavaEncoding, string javaCompilerSourceVM, string javaCompilerTargetVM);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingScriptingJavascriptRhinoOptLevel"></param>
        /// <returns>OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo</returns>
        OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingJavascriptRhinoOptLevel);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="jasperCompilerTargetVM"></param>
        /// <param name="jasperCompilerSourceVM"></param>
        /// <param name="jasperClassdebuginfo"></param>
        /// <param name="jasperEnablePooling"></param>
        /// <param name="jasperIeClassId"></param>
        /// <param name="jasperGenStringAsCharArray"></param>
        /// <param name="jasperKeepgenerated"></param>
        /// <param name="jasperMappedfile"></param>
        /// <param name="jasperTrimSpaces"></param>
        /// <param name="jasperDisplaySourceFragments"></param>
        /// <param name="defaultIsSession"></param>
        /// <returns>OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo</returns>
        OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo OrgApacheSlingScriptingJspJspScriptEngineFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jasperCompilerTargetVM, string jasperCompilerSourceVM, bool? jasperClassdebuginfo, bool? jasperEnablePooling, string jasperIeClassId, bool? jasperGenStringAsCharArray, bool? jasperKeepgenerated, bool? jasperMappedfile, bool? jasperTrimSpaces, bool? jasperDisplaySourceFragments, bool? defaultIsSession);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="orgApacheSlingScriptingSightlyJsBindings"></param>
        /// <returns>OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo</returns>
        OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> orgApacheSlingScriptingSightlyJsBindings);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingContentDispositionPaths"></param>
        /// <param name="slingContentDispositionExcludedPaths"></param>
        /// <param name="slingContentDispositionAllPaths"></param>
        /// <returns>OrgApacheSlingSecurityImplContentDispositionFilterInfo</returns>
        OrgApacheSlingSecurityImplContentDispositionFilterInfo OrgApacheSlingSecurityImplContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingContentDispositionPaths, List<string> slingContentDispositionExcludedPaths, bool? slingContentDispositionAllPaths);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="allowEmpty"></param>
        /// <param name="allowHosts"></param>
        /// <param name="allowHostsRegexp"></param>
        /// <param name="filterMethods"></param>
        /// <param name="excludeAgentsRegexp"></param>
        /// <returns>OrgApacheSlingSecurityImplReferrerFilterInfo</returns>
        OrgApacheSlingSecurityImplReferrerFilterInfo OrgApacheSlingSecurityImplReferrerFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowEmpty, List<string> allowHosts, List<string> allowHostsRegexp, List<string> filterMethods, List<string> excludeAgentsRegexp);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="userMapping"></param>
        /// <param name="userDefault"></param>
        /// <param name="userEnableDefaultMapping"></param>
        /// <param name="requireValidation"></param>
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo</returns>
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> userMapping, string userDefault, bool? userEnableDefaultMapping, bool? requireValidation);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="serviceRanking"></param>
        /// <param name="userMapping"></param>
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo</returns>
        OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> userMapping);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="aliases"></param>
        /// <param name="index"></param>
        /// <param name="indexFiles"></param>
        /// <param name="enableHtml"></param>
        /// <param name="enableJson"></param>
        /// <param name="enableTxt"></param>
        /// <param name="enableXml"></param>
        /// <param name="jsonMaximumresults"></param>
        /// <param name="ecmaSuport"></param>
        /// <returns>OrgApacheSlingServletsGetDefaultGetServletInfo</returns>
        OrgApacheSlingServletsGetDefaultGetServletInfo OrgApacheSlingServletsGetDefaultGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aliases, bool? index, List<string> indexFiles, bool? enableHtml, bool? enableJson, bool? enableTxt, bool? enableXml, int? jsonMaximumresults, bool? ecmaSuport);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingServletSelectors"></param>
        /// <param name="ecmaSuport"></param>
        /// <returns>OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo</returns>
        OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo OrgApacheSlingServletsGetImplVersionVersionInfoServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, bool? ecmaSuport);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="schedulerExpression"></param>
        /// <param name="schedulerConcurrent"></param>
        /// <param name="chunkCleanupAge"></param>
        /// <returns>OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo</returns>
        OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo OrgApacheSlingServletsPostImplHelperChunkCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent, int? chunkCleanupAge);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="servletPostDateFormats"></param>
        /// <param name="servletPostNodeNameHints"></param>
        /// <param name="servletPostNodeNameMaxLength"></param>
        /// <param name="servletPostCheckinNewVersionableNodes"></param>
        /// <param name="servletPostAutoCheckout"></param>
        /// <param name="servletPostAutoCheckin"></param>
        /// <param name="servletPostIgnorePattern"></param>
        /// <returns>OrgApacheSlingServletsPostImplSlingPostServletInfo</returns>
        OrgApacheSlingServletsPostImplSlingPostServletInfo OrgApacheSlingServletsPostImplSlingPostServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servletPostDateFormats, List<string> servletPostNodeNameHints, int? servletPostNodeNameMaxLength, bool? servletPostCheckinNewVersionableNodes, bool? servletPostAutoCheckout, bool? servletPostAutoCheckin, string servletPostIgnorePattern);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="servletresolverServletRoot"></param>
        /// <param name="servletresolverCacheSize"></param>
        /// <param name="servletresolverPaths"></param>
        /// <param name="servletresolverDefaultExtensions"></param>
        /// <returns>OrgApacheSlingServletsResolverSlingServletResolverInfo</returns>
        OrgApacheSlingServletsResolverSlingServletResolverInfo OrgApacheSlingServletsResolverSlingServletResolver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletresolverServletRoot, int? servletresolverCacheSize, List<string> servletresolverPaths, List<string> servletresolverDefaultExtensions);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="slingName"></param>
        /// <param name="slingDescription"></param>
        /// <returns>OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo</returns>
        OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo OrgApacheSlingSettingsImplSlingSettingsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingName, string slingDescription);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="activeByDefault"></param>
        /// <param name="defaultMessage"></param>
        /// <returns>OrgApacheSlingStartupfilterImplStartupFilterImplInfo</returns>
        OrgApacheSlingStartupfilterImplStartupFilterImplInfo OrgApacheSlingStartupfilterImplStartupFilterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? activeByDefault, string defaultMessage);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="tenantRoot"></param>
        /// <param name="tenantPathMatcher"></param>
        /// <returns>OrgApacheSlingTenantInternalTenantProviderImplInfo</returns>
        OrgApacheSlingTenantInternalTenantProviderImplInfo OrgApacheSlingTenantInternalTenantProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tenantRoot, List<string> tenantPathMatcher);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="tracerSets"></param>
        /// <param name="enabled"></param>
        /// <param name="servletEnabled"></param>
        /// <param name="recordingCacheSizeInMB"></param>
        /// <param name="recordingCacheDurationInSecs"></param>
        /// <param name="recordingCompressionEnabled"></param>
        /// <param name="gzipResponse"></param>
        /// <returns>OrgApacheSlingTracerInternalLogTracerInfo</returns>
        OrgApacheSlingTracerInternalLogTracerInfo OrgApacheSlingTracerInternalLogTracer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> tracerSets, bool? enabled, bool? servletEnabled, int? recordingCacheSizeInMB, int? recordingCacheDurationInSecs, bool? recordingCompressionEnabled, bool? gzipResponse);
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param>
        /// <param name="apply"></param>
        /// <param name="delete"></param>
        /// <param name="action"></param>
        /// <param name="location"></param>
        /// <param name="propertylist"></param>
        /// <param name="policyPath"></param>
        /// <returns>OrgApacheSlingXssImplXSSFilterImplInfo</returns>
        OrgApacheSlingXssImplXSSFilterImplInfo OrgApacheSlingXssImplXSSFilterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string policyPath);
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConfigmgrApi : IConfigmgrApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigmgrApi"/> class.
        /// </summary>
        /// <param name="apiClient"> an instance of ApiClient (optional)</param>
        /// <returns></returns>
        public ConfigmgrApi(ApiClient apiClient = null)
        {
            if (apiClient == null) // use the default one in Configuration
                this.ApiClient = Configuration.DefaultApiClient; 
            else
                this.ApiClient = apiClient;
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigmgrApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConfigmgrApi(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public void SetBasePath(String basePath)
        {
            this.ApiClient.BasePath = basePath;
        }
    
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <param name="basePath">The base path</param>
        /// <value>The base path</value>
        public String GetBasePath(String basePath)
        {
            return this.ApiClient.BasePath;
        }
    
        /// <summary>
        /// Gets or sets the API client.
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="showPlaceholder"></param> 
        /// <param name="maximumCacheEntries"></param> 
        /// <param name="afScriptingCompatversion"></param> 
        /// <param name="makeFileNameUnique"></param> 
        /// <param name="generatingCompliantData"></param> 
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo</returns>            
        public AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? showPlaceholder, int? maximumCacheEntries, string afScriptingCompatversion, bool? makeFileNameUnique, bool? generatingCompliantData)
        {
            
    
            var path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (showPlaceholder != null) queryParams.Add("showPlaceholder", ApiClient.ParameterToString(showPlaceholder)); // query parameter
 if (maximumCacheEntries != null) queryParams.Add("maximumCacheEntries", ApiClient.ParameterToString(maximumCacheEntries)); // query parameter
 if (afScriptingCompatversion != null) queryParams.Add("af.scripting.compatversion", ApiClient.ParameterToString(afScriptingCompatversion)); // query parameter
 if (makeFileNameUnique != null) queryParams.Add("makeFileNameUnique", ApiClient.ParameterToString(makeFileNameUnique)); // query parameter
 if (generatingCompliantData != null) queryParams.Add("generatingCompliantData", ApiClient.ParameterToString(generatingCompliantData)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fontList"></param> 
        /// <returns>AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo</returns>            
        public AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontList)
        {
            
    
            var path = "/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fontList != null) queryParams.Add("fontList", ApiClient.ParameterToString(fontList)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo) ApiClient.Deserialize(response.Content, typeof(AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsComponentQueryCacheSize"></param> 
        /// <returns>AnalyticsComponentQueryCacheServiceInfo</returns>            
        public AnalyticsComponentQueryCacheServiceInfo AnalyticsComponentQueryCacheService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAnalyticsComponentQueryCacheSize)
        {
            
    
            var path = "/system/console/configMgr/Analytics Component Query Cache Service";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsComponentQueryCacheSize != null) queryParams.Add("cq.analytics.component.query.cache.size", ApiClient.ParameterToString(cqAnalyticsComponentQueryCacheSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling AnalyticsComponentQueryCacheService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling AnalyticsComponentQueryCacheService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (AnalyticsComponentQueryCacheServiceInfo) ApiClient.Deserialize(response.Content, typeof(AnalyticsComponentQueryCacheServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="styleString"></param> 
        /// <returns>ApacheSlingHealthCheckResultHTMLSerializerInfo</returns>            
        public ApacheSlingHealthCheckResultHTMLSerializerInfo ApacheSlingHealthCheckResultHTMLSerializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string styleString)
        {
            
    
            var path = "/system/console/configMgr/Apache Sling Health Check Result HTML Serializer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (styleString != null) queryParams.Add("styleString", ApiClient.ParameterToString(styleString)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ApacheSlingHealthCheckResultHTMLSerializer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ApacheSlingHealthCheckResultHTMLSerializer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ApacheSlingHealthCheckResultHTMLSerializerInfo) ApiClient.Deserialize(response.Content, typeof(ApacheSlingHealthCheckResultHTMLSerializerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="formsManagerConfigIncludeOOTBTemplates"></param> 
        /// <param name="formsManagerConfigIncludeDeprecatedTemplates"></param> 
        /// <returns>ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo</returns>            
        public ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsManagerConfigIncludeOOTBTemplates, bool? formsManagerConfigIncludeDeprecatedTemplates)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (formsManagerConfigIncludeOOTBTemplates != null) queryParams.Add("formsManagerConfig.includeOOTBTemplates", ApiClient.ParameterToString(formsManagerConfigIncludeOOTBTemplates)); // query parameter
 if (formsManagerConfigIncludeDeprecatedTemplates != null) queryParams.Add("formsManagerConfig.includeDeprecatedTemplates", ApiClient.ParameterToString(formsManagerConfigIncludeDeprecatedTemplates)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isTransactionRecordingEnabled"></param> 
        /// <returns>ComAdobeAemTransactionCoreImplTransactionRecorderInfo</returns>            
        public ComAdobeAemTransactionCoreImplTransactionRecorderInfo ComAdobeAemTransactionCoreImplTransactionRecorder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isTransactionRecordingEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isTransactionRecordingEnabled != null) queryParams.Add("isTransactionRecordingEnabled", ApiClient.ParameterToString(isTransactionRecordingEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemTransactionCoreImplTransactionRecorder: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemTransactionCoreImplTransactionRecorder: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemTransactionCoreImplTransactionRecorderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemTransactionCoreImplTransactionRecorderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <returns>ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo</returns>            
        public ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <returns>ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo</returns>            
        public ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="preUpgradeMaintenanceTasks"></param> 
        /// <param name="preUpgradeHcTags"></param> 
        /// <returns>ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo</returns>            
        public ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> preUpgradeMaintenanceTasks, List<string> preUpgradeHcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (preUpgradeMaintenanceTasks != null) queryParams.Add("pre-upgrade.maintenance.tasks", ApiClient.ParameterToString(preUpgradeMaintenanceTasks)); // query parameter
 if (preUpgradeHcTags != null) queryParams.Add("pre-upgrade.hc.tags", ApiClient.ParameterToString(preUpgradeHcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="rootPath"></param> 
        /// <param name="fixInconsistencies"></param> 
        /// <returns>ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo</returns>            
        public ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootPath, bool? fixInconsistencies)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (rootPath != null) queryParams.Add("root.path", ApiClient.ParameterToString(rootPath)); // query parameter
 if (fixInconsistencies != null) queryParams.Add("fix.inconsistencies", ApiClient.ParameterToString(fixInconsistencies)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAccountmanagerTokenValidityPeriod"></param> 
        /// <param name="cqAccountmanagerConfigRequestnewaccountMail"></param> 
        /// <param name="cqAccountmanagerConfigRequestnewpwdMail"></param> 
        /// <returns>ComAdobeCqAccountApiAccountManagementServiceInfo</returns>            
        public ComAdobeCqAccountApiAccountManagementServiceInfo ComAdobeCqAccountApiAccountManagementService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAccountmanagerTokenValidityPeriod, string cqAccountmanagerConfigRequestnewaccountMail, string cqAccountmanagerConfigRequestnewpwdMail)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAccountmanagerTokenValidityPeriod != null) queryParams.Add("cq.accountmanager.token.validity.period", ApiClient.ParameterToString(cqAccountmanagerTokenValidityPeriod)); // query parameter
 if (cqAccountmanagerConfigRequestnewaccountMail != null) queryParams.Add("cq.accountmanager.config.requestnewaccount.mail", ApiClient.ParameterToString(cqAccountmanagerConfigRequestnewaccountMail)); // query parameter
 if (cqAccountmanagerConfigRequestnewpwdMail != null) queryParams.Add("cq.accountmanager.config.requestnewpwd.mail", ApiClient.ParameterToString(cqAccountmanagerConfigRequestnewpwdMail)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAccountApiAccountManagementService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAccountApiAccountManagementService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAccountApiAccountManagementServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAccountApiAccountManagementServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAccountmanagerConfigInformnewaccountMail"></param> 
        /// <param name="cqAccountmanagerConfigInformnewpwdMail"></param> 
        /// <returns>ComAdobeCqAccountImplAccountManagementServletInfo</returns>            
        public ComAdobeCqAccountImplAccountManagementServletInfo ComAdobeCqAccountImplAccountManagementServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAccountmanagerConfigInformnewaccountMail, string cqAccountmanagerConfigInformnewpwdMail)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAccountmanagerConfigInformnewaccountMail != null) queryParams.Add("cq.accountmanager.config.informnewaccount.mail", ApiClient.ParameterToString(cqAccountmanagerConfigInformnewaccountMail)); // query parameter
 if (cqAccountmanagerConfigInformnewpwdMail != null) queryParams.Add("cq.accountmanager.config.informnewpwd.mail", ApiClient.ParameterToString(cqAccountmanagerConfigInformnewpwdMail)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAccountImplAccountManagementServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAccountImplAccountManagementServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAccountImplAccountManagementServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAccountImplAccountManagementServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAddressLocationDefaultMaxResults"></param> 
        /// <returns>ComAdobeCqAddressImplLocationLocationListServletInfo</returns>            
        public ComAdobeCqAddressImplLocationLocationListServletInfo ComAdobeCqAddressImplLocationLocationListServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqAddressLocationDefaultMaxResults)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAddressLocationDefaultMaxResults != null) queryParams.Add("cq.address.location.default.maxResults", ApiClient.ParameterToString(cqAddressLocationDefaultMaxResults)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAddressImplLocationLocationListServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAddressImplLocationLocationListServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAddressImplLocationLocationListServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAddressImplLocationLocationListServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="auditlogRuleName"></param> 
        /// <param name="auditlogRuleContentpath"></param> 
        /// <param name="auditlogRuleMinimumage"></param> 
        /// <param name="auditlogRuleTypes"></param> 
        /// <returns>ComAdobeCqAuditPurgeDamInfo</returns>            
        public ComAdobeCqAuditPurgeDamInfo ComAdobeCqAuditPurgeDam (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.audit.purge.Dam";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (auditlogRuleName != null) queryParams.Add("auditlog.rule.name", ApiClient.ParameterToString(auditlogRuleName)); // query parameter
 if (auditlogRuleContentpath != null) queryParams.Add("auditlog.rule.contentpath", ApiClient.ParameterToString(auditlogRuleContentpath)); // query parameter
 if (auditlogRuleMinimumage != null) queryParams.Add("auditlog.rule.minimumage", ApiClient.ParameterToString(auditlogRuleMinimumage)); // query parameter
 if (auditlogRuleTypes != null) queryParams.Add("auditlog.rule.types", ApiClient.ParameterToString(auditlogRuleTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgeDam: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgeDam: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAuditPurgeDamInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAuditPurgeDamInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="auditlogRuleName"></param> 
        /// <param name="auditlogRuleContentpath"></param> 
        /// <param name="auditlogRuleMinimumage"></param> 
        /// <param name="auditlogRuleTypes"></param> 
        /// <returns>ComAdobeCqAuditPurgePagesInfo</returns>            
        public ComAdobeCqAuditPurgePagesInfo ComAdobeCqAuditPurgePages (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.audit.purge.Pages";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (auditlogRuleName != null) queryParams.Add("auditlog.rule.name", ApiClient.ParameterToString(auditlogRuleName)); // query parameter
 if (auditlogRuleContentpath != null) queryParams.Add("auditlog.rule.contentpath", ApiClient.ParameterToString(auditlogRuleContentpath)); // query parameter
 if (auditlogRuleMinimumage != null) queryParams.Add("auditlog.rule.minimumage", ApiClient.ParameterToString(auditlogRuleMinimumage)); // query parameter
 if (auditlogRuleTypes != null) queryParams.Add("auditlog.rule.types", ApiClient.ParameterToString(auditlogRuleTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgePages: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgePages: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAuditPurgePagesInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAuditPurgePagesInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="auditlogRuleName"></param> 
        /// <param name="auditlogRuleContentpath"></param> 
        /// <param name="auditlogRuleMinimumage"></param> 
        /// <param name="auditlogRuleTypes"></param> 
        /// <returns>ComAdobeCqAuditPurgeReplicationInfo</returns>            
        public ComAdobeCqAuditPurgeReplicationInfo ComAdobeCqAuditPurgeReplication (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string auditlogRuleName, string auditlogRuleContentpath, int? auditlogRuleMinimumage, string auditlogRuleTypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.audit.purge.Replication";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (auditlogRuleName != null) queryParams.Add("auditlog.rule.name", ApiClient.ParameterToString(auditlogRuleName)); // query parameter
 if (auditlogRuleContentpath != null) queryParams.Add("auditlog.rule.contentpath", ApiClient.ParameterToString(auditlogRuleContentpath)); // query parameter
 if (auditlogRuleMinimumage != null) queryParams.Add("auditlog.rule.minimumage", ApiClient.ParameterToString(auditlogRuleMinimumage)); // query parameter
 if (auditlogRuleTypes != null) queryParams.Add("auditlog.rule.types", ApiClient.ParameterToString(auditlogRuleTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgeReplication: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqAuditPurgeReplication: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqAuditPurgeReplicationInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqAuditPurgeReplicationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="keypairId"></param> 
        /// <param name="keypairAlias"></param> 
        /// <param name="cdnrewriterAttributes"></param> 
        /// <param name="cdnRewriterDistributionDomain"></param> 
        /// <returns>ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo</returns>            
        public ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string keypairId, string keypairAlias, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (keypairId != null) queryParams.Add("keypair.id", ApiClient.ParameterToString(keypairId)); // query parameter
 if (keypairAlias != null) queryParams.Add("keypair.alias", ApiClient.ParameterToString(keypairAlias)); // query parameter
 if (cdnrewriterAttributes != null) queryParams.Add("cdnrewriter.attributes", ApiClient.ParameterToString(cdnrewriterAttributes)); // query parameter
 if (cdnRewriterDistributionDomain != null) queryParams.Add("cdn.rewriter.distribution.domain", ApiClient.ParameterToString(cdnRewriterDistributionDomain)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cdnConfigDistributionDomain"></param> 
        /// <param name="cdnConfigEnableRewriting"></param> 
        /// <param name="cdnConfigPathPrefixes"></param> 
        /// <param name="cdnConfigCdnttl"></param> 
        /// <param name="cdnConfigApplicationProtocol"></param> 
        /// <returns>ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo</returns>            
        public ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo ComAdobeCqCdnRewriterImplCDNConfigServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cdnConfigDistributionDomain, bool? cdnConfigEnableRewriting, List<string> cdnConfigPathPrefixes, int? cdnConfigCdnttl, string cdnConfigApplicationProtocol)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cdnConfigDistributionDomain != null) queryParams.Add("cdn.config.distribution.domain", ApiClient.ParameterToString(cdnConfigDistributionDomain)); // query parameter
 if (cdnConfigEnableRewriting != null) queryParams.Add("cdn.config.enable.rewriting", ApiClient.ParameterToString(cdnConfigEnableRewriting)); // query parameter
 if (cdnConfigPathPrefixes != null) queryParams.Add("cdn.config.path.prefixes", ApiClient.ParameterToString(cdnConfigPathPrefixes)); // query parameter
 if (cdnConfigCdnttl != null) queryParams.Add("cdn.config.cdnttl", ApiClient.ParameterToString(cdnConfigCdnttl)); // query parameter
 if (cdnConfigApplicationProtocol != null) queryParams.Add("cdn.config.application.protocol", ApiClient.ParameterToString(cdnConfigApplicationProtocol)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplCDNConfigServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplCDNConfigServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="cdnrewriterAttributes"></param> 
        /// <param name="cdnRewriterDistributionDomain"></param> 
        /// <returns>ComAdobeCqCdnRewriterImplCDNRewriterInfo</returns>            
        public ComAdobeCqCdnRewriterImplCDNRewriterInfo ComAdobeCqCdnRewriterImplCDNRewriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> cdnrewriterAttributes, string cdnRewriterDistributionDomain)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (cdnrewriterAttributes != null) queryParams.Add("cdnrewriter.attributes", ApiClient.ParameterToString(cdnrewriterAttributes)); // query parameter
 if (cdnRewriterDistributionDomain != null) queryParams.Add("cdn.rewriter.distribution.domain", ApiClient.ParameterToString(cdnRewriterDistributionDomain)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplCDNRewriter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCdnRewriterImplCDNRewriter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCdnRewriterImplCDNRewriterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCdnRewriterImplCDNRewriterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="flushAgents"></param> 
        /// <returns>ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo</returns>            
        public ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (flushAgents != null) queryParams.Add("flush.agents", ApiClient.ParameterToString(flushAgents)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommerceAssetHandlerActive"></param> 
        /// <param name="cqCommerceAssetHandlerName"></param> 
        /// <returns>ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo</returns>            
        public ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo ComAdobeCqCommerceImplAssetDynamicImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommerceAssetHandlerActive != null) queryParams.Add("cq.commerce.asset.handler.active", ApiClient.ParameterToString(cqCommerceAssetHandlerActive)); // query parameter
 if (cqCommerceAssetHandlerName != null) queryParams.Add("cq.commerce.asset.handler.name", ApiClient.ParameterToString(cqCommerceAssetHandlerName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetDynamicImageHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetDynamicImageHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommerceAssetHandlerFallback"></param> 
        /// <returns>ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo</returns>            
        public ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommerceAssetHandlerFallback)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommerceAssetHandlerFallback != null) queryParams.Add("cq.commerce.asset.handler.fallback", ApiClient.ParameterToString(cqCommerceAssetHandlerFallback)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommerceAssetHandlerActive"></param> 
        /// <param name="cqCommerceAssetHandlerName"></param> 
        /// <returns>ComAdobeCqCommerceImplAssetStaticImageHandlerInfo</returns>            
        public ComAdobeCqCommerceImplAssetStaticImageHandlerInfo ComAdobeCqCommerceImplAssetStaticImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommerceAssetHandlerActive != null) queryParams.Add("cq.commerce.asset.handler.active", ApiClient.ParameterToString(cqCommerceAssetHandlerActive)); // query parameter
 if (cqCommerceAssetHandlerName != null) queryParams.Add("cq.commerce.asset.handler.name", ApiClient.ParameterToString(cqCommerceAssetHandlerName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetStaticImageHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetStaticImageHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommerceImplAssetStaticImageHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommerceImplAssetStaticImageHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommerceAssetHandlerActive"></param> 
        /// <param name="cqCommerceAssetHandlerName"></param> 
        /// <returns>ComAdobeCqCommerceImplAssetVideoHandlerInfo</returns>            
        public ComAdobeCqCommerceImplAssetVideoHandlerInfo ComAdobeCqCommerceImplAssetVideoHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommerceAssetHandlerActive, string cqCommerceAssetHandlerName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommerceAssetHandlerActive != null) queryParams.Add("cq.commerce.asset.handler.active", ApiClient.ParameterToString(cqCommerceAssetHandlerActive)); // query parameter
 if (cqCommerceAssetHandlerName != null) queryParams.Add("cq.commerce.asset.handler.name", ApiClient.ParameterToString(cqCommerceAssetHandlerName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetVideoHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplAssetVideoHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommerceImplAssetVideoHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommerceImplAssetVideoHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommercePromotionRoot"></param> 
        /// <returns>ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo</returns>            
        public ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo ComAdobeCqCommerceImplPromotionPromotionManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqCommercePromotionRoot)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommercePromotionRoot != null) queryParams.Add("cq.commerce.promotion.root", ApiClient.ParameterToString(cqCommercePromotionRoot)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplPromotionPromotionManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommerceImplPromotionPromotionManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommerceCataloggeneratorBucketsize"></param> 
        /// <param name="cqCommerceCataloggeneratorBucketname"></param> 
        /// <param name="cqCommerceCataloggeneratorExcludedtemplateproperties"></param> 
        /// <returns>ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo</returns>            
        public ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqCommerceCataloggeneratorBucketsize, string cqCommerceCataloggeneratorBucketname, List<string> cqCommerceCataloggeneratorExcludedtemplateproperties)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommerceCataloggeneratorBucketsize != null) queryParams.Add("cq.commerce.cataloggenerator.bucketsize", ApiClient.ParameterToString(cqCommerceCataloggeneratorBucketsize)); // query parameter
 if (cqCommerceCataloggeneratorBucketname != null) queryParams.Add("cq.commerce.cataloggenerator.bucketname", ApiClient.ParameterToString(cqCommerceCataloggeneratorBucketname)); // query parameter
 if (cqCommerceCataloggeneratorExcludedtemplateproperties != null) queryParams.Add("cq.commerce.cataloggenerator.excludedtemplateproperties", ApiClient.ParameterToString(cqCommerceCataloggeneratorExcludedtemplateproperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqCommercePageeventlistenerEnabled"></param> 
        /// <returns>ComAdobeCqCommercePimImplPageEventListenerInfo</returns>            
        public ComAdobeCqCommercePimImplPageEventListenerInfo ComAdobeCqCommercePimImplPageEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqCommercePageeventlistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqCommercePageeventlistenerEnabled != null) queryParams.Add("cq.commerce.pageeventlistener.enabled", ApiClient.ParameterToString(cqCommercePageeventlistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplPageEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplPageEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommercePimImplPageEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommercePimImplPageEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="feedGeneratorAlgorithm"></param> 
        /// <returns>ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo</returns>            
        public ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string feedGeneratorAlgorithm)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (feedGeneratorAlgorithm != null) queryParams.Add("Feed generator algorithm", ApiClient.ParameterToString(feedGeneratorAlgorithm)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="reportingservicesUrl"></param> 
        /// <returns>ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo</returns>            
        public ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo ComAdobeCqContentinsightImplReportingServicesSettingsProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string reportingservicesUrl)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (reportingservicesUrl != null) queryParams.Add("reportingservices.url", ApiClient.ParameterToString(reportingservicesUrl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplReportingServicesSettingsProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplReportingServicesSettingsProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="brightedgeUrl"></param> 
        /// <returns>ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo</returns>            
        public ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string brightedgeUrl)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (brightedgeUrl != null) queryParams.Add("brightedge.url", ApiClient.ParameterToString(brightedgeUrl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="reportingservicesProxyWhitelist"></param> 
        /// <returns>ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo</returns>            
        public ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo ComAdobeCqContentinsightImplServletsReportingServicesProxyServle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> reportingservicesProxyWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (reportingservicesProxyWhitelist != null) queryParams.Add("reportingservices.proxy.whitelist", ApiClient.ParameterToString(reportingservicesProxyWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplServletsReportingServicesProxyServle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqContentinsightImplServletsReportingServicesProxyServle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="damCfmComponentResourceType"></param> 
        /// <param name="damCfmComponentFileReferenceProp"></param> 
        /// <param name="damCfmComponentElementsProp"></param> 
        /// <param name="damCfmComponentVariationProp"></param> 
        /// <returns>ComAdobeCqDamCfmImplComponentComponentConfigImplInfo</returns>            
        public ComAdobeCqDamCfmImplComponentComponentConfigImplInfo ComAdobeCqDamCfmImplComponentComponentConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string damCfmComponentResourceType, string damCfmComponentFileReferenceProp, string damCfmComponentElementsProp, string damCfmComponentVariationProp)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (damCfmComponentResourceType != null) queryParams.Add("dam.cfm.component.resourceType", ApiClient.ParameterToString(damCfmComponentResourceType)); // query parameter
 if (damCfmComponentFileReferenceProp != null) queryParams.Add("dam.cfm.component.fileReferenceProp", ApiClient.ParameterToString(damCfmComponentFileReferenceProp)); // query parameter
 if (damCfmComponentElementsProp != null) queryParams.Add("dam.cfm.component.elementsProp", ApiClient.ParameterToString(damCfmComponentElementsProp)); // query parameter
 if (damCfmComponentVariationProp != null) queryParams.Add("dam.cfm.component.variationProp", ApiClient.ParameterToString(damCfmComponentVariationProp)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplComponentComponentConfigImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplComponentComponentConfigImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamCfmImplComponentComponentConfigImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamCfmImplComponentComponentConfigImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="damCfmResourceTypes"></param> 
        /// <param name="damCfmReferenceProperties"></param> 
        /// <returns>ComAdobeCqDamCfmImplConfFeatureConfigImplInfo</returns>            
        public ComAdobeCqDamCfmImplConfFeatureConfigImplInfo ComAdobeCqDamCfmImplConfFeatureConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> damCfmResourceTypes, List<string> damCfmReferenceProperties)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (damCfmResourceTypes != null) queryParams.Add("dam.cfm.resourceTypes", ApiClient.ParameterToString(damCfmResourceTypes)); // query parameter
 if (damCfmReferenceProperties != null) queryParams.Add("dam.cfm.referenceProperties", ApiClient.ParameterToString(damCfmReferenceProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplConfFeatureConfigImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplConfFeatureConfigImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamCfmImplConfFeatureConfigImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamCfmImplConfFeatureConfigImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pipelineType"></param> 
        /// <returns>ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo</returns>            
        public ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo ComAdobeCqDamCfmImplContentRewriterAssetProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pipelineType != null) queryParams.Add("pipeline.type", ApiClient.ParameterToString(pipelineType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterAssetProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterAssetProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pipelineType"></param> 
        /// <returns>ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo</returns>            
        public ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo ComAdobeCqDamCfmImplContentRewriterParRangeFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pipelineType != null) queryParams.Add("pipeline.type", ApiClient.ParameterToString(pipelineType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterParRangeFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterParRangeFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pipelineType"></param> 
        /// <returns>ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo</returns>            
        public ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo ComAdobeCqDamCfmImplContentRewriterPayloadFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pipelineType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pipelineType != null) queryParams.Add("pipeline.type", ApiClient.ParameterToString(pipelineType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterPayloadFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamCfmImplContentRewriterPayloadFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxMemory"></param> 
        /// <returns>ComAdobeCqDamDmProcessImagePTiffManagerImplInfo</returns>            
        public ComAdobeCqDamDmProcessImagePTiffManagerImplInfo ComAdobeCqDamDmProcessImagePTiffManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxMemory)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxMemory != null) queryParams.Add("maxMemory", ApiClient.ParameterToString(maxMemory)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamDmProcessImagePTiffManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamDmProcessImagePTiffManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamDmProcessImagePTiffManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamDmProcessImagePTiffManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="dmreplicateonmodifyEnabled"></param> 
        /// <param name="dmreplicateonmodifyForcesyncdeletes"></param> 
        /// <returns>ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo</returns>            
        public ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? dmreplicateonmodifyEnabled, bool? dmreplicateonmodifyForcesyncdeletes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (dmreplicateonmodifyEnabled != null) queryParams.Add("dmreplicateonmodify.enabled", ApiClient.ParameterToString(dmreplicateonmodifyEnabled)); // query parameter
 if (dmreplicateonmodifyForcesyncdeletes != null) queryParams.Add("dmreplicateonmodify.forcesyncdeletes", ApiClient.ParameterToString(dmreplicateonmodifyForcesyncdeletes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeDamMacSyncClientSoTimeout"></param> 
        /// <returns>ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo</returns>            
        public ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeDamMacSyncClientSoTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeDamMacSyncClientSoTimeout != null) queryParams.Add("com.adobe.dam.mac.sync.client.so.timeout", ApiClient.ParameterToString(comAdobeDamMacSyncClientSoTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths"></param> 
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceSyncRenditions"></param> 
        /// <param name="comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs"></param> 
        /// <param name="comAdobeCqDamMacSyncDamsyncservicePlatform"></param> 
        /// <returns>ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo</returns>            
        public ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo ComAdobeCqDamMacSyncImplDAMSyncServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths, bool? comAdobeCqDamMacSyncDamsyncserviceSyncRenditions, int? comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs, string comAdobeCqDamMacSyncDamsyncservicePlatform)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths != null) queryParams.Add("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths", ApiClient.ParameterToString(comAdobeCqDamMacSyncDamsyncserviceRegisteredPaths)); // query parameter
 if (comAdobeCqDamMacSyncDamsyncserviceSyncRenditions != null) queryParams.Add("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions", ApiClient.ParameterToString(comAdobeCqDamMacSyncDamsyncserviceSyncRenditions)); // query parameter
 if (comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs != null) queryParams.Add("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms", ApiClient.ParameterToString(comAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs)); // query parameter
 if (comAdobeCqDamMacSyncDamsyncservicePlatform != null) queryParams.Add("com.adobe.cq.dam.mac.sync.damsyncservice.platform", ApiClient.ParameterToString(comAdobeCqDamMacSyncDamsyncservicePlatform)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamMacSyncImplDAMSyncServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamMacSyncImplDAMSyncServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="nuiEnabled"></param> 
        /// <param name="nuiServiceUrl"></param> 
        /// <param name="nuiApiKey"></param> 
        /// <returns>ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo</returns>            
        public ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo ComAdobeCqDamProcessorNuiImplNuiAssetProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? nuiEnabled, string nuiServiceUrl, string nuiApiKey)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (nuiEnabled != null) queryParams.Add("nuiEnabled", ApiClient.ParameterToString(nuiEnabled)); // query parameter
 if (nuiServiceUrl != null) queryParams.Add("nuiServiceUrl", ApiClient.ParameterToString(nuiServiceUrl)); // query parameter
 if (nuiApiKey != null) queryParams.Add("nuiApiKey", ApiClient.ParameterToString(nuiApiKey)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamProcessorNuiImplNuiAssetProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamProcessorNuiImplNuiAssetProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="tcpPort"></param> 
        /// <param name="allowRemoteAccess"></param> 
        /// <param name="maxRenderRgnPixels"></param> 
        /// <param name="maxMessageSize"></param> 
        /// <param name="randomAccessUrlTimeout"></param> 
        /// <param name="workerThreads"></param> 
        /// <returns>ComAdobeCqDamS7imagingImplIsImageServerComponentInfo</returns>            
        public ComAdobeCqDamS7imagingImplIsImageServerComponentInfo ComAdobeCqDamS7imagingImplIsImageServerComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tcpPort, bool? allowRemoteAccess, string maxRenderRgnPixels, string maxMessageSize, int? randomAccessUrlTimeout, int? workerThreads)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (tcpPort != null) queryParams.Add("TcpPort", ApiClient.ParameterToString(tcpPort)); // query parameter
 if (allowRemoteAccess != null) queryParams.Add("AllowRemoteAccess", ApiClient.ParameterToString(allowRemoteAccess)); // query parameter
 if (maxRenderRgnPixels != null) queryParams.Add("MaxRenderRgnPixels", ApiClient.ParameterToString(maxRenderRgnPixels)); // query parameter
 if (maxMessageSize != null) queryParams.Add("MaxMessageSize", ApiClient.ParameterToString(maxMessageSize)); // query parameter
 if (randomAccessUrlTimeout != null) queryParams.Add("RandomAccessUrlTimeout", ApiClient.ParameterToString(randomAccessUrlTimeout)); // query parameter
 if (workerThreads != null) queryParams.Add("WorkerThreads", ApiClient.ParameterToString(workerThreads)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamS7imagingImplIsImageServerComponent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamS7imagingImplIsImageServerComponent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamS7imagingImplIsImageServerComponentInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamS7imagingImplIsImageServerComponentInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cacheEnable"></param> 
        /// <param name="cacheRootPaths"></param> 
        /// <param name="cacheMaxSize"></param> 
        /// <param name="cacheMaxEntries"></param> 
        /// <returns>ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo</returns>            
        public ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo ComAdobeCqDamS7imagingImplPsPlatformServerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cacheEnable, List<string> cacheRootPaths, int? cacheMaxSize, int? cacheMaxEntries)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cacheEnable != null) queryParams.Add("cache.enable", ApiClient.ParameterToString(cacheEnable)); // query parameter
 if (cacheRootPaths != null) queryParams.Add("cache.rootPaths", ApiClient.ParameterToString(cacheRootPaths)); // query parameter
 if (cacheMaxSize != null) queryParams.Add("cache.maxSize", ApiClient.ParameterToString(cacheMaxSize)); // query parameter
 if (cacheMaxEntries != null) queryParams.Add("cache.maxEntries", ApiClient.ParameterToString(cacheMaxEntries)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamS7imagingImplPsPlatformServerServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamS7imagingImplPsPlatformServerServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="pathPrefix"></param> 
        /// <param name="createVersion"></param> 
        /// <returns>ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo</returns>            
        public ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo ComAdobeCqDamWebdavImplIoAssetIOHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string pathPrefix, bool? createVersion)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (pathPrefix != null) queryParams.Add("pathPrefix", ApiClient.ParameterToString(pathPrefix)); // query parameter
 if (createVersion != null) queryParams.Add("createVersion", ApiClient.ParameterToString(createVersion)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoAssetIOHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoAssetIOHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamWebdavVersionLinkingEnable"></param> 
        /// <param name="cqDamWebdavVersionLinkingSchedulerPeriod"></param> 
        /// <param name="cqDamWebdavVersionLinkingStagingTimeout"></param> 
        /// <returns>ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo</returns>            
        public ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamWebdavVersionLinkingEnable, int? cqDamWebdavVersionLinkingSchedulerPeriod, int? cqDamWebdavVersionLinkingStagingTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamWebdavVersionLinkingEnable != null) queryParams.Add("cq.dam.webdav.version.linking.enable", ApiClient.ParameterToString(cqDamWebdavVersionLinkingEnable)); // query parameter
 if (cqDamWebdavVersionLinkingSchedulerPeriod != null) queryParams.Add("cq.dam.webdav.version.linking.scheduler.period", ApiClient.ParameterToString(cqDamWebdavVersionLinkingSchedulerPeriod)); // query parameter
 if (cqDamWebdavVersionLinkingStagingTimeout != null) queryParams.Add("cq.dam.webdav.version.linking.staging.timeout", ApiClient.ParameterToString(cqDamWebdavVersionLinkingStagingTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters"></param> 
        /// <returns>ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo</returns>            
        public ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo ComAdobeCqDamWebdavImplIoSpecialFilesHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters != null) queryParams.Add("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters", ApiClient.ParameterToString(comDayCqDamCoreImplIoSpecialFilesHandlerFilepatters)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoSpecialFilesHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDamWebdavImplIoSpecialFilesHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="firewallDeserializationWhitelist"></param> 
        /// <param name="firewallDeserializationBlacklist"></param> 
        /// <param name="firewallDeserializationDiagnostics"></param> 
        /// <returns>ComAdobeCqDeserfwImplDeserializationFirewallImplInfo</returns>            
        public ComAdobeCqDeserfwImplDeserializationFirewallImplInfo ComAdobeCqDeserfwImplDeserializationFirewallImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> firewallDeserializationWhitelist, List<string> firewallDeserializationBlacklist, string firewallDeserializationDiagnostics)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (firewallDeserializationWhitelist != null) queryParams.Add("firewall.deserialization.whitelist", ApiClient.ParameterToString(firewallDeserializationWhitelist)); // query parameter
 if (firewallDeserializationBlacklist != null) queryParams.Add("firewall.deserialization.blacklist", ApiClient.ParameterToString(firewallDeserializationBlacklist)); // query parameter
 if (firewallDeserializationDiagnostics != null) queryParams.Add("firewall.deserialization.diagnostics", ApiClient.ParameterToString(firewallDeserializationDiagnostics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDeserfwImplDeserializationFirewallImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDeserfwImplDeserializationFirewallImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDeserfwImplDeserializationFirewallImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDeserfwImplDeserializationFirewallImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <returns>ComAdobeCqDtmImplServiceDTMWebServiceImplInfo</returns>            
        public ComAdobeCqDtmImplServiceDTMWebServiceImplInfo ComAdobeCqDtmImplServiceDTMWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectionTimeout, int? socketTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connection.timeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socket.timeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmImplServiceDTMWebServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmImplServiceDTMWebServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDtmImplServiceDTMWebServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDtmImplServiceDTMWebServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="dtmStagingIpWhitelist"></param> 
        /// <param name="dtmProductionIpWhitelist"></param> 
        /// <returns>ComAdobeCqDtmImplServletsDTMDeployHookServletInfo</returns>            
        public ComAdobeCqDtmImplServletsDTMDeployHookServletInfo ComAdobeCqDtmImplServletsDTMDeployHookServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> dtmStagingIpWhitelist, List<string> dtmProductionIpWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (dtmStagingIpWhitelist != null) queryParams.Add("dtm.staging.ip.whitelist", ApiClient.ParameterToString(dtmStagingIpWhitelist)); // query parameter
 if (dtmProductionIpWhitelist != null) queryParams.Add("dtm.production.ip.whitelist", ApiClient.ParameterToString(dtmProductionIpWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmImplServletsDTMDeployHookServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmImplServletsDTMDeployHookServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDtmImplServletsDTMDeployHookServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDtmImplServletsDTMDeployHookServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="endpointUri"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <returns>ComAdobeCqDtmReactorImplServiceWebServiceImplInfo</returns>            
        public ComAdobeCqDtmReactorImplServiceWebServiceImplInfo ComAdobeCqDtmReactorImplServiceWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (endpointUri != null) queryParams.Add("endpointUri", ApiClient.ParameterToString(endpointUri)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connectionTimeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socketTimeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmReactorImplServiceWebServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqDtmReactorImplServiceWebServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqDtmReactorImplServiceWebServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqDtmReactorImplServiceWebServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="disabledForGroups"></param> 
        /// <returns>ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo</returns>            
        public ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo ComAdobeCqExperiencelogImplExperienceLogConfigServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> disabledForGroups)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (disabledForGroups != null) queryParams.Add("disabledForGroups", ApiClient.ParameterToString(disabledForGroups)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqExperiencelogImplExperienceLogConfigServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqExperiencelogImplExperienceLogConfigServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <param name="packageNames"></param> 
        /// <returns>ComAdobeCqHcContentPackagesHealthCheckInfo</returns>            
        public ComAdobeCqHcContentPackagesHealthCheckInfo ComAdobeCqHcContentPackagesHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> packageNames)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
 if (packageNames != null) queryParams.Add("package.names", ApiClient.ParameterToString(packageNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHcContentPackagesHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHcContentPackagesHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqHcContentPackagesHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqHcContentPackagesHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="historyRequestFilterExcludedSelectors"></param> 
        /// <param name="historyRequestFilterExcludedExtensions"></param> 
        /// <returns>ComAdobeCqHistoryImplHistoryRequestFilterInfo</returns>            
        public ComAdobeCqHistoryImplHistoryRequestFilterInfo ComAdobeCqHistoryImplHistoryRequestFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyRequestFilterExcludedSelectors, List<string> historyRequestFilterExcludedExtensions)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (historyRequestFilterExcludedSelectors != null) queryParams.Add("history.requestFilter.excludedSelectors", ApiClient.ParameterToString(historyRequestFilterExcludedSelectors)); // query parameter
 if (historyRequestFilterExcludedExtensions != null) queryParams.Add("history.requestFilter.excludedExtensions", ApiClient.ParameterToString(historyRequestFilterExcludedExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHistoryImplHistoryRequestFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHistoryImplHistoryRequestFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqHistoryImplHistoryRequestFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqHistoryImplHistoryRequestFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="historyServiceResourceTypes"></param> 
        /// <param name="historyServicePathFilter"></param> 
        /// <returns>ComAdobeCqHistoryImplHistoryServiceImplInfo</returns>            
        public ComAdobeCqHistoryImplHistoryServiceImplInfo ComAdobeCqHistoryImplHistoryServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> historyServiceResourceTypes, List<string> historyServicePathFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (historyServiceResourceTypes != null) queryParams.Add("history.service.resourceTypes", ApiClient.ParameterToString(historyServiceResourceTypes)); // query parameter
 if (historyServicePathFilter != null) queryParams.Add("history.service.pathFilter", ApiClient.ParameterToString(historyServicePathFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHistoryImplHistoryServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqHistoryImplHistoryServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqHistoryImplHistoryServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqHistoryImplHistoryServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="inboxImplTypeproviderRegistrypaths"></param> 
        /// <param name="inboxImplTypeproviderLegacypaths"></param> 
        /// <param name="inboxImplTypeproviderDefaulturlFailureitem"></param> 
        /// <param name="inboxImplTypeproviderDefaulturlWorkitem"></param> 
        /// <param name="inboxImplTypeproviderDefaulturlTask"></param> 
        /// <returns>ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo</returns>            
        public ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo ComAdobeCqInboxImplTypeproviderItemTypeProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> inboxImplTypeproviderRegistrypaths, List<string> inboxImplTypeproviderLegacypaths, string inboxImplTypeproviderDefaulturlFailureitem, string inboxImplTypeproviderDefaulturlWorkitem, string inboxImplTypeproviderDefaulturlTask)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (inboxImplTypeproviderRegistrypaths != null) queryParams.Add("inbox.impl.typeprovider.registrypaths", ApiClient.ParameterToString(inboxImplTypeproviderRegistrypaths)); // query parameter
 if (inboxImplTypeproviderLegacypaths != null) queryParams.Add("inbox.impl.typeprovider.legacypaths", ApiClient.ParameterToString(inboxImplTypeproviderLegacypaths)); // query parameter
 if (inboxImplTypeproviderDefaulturlFailureitem != null) queryParams.Add("inbox.impl.typeprovider.defaulturl.failureitem", ApiClient.ParameterToString(inboxImplTypeproviderDefaulturlFailureitem)); // query parameter
 if (inboxImplTypeproviderDefaulturlWorkitem != null) queryParams.Add("inbox.impl.typeprovider.defaulturl.workitem", ApiClient.ParameterToString(inboxImplTypeproviderDefaulturlWorkitem)); // query parameter
 if (inboxImplTypeproviderDefaulturlTask != null) queryParams.Add("inbox.impl.typeprovider.defaulturl.task", ApiClient.ParameterToString(inboxImplTypeproviderDefaulturlTask)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqInboxImplTypeproviderItemTypeProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqInboxImplTypeproviderItemTypeProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="imageQuality"></param> 
        /// <param name="imageSupportedResolutions"></param> 
        /// <returns>ComAdobeCqProjectsImplServletProjectImageServletInfo</returns>            
        public ComAdobeCqProjectsImplServletProjectImageServletInfo ComAdobeCqProjectsImplServletProjectImageServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string imageQuality, string imageSupportedResolutions)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (imageQuality != null) queryParams.Add("image.quality", ApiClient.ParameterToString(imageQuality)); // query parameter
 if (imageSupportedResolutions != null) queryParams.Add("image.supported.resolutions", ApiClient.ParameterToString(imageSupportedResolutions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqProjectsImplServletProjectImageServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqProjectsImplServletProjectImageServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqProjectsImplServletProjectImageServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqProjectsImplServletProjectImageServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="scheduledpurgeName"></param> 
        /// <param name="scheduledpurgePurgeActive"></param> 
        /// <param name="scheduledpurgeTemplates"></param> 
        /// <param name="scheduledpurgePurgeGroups"></param> 
        /// <param name="scheduledpurgePurgeAssets"></param> 
        /// <param name="scheduledpurgeTerminateRunningWorkflows"></param> 
        /// <param name="scheduledpurgeDaysold"></param> 
        /// <param name="scheduledpurgeSaveThreshold"></param> 
        /// <returns>ComAdobeCqProjectsPurgeSchedulerInfo</returns>            
        public ComAdobeCqProjectsPurgeSchedulerInfo ComAdobeCqProjectsPurgeScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, bool? scheduledpurgePurgeActive, List<string> scheduledpurgeTemplates, bool? scheduledpurgePurgeGroups, bool? scheduledpurgePurgeAssets, bool? scheduledpurgeTerminateRunningWorkflows, int? scheduledpurgeDaysold, int? scheduledpurgeSaveThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (scheduledpurgeName != null) queryParams.Add("scheduledpurge.name", ApiClient.ParameterToString(scheduledpurgeName)); // query parameter
 if (scheduledpurgePurgeActive != null) queryParams.Add("scheduledpurge.purgeActive", ApiClient.ParameterToString(scheduledpurgePurgeActive)); // query parameter
 if (scheduledpurgeTemplates != null) queryParams.Add("scheduledpurge.templates", ApiClient.ParameterToString(scheduledpurgeTemplates)); // query parameter
 if (scheduledpurgePurgeGroups != null) queryParams.Add("scheduledpurge.purgeGroups", ApiClient.ParameterToString(scheduledpurgePurgeGroups)); // query parameter
 if (scheduledpurgePurgeAssets != null) queryParams.Add("scheduledpurge.purgeAssets", ApiClient.ParameterToString(scheduledpurgePurgeAssets)); // query parameter
 if (scheduledpurgeTerminateRunningWorkflows != null) queryParams.Add("scheduledpurge.terminateRunningWorkflows", ApiClient.ParameterToString(scheduledpurgeTerminateRunningWorkflows)); // query parameter
 if (scheduledpurgeDaysold != null) queryParams.Add("scheduledpurge.daysold", ApiClient.ParameterToString(scheduledpurgeDaysold)); // query parameter
 if (scheduledpurgeSaveThreshold != null) queryParams.Add("scheduledpurge.saveThreshold", ApiClient.ParameterToString(scheduledpurgeSaveThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqProjectsPurgeScheduler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqProjectsPurgeScheduler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqProjectsPurgeSchedulerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqProjectsPurgeSchedulerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="includePaths"></param> 
        /// <param name="exporterUser"></param> 
        /// <returns>ComAdobeCqScheduledExporterImplScheduledExporterImplInfo</returns>            
        public ComAdobeCqScheduledExporterImplScheduledExporterImplInfo ComAdobeCqScheduledExporterImplScheduledExporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includePaths, string exporterUser)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (includePaths != null) queryParams.Add("include.paths", ApiClient.ParameterToString(includePaths)); // query parameter
 if (exporterUser != null) queryParams.Add("exporter.user", ApiClient.ParameterToString(exporterUser)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScheduledExporterImplScheduledExporterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScheduledExporterImplScheduledExporterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScheduledExporterImplScheduledExporterImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScheduledExporterImplScheduledExporterImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeCqScreensAnalyticsImplUrl"></param> 
        /// <param name="comAdobeCqScreensAnalyticsImplApikey"></param> 
        /// <param name="comAdobeCqScreensAnalyticsImplProject"></param> 
        /// <param name="comAdobeCqScreensAnalyticsImplEnvironment"></param> 
        /// <param name="comAdobeCqScreensAnalyticsImplSendFrequency"></param> 
        /// <returns>ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo</returns>            
        public ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqScreensAnalyticsImplUrl, string comAdobeCqScreensAnalyticsImplApikey, string comAdobeCqScreensAnalyticsImplProject, string comAdobeCqScreensAnalyticsImplEnvironment, int? comAdobeCqScreensAnalyticsImplSendFrequency)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeCqScreensAnalyticsImplUrl != null) queryParams.Add("com.adobe.cq.screens.analytics.impl.url", ApiClient.ParameterToString(comAdobeCqScreensAnalyticsImplUrl)); // query parameter
 if (comAdobeCqScreensAnalyticsImplApikey != null) queryParams.Add("com.adobe.cq.screens.analytics.impl.apikey", ApiClient.ParameterToString(comAdobeCqScreensAnalyticsImplApikey)); // query parameter
 if (comAdobeCqScreensAnalyticsImplProject != null) queryParams.Add("com.adobe.cq.screens.analytics.impl.project", ApiClient.ParameterToString(comAdobeCqScreensAnalyticsImplProject)); // query parameter
 if (comAdobeCqScreensAnalyticsImplEnvironment != null) queryParams.Add("com.adobe.cq.screens.analytics.impl.environment", ApiClient.ParameterToString(comAdobeCqScreensAnalyticsImplEnvironment)); // query parameter
 if (comAdobeCqScreensAnalyticsImplSendFrequency != null) queryParams.Add("com.adobe.cq.screens.analytics.impl.sendFrequency", ApiClient.ParameterToString(comAdobeCqScreensAnalyticsImplSendFrequency)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeAemScreensPlayerPingfrequency"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordSpecialchars"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordMinlowercasechars"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordMinuppercasechars"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordMinnumberchars"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordMinspecialchars"></param> 
        /// <param name="comAdobeAemScreensDevicePaswordMinlength"></param> 
        /// <returns>ComAdobeCqScreensDeviceImplDeviceServiceInfo</returns>            
        public ComAdobeCqScreensDeviceImplDeviceServiceInfo ComAdobeCqScreensDeviceImplDeviceService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensPlayerPingfrequency, string comAdobeAemScreensDevicePaswordSpecialchars, int? comAdobeAemScreensDevicePaswordMinlowercasechars, int? comAdobeAemScreensDevicePaswordMinuppercasechars, int? comAdobeAemScreensDevicePaswordMinnumberchars, int? comAdobeAemScreensDevicePaswordMinspecialchars, int? comAdobeAemScreensDevicePaswordMinlength)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeAemScreensPlayerPingfrequency != null) queryParams.Add("com.adobe.aem.screens.player.pingfrequency", ApiClient.ParameterToString(comAdobeAemScreensPlayerPingfrequency)); // query parameter
 if (comAdobeAemScreensDevicePaswordSpecialchars != null) queryParams.Add("com.adobe.aem.screens.device.pasword.specialchars", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordSpecialchars)); // query parameter
 if (comAdobeAemScreensDevicePaswordMinlowercasechars != null) queryParams.Add("com.adobe.aem.screens.device.pasword.minlowercasechars", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordMinlowercasechars)); // query parameter
 if (comAdobeAemScreensDevicePaswordMinuppercasechars != null) queryParams.Add("com.adobe.aem.screens.device.pasword.minuppercasechars", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordMinuppercasechars)); // query parameter
 if (comAdobeAemScreensDevicePaswordMinnumberchars != null) queryParams.Add("com.adobe.aem.screens.device.pasword.minnumberchars", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordMinnumberchars)); // query parameter
 if (comAdobeAemScreensDevicePaswordMinspecialchars != null) queryParams.Add("com.adobe.aem.screens.device.pasword.minspecialchars", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordMinspecialchars)); // query parameter
 if (comAdobeAemScreensDevicePaswordMinlength != null) queryParams.Add("com.adobe.aem.screens.device.pasword.minlength", ApiClient.ParameterToString(comAdobeAemScreensDevicePaswordMinlength)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensDeviceImplDeviceService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensDeviceImplDeviceService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensDeviceImplDeviceServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensDeviceImplDeviceServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="deviceRegistrationTimeout"></param> 
        /// <returns>ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo</returns>            
        public ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? deviceRegistrationTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (deviceRegistrationTimeout != null) queryParams.Add("deviceRegistrationTimeout", ApiClient.ParameterToString(deviceRegistrationTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqPagesupdatehandlerImageresourcetypes"></param> 
        /// <param name="cqPagesupdatehandlerProductresourcetypes"></param> 
        /// <param name="cqPagesupdatehandlerVideoresourcetypes"></param> 
        /// <param name="cqPagesupdatehandlerDynamicsequenceresourcetypes"></param> 
        /// <param name="cqPagesupdatehandlerPreviewmodepaths"></param> 
        /// <returns>ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo</returns>            
        public ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo ComAdobeCqScreensImplHandlerChannelsUpdateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes, List<string> cqPagesupdatehandlerProductresourcetypes, List<string> cqPagesupdatehandlerVideoresourcetypes, List<string> cqPagesupdatehandlerDynamicsequenceresourcetypes, List<string> cqPagesupdatehandlerPreviewmodepaths)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqPagesupdatehandlerImageresourcetypes != null) queryParams.Add("cq.pagesupdatehandler.imageresourcetypes", ApiClient.ParameterToString(cqPagesupdatehandlerImageresourcetypes)); // query parameter
 if (cqPagesupdatehandlerProductresourcetypes != null) queryParams.Add("cq.pagesupdatehandler.productresourcetypes", ApiClient.ParameterToString(cqPagesupdatehandlerProductresourcetypes)); // query parameter
 if (cqPagesupdatehandlerVideoresourcetypes != null) queryParams.Add("cq.pagesupdatehandler.videoresourcetypes", ApiClient.ParameterToString(cqPagesupdatehandlerVideoresourcetypes)); // query parameter
 if (cqPagesupdatehandlerDynamicsequenceresourcetypes != null) queryParams.Add("cq.pagesupdatehandler.dynamicsequenceresourcetypes", ApiClient.ParameterToString(cqPagesupdatehandlerDynamicsequenceresourcetypes)); // query parameter
 if (cqPagesupdatehandlerPreviewmodepaths != null) queryParams.Add("cq.pagesupdatehandler.previewmodepaths", ApiClient.ParameterToString(cqPagesupdatehandlerPreviewmodepaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplHandlerChannelsUpdateHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplHandlerChannelsUpdateHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <returns>ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo</returns>            
        public ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeAemScreensImplRemoteRequestTimeout"></param> 
        /// <returns>ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo</returns>            
        public ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeAemScreensImplRemoteRequestTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeAemScreensImplRemoteRequestTimeout != null) queryParams.Add("com.adobe.aem.screens.impl.remote.request_timeout", ApiClient.ParameterToString(comAdobeAemScreensImplRemoteRequestTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="screensChannelsPropertiesToRemove"></param> 
        /// <returns>ComAdobeCqScreensImplScreensChannelPostProcessorInfo</returns>            
        public ComAdobeCqScreensImplScreensChannelPostProcessorInfo ComAdobeCqScreensImplScreensChannelPostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> screensChannelsPropertiesToRemove)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (screensChannelsPropertiesToRemove != null) queryParams.Add("screens.channels.properties.to.remove", ApiClient.ParameterToString(screensChannelsPropertiesToRemove)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplScreensChannelPostProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensImplScreensChannelPostProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensImplScreensChannelPostProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensImplScreensChannelPostProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername"></param> 
        /// <param name="comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword"></param> 
        /// <returns>ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo</returns>            
        public ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver, int? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport, bool? comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername, string comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername)); // query parameter
 if (comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword != null) queryParams.Add("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password", ApiClient.ParameterToString(comAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="globalSize"></param> 
        /// <param name="maxDiskUsage"></param> 
        /// <param name="persistenceEnabled"></param> 
        /// <param name="threadPoolMaxSize"></param> 
        /// <param name="scheduledThreadPoolMaxSize"></param> 
        /// <param name="gracefulShutdownTimeout"></param> 
        /// <param name="queues"></param> 
        /// <param name="topics"></param> 
        /// <param name="addressesMaxDeliveryAttempts"></param> 
        /// <param name="addressesExpiryDelay"></param> 
        /// <param name="addressesAddressFullMessagePolicy"></param> 
        /// <param name="addressesMaxSizeBytes"></param> 
        /// <param name="addressesPageSizeBytes"></param> 
        /// <param name="addressesPageCacheMaxSize"></param> 
        /// <param name="clusterUser"></param> 
        /// <param name="clusterPassword"></param> 
        /// <param name="clusterCallTimeout"></param> 
        /// <param name="clusterCallFailoverTimeout"></param> 
        /// <param name="clusterClientFailureCheckPeriod"></param> 
        /// <param name="clusterNotificationAttempts"></param> 
        /// <param name="clusterNotificationInterval"></param> 
        /// <param name="idCacheSize"></param> 
        /// <param name="clusterConfirmationWindowSize"></param> 
        /// <param name="clusterConnectionTtl"></param> 
        /// <param name="clusterDuplicateDetection"></param> 
        /// <param name="clusterInitialConnectAttempts"></param> 
        /// <param name="clusterMaxRetryInterval"></param> 
        /// <param name="clusterMinLargeMessageSize"></param> 
        /// <param name="clusterProducerWindowSize"></param> 
        /// <param name="clusterReconnectAttempts"></param> 
        /// <param name="clusterRetryInterval"></param> 
        /// <param name="clusterRetryIntervalMultiplier"></param> 
        /// <returns>ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo</returns>            
        public ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo ComAdobeCqScreensMqActivemqImplArtemisJMSProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, int? globalSize, int? maxDiskUsage, bool? persistenceEnabled, int? threadPoolMaxSize, int? scheduledThreadPoolMaxSize, int? gracefulShutdownTimeout, List<string> queues, List<string> topics, int? addressesMaxDeliveryAttempts, int? addressesExpiryDelay, string addressesAddressFullMessagePolicy, int? addressesMaxSizeBytes, int? addressesPageSizeBytes, int? addressesPageCacheMaxSize, string clusterUser, string clusterPassword, int? clusterCallTimeout, int? clusterCallFailoverTimeout, int? clusterClientFailureCheckPeriod, int? clusterNotificationAttempts, int? clusterNotificationInterval, int? idCacheSize, int? clusterConfirmationWindowSize, int? clusterConnectionTtl, bool? clusterDuplicateDetection, int? clusterInitialConnectAttempts, int? clusterMaxRetryInterval, int? clusterMinLargeMessageSize, int? clusterProducerWindowSize, int? clusterReconnectAttempts, int? clusterRetryInterval, decimal? clusterRetryIntervalMultiplier)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (globalSize != null) queryParams.Add("global.size", ApiClient.ParameterToString(globalSize)); // query parameter
 if (maxDiskUsage != null) queryParams.Add("max.disk.usage", ApiClient.ParameterToString(maxDiskUsage)); // query parameter
 if (persistenceEnabled != null) queryParams.Add("persistence.enabled", ApiClient.ParameterToString(persistenceEnabled)); // query parameter
 if (threadPoolMaxSize != null) queryParams.Add("thread.pool.max.size", ApiClient.ParameterToString(threadPoolMaxSize)); // query parameter
 if (scheduledThreadPoolMaxSize != null) queryParams.Add("scheduled.thread.pool.max.size", ApiClient.ParameterToString(scheduledThreadPoolMaxSize)); // query parameter
 if (gracefulShutdownTimeout != null) queryParams.Add("graceful.shutdown.timeout", ApiClient.ParameterToString(gracefulShutdownTimeout)); // query parameter
 if (queues != null) queryParams.Add("queues", ApiClient.ParameterToString(queues)); // query parameter
 if (topics != null) queryParams.Add("topics", ApiClient.ParameterToString(topics)); // query parameter
 if (addressesMaxDeliveryAttempts != null) queryParams.Add("addresses.max.delivery.attempts", ApiClient.ParameterToString(addressesMaxDeliveryAttempts)); // query parameter
 if (addressesExpiryDelay != null) queryParams.Add("addresses.expiry.delay", ApiClient.ParameterToString(addressesExpiryDelay)); // query parameter
 if (addressesAddressFullMessagePolicy != null) queryParams.Add("addresses.address.full.message.policy", ApiClient.ParameterToString(addressesAddressFullMessagePolicy)); // query parameter
 if (addressesMaxSizeBytes != null) queryParams.Add("addresses.max.size.bytes", ApiClient.ParameterToString(addressesMaxSizeBytes)); // query parameter
 if (addressesPageSizeBytes != null) queryParams.Add("addresses.page.size.bytes", ApiClient.ParameterToString(addressesPageSizeBytes)); // query parameter
 if (addressesPageCacheMaxSize != null) queryParams.Add("addresses.page.cache.max.size", ApiClient.ParameterToString(addressesPageCacheMaxSize)); // query parameter
 if (clusterUser != null) queryParams.Add("cluster.user", ApiClient.ParameterToString(clusterUser)); // query parameter
 if (clusterPassword != null) queryParams.Add("cluster.password", ApiClient.ParameterToString(clusterPassword)); // query parameter
 if (clusterCallTimeout != null) queryParams.Add("cluster.call.timeout", ApiClient.ParameterToString(clusterCallTimeout)); // query parameter
 if (clusterCallFailoverTimeout != null) queryParams.Add("cluster.call.failover.timeout", ApiClient.ParameterToString(clusterCallFailoverTimeout)); // query parameter
 if (clusterClientFailureCheckPeriod != null) queryParams.Add("cluster.client.failure.check.period", ApiClient.ParameterToString(clusterClientFailureCheckPeriod)); // query parameter
 if (clusterNotificationAttempts != null) queryParams.Add("cluster.notification.attempts", ApiClient.ParameterToString(clusterNotificationAttempts)); // query parameter
 if (clusterNotificationInterval != null) queryParams.Add("cluster.notification.interval", ApiClient.ParameterToString(clusterNotificationInterval)); // query parameter
 if (idCacheSize != null) queryParams.Add("id.cache.size", ApiClient.ParameterToString(idCacheSize)); // query parameter
 if (clusterConfirmationWindowSize != null) queryParams.Add("cluster.confirmation.window.size", ApiClient.ParameterToString(clusterConfirmationWindowSize)); // query parameter
 if (clusterConnectionTtl != null) queryParams.Add("cluster.connection.ttl", ApiClient.ParameterToString(clusterConnectionTtl)); // query parameter
 if (clusterDuplicateDetection != null) queryParams.Add("cluster.duplicate.detection", ApiClient.ParameterToString(clusterDuplicateDetection)); // query parameter
 if (clusterInitialConnectAttempts != null) queryParams.Add("cluster.initial.connect.attempts", ApiClient.ParameterToString(clusterInitialConnectAttempts)); // query parameter
 if (clusterMaxRetryInterval != null) queryParams.Add("cluster.max.retry.interval", ApiClient.ParameterToString(clusterMaxRetryInterval)); // query parameter
 if (clusterMinLargeMessageSize != null) queryParams.Add("cluster.min.large.message.size", ApiClient.ParameterToString(clusterMinLargeMessageSize)); // query parameter
 if (clusterProducerWindowSize != null) queryParams.Add("cluster.producer.window.size", ApiClient.ParameterToString(clusterProducerWindowSize)); // query parameter
 if (clusterReconnectAttempts != null) queryParams.Add("cluster.reconnect.attempts", ApiClient.ParameterToString(clusterReconnectAttempts)); // query parameter
 if (clusterRetryInterval != null) queryParams.Add("cluster.retry.interval", ApiClient.ParameterToString(clusterRetryInterval)); // query parameter
 if (clusterRetryIntervalMultiplier != null) queryParams.Add("cluster.retry.interval.multiplier", ApiClient.ParameterToString(clusterRetryIntervalMultiplier)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensMqActivemqImplArtemisJMSProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensMqActivemqImplArtemisJMSProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath"></param> 
        /// <param name="comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency"></param> 
        /// <returns>ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo</returns>            
        public ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath, string comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath != null) queryParams.Add("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath", ApiClient.ParameterToString(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath)); // query parameter
 if (comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency != null) queryParams.Add("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency", ApiClient.ParameterToString(comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disableSmartSync"></param> 
        /// <returns>ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo</returns>            
        public ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disableSmartSync)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disableSmartSync != null) queryParams.Add("disableSmartSync", ApiClient.ParameterToString(disableSmartSync)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enableDataTriggeredContent"></param> 
        /// <returns>ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo</returns>            
        public ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableDataTriggeredContent)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enableDataTriggeredContent != null) queryParams.Add("enableDataTriggeredContent", ApiClient.ParameterToString(enableDataTriggeredContent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo</returns>            
        public ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo</returns>            
        public ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="dispatcherAddress"></param> 
        /// <param name="dispatcherFilterAllowed"></param> 
        /// <param name="dispatcherFilterBlocked"></param> 
        /// <returns>ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo</returns>            
        public ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string dispatcherAddress, List<string> dispatcherFilterAllowed, List<string> dispatcherFilterBlocked)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (dispatcherAddress != null) queryParams.Add("dispatcher.address", ApiClient.ParameterToString(dispatcherAddress)); // query parameter
 if (dispatcherFilterAllowed != null) queryParams.Add("dispatcher.filter.allowed", ApiClient.ParameterToString(dispatcherFilterAllowed)); // query parameter
 if (dispatcherFilterBlocked != null) queryParams.Add("dispatcher.filter.blocked", ApiClient.ParameterToString(dispatcherFilterBlocked)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo</returns>            
        public ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="webserverAddress"></param> 
        /// <returns>ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo</returns>            
        public ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, string webserverAddress)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (webserverAddress != null) queryParams.Add("webserver.address", ApiClient.ParameterToString(webserverAddress)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enable"></param> 
        /// <param name="ttl1"></param> 
        /// <param name="ttl2"></param> 
        /// <returns>ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo</returns>            
        public ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? ttl1, int? ttl2)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enable != null) queryParams.Add("enable", ApiClient.ParameterToString(enable)); // query parameter
 if (ttl1 != null) queryParams.Add("ttl1", ApiClient.ParameterToString(ttl1)); // query parameter
 if (ttl2 != null) queryParams.Add("ttl2", ApiClient.ParameterToString(ttl2)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo</returns>            
        public ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo</returns>            
        public ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo</returns>            
        public ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="accepted"></param> 
        /// <param name="ranked"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo</returns>            
        public ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? accepted, int? ranked)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (accepted != null) queryParams.Add("accepted", ApiClient.ParameterToString(accepted)); // query parameter
 if (ranked != null) queryParams.Add("ranked", ApiClient.ParameterToString(ranked)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="ranking"></param> 
        /// <param name="enable"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo</returns>            
        public ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking, bool? enable)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (ranking != null) queryParams.Add("ranking", ApiClient.ParameterToString(ranking)); // query parameter
 if (enable != null) queryParams.Add("enable", ApiClient.ParameterToString(enable)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="streamPath"></param> 
        /// <param name="streamName"></param> 
        /// <returns>ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo</returns>            
        public ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string streamPath, string streamName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (streamPath != null) queryParams.Add("streamPath", ApiClient.ParameterToString(streamPath)); // query parameter
 if (streamName != null) queryParams.Add("streamName", ApiClient.ParameterToString(streamName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxRetry"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo</returns>            
        public ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRetry, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxRetry != null) queryParams.Add("MaxRetry", ApiClient.ParameterToString(maxRetry)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <param name="extensionOrder"></param> 
        /// <returns>ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo</returns>            
        public ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string attachmentTypeBlacklist, int? extensionOrder)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
 if (extensionOrder != null) queryParams.Add("extension.order", ApiClient.ParameterToString(extensionOrder)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="timezonesExpirytime"></param> 
        /// <returns>ComAdobeCqSocialCalendarServletsTimeZoneServletInfo</returns>            
        public ComAdobeCqSocialCalendarServletsTimeZoneServletInfo ComAdobeCqSocialCalendarServletsTimeZoneServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timezonesExpirytime)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (timezonesExpirytime != null) queryParams.Add("timezones.expirytime", ApiClient.ParameterToString(timezonesExpirytime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarServletsTimeZoneServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCalendarServletsTimeZoneServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCalendarServletsTimeZoneServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCalendarServletsTimeZoneServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="ranking"></param> 
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo</returns>            
        public ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? ranking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (ranking != null) queryParams.Add("ranking", ApiClient.ParameterToString(ranking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo</returns>            
        public ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo</returns>            
        public ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="numUserLimit"></param> 
        /// <returns>ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo</returns>            
        public ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numUserLimit)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (numUserLimit != null) queryParams.Add("numUserLimit", ApiClient.ParameterToString(numUserLimit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enableScheduledPostsSearch"></param> 
        /// <param name="numberOfMinutes"></param> 
        /// <param name="maxSearchLimit"></param> 
        /// <returns>ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo</returns>            
        public ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableScheduledPostsSearch, int? numberOfMinutes, int? maxSearchLimit)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enableScheduledPostsSearch != null) queryParams.Add("enableScheduledPostsSearch", ApiClient.ParameterToString(enableScheduledPostsSearch)); // query parameter
 if (numberOfMinutes != null) queryParams.Add("numberOfMinutes", ApiClient.ParameterToString(numberOfMinutes)); // query parameter
 if (maxSearchLimit != null) queryParams.Add("maxSearchLimit", ApiClient.ParameterToString(maxSearchLimit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="corsEnabling"></param> 
        /// <returns>ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo</returns>            
        public ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? corsEnabling)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (corsEnabling != null) queryParams.Add("cors.enabling", ApiClient.ParameterToString(corsEnabling)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="contextPath"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contextPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (contextPath != null) queryParams.Add("context.path", ApiClient.ParameterToString(contextPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="patternTime"></param> 
        /// <param name="patternNewline"></param> 
        /// <param name="patternDayOfMonth"></param> 
        /// <param name="patternMonth"></param> 
        /// <param name="patternYear"></param> 
        /// <param name="patternDate"></param> 
        /// <param name="patternDateTime"></param> 
        /// <param name="patternEmail"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string patternTime, string patternNewline, string patternDayOfMonth, string patternMonth, string patternYear, string patternDate, string patternDateTime, string patternEmail)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (patternTime != null) queryParams.Add("pattern.time", ApiClient.ParameterToString(patternTime)); // query parameter
 if (patternNewline != null) queryParams.Add("pattern.newline", ApiClient.ParameterToString(patternNewline)); // query parameter
 if (patternDayOfMonth != null) queryParams.Add("pattern.dayOfMonth", ApiClient.ParameterToString(patternDayOfMonth)); // query parameter
 if (patternMonth != null) queryParams.Add("pattern.month", ApiClient.ParameterToString(patternMonth)); // query parameter
 if (patternYear != null) queryParams.Add("pattern.year", ApiClient.ParameterToString(patternYear)); // query parameter
 if (patternDate != null) queryParams.Add("pattern.date", ApiClient.ParameterToString(patternDate)); // query parameter
 if (patternDateTime != null) queryParams.Add("pattern.dateTime", ApiClient.ParameterToString(patternDateTime)); // query parameter
 if (patternEmail != null) queryParams.Add("pattern.email", ApiClient.ParameterToString(patternEmail)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="emailName"></param> 
        /// <param name="emailCreatePostFromReply"></param> 
        /// <param name="emailAddCommentIdTo"></param> 
        /// <param name="emailSubjectMaximumLength"></param> 
        /// <param name="emailReplyToAddress"></param> 
        /// <param name="emailReplyToDelimiter"></param> 
        /// <param name="emailTrackerIdPrefixInSubject"></param> 
        /// <param name="emailTrackerIdPrefixInBody"></param> 
        /// <param name="emailAsHTML"></param> 
        /// <param name="emailDefaultUserName"></param> 
        /// <param name="emailTemplatesRootPath"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailName, bool? emailCreatePostFromReply, string emailAddCommentIdTo, int? emailSubjectMaximumLength, string emailReplyToAddress, string emailReplyToDelimiter, string emailTrackerIdPrefixInSubject, string emailTrackerIdPrefixInBody, bool? emailAsHTML, string emailDefaultUserName, string emailTemplatesRootPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (emailName != null) queryParams.Add("email.name", ApiClient.ParameterToString(emailName)); // query parameter
 if (emailCreatePostFromReply != null) queryParams.Add("email.createPostFromReply", ApiClient.ParameterToString(emailCreatePostFromReply)); // query parameter
 if (emailAddCommentIdTo != null) queryParams.Add("email.addCommentIdTo", ApiClient.ParameterToString(emailAddCommentIdTo)); // query parameter
 if (emailSubjectMaximumLength != null) queryParams.Add("email.subjectMaximumLength", ApiClient.ParameterToString(emailSubjectMaximumLength)); // query parameter
 if (emailReplyToAddress != null) queryParams.Add("email.replyToAddress", ApiClient.ParameterToString(emailReplyToAddress)); // query parameter
 if (emailReplyToDelimiter != null) queryParams.Add("email.replyToDelimiter", ApiClient.ParameterToString(emailReplyToDelimiter)); // query parameter
 if (emailTrackerIdPrefixInSubject != null) queryParams.Add("email.trackerIdPrefixInSubject", ApiClient.ParameterToString(emailTrackerIdPrefixInSubject)); // query parameter
 if (emailTrackerIdPrefixInBody != null) queryParams.Add("email.trackerIdPrefixInBody", ApiClient.ParameterToString(emailTrackerIdPrefixInBody)); // query parameter
 if (emailAsHTML != null) queryParams.Add("email.asHTML", ApiClient.ParameterToString(emailAsHTML)); // query parameter
 if (emailDefaultUserName != null) queryParams.Add("email.defaultUserName", ApiClient.ParameterToString(emailDefaultUserName)); // query parameter
 if (emailTemplatesRootPath != null) queryParams.Add("email.templates.rootPath", ApiClient.ParameterToString(emailTemplatesRootPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="connectProtocol"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string connectProtocol)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (connectProtocol != null) queryParams.Add("connectProtocol", ApiClient.ParameterToString(connectProtocol)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <param name="priorityOrder"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replyEmailPatterns, int? priorityOrder)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priorityOrder"></param> 
        /// <param name="replyEmailPatterns"></param> 
        /// <returns>ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo</returns>            
        public ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priorityOrder, List<string> replyEmailPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priorityOrder != null) queryParams.Add("priorityOrder", ApiClient.ParameterToString(priorityOrder)); // query parameter
 if (replyEmailPatterns != null) queryParams.Add("replyEmailPatterns", ApiClient.ParameterToString(replyEmailPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="numberOfDays"></param> 
        /// <param name="ageOfFile"></param> 
        /// <returns>ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo</returns>            
        public ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfDays, int? ageOfFile)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (numberOfDays != null) queryParams.Add("numberOfDays", ApiClient.ParameterToString(numberOfDays)); // query parameter
 if (ageOfFile != null) queryParams.Add("ageOfFile", ApiClient.ParameterToString(ageOfFile)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="verbs"></param> 
        /// <returns>ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo</returns>            
        public ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> verbs)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (verbs != null) queryParams.Add("verbs", ApiClient.ParameterToString(verbs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enable"></param> 
        /// <param name="uGCLimit"></param> 
        /// <param name="ugcLimitDuration"></param> 
        /// <param name="domains"></param> 
        /// <param name="toList"></param> 
        /// <returns>ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo</returns>            
        public ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, int? uGCLimit, int? ugcLimitDuration, List<string> domains, List<string> toList)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enable != null) queryParams.Add("enable", ApiClient.ParameterToString(enable)); // query parameter
 if (uGCLimit != null) queryParams.Add("UGCLimit", ApiClient.ParameterToString(uGCLimit)); // query parameter
 if (ugcLimitDuration != null) queryParams.Add("ugcLimitDuration", ApiClient.ParameterToString(ugcLimitDuration)); // query parameter
 if (domains != null) queryParams.Add("domains", ApiClient.ParameterToString(domains)); // query parameter
 if (toList != null) queryParams.Add("toList", ApiClient.ParameterToString(toList)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <param name="oauthCloudConfigRoot"></param> 
        /// <param name="providerConfigRoot"></param> 
        /// <param name="providerConfigCreateTagsEnabled"></param> 
        /// <param name="providerConfigUserFolder"></param> 
        /// <param name="providerConfigFacebookFetchFields"></param> 
        /// <param name="providerConfigFacebookFields"></param> 
        /// <param name="providerConfigRefreshUserdataEnabled"></param> 
        /// <returns>ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo</returns>            
        public ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo ComAdobeCqSocialConnectOauthImplFacebookProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, bool? providerConfigCreateTagsEnabled, string providerConfigUserFolder, bool? providerConfigFacebookFetchFields, List<string> providerConfigFacebookFields, bool? providerConfigRefreshUserdataEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
 if (oauthCloudConfigRoot != null) queryParams.Add("oauth.cloud.config.root", ApiClient.ParameterToString(oauthCloudConfigRoot)); // query parameter
 if (providerConfigRoot != null) queryParams.Add("provider.config.root", ApiClient.ParameterToString(providerConfigRoot)); // query parameter
 if (providerConfigCreateTagsEnabled != null) queryParams.Add("provider.config.create.tags.enabled", ApiClient.ParameterToString(providerConfigCreateTagsEnabled)); // query parameter
 if (providerConfigUserFolder != null) queryParams.Add("provider.config.user.folder", ApiClient.ParameterToString(providerConfigUserFolder)); // query parameter
 if (providerConfigFacebookFetchFields != null) queryParams.Add("provider.config.facebook.fetch.fields", ApiClient.ParameterToString(providerConfigFacebookFetchFields)); // query parameter
 if (providerConfigFacebookFields != null) queryParams.Add("provider.config.facebook.fields", ApiClient.ParameterToString(providerConfigFacebookFields)); // query parameter
 if (providerConfigRefreshUserdataEnabled != null) queryParams.Add("provider.config.refresh.userdata.enabled", ApiClient.ParameterToString(providerConfigRefreshUserdataEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplFacebookProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplFacebookProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo</returns>            
        public ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="facebook"></param> 
        /// <param name="twitter"></param> 
        /// <param name="providerConfigUserFolder"></param> 
        /// <returns>ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo</returns>            
        public ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> facebook, List<string> twitter, string providerConfigUserFolder)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (facebook != null) queryParams.Add("facebook", ApiClient.ParameterToString(facebook)); // query parameter
 if (twitter != null) queryParams.Add("twitter", ApiClient.ParameterToString(twitter)); // query parameter
 if (providerConfigUserFolder != null) queryParams.Add("provider.config.user.folder", ApiClient.ParameterToString(providerConfigUserFolder)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <param name="oauthCloudConfigRoot"></param> 
        /// <param name="providerConfigRoot"></param> 
        /// <param name="providerConfigUserFolder"></param> 
        /// <param name="providerConfigTwitterEnableParams"></param> 
        /// <param name="providerConfigTwitterParams"></param> 
        /// <param name="providerConfigRefreshUserdataEnabled"></param> 
        /// <returns>ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo</returns>            
        public ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo ComAdobeCqSocialConnectOauthImplTwitterProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthCloudConfigRoot, string providerConfigRoot, string providerConfigUserFolder, bool? providerConfigTwitterEnableParams, List<string> providerConfigTwitterParams, bool? providerConfigRefreshUserdataEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
 if (oauthCloudConfigRoot != null) queryParams.Add("oauth.cloud.config.root", ApiClient.ParameterToString(oauthCloudConfigRoot)); // query parameter
 if (providerConfigRoot != null) queryParams.Add("provider.config.root", ApiClient.ParameterToString(providerConfigRoot)); // query parameter
 if (providerConfigUserFolder != null) queryParams.Add("provider.config.user.folder", ApiClient.ParameterToString(providerConfigUserFolder)); // query parameter
 if (providerConfigTwitterEnableParams != null) queryParams.Add("provider.config.twitter.enable.params", ApiClient.ParameterToString(providerConfigTwitterEnableParams)); // query parameter
 if (providerConfigTwitterParams != null) queryParams.Add("provider.config.twitter.params", ApiClient.ParameterToString(providerConfigTwitterParams)); // query parameter
 if (providerConfigRefreshUserdataEnabled != null) queryParams.Add("provider.config.refresh.userdata.enabled", ApiClient.ParameterToString(providerConfigRefreshUserdataEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplTwitterProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialConnectOauthImplTwitterProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSocialContentFragmentsServicesEnabled"></param> 
        /// <param name="cqSocialContentFragmentsServicesWaitTimeSeconds"></param> 
        /// <returns>ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo</returns>            
        public ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSocialContentFragmentsServicesEnabled, int? cqSocialContentFragmentsServicesWaitTimeSeconds)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSocialContentFragmentsServicesEnabled != null) queryParams.Add("cq.social.content.fragments.services.enabled", ApiClient.ParameterToString(cqSocialContentFragmentsServicesEnabled)); // query parameter
 if (cqSocialContentFragmentsServicesWaitTimeSeconds != null) queryParams.Add("cq.social.content.fragments.services.waitTimeSeconds", ApiClient.ParameterToString(cqSocialContentFragmentsServicesWaitTimeSeconds)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="versionId"></param> 
        /// <param name="cacheOn"></param> 
        /// <param name="concurrencyLevel"></param> 
        /// <param name="cacheStartSize"></param> 
        /// <param name="cacheTtl"></param> 
        /// <param name="cacheSize"></param> 
        /// <param name="timeLimit"></param> 
        /// <returns>ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo</returns>            
        public ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string versionId, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize, int? timeLimit)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (versionId != null) queryParams.Add("version.id", ApiClient.ParameterToString(versionId)); // query parameter
 if (cacheOn != null) queryParams.Add("cache.on", ApiClient.ParameterToString(cacheOn)); // query parameter
 if (concurrencyLevel != null) queryParams.Add("concurrency.level", ApiClient.ParameterToString(concurrencyLevel)); // query parameter
 if (cacheStartSize != null) queryParams.Add("cache.start.size", ApiClient.ParameterToString(cacheStartSize)); // query parameter
 if (cacheTtl != null) queryParams.Add("cache.ttl", ApiClient.ParameterToString(cacheTtl)); // query parameter
 if (cacheSize != null) queryParams.Add("cache.size", ApiClient.ParameterToString(cacheSize)); // query parameter
 if (timeLimit != null) queryParams.Add("time.limit", ApiClient.ParameterToString(timeLimit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="solrZkTimeout"></param> 
        /// <param name="solrCommit"></param> 
        /// <param name="cacheOn"></param> 
        /// <param name="concurrencyLevel"></param> 
        /// <param name="cacheStartSize"></param> 
        /// <param name="cacheTtl"></param> 
        /// <param name="cacheSize"></param> 
        /// <returns>ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo</returns>            
        public ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (solrZkTimeout != null) queryParams.Add("solr.zk.timeout", ApiClient.ParameterToString(solrZkTimeout)); // query parameter
 if (solrCommit != null) queryParams.Add("solr.commit", ApiClient.ParameterToString(solrCommit)); // query parameter
 if (cacheOn != null) queryParams.Add("cache.on", ApiClient.ParameterToString(cacheOn)); // query parameter
 if (concurrencyLevel != null) queryParams.Add("concurrency.level", ApiClient.ParameterToString(concurrencyLevel)); // query parameter
 if (cacheStartSize != null) queryParams.Add("cache.start.size", ApiClient.ParameterToString(cacheStartSize)); // query parameter
 if (cacheTtl != null) queryParams.Add("cache.ttl", ApiClient.ParameterToString(cacheTtl)); // query parameter
 if (cacheSize != null) queryParams.Add("cache.size", ApiClient.ParameterToString(cacheSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="solrZkTimeout"></param> 
        /// <param name="solrCommit"></param> 
        /// <param name="cacheOn"></param> 
        /// <param name="concurrencyLevel"></param> 
        /// <param name="cacheStartSize"></param> 
        /// <param name="cacheTtl"></param> 
        /// <param name="cacheSize"></param> 
        /// <returns>ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo</returns>            
        public ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrZkTimeout, string solrCommit, bool? cacheOn, int? concurrencyLevel, int? cacheStartSize, int? cacheTtl, int? cacheSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (solrZkTimeout != null) queryParams.Add("solr.zk.timeout", ApiClient.ParameterToString(solrZkTimeout)); // query parameter
 if (solrCommit != null) queryParams.Add("solr.commit", ApiClient.ParameterToString(solrCommit)); // query parameter
 if (cacheOn != null) queryParams.Add("cache.on", ApiClient.ParameterToString(cacheOn)); // query parameter
 if (concurrencyLevel != null) queryParams.Add("concurrency.level", ApiClient.ParameterToString(concurrencyLevel)); // query parameter
 if (cacheStartSize != null) queryParams.Add("cache.start.size", ApiClient.ParameterToString(cacheStartSize)); // query parameter
 if (cacheTtl != null) queryParams.Add("cache.ttl", ApiClient.ParameterToString(cacheTtl)); // query parameter
 if (cacheSize != null) queryParams.Add("cache.size", ApiClient.ParameterToString(cacheSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isMemberCheck"></param> 
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo</returns>            
        public ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isMemberCheck != null) queryParams.Add("isMemberCheck", ApiClient.ParameterToString(isMemberCheck)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isMemberCheck"></param> 
        /// <returns>ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo</returns>            
        public ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isMemberCheck)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isMemberCheck != null) queryParams.Add("isMemberCheck", ApiClient.ParameterToString(isMemberCheck)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <returns>ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo</returns>            
        public ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <returns>ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo</returns>            
        public ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo</returns>            
        public ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="slingServletExtensions"></param> 
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo</returns>            
        public ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (slingServletExtensions != null) queryParams.Add("sling.servlet.extensions", ApiClient.ParameterToString(slingServletExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo</returns>            
        public ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo</returns>            
        public ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo ComAdobeCqSocialForumClientEndpointsImplForumOperationsService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialForumClientEndpointsImplForumOperationsService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialForumClientEndpointsImplForumOperationsService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="extensionOrder"></param> 
        /// <param name="flushForumontopic"></param> 
        /// <returns>ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo</returns>            
        public ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo ComAdobeCqSocialForumDispatcherImplFlushOperations (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? extensionOrder, bool? flushForumontopic)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (extensionOrder != null) queryParams.Add("extension.order", ApiClient.ParameterToString(extensionOrder)); // query parameter
 if (flushForumontopic != null) queryParams.Add("flush.forumontopic", ApiClient.ParameterToString(flushForumontopic)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialForumDispatcherImplFlushOperations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialForumDispatcherImplFlushOperations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="groupListingPaginationEnable"></param> 
        /// <param name="groupListingLazyloadingEnable"></param> 
        /// <param name="pageSize"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo</returns>            
        public ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? groupListingPaginationEnable, bool? groupListingLazyloadingEnable, int? pageSize, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (groupListingPaginationEnable != null) queryParams.Add("group.listing.pagination.enable", ApiClient.ParameterToString(groupListingPaginationEnable)); // query parameter
 if (groupListingLazyloadingEnable != null) queryParams.Add("group.listing.lazyloading.enable", ApiClient.ParameterToString(groupListingLazyloadingEnable)); // query parameter
 if (pageSize != null) queryParams.Add("page.size", ApiClient.ParameterToString(pageSize)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxWaitTime"></param> 
        /// <param name="minWaitBetweenRetries"></param> 
        /// <returns>ComAdobeCqSocialGroupImplGroupServiceImplInfo</returns>            
        public ComAdobeCqSocialGroupImplGroupServiceImplInfo ComAdobeCqSocialGroupImplGroupServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWaitTime, int? minWaitBetweenRetries)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxWaitTime != null) queryParams.Add("maxWaitTime", ApiClient.ParameterToString(maxWaitTime)); // query parameter
 if (minWaitBetweenRetries != null) queryParams.Add("minWaitBetweenRetries", ApiClient.ParameterToString(minWaitBetweenRetries)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialGroupImplGroupServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialGroupImplGroupServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialGroupImplGroupServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialGroupImplGroupServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="parameterGuavaCacheEnabled"></param> 
        /// <param name="parameterGuavaCacheParams"></param> 
        /// <param name="parameterGuavaCacheReload"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo</returns>            
        public ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? parameterGuavaCacheEnabled, string parameterGuavaCacheParams, bool? parameterGuavaCacheReload, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (parameterGuavaCacheEnabled != null) queryParams.Add("parameter.guava.cache.enabled", ApiClient.ParameterToString(parameterGuavaCacheEnabled)); // query parameter
 if (parameterGuavaCacheParams != null) queryParams.Add("parameter.guava.cache.params", ApiClient.ParameterToString(parameterGuavaCacheParams)); // query parameter
 if (parameterGuavaCacheReload != null) queryParams.Add("parameter.guava.cache.reload", ApiClient.ParameterToString(parameterGuavaCacheReload)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo</returns>            
        public ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo</returns>            
        public ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo</returns>            
        public ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <returns>ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo</returns>            
        public ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="everyoneLimit"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo</returns>            
        public ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? everyoneLimit, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (everyoneLimit != null) queryParams.Add("everyoneLimit", ApiClient.ParameterToString(everyoneLimit)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="messageProperties"></param> 
        /// <param name="messageBoxSizeLimit"></param> 
        /// <param name="messageCountLimit"></param> 
        /// <param name="notifyFailure"></param> 
        /// <param name="failureMessageFrom"></param> 
        /// <param name="failureTemplatePath"></param> 
        /// <param name="maxRetries"></param> 
        /// <param name="minWaitBetweenRetries"></param> 
        /// <param name="countUpdatePoolSize"></param> 
        /// <param name="inboxPath"></param> 
        /// <param name="sentitemsPath"></param> 
        /// <param name="supportAttachments"></param> 
        /// <param name="supportGroupMessaging"></param> 
        /// <param name="maxTotalRecipients"></param> 
        /// <param name="batchSize"></param> 
        /// <param name="maxTotalAttachmentSize"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <param name="allowedAttachmentTypes"></param> 
        /// <param name="serviceSelector"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <returns>ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo</returns>            
        public ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> messageProperties, int? messageBoxSizeLimit, int? messageCountLimit, bool? notifyFailure, string failureMessageFrom, string failureTemplatePath, int? maxRetries, int? minWaitBetweenRetries, int? countUpdatePoolSize, string inboxPath, string sentitemsPath, bool? supportAttachments, bool? supportGroupMessaging, int? maxTotalRecipients, int? batchSize, int? maxTotalAttachmentSize, List<string> attachmentTypeBlacklist, List<string> allowedAttachmentTypes, string serviceSelector, List<string> fieldWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (messageProperties != null) queryParams.Add("message.properties", ApiClient.ParameterToString(messageProperties)); // query parameter
 if (messageBoxSizeLimit != null) queryParams.Add("messageBoxSizeLimit", ApiClient.ParameterToString(messageBoxSizeLimit)); // query parameter
 if (messageCountLimit != null) queryParams.Add("messageCountLimit", ApiClient.ParameterToString(messageCountLimit)); // query parameter
 if (notifyFailure != null) queryParams.Add("notifyFailure", ApiClient.ParameterToString(notifyFailure)); // query parameter
 if (failureMessageFrom != null) queryParams.Add("failureMessageFrom", ApiClient.ParameterToString(failureMessageFrom)); // query parameter
 if (failureTemplatePath != null) queryParams.Add("failureTemplatePath", ApiClient.ParameterToString(failureTemplatePath)); // query parameter
 if (maxRetries != null) queryParams.Add("maxRetries", ApiClient.ParameterToString(maxRetries)); // query parameter
 if (minWaitBetweenRetries != null) queryParams.Add("minWaitBetweenRetries", ApiClient.ParameterToString(minWaitBetweenRetries)); // query parameter
 if (countUpdatePoolSize != null) queryParams.Add("countUpdatePoolSize", ApiClient.ParameterToString(countUpdatePoolSize)); // query parameter
 if (inboxPath != null) queryParams.Add("inbox.path", ApiClient.ParameterToString(inboxPath)); // query parameter
 if (sentitemsPath != null) queryParams.Add("sentitems.path", ApiClient.ParameterToString(sentitemsPath)); // query parameter
 if (supportAttachments != null) queryParams.Add("supportAttachments", ApiClient.ParameterToString(supportAttachments)); // query parameter
 if (supportGroupMessaging != null) queryParams.Add("supportGroupMessaging", ApiClient.ParameterToString(supportGroupMessaging)); // query parameter
 if (maxTotalRecipients != null) queryParams.Add("maxTotalRecipients", ApiClient.ParameterToString(maxTotalRecipients)); // query parameter
 if (batchSize != null) queryParams.Add("batchSize", ApiClient.ParameterToString(batchSize)); // query parameter
 if (maxTotalAttachmentSize != null) queryParams.Add("maxTotalAttachmentSize", ApiClient.ParameterToString(maxTotalAttachmentSize)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
 if (allowedAttachmentTypes != null) queryParams.Add("allowedAttachmentTypes", ApiClient.ParameterToString(allowedAttachmentTypes)); // query parameter
 if (serviceSelector != null) queryParams.Add("serviceSelector", ApiClient.ParameterToString(serviceSelector)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="resourceTypeFilters"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo</returns>            
        public ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (resourceTypeFilters != null) queryParams.Add("resourceType.filters", ApiClient.ParameterToString(resourceTypeFilters)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo</returns>            
        public ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo</returns>            
        public ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="resourceTypeFilters"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo</returns>            
        public ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypeFilters, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (resourceTypeFilters != null) queryParams.Add("resourceType.filters", ApiClient.ParameterToString(resourceTypeFilters)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <returns>ComAdobeCqSocialNotificationsImplMentionsRouterInfo</returns>            
        public ComAdobeCqSocialNotificationsImplMentionsRouterInfo ComAdobeCqSocialNotificationsImplMentionsRouter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplMentionsRouter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplMentionsRouter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialNotificationsImplMentionsRouterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialNotificationsImplMentionsRouterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxUnreadNotificationCount"></param> 
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo</returns>            
        public ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo ComAdobeCqSocialNotificationsImplNotificationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxUnreadNotificationCount)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxUnreadNotificationCount != null) queryParams.Add("max.unread.notification.count", ApiClient.ParameterToString(maxUnreadNotificationCount)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplNotificationManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplNotificationManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <returns>ComAdobeCqSocialNotificationsImplNotificationsRouterInfo</returns>            
        public ComAdobeCqSocialNotificationsImplNotificationsRouterInfo ComAdobeCqSocialNotificationsImplNotificationsRouter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplNotificationsRouter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialNotificationsImplNotificationsRouter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialNotificationsImplNotificationsRouterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialNotificationsImplNotificationsRouterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo</returns>            
        public ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSocialReportingAnalyticsPollingImporterInterval"></param> 
        /// <param name="cqSocialReportingAnalyticsPollingImporterPageSize"></param> 
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo</returns>            
        public ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqSocialReportingAnalyticsPollingImporterInterval, int? cqSocialReportingAnalyticsPollingImporterPageSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSocialReportingAnalyticsPollingImporterInterval != null) queryParams.Add("cq.social.reporting.analytics.polling.importer.interval", ApiClient.ParameterToString(cqSocialReportingAnalyticsPollingImporterInterval)); // query parameter
 if (cqSocialReportingAnalyticsPollingImporterPageSize != null) queryParams.Add("cq.social.reporting.analytics.polling.importer.pageSize", ApiClient.ParameterToString(cqSocialReportingAnalyticsPollingImporterPageSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="reportFetchDelay"></param> 
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo</returns>            
        public ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchDelay)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (reportFetchDelay != null) queryParams.Add("report.fetch.delay", ApiClient.ParameterToString(reportFetchDelay)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSocialConsoleAnalyticsSitesMapping"></param> 
        /// <param name="priority"></param> 
        /// <returns>ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo</returns>            
        public ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsSitesMapping, int? priority)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSocialConsoleAnalyticsSitesMapping != null) queryParams.Add("cq.social.console.analytics.sites.mapping", ApiClient.ParameterToString(cqSocialConsoleAnalyticsSitesMapping)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="attachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo</returns>            
        public ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> attachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (attachmentTypeBlacklist != null) queryParams.Add("attachmentTypeBlacklist", ApiClient.ParameterToString(attachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="slingServletExtensions"></param> 
        /// <returns>ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo</returns>            
        public ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletSelectors, string slingServletExtensions)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (slingServletExtensions != null) queryParams.Add("sling.servlet.extensions", ApiClient.ParameterToString(slingServletExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="slingServletExtensions"></param> 
        /// <returns>ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo</returns>            
        public ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, string slingServletExtensions)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (slingServletExtensions != null) queryParams.Add("sling.servlet.extensions", ApiClient.ParameterToString(slingServletExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <returns>ComAdobeCqSocialScoringImplScoringEventListenerInfo</returns>            
        public ComAdobeCqSocialScoringImplScoringEventListenerInfo ComAdobeCqSocialScoringImplScoringEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScoringImplScoringEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialScoringImplScoringEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialScoringImplScoringEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialScoringImplScoringEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enableFallback"></param> 
        /// <returns>ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo</returns>            
        public ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableFallback)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enableFallback != null) queryParams.Add("enableFallback", ApiClient.ParameterToString(enableFallback)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fieldWhitelist"></param> 
        /// <param name="sitePathFilters"></param> 
        /// <param name="sitePackageGroup"></param> 
        /// <returns>ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo</returns>            
        public ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo ComAdobeCqSocialSiteEndpointsImplSiteOperationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fieldWhitelist, List<string> sitePathFilters, string sitePackageGroup)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fieldWhitelist != null) queryParams.Add("fieldWhitelist", ApiClient.ParameterToString(fieldWhitelist)); // query parameter
 if (sitePathFilters != null) queryParams.Add("sitePathFilters", ApiClient.ParameterToString(sitePathFilters)); // query parameter
 if (sitePackageGroup != null) queryParams.Add("sitePackageGroup", ApiClient.ParameterToString(sitePackageGroup)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteEndpointsImplSiteOperationService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteEndpointsImplSiteOperationService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSocialConsoleAnalyticsComponents"></param> 
        /// <returns>ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo</returns>            
        public ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqSocialConsoleAnalyticsComponents)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSocialConsoleAnalyticsComponents != null) queryParams.Add("cq.social.console.analytics.components", ApiClient.ParameterToString(cqSocialConsoleAnalyticsComponents)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="componentsUsingTags"></param> 
        /// <returns>ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo</returns>            
        public ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo ComAdobeCqSocialSiteImplSiteConfiguratorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsUsingTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (componentsUsingTags != null) queryParams.Add("componentsUsingTags", ApiClient.ParameterToString(componentsUsingTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteImplSiteConfiguratorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSiteImplSiteConfiguratorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="srpType"></param> 
        /// <returns>ComAdobeCqSocialSrpImplSocialSolrConnectorInfo</returns>            
        public ComAdobeCqSocialSrpImplSocialSolrConnectorInfo ComAdobeCqSocialSrpImplSocialSolrConnector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string srpType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (srpType != null) queryParams.Add("srp.type", ApiClient.ParameterToString(srpType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSrpImplSocialSolrConnector: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSrpImplSocialSolrConnector: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSrpImplSocialSolrConnectorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSrpImplSocialSolrConnectorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="agentName"></param> 
        /// <param name="diffPath"></param> 
        /// <param name="propertyNames"></param> 
        /// <returns>ComAdobeCqSocialSyncImplDiffChangesObserverInfo</returns>            
        public ComAdobeCqSocialSyncImplDiffChangesObserverInfo ComAdobeCqSocialSyncImplDiffChangesObserver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string propertyNames)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (agentName != null) queryParams.Add("agentName", ApiClient.ParameterToString(agentName)); // query parameter
 if (diffPath != null) queryParams.Add("diffPath", ApiClient.ParameterToString(diffPath)); // query parameter
 if (propertyNames != null) queryParams.Add("propertyNames", ApiClient.ParameterToString(propertyNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplDiffChangesObserver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplDiffChangesObserver: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSyncImplDiffChangesObserverInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSyncImplDiffChangesObserverInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="nodetypes"></param> 
        /// <param name="ignorableprops"></param> 
        /// <param name="ignorablenodes"></param> 
        /// <param name="enabled"></param> 
        /// <param name="distfolders"></param> 
        /// <returns>ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo</returns>            
        public ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo ComAdobeCqSocialSyncImplGroupSyncListenerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, string ignorablenodes, bool? enabled, string distfolders)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (nodetypes != null) queryParams.Add("nodetypes", ApiClient.ParameterToString(nodetypes)); // query parameter
 if (ignorableprops != null) queryParams.Add("ignorableprops", ApiClient.ParameterToString(ignorableprops)); // query parameter
 if (ignorablenodes != null) queryParams.Add("ignorablenodes", ApiClient.ParameterToString(ignorablenodes)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (distfolders != null) queryParams.Add("distfolders", ApiClient.ParameterToString(distfolders)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplGroupSyncListenerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplGroupSyncListenerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="activeRunModes"></param> 
        /// <returns>ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo</returns>            
        public ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo ComAdobeCqSocialSyncImplPublisherSyncServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> activeRunModes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (activeRunModes != null) queryParams.Add("activeRunModes", ApiClient.ParameterToString(activeRunModes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplPublisherSyncServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplPublisherSyncServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="nodetypes"></param> 
        /// <param name="ignorableprops"></param> 
        /// <param name="ignorablenodes"></param> 
        /// <param name="enabled"></param> 
        /// <param name="distfolders"></param> 
        /// <returns>ComAdobeCqSocialSyncImplUserSyncListenerImplInfo</returns>            
        public ComAdobeCqSocialSyncImplUserSyncListenerImplInfo ComAdobeCqSocialSyncImplUserSyncListenerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> nodetypes, List<string> ignorableprops, List<string> ignorablenodes, bool? enabled, List<string> distfolders)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (nodetypes != null) queryParams.Add("nodetypes", ApiClient.ParameterToString(nodetypes)); // query parameter
 if (ignorableprops != null) queryParams.Add("ignorableprops", ApiClient.ParameterToString(ignorableprops)); // query parameter
 if (ignorablenodes != null) queryParams.Add("ignorablenodes", ApiClient.ParameterToString(ignorablenodes)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (distfolders != null) queryParams.Add("distfolders", ApiClient.ParameterToString(distfolders)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplUserSyncListenerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialSyncImplUserSyncListenerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialSyncImplUserSyncListenerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialSyncImplUserSyncListenerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="translateLanguage"></param> 
        /// <param name="translateDisplay"></param> 
        /// <param name="translateAttribution"></param> 
        /// <param name="translateCaching"></param> 
        /// <param name="translateSmartRendering"></param> 
        /// <param name="translateCachingDuration"></param> 
        /// <param name="translateSessionSaveInterval"></param> 
        /// <param name="translateSessionSaveBatchLimit"></param> 
        /// <returns>ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo</returns>            
        public ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo ComAdobeCqSocialTranslationImplTranslationServiceConfigManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translateLanguage, string translateDisplay, bool? translateAttribution, string translateCaching, string translateSmartRendering, string translateCachingDuration, string translateSessionSaveInterval, string translateSessionSaveBatchLimit)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (translateLanguage != null) queryParams.Add("translate.language", ApiClient.ParameterToString(translateLanguage)); // query parameter
 if (translateDisplay != null) queryParams.Add("translate.display", ApiClient.ParameterToString(translateDisplay)); // query parameter
 if (translateAttribution != null) queryParams.Add("translate.attribution", ApiClient.ParameterToString(translateAttribution)); // query parameter
 if (translateCaching != null) queryParams.Add("translate.caching", ApiClient.ParameterToString(translateCaching)); // query parameter
 if (translateSmartRendering != null) queryParams.Add("translate.smart.rendering", ApiClient.ParameterToString(translateSmartRendering)); // query parameter
 if (translateCachingDuration != null) queryParams.Add("translate.caching.duration", ApiClient.ParameterToString(translateCachingDuration)); // query parameter
 if (translateSessionSaveInterval != null) queryParams.Add("translate.session.save.interval", ApiClient.ParameterToString(translateSessionSaveInterval)); // query parameter
 if (translateSessionSaveBatchLimit != null) queryParams.Add("translate.session.save.batchLimit", ApiClient.ParameterToString(translateSessionSaveBatchLimit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialTranslationImplTranslationServiceConfigManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialTranslationImplTranslationServiceConfigManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="translateListenerType"></param> 
        /// <param name="translatePropertyList"></param> 
        /// <param name="poolSize"></param> 
        /// <param name="maxPoolSize"></param> 
        /// <param name="queueSize"></param> 
        /// <param name="keepAliveTime"></param> 
        /// <returns>ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo</returns>            
        public ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo ComAdobeCqSocialTranslationImplUGCLanguageDetector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventTopics, string eventFilter, List<string> translateListenerType, List<string> translatePropertyList, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (translateListenerType != null) queryParams.Add("translate.listener.type", ApiClient.ParameterToString(translateListenerType)); // query parameter
 if (translatePropertyList != null) queryParams.Add("translate.property.list", ApiClient.ParameterToString(translatePropertyList)); // query parameter
 if (poolSize != null) queryParams.Add("poolSize", ApiClient.ParameterToString(poolSize)); // query parameter
 if (maxPoolSize != null) queryParams.Add("maxPoolSize", ApiClient.ParameterToString(maxPoolSize)); // query parameter
 if (queueSize != null) queryParams.Add("queueSize", ApiClient.ParameterToString(queueSize)); // query parameter
 if (keepAliveTime != null) queryParams.Add("keepAliveTime", ApiClient.ParameterToString(keepAliveTime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialTranslationImplUGCLanguageDetector: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialTranslationImplUGCLanguageDetector: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="threadPoolSize"></param> 
        /// <param name="delayTime"></param> 
        /// <param name="workerSleepTime"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threadPoolSize, int? delayTime, int? workerSleepTime)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (threadPoolSize != null) queryParams.Add("threadPoolSize", ApiClient.ParameterToString(threadPoolSize)); // query parameter
 if (delayTime != null) queryParams.Add("delayTime", ApiClient.ParameterToString(delayTime)); // query parameter
 if (workerSleepTime != null) queryParams.Add("workerSleepTime", ApiClient.ParameterToString(workerSleepTime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="poolSize"></param> 
        /// <param name="maxPoolSize"></param> 
        /// <param name="queueSize"></param> 
        /// <param name="keepAliveTime"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? poolSize, int? maxPoolSize, int? queueSize, int? keepAliveTime)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (poolSize != null) queryParams.Add("poolSize", ApiClient.ParameterToString(poolSize)); // query parameter
 if (maxPoolSize != null) queryParams.Add("maxPoolSize", ApiClient.ParameterToString(maxPoolSize)); // query parameter
 if (queueSize != null) queryParams.Add("queueSize", ApiClient.ParameterToString(queueSize)); // query parameter
 if (keepAliveTime != null) queryParams.Add("keepAliveTime", ApiClient.ParameterToString(keepAliveTime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isPrimaryPublisher"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isPrimaryPublisher)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isPrimaryPublisher != null) queryParams.Add("isPrimaryPublisher", ApiClient.ParameterToString(isPrimaryPublisher)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="legacyCloudUGCPathMapping"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo ComAdobeCqSocialUgcbaseImplSocialUtilsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? legacyCloudUGCPathMapping)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (legacyCloudUGCPathMapping != null) queryParams.Add("legacyCloudUGCPathMapping", ApiClient.ParameterToString(legacyCloudUGCPathMapping)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplSocialUtilsImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseImplSocialUtilsImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="automoderationSequence"></param> 
        /// <param name="automoderationOnfailurestop"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> automoderationSequence, bool? automoderationOnfailurestop)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (automoderationSequence != null) queryParams.Add("automoderation.sequence", ApiClient.ParameterToString(automoderationSequence)); // query parameter
 if (automoderationOnfailurestop != null) queryParams.Add("automoderation.onfailurestop", ApiClient.ParameterToString(automoderationOnfailurestop)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="watchwordsPositive"></param> 
        /// <param name="watchwordsNegative"></param> 
        /// <param name="watchwordsPath"></param> 
        /// <param name="sentimentPath"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo</returns>            
        public ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo ComAdobeCqSocialUgcbaseModerationImplSentimentProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> watchwordsPositive, List<string> watchwordsNegative, string watchwordsPath, string sentimentPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (watchwordsPositive != null) queryParams.Add("watchwords.positive", ApiClient.ParameterToString(watchwordsPositive)); // query parameter
 if (watchwordsNegative != null) queryParams.Add("watchwords.negative", ApiClient.ParameterToString(watchwordsNegative)); // query parameter
 if (watchwordsPath != null) queryParams.Add("watchwords.path", ApiClient.ParameterToString(watchwordsPath)); // query parameter
 if (sentimentPath != null) queryParams.Add("sentiment.path", ApiClient.ParameterToString(sentimentPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseModerationImplSentimentProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseModerationImplSentimentProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultAttachmentTypeBlacklist"></param> 
        /// <param name="baselineAttachmentTypeBlacklist"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo</returns>            
        public ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultAttachmentTypeBlacklist != null) queryParams.Add("default.attachment.type.blacklist", ApiClient.ParameterToString(defaultAttachmentTypeBlacklist)); // query parameter
 if (baselineAttachmentTypeBlacklist != null) queryParams.Add("baseline.attachment.type.blacklist", ApiClient.ParameterToString(baselineAttachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="parameterWhitelist"></param> 
        /// <param name="parameterWhitelistPrefixes"></param> 
        /// <param name="binaryParameterWhitelist"></param> 
        /// <param name="modifierWhitelist"></param> 
        /// <param name="operationWhitelist"></param> 
        /// <param name="operationWhitelistPrefixes"></param> 
        /// <param name="typehintWhitelist"></param> 
        /// <param name="resourcetypeWhitelist"></param> 
        /// <returns>ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo</returns>            
        public ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (parameterWhitelist != null) queryParams.Add("parameter.whitelist", ApiClient.ParameterToString(parameterWhitelist)); // query parameter
 if (parameterWhitelistPrefixes != null) queryParams.Add("parameter.whitelist.prefixes", ApiClient.ParameterToString(parameterWhitelistPrefixes)); // query parameter
 if (binaryParameterWhitelist != null) queryParams.Add("binary.parameter.whitelist", ApiClient.ParameterToString(binaryParameterWhitelist)); // query parameter
 if (modifierWhitelist != null) queryParams.Add("modifier.whitelist", ApiClient.ParameterToString(modifierWhitelist)); // query parameter
 if (operationWhitelist != null) queryParams.Add("operation.whitelist", ApiClient.ParameterToString(operationWhitelist)); // query parameter
 if (operationWhitelistPrefixes != null) queryParams.Add("operation.whitelist.prefixes", ApiClient.ParameterToString(operationWhitelistPrefixes)); // query parameter
 if (typehintWhitelist != null) queryParams.Add("typehint.whitelist", ApiClient.ParameterToString(typehintWhitelist)); // query parameter
 if (resourcetypeWhitelist != null) queryParams.Add("resourcetype.whitelist", ApiClient.ParameterToString(resourcetypeWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletExtensions"></param> 
        /// <param name="slingServletPaths"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <returns>ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo</returns>            
        public ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletExtensions, string slingServletPaths, string slingServletMethods)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletExtensions != null) queryParams.Add("sling.servlet.extensions", ApiClient.ParameterToString(slingServletExtensions)); // query parameter
 if (slingServletPaths != null) queryParams.Add("sling.servlet.paths", ApiClient.ParameterToString(slingServletPaths)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enable"></param> 
        /// <param name="agentConfiguration"></param> 
        /// <param name="contextPath"></param> 
        /// <param name="disabledCipherSuites"></param> 
        /// <param name="enabledCipherSuites"></param> 
        /// <returns>ComAdobeCqSocialUserImplTransportHttpToPublisherInfo</returns>            
        public ComAdobeCqSocialUserImplTransportHttpToPublisherInfo ComAdobeCqSocialUserImplTransportHttpToPublisher (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enable, List<string> agentConfiguration, string contextPath, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enable != null) queryParams.Add("enable", ApiClient.ParameterToString(enable)); // query parameter
 if (agentConfiguration != null) queryParams.Add("agent.configuration", ApiClient.ParameterToString(agentConfiguration)); // query parameter
 if (contextPath != null) queryParams.Add("context.path", ApiClient.ParameterToString(contextPath)); // query parameter
 if (disabledCipherSuites != null) queryParams.Add("disabled.cipher.suites", ApiClient.ParameterToString(disabledCipherSuites)); // query parameter
 if (enabledCipherSuites != null) queryParams.Add("enabled.cipher.suites", ApiClient.ParameterToString(enabledCipherSuites)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUserImplTransportHttpToPublisher: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqSocialUserImplTransportHttpToPublisher: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqSocialUserImplTransportHttpToPublisherInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqSocialUserImplTransportHttpToPublisherInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="resourceTypes"></param> 
        /// <returns>ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo</returns>            
        public ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceTypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (resourceTypes != null) queryParams.Add("resource.types", ApiClient.ParameterToString(resourceTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="deletePathRegexps"></param> 
        /// <param name="deleteSql2Query"></param> 
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo</returns>            
        public ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deletePathRegexps, string deleteSql2Query)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (deletePathRegexps != null) queryParams.Add("delete.path.regexps", ApiClient.ParameterToString(deletePathRegexps)); // query parameter
 if (deleteSql2Query != null) queryParams.Add("delete.sql2.query", ApiClient.ParameterToString(deleteSql2Query)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="deleteNameRegexps"></param> 
        /// <returns>ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo</returns>            
        public ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> deleteNameRegexps)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (deleteNameRegexps != null) queryParams.Add("delete.name.regexps", ApiClient.ParameterToString(deleteNameRegexps)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="threshold"></param> 
        /// <param name="jobTopicName"></param> 
        /// <param name="emailEnabled"></param> 
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo</returns>            
        public ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (threshold != null) queryParams.Add("threshold", ApiClient.ParameterToString(threshold)); // query parameter
 if (jobTopicName != null) queryParams.Add("jobTopicName", ApiClient.ParameterToString(jobTopicName)); // query parameter
 if (emailEnabled != null) queryParams.Add("emailEnabled", ApiClient.ParameterToString(emailEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="jobPurgeThreshold"></param> 
        /// <param name="jobPurgeMaxJobs"></param> 
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo</returns>            
        public ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? jobPurgeThreshold, int? jobPurgeMaxJobs)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (jobPurgeThreshold != null) queryParams.Add("job.purge.threshold", ApiClient.ParameterToString(jobPurgeThreshold)); // query parameter
 if (jobPurgeMaxJobs != null) queryParams.Add("job.purge.max.jobs", ApiClient.ParameterToString(jobPurgeMaxJobs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="threshold"></param> 
        /// <param name="jobTopicName"></param> 
        /// <param name="emailEnabled"></param> 
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo</returns>            
        public ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (threshold != null) queryParams.Add("threshold", ApiClient.ParameterToString(threshold)); // query parameter
 if (jobTopicName != null) queryParams.Add("jobTopicName", ApiClient.ParameterToString(jobTopicName)); // query parameter
 if (emailEnabled != null) queryParams.Add("emailEnabled", ApiClient.ParameterToString(emailEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="threshold"></param> 
        /// <param name="jobTopicName"></param> 
        /// <param name="emailEnabled"></param> 
        /// <returns>ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo</returns>            
        public ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? threshold, string jobTopicName, bool? emailEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (threshold != null) queryParams.Add("threshold", ApiClient.ParameterToString(threshold)); // query parameter
 if (jobTopicName != null) queryParams.Add("jobTopicName", ApiClient.ParameterToString(jobTopicName)); // query parameter
 if (emailEnabled != null) queryParams.Add("emailEnabled", ApiClient.ParameterToString(emailEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="launchesEventhandlerThreadpoolMaxsize"></param> 
        /// <param name="launchesEventhandlerThreadpoolPriority"></param> 
        /// <param name="launchesEventhandlerUpdatelastmodification"></param> 
        /// <returns>ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo</returns>            
        public ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo ComAdobeCqWcmLaunchesImplLaunchesEventHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? launchesEventhandlerThreadpoolMaxsize, string launchesEventhandlerThreadpoolPriority, bool? launchesEventhandlerUpdatelastmodification)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (launchesEventhandlerThreadpoolMaxsize != null) queryParams.Add("launches.eventhandler.threadpool.maxsize", ApiClient.ParameterToString(launchesEventhandlerThreadpoolMaxsize)); // query parameter
 if (launchesEventhandlerThreadpoolPriority != null) queryParams.Add("launches.eventhandler.threadpool.priority", ApiClient.ParameterToString(launchesEventhandlerThreadpoolPriority)); // query parameter
 if (launchesEventhandlerUpdatelastmodification != null) queryParams.Add("launches.eventhandler.updatelastmodification", ApiClient.ParameterToString(launchesEventhandlerUpdatelastmodification)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmLaunchesImplLaunchesEventHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmLaunchesImplLaunchesEventHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmQrcodeServletWhitelist"></param> 
        /// <returns>ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo</returns>            
        public ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmQrcodeServletWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmQrcodeServletWhitelist != null) queryParams.Add("cq.wcm.qrcode.servlet.whitelist", ApiClient.ParameterToString(cqWcmQrcodeServletWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="size"></param> 
        /// <returns>ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo</returns>            
        public ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? size)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (size != null) queryParams.Add("size", ApiClient.ParameterToString(size)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="syncTranslationStateSchedulingFormat"></param> 
        /// <param name="schedulingRepeatTranslationSchedulingFormat"></param> 
        /// <param name="syncTranslationStateLockTimeoutInMinutes"></param> 
        /// <param name="exportFormat"></param> 
        /// <returns>ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo</returns>            
        public ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string syncTranslationStateSchedulingFormat, string schedulingRepeatTranslationSchedulingFormat, string syncTranslationStateLockTimeoutInMinutes, string exportFormat)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (syncTranslationStateSchedulingFormat != null) queryParams.Add("syncTranslationState.schedulingFormat", ApiClient.ParameterToString(syncTranslationStateSchedulingFormat)); // query parameter
 if (schedulingRepeatTranslationSchedulingFormat != null) queryParams.Add("schedulingRepeatTranslation.schedulingFormat", ApiClient.ParameterToString(schedulingRepeatTranslationSchedulingFormat)); // query parameter
 if (syncTranslationStateLockTimeoutInMinutes != null) queryParams.Add("syncTranslationState.lockTimeoutInMinutes", ApiClient.ParameterToString(syncTranslationStateLockTimeoutInMinutes)); // query parameter
 if (exportFormat != null) queryParams.Add("export.format", ApiClient.ParameterToString(exportFormat)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="portalOutboxes"></param> 
        /// <param name="draftDataService"></param> 
        /// <param name="draftMetadataService"></param> 
        /// <param name="submitDataService"></param> 
        /// <param name="submitMetadataService"></param> 
        /// <param name="pendingSignDataService"></param> 
        /// <param name="pendingSignMetadataService"></param> 
        /// <returns>ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo</returns>            
        public ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> portalOutboxes, string draftDataService, string draftMetadataService, string submitDataService, string submitMetadataService, string pendingSignDataService, string pendingSignMetadataService)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (portalOutboxes != null) queryParams.Add("portal.outboxes", ApiClient.ParameterToString(portalOutboxes)); // query parameter
 if (draftDataService != null) queryParams.Add("draft.data.service", ApiClient.ParameterToString(draftDataService)); // query parameter
 if (draftMetadataService != null) queryParams.Add("draft.metadata.service", ApiClient.ParameterToString(draftMetadataService)); // query parameter
 if (submitDataService != null) queryParams.Add("submit.data.service", ApiClient.ParameterToString(submitDataService)); // query parameter
 if (submitMetadataService != null) queryParams.Add("submit.metadata.service", ApiClient.ParameterToString(submitMetadataService)); // query parameter
 if (pendingSignDataService != null) queryParams.Add("pendingSign.data.service", ApiClient.ParameterToString(pendingSignDataService)); // query parameter
 if (pendingSignMetadataService != null) queryParams.Add("pendingSign.metadata.service", ApiClient.ParameterToString(pendingSignMetadataService)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="formportalInterval"></param> 
        /// <returns>ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo</returns>            
        public ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo ComAdobeFdFpConfigFormsPortalSchedulerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string formportalInterval)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (formportalInterval != null) queryParams.Add("formportal.interval", ApiClient.ParameterToString(formportalInterval)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFdFpConfigFormsPortalSchedulerService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFdFpConfigFormsPortalSchedulerService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="alloweddataFileLocations"></param> 
        /// <returns>ComAdobeFormsCommonServiceImplDefaultDataProviderInfo</returns>            
        public ComAdobeFormsCommonServiceImplDefaultDataProviderInfo ComAdobeFormsCommonServiceImplDefaultDataProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloweddataFileLocations)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (alloweddataFileLocations != null) queryParams.Add("alloweddataFileLocations", ApiClient.ParameterToString(alloweddataFileLocations)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServiceImplDefaultDataProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServiceImplDefaultDataProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeFormsCommonServiceImplDefaultDataProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeFormsCommonServiceImplDefaultDataProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="tempStorageConfig"></param> 
        /// <returns>ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo</returns>            
        public ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tempStorageConfig)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (tempStorageConfig != null) queryParams.Add("tempStorageConfig", ApiClient.ParameterToString(tempStorageConfig)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="durationForTemporaryStorage"></param> 
        /// <param name="durationForAnonymousStorage"></param> 
        /// <returns>ComAdobeFormsCommonServletTempCleanUpTaskInfo</returns>            
        public ComAdobeFormsCommonServletTempCleanUpTaskInfo ComAdobeFormsCommonServletTempCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string durationForTemporaryStorage, string durationForAnonymousStorage)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (durationForTemporaryStorage != null) queryParams.Add("Duration for Temporary Storage", ApiClient.ParameterToString(durationForTemporaryStorage)); // query parameter
 if (durationForAnonymousStorage != null) queryParams.Add("Duration for Anonymous Storage", ApiClient.ParameterToString(durationForAnonymousStorage)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServletTempCleanUpTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeFormsCommonServletTempCleanUpTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeFormsCommonServletTempCleanUpTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeFormsCommonServletTempCleanUpTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queryLimit"></param> 
        /// <param name="fileTypeExtensionMap"></param> 
        /// <returns>ComAdobeGraniteAcpPlatformPlatformServletInfo</returns>            
        public ComAdobeGraniteAcpPlatformPlatformServletInfo ComAdobeGraniteAcpPlatformPlatformServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimit, List<string> fileTypeExtensionMap)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queryLimit != null) queryParams.Add("query.limit", ApiClient.ParameterToString(queryLimit)); // query parameter
 if (fileTypeExtensionMap != null) queryParams.Add("file.type.extension.map", ApiClient.ParameterToString(fileTypeExtensionMap)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAcpPlatformPlatformServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAcpPlatformPlatformServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAcpPlatformPlatformServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAcpPlatformPlatformServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="aggregateRelationships"></param> 
        /// <param name="aggregateDescendVirtual"></param> 
        /// <returns>ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo</returns>            
        public ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo ComAdobeGraniteActivitystreamsImplActivityManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aggregateRelationships, bool? aggregateDescendVirtual)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (aggregateRelationships != null) queryParams.Add("aggregate.relationships", ApiClient.ParameterToString(aggregateRelationships)); // query parameter
 if (aggregateDescendVirtual != null) queryParams.Add("aggregate.descend.virtual", ApiClient.ParameterToString(aggregateDescendVirtual)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteActivitystreamsImplActivityManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteActivitystreamsImplActivityManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disabled"></param> 
        /// <returns>ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo</returns>            
        public ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo ComAdobeGraniteAnalyzerBaseSystemStatusServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disabled != null) queryParams.Add("disabled", ApiClient.ParameterToString(disabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAnalyzerBaseSystemStatusServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAnalyzerBaseSystemStatusServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disabled"></param> 
        /// <returns>ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo</returns>            
        public ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disabled != null) queryParams.Add("disabled", ApiClient.ParameterToString(disabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeCqCdnCdnRewriter"></param> 
        /// <param name="comAdobeCqCloudConfigComponents"></param> 
        /// <param name="comAdobeCqCloudConfigCore"></param> 
        /// <param name="comAdobeCqCloudConfigUi"></param> 
        /// <param name="comAdobeCqComAdobeCqEditor"></param> 
        /// <param name="comAdobeCqComAdobeCqProjectsCore"></param> 
        /// <param name="comAdobeCqComAdobeCqProjectsWcmCore"></param> 
        /// <param name="comAdobeCqComAdobeCqUiCommons"></param> 
        /// <param name="comAdobeCqComAdobeCqWcmStyle"></param> 
        /// <param name="comAdobeCqCqActivitymapIntegration"></param> 
        /// <param name="comAdobeCqCqContexthubCommons"></param> 
        /// <param name="comAdobeCqCqDtm"></param> 
        /// <param name="comAdobeCqCqHealthcheck"></param> 
        /// <param name="comAdobeCqCqMultisiteTargeting"></param> 
        /// <param name="comAdobeCqCqPreUpgradeCleanup"></param> 
        /// <param name="comAdobeCqCqProductInfoProvider"></param> 
        /// <param name="comAdobeCqCqRestSites"></param> 
        /// <param name="comAdobeCqCqSecurityHc"></param> 
        /// <param name="comAdobeCqDamCqDamSvgHandler"></param> 
        /// <param name="comAdobeCqDamCqScene7Imaging"></param> 
        /// <param name="comAdobeCqDtmReactorCore"></param> 
        /// <param name="comAdobeCqDtmReactorUi"></param> 
        /// <param name="comAdobeCqExpJspelResolver"></param> 
        /// <param name="comAdobeCqInboxCqInbox"></param> 
        /// <param name="comAdobeCqJsonSchemaParser"></param> 
        /// <param name="comAdobeCqMediaCqMediaPublishingDpsFpCore"></param> 
        /// <param name="comAdobeCqMobileCqMobileCaas"></param> 
        /// <param name="comAdobeCqMobileCqMobileIndexBuilder"></param> 
        /// <param name="comAdobeCqMobileCqMobilePhonegapBuild"></param> 
        /// <param name="comAdobeCqMyspell"></param> 
        /// <param name="comAdobeCqSampleWeRetailCore"></param> 
        /// <param name="comAdobeCqScreensComAdobeCqScreensDcc"></param> 
        /// <param name="comAdobeCqScreensComAdobeCqScreensMqCore"></param> 
        /// <param name="comAdobeCqSocialCqSocialAsProvider"></param> 
        /// <param name="comAdobeCqSocialCqSocialBadgingBasicImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialBadgingImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialCalendarImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialContentFragmentsImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialEnablementImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialGraphImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialIdeationImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialJcrProvider"></param> 
        /// <param name="comAdobeCqSocialCqSocialMembersImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialMsProvider"></param> 
        /// <param name="comAdobeCqSocialCqSocialNotificationsChannelsWeb"></param> 
        /// <param name="comAdobeCqSocialCqSocialNotificationsImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialRdbProvider"></param> 
        /// <param name="comAdobeCqSocialCqSocialScfImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialScoringBasicImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialScoringImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialServiceusersImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialSrpImpl"></param> 
        /// <param name="comAdobeCqSocialCqSocialUgcbaseImpl"></param> 
        /// <param name="comAdobeDamCqDamCfmImpl"></param> 
        /// <param name="comAdobeFormsFoundationFormsFoundationBase"></param> 
        /// <param name="comAdobeGraniteApicontroller"></param> 
        /// <param name="comAdobeGraniteAssetCore"></param> 
        /// <param name="comAdobeGraniteAuthSso"></param> 
        /// <param name="comAdobeGraniteBundlesHcImpl"></param> 
        /// <param name="comAdobeGraniteCompatRouter"></param> 
        /// <param name="comAdobeGraniteConf"></param> 
        /// <param name="comAdobeGraniteConfUiCore"></param> 
        /// <param name="comAdobeGraniteCors"></param> 
        /// <param name="comAdobeGraniteCrxExplorer"></param> 
        /// <param name="comAdobeGraniteCrxdeLite"></param> 
        /// <param name="comAdobeGraniteCryptoConfig"></param> 
        /// <param name="comAdobeGraniteCryptoExtension"></param> 
        /// <param name="comAdobeGraniteCryptoFile"></param> 
        /// <param name="comAdobeGraniteCryptoJcr"></param> 
        /// <param name="comAdobeGraniteCsrf"></param> 
        /// <param name="comAdobeGraniteDistributionCore"></param> 
        /// <param name="comAdobeGraniteDropwizardMetrics"></param> 
        /// <param name="comAdobeGraniteFragsImpl"></param> 
        /// <param name="comAdobeGraniteGibson"></param> 
        /// <param name="comAdobeGraniteInfocollector"></param> 
        /// <param name="comAdobeGraniteInstallerFactoryPackages"></param> 
        /// <param name="comAdobeGraniteJettySsl"></param> 
        /// <param name="comAdobeGraniteJobsAsync"></param> 
        /// <param name="comAdobeGraniteMaintenanceOak"></param> 
        /// <param name="comAdobeGraniteMonitoringCore"></param> 
        /// <param name="comAdobeGraniteQueries"></param> 
        /// <param name="comAdobeGraniteReplicationHcImpl"></param> 
        /// <param name="comAdobeGraniteRepositoryChecker"></param> 
        /// <param name="comAdobeGraniteRepositoryHcImpl"></param> 
        /// <param name="comAdobeGraniteRestAssets"></param> 
        /// <param name="comAdobeGraniteSecurityUi"></param> 
        /// <param name="comAdobeGraniteStartup"></param> 
        /// <param name="comAdobeGraniteTagsoup"></param> 
        /// <param name="comAdobeGraniteTaskmanagementCore"></param> 
        /// <param name="comAdobeGraniteTaskmanagementWorkflow"></param> 
        /// <param name="comAdobeGraniteUiClientlibsCompilerLess"></param> 
        /// <param name="comAdobeGraniteUiClientlibsProcessorGcc"></param> 
        /// <param name="comAdobeGraniteWebconsolePlugins"></param> 
        /// <param name="comAdobeGraniteWorkflowConsole"></param> 
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentLinux"></param> 
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentMacosx"></param> 
        /// <param name="comAdobeXmpWorkerFilesNativeFragmentWin"></param> 
        /// <param name="comDayCommonsOsgiWrapperSimpleJndi"></param> 
        /// <param name="comDayCqCqAuthhandler"></param> 
        /// <param name="comDayCqCqCompatConfigupdate"></param> 
        /// <param name="comDayCqCqLicensebranding"></param> 
        /// <param name="comDayCqCqNotifcationImpl"></param> 
        /// <param name="comDayCqCqReplicationAudit"></param> 
        /// <param name="comDayCqCqSearchExt"></param> 
        /// <param name="comDayCqDamCqDamAnnotationPrint"></param> 
        /// <param name="comDayCqDamCqDamAssetUsage"></param> 
        /// <param name="comDayCqDamCqDamS7dam"></param> 
        /// <param name="comDayCqDamCqDamSimilaritysearch"></param> 
        /// <param name="comDayCqDamDamWebdavSupport"></param> 
        /// <param name="comDayCqPreUpgradeTasks"></param> 
        /// <param name="comDayCqReplicationExtensions"></param> 
        /// <param name="comDayCqWcmCqMsmCore"></param> 
        /// <param name="comDayCqWcmCqWcmTranslation"></param> 
        /// <param name="dayCommonsJrawio"></param> 
        /// <param name="orgApacheAriesJmxWhiteboard"></param> 
        /// <param name="orgApacheFelixHttpSslfilter"></param> 
        /// <param name="orgApacheFelixOrgApacheFelixThreaddump"></param> 
        /// <param name="orgApacheFelixWebconsolePluginsDs"></param> 
        /// <param name="orgApacheFelixWebconsolePluginsEvent"></param> 
        /// <param name="orgApacheFelixWebconsolePluginsMemoryusage"></param> 
        /// <param name="orgApacheFelixWebconsolePluginsPackageadmin"></param> 
        /// <param name="orgApacheJackrabbitOakAuthLdap"></param> 
        /// <param name="orgApacheJackrabbitOakSegmentTar"></param> 
        /// <param name="orgApacheJackrabbitOakSolrOsgi"></param> 
        /// <param name="orgApacheSlingBundleresourceImpl"></param> 
        /// <param name="orgApacheSlingCommonsFsclassloader"></param> 
        /// <param name="orgApacheSlingCommonsLogWebconsole"></param> 
        /// <param name="orgApacheSlingDatasource"></param> 
        /// <param name="orgApacheSlingDiscoveryBase"></param> 
        /// <param name="orgApacheSlingDiscoveryOak"></param> 
        /// <param name="orgApacheSlingDiscoverySupport"></param> 
        /// <param name="orgApacheSlingDistributionApi"></param> 
        /// <param name="orgApacheSlingDistributionCore"></param> 
        /// <param name="orgApacheSlingExtensionsWebconsolesecurityprovider"></param> 
        /// <param name="orgApacheSlingHcWebconsole"></param> 
        /// <param name="orgApacheSlingInstallerConsole"></param> 
        /// <param name="orgApacheSlingInstallerProviderFile"></param> 
        /// <param name="orgApacheSlingInstallerProviderJcr"></param> 
        /// <param name="orgApacheSlingJcrDavex"></param> 
        /// <param name="orgApacheSlingJcrResourcesecurity"></param> 
        /// <param name="orgApacheSlingJmxProvider"></param> 
        /// <param name="orgApacheSlingLaunchpadInstaller"></param> 
        /// <param name="orgApacheSlingModelsImpl"></param> 
        /// <param name="orgApacheSlingRepoinitParser"></param> 
        /// <param name="orgApacheSlingResourceInventory"></param> 
        /// <param name="orgApacheSlingResourceresolver"></param> 
        /// <param name="orgApacheSlingScriptingJavascript"></param> 
        /// <param name="orgApacheSlingScriptingJst"></param> 
        /// <param name="orgApacheSlingScriptingSightlyJsProvider"></param> 
        /// <param name="orgApacheSlingScriptingSightlyModelsProvider"></param> 
        /// <param name="orgApacheSlingSecurity"></param> 
        /// <param name="orgApacheSlingServletsCompat"></param> 
        /// <param name="orgApacheSlingServletsGet"></param> 
        /// <param name="orgApacheSlingStartupfilterDisabler"></param> 
        /// <param name="orgApacheSlingTracer"></param> 
        /// <param name="weRetailClientAppCore"></param> 
        /// <returns>ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo</returns>            
        public ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo ComAdobeGraniteApicontrollerFilterResolverHookFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeCqCdnCdnRewriter, string comAdobeCqCloudConfigComponents, string comAdobeCqCloudConfigCore, string comAdobeCqCloudConfigUi, string comAdobeCqComAdobeCqEditor, string comAdobeCqComAdobeCqProjectsCore, string comAdobeCqComAdobeCqProjectsWcmCore, string comAdobeCqComAdobeCqUiCommons, string comAdobeCqComAdobeCqWcmStyle, string comAdobeCqCqActivitymapIntegration, string comAdobeCqCqContexthubCommons, string comAdobeCqCqDtm, string comAdobeCqCqHealthcheck, string comAdobeCqCqMultisiteTargeting, string comAdobeCqCqPreUpgradeCleanup, string comAdobeCqCqProductInfoProvider, string comAdobeCqCqRestSites, string comAdobeCqCqSecurityHc, string comAdobeCqDamCqDamSvgHandler, string comAdobeCqDamCqScene7Imaging, string comAdobeCqDtmReactorCore, string comAdobeCqDtmReactorUi, string comAdobeCqExpJspelResolver, string comAdobeCqInboxCqInbox, string comAdobeCqJsonSchemaParser, string comAdobeCqMediaCqMediaPublishingDpsFpCore, string comAdobeCqMobileCqMobileCaas, string comAdobeCqMobileCqMobileIndexBuilder, string comAdobeCqMobileCqMobilePhonegapBuild, string comAdobeCqMyspell, string comAdobeCqSampleWeRetailCore, string comAdobeCqScreensComAdobeCqScreensDcc, string comAdobeCqScreensComAdobeCqScreensMqCore, string comAdobeCqSocialCqSocialAsProvider, string comAdobeCqSocialCqSocialBadgingBasicImpl, string comAdobeCqSocialCqSocialBadgingImpl, string comAdobeCqSocialCqSocialCalendarImpl, string comAdobeCqSocialCqSocialContentFragmentsImpl, string comAdobeCqSocialCqSocialEnablementImpl, string comAdobeCqSocialCqSocialGraphImpl, string comAdobeCqSocialCqSocialIdeationImpl, string comAdobeCqSocialCqSocialJcrProvider, string comAdobeCqSocialCqSocialMembersImpl, string comAdobeCqSocialCqSocialMsProvider, string comAdobeCqSocialCqSocialNotificationsChannelsWeb, string comAdobeCqSocialCqSocialNotificationsImpl, string comAdobeCqSocialCqSocialRdbProvider, string comAdobeCqSocialCqSocialScfImpl, string comAdobeCqSocialCqSocialScoringBasicImpl, string comAdobeCqSocialCqSocialScoringImpl, string comAdobeCqSocialCqSocialServiceusersImpl, string comAdobeCqSocialCqSocialSrpImpl, string comAdobeCqSocialCqSocialUgcbaseImpl, string comAdobeDamCqDamCfmImpl, string comAdobeFormsFoundationFormsFoundationBase, string comAdobeGraniteApicontroller, string comAdobeGraniteAssetCore, string comAdobeGraniteAuthSso, string comAdobeGraniteBundlesHcImpl, string comAdobeGraniteCompatRouter, string comAdobeGraniteConf, string comAdobeGraniteConfUiCore, string comAdobeGraniteCors, string comAdobeGraniteCrxExplorer, string comAdobeGraniteCrxdeLite, string comAdobeGraniteCryptoConfig, string comAdobeGraniteCryptoExtension, string comAdobeGraniteCryptoFile, string comAdobeGraniteCryptoJcr, string comAdobeGraniteCsrf, string comAdobeGraniteDistributionCore, string comAdobeGraniteDropwizardMetrics, string comAdobeGraniteFragsImpl, string comAdobeGraniteGibson, string comAdobeGraniteInfocollector, string comAdobeGraniteInstallerFactoryPackages, string comAdobeGraniteJettySsl, string comAdobeGraniteJobsAsync, string comAdobeGraniteMaintenanceOak, string comAdobeGraniteMonitoringCore, string comAdobeGraniteQueries, string comAdobeGraniteReplicationHcImpl, string comAdobeGraniteRepositoryChecker, string comAdobeGraniteRepositoryHcImpl, string comAdobeGraniteRestAssets, string comAdobeGraniteSecurityUi, string comAdobeGraniteStartup, string comAdobeGraniteTagsoup, string comAdobeGraniteTaskmanagementCore, string comAdobeGraniteTaskmanagementWorkflow, string comAdobeGraniteUiClientlibsCompilerLess, string comAdobeGraniteUiClientlibsProcessorGcc, string comAdobeGraniteWebconsolePlugins, string comAdobeGraniteWorkflowConsole, string comAdobeXmpWorkerFilesNativeFragmentLinux, string comAdobeXmpWorkerFilesNativeFragmentMacosx, string comAdobeXmpWorkerFilesNativeFragmentWin, string comDayCommonsOsgiWrapperSimpleJndi, string comDayCqCqAuthhandler, string comDayCqCqCompatConfigupdate, string comDayCqCqLicensebranding, string comDayCqCqNotifcationImpl, string comDayCqCqReplicationAudit, string comDayCqCqSearchExt, string comDayCqDamCqDamAnnotationPrint, string comDayCqDamCqDamAssetUsage, string comDayCqDamCqDamS7dam, string comDayCqDamCqDamSimilaritysearch, string comDayCqDamDamWebdavSupport, string comDayCqPreUpgradeTasks, string comDayCqReplicationExtensions, string comDayCqWcmCqMsmCore, string comDayCqWcmCqWcmTranslation, string dayCommonsJrawio, string orgApacheAriesJmxWhiteboard, string orgApacheFelixHttpSslfilter, string orgApacheFelixOrgApacheFelixThreaddump, string orgApacheFelixWebconsolePluginsDs, string orgApacheFelixWebconsolePluginsEvent, string orgApacheFelixWebconsolePluginsMemoryusage, string orgApacheFelixWebconsolePluginsPackageadmin, string orgApacheJackrabbitOakAuthLdap, string orgApacheJackrabbitOakSegmentTar, string orgApacheJackrabbitOakSolrOsgi, string orgApacheSlingBundleresourceImpl, string orgApacheSlingCommonsFsclassloader, string orgApacheSlingCommonsLogWebconsole, string orgApacheSlingDatasource, string orgApacheSlingDiscoveryBase, string orgApacheSlingDiscoveryOak, string orgApacheSlingDiscoverySupport, string orgApacheSlingDistributionApi, string orgApacheSlingDistributionCore, string orgApacheSlingExtensionsWebconsolesecurityprovider, string orgApacheSlingHcWebconsole, string orgApacheSlingInstallerConsole, string orgApacheSlingInstallerProviderFile, string orgApacheSlingInstallerProviderJcr, string orgApacheSlingJcrDavex, string orgApacheSlingJcrResourcesecurity, string orgApacheSlingJmxProvider, string orgApacheSlingLaunchpadInstaller, string orgApacheSlingModelsImpl, string orgApacheSlingRepoinitParser, string orgApacheSlingResourceInventory, string orgApacheSlingResourceresolver, string orgApacheSlingScriptingJavascript, string orgApacheSlingScriptingJst, string orgApacheSlingScriptingSightlyJsProvider, string orgApacheSlingScriptingSightlyModelsProvider, string orgApacheSlingSecurity, string orgApacheSlingServletsCompat, string orgApacheSlingServletsGet, string orgApacheSlingStartupfilterDisabler, string orgApacheSlingTracer, string weRetailClientAppCore)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeCqCdnCdnRewriter != null) queryParams.Add("com.adobe.cq.cdn.cdn-rewriter", ApiClient.ParameterToString(comAdobeCqCdnCdnRewriter)); // query parameter
 if (comAdobeCqCloudConfigComponents != null) queryParams.Add("com.adobe.cq.cloud-config.components", ApiClient.ParameterToString(comAdobeCqCloudConfigComponents)); // query parameter
 if (comAdobeCqCloudConfigCore != null) queryParams.Add("com.adobe.cq.cloud-config.core", ApiClient.ParameterToString(comAdobeCqCloudConfigCore)); // query parameter
 if (comAdobeCqCloudConfigUi != null) queryParams.Add("com.adobe.cq.cloud-config.ui", ApiClient.ParameterToString(comAdobeCqCloudConfigUi)); // query parameter
 if (comAdobeCqComAdobeCqEditor != null) queryParams.Add("com.adobe.cq.com.adobe.cq.editor", ApiClient.ParameterToString(comAdobeCqComAdobeCqEditor)); // query parameter
 if (comAdobeCqComAdobeCqProjectsCore != null) queryParams.Add("com.adobe.cq.com.adobe.cq.projects.core", ApiClient.ParameterToString(comAdobeCqComAdobeCqProjectsCore)); // query parameter
 if (comAdobeCqComAdobeCqProjectsWcmCore != null) queryParams.Add("com.adobe.cq.com.adobe.cq.projects.wcm.core", ApiClient.ParameterToString(comAdobeCqComAdobeCqProjectsWcmCore)); // query parameter
 if (comAdobeCqComAdobeCqUiCommons != null) queryParams.Add("com.adobe.cq.com.adobe.cq.ui.commons", ApiClient.ParameterToString(comAdobeCqComAdobeCqUiCommons)); // query parameter
 if (comAdobeCqComAdobeCqWcmStyle != null) queryParams.Add("com.adobe.cq.com.adobe.cq.wcm.style", ApiClient.ParameterToString(comAdobeCqComAdobeCqWcmStyle)); // query parameter
 if (comAdobeCqCqActivitymapIntegration != null) queryParams.Add("com.adobe.cq.cq-activitymap-integration", ApiClient.ParameterToString(comAdobeCqCqActivitymapIntegration)); // query parameter
 if (comAdobeCqCqContexthubCommons != null) queryParams.Add("com.adobe.cq.cq-contexthub-commons", ApiClient.ParameterToString(comAdobeCqCqContexthubCommons)); // query parameter
 if (comAdobeCqCqDtm != null) queryParams.Add("com.adobe.cq.cq-dtm", ApiClient.ParameterToString(comAdobeCqCqDtm)); // query parameter
 if (comAdobeCqCqHealthcheck != null) queryParams.Add("com.adobe.cq.cq-healthcheck", ApiClient.ParameterToString(comAdobeCqCqHealthcheck)); // query parameter
 if (comAdobeCqCqMultisiteTargeting != null) queryParams.Add("com.adobe.cq.cq-multisite-targeting", ApiClient.ParameterToString(comAdobeCqCqMultisiteTargeting)); // query parameter
 if (comAdobeCqCqPreUpgradeCleanup != null) queryParams.Add("com.adobe.cq.cq-pre-upgrade-cleanup", ApiClient.ParameterToString(comAdobeCqCqPreUpgradeCleanup)); // query parameter
 if (comAdobeCqCqProductInfoProvider != null) queryParams.Add("com.adobe.cq.cq-product-info-provider", ApiClient.ParameterToString(comAdobeCqCqProductInfoProvider)); // query parameter
 if (comAdobeCqCqRestSites != null) queryParams.Add("com.adobe.cq.cq-rest-sites", ApiClient.ParameterToString(comAdobeCqCqRestSites)); // query parameter
 if (comAdobeCqCqSecurityHc != null) queryParams.Add("com.adobe.cq.cq-security-hc", ApiClient.ParameterToString(comAdobeCqCqSecurityHc)); // query parameter
 if (comAdobeCqDamCqDamSvgHandler != null) queryParams.Add("com.adobe.cq.dam.cq-dam-svg-handler", ApiClient.ParameterToString(comAdobeCqDamCqDamSvgHandler)); // query parameter
 if (comAdobeCqDamCqScene7Imaging != null) queryParams.Add("com.adobe.cq.dam.cq-scene7-imaging", ApiClient.ParameterToString(comAdobeCqDamCqScene7Imaging)); // query parameter
 if (comAdobeCqDtmReactorCore != null) queryParams.Add("com.adobe.cq.dtm-reactor.core", ApiClient.ParameterToString(comAdobeCqDtmReactorCore)); // query parameter
 if (comAdobeCqDtmReactorUi != null) queryParams.Add("com.adobe.cq.dtm-reactor.ui", ApiClient.ParameterToString(comAdobeCqDtmReactorUi)); // query parameter
 if (comAdobeCqExpJspelResolver != null) queryParams.Add("com.adobe.cq.exp-jspel-resolver", ApiClient.ParameterToString(comAdobeCqExpJspelResolver)); // query parameter
 if (comAdobeCqInboxCqInbox != null) queryParams.Add("com.adobe.cq.inbox.cq-inbox", ApiClient.ParameterToString(comAdobeCqInboxCqInbox)); // query parameter
 if (comAdobeCqJsonSchemaParser != null) queryParams.Add("com.adobe.cq.json-schema-parser", ApiClient.ParameterToString(comAdobeCqJsonSchemaParser)); // query parameter
 if (comAdobeCqMediaCqMediaPublishingDpsFpCore != null) queryParams.Add("com.adobe.cq.media.cq-media-publishing-dps-fp-core", ApiClient.ParameterToString(comAdobeCqMediaCqMediaPublishingDpsFpCore)); // query parameter
 if (comAdobeCqMobileCqMobileCaas != null) queryParams.Add("com.adobe.cq.mobile.cq-mobile-caas", ApiClient.ParameterToString(comAdobeCqMobileCqMobileCaas)); // query parameter
 if (comAdobeCqMobileCqMobileIndexBuilder != null) queryParams.Add("com.adobe.cq.mobile.cq-mobile-index-builder", ApiClient.ParameterToString(comAdobeCqMobileCqMobileIndexBuilder)); // query parameter
 if (comAdobeCqMobileCqMobilePhonegapBuild != null) queryParams.Add("com.adobe.cq.mobile.cq-mobile-phonegap-build", ApiClient.ParameterToString(comAdobeCqMobileCqMobilePhonegapBuild)); // query parameter
 if (comAdobeCqMyspell != null) queryParams.Add("com.adobe.cq.myspell", ApiClient.ParameterToString(comAdobeCqMyspell)); // query parameter
 if (comAdobeCqSampleWeRetailCore != null) queryParams.Add("com.adobe.cq.sample.we.retail.core", ApiClient.ParameterToString(comAdobeCqSampleWeRetailCore)); // query parameter
 if (comAdobeCqScreensComAdobeCqScreensDcc != null) queryParams.Add("com.adobe.cq.screens.com.adobe.cq.screens.dcc", ApiClient.ParameterToString(comAdobeCqScreensComAdobeCqScreensDcc)); // query parameter
 if (comAdobeCqScreensComAdobeCqScreensMqCore != null) queryParams.Add("com.adobe.cq.screens.com.adobe.cq.screens.mq.core", ApiClient.ParameterToString(comAdobeCqScreensComAdobeCqScreensMqCore)); // query parameter
 if (comAdobeCqSocialCqSocialAsProvider != null) queryParams.Add("com.adobe.cq.social.cq-social-as-provider", ApiClient.ParameterToString(comAdobeCqSocialCqSocialAsProvider)); // query parameter
 if (comAdobeCqSocialCqSocialBadgingBasicImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-badging-basic-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialBadgingBasicImpl)); // query parameter
 if (comAdobeCqSocialCqSocialBadgingImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-badging-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialBadgingImpl)); // query parameter
 if (comAdobeCqSocialCqSocialCalendarImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-calendar-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialCalendarImpl)); // query parameter
 if (comAdobeCqSocialCqSocialContentFragmentsImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-content-fragments-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialContentFragmentsImpl)); // query parameter
 if (comAdobeCqSocialCqSocialEnablementImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-enablement-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialEnablementImpl)); // query parameter
 if (comAdobeCqSocialCqSocialGraphImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-graph-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialGraphImpl)); // query parameter
 if (comAdobeCqSocialCqSocialIdeationImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-ideation-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialIdeationImpl)); // query parameter
 if (comAdobeCqSocialCqSocialJcrProvider != null) queryParams.Add("com.adobe.cq.social.cq-social-jcr-provider", ApiClient.ParameterToString(comAdobeCqSocialCqSocialJcrProvider)); // query parameter
 if (comAdobeCqSocialCqSocialMembersImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-members-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialMembersImpl)); // query parameter
 if (comAdobeCqSocialCqSocialMsProvider != null) queryParams.Add("com.adobe.cq.social.cq-social-ms-provider", ApiClient.ParameterToString(comAdobeCqSocialCqSocialMsProvider)); // query parameter
 if (comAdobeCqSocialCqSocialNotificationsChannelsWeb != null) queryParams.Add("com.adobe.cq.social.cq-social-notifications-channels-web", ApiClient.ParameterToString(comAdobeCqSocialCqSocialNotificationsChannelsWeb)); // query parameter
 if (comAdobeCqSocialCqSocialNotificationsImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-notifications-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialNotificationsImpl)); // query parameter
 if (comAdobeCqSocialCqSocialRdbProvider != null) queryParams.Add("com.adobe.cq.social.cq-social-rdb-provider", ApiClient.ParameterToString(comAdobeCqSocialCqSocialRdbProvider)); // query parameter
 if (comAdobeCqSocialCqSocialScfImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-scf-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialScfImpl)); // query parameter
 if (comAdobeCqSocialCqSocialScoringBasicImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-scoring-basic-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialScoringBasicImpl)); // query parameter
 if (comAdobeCqSocialCqSocialScoringImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-scoring-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialScoringImpl)); // query parameter
 if (comAdobeCqSocialCqSocialServiceusersImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-serviceusers-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialServiceusersImpl)); // query parameter
 if (comAdobeCqSocialCqSocialSrpImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-srp-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialSrpImpl)); // query parameter
 if (comAdobeCqSocialCqSocialUgcbaseImpl != null) queryParams.Add("com.adobe.cq.social.cq-social-ugcbase-impl", ApiClient.ParameterToString(comAdobeCqSocialCqSocialUgcbaseImpl)); // query parameter
 if (comAdobeDamCqDamCfmImpl != null) queryParams.Add("com.adobe.dam.cq-dam-cfm-impl", ApiClient.ParameterToString(comAdobeDamCqDamCfmImpl)); // query parameter
 if (comAdobeFormsFoundationFormsFoundationBase != null) queryParams.Add("com.adobe.forms.foundation-forms-foundation-base", ApiClient.ParameterToString(comAdobeFormsFoundationFormsFoundationBase)); // query parameter
 if (comAdobeGraniteApicontroller != null) queryParams.Add("com.adobe.granite.apicontroller", ApiClient.ParameterToString(comAdobeGraniteApicontroller)); // query parameter
 if (comAdobeGraniteAssetCore != null) queryParams.Add("com.adobe.granite.asset.core", ApiClient.ParameterToString(comAdobeGraniteAssetCore)); // query parameter
 if (comAdobeGraniteAuthSso != null) queryParams.Add("com.adobe.granite.auth.sso", ApiClient.ParameterToString(comAdobeGraniteAuthSso)); // query parameter
 if (comAdobeGraniteBundlesHcImpl != null) queryParams.Add("com.adobe.granite.bundles.hc.impl", ApiClient.ParameterToString(comAdobeGraniteBundlesHcImpl)); // query parameter
 if (comAdobeGraniteCompatRouter != null) queryParams.Add("com.adobe.granite.compat-router", ApiClient.ParameterToString(comAdobeGraniteCompatRouter)); // query parameter
 if (comAdobeGraniteConf != null) queryParams.Add("com.adobe.granite.conf", ApiClient.ParameterToString(comAdobeGraniteConf)); // query parameter
 if (comAdobeGraniteConfUiCore != null) queryParams.Add("com.adobe.granite.conf.ui.core", ApiClient.ParameterToString(comAdobeGraniteConfUiCore)); // query parameter
 if (comAdobeGraniteCors != null) queryParams.Add("com.adobe.granite.cors", ApiClient.ParameterToString(comAdobeGraniteCors)); // query parameter
 if (comAdobeGraniteCrxExplorer != null) queryParams.Add("com.adobe.granite.crx-explorer", ApiClient.ParameterToString(comAdobeGraniteCrxExplorer)); // query parameter
 if (comAdobeGraniteCrxdeLite != null) queryParams.Add("com.adobe.granite.crxde-lite", ApiClient.ParameterToString(comAdobeGraniteCrxdeLite)); // query parameter
 if (comAdobeGraniteCryptoConfig != null) queryParams.Add("com.adobe.granite.crypto.config", ApiClient.ParameterToString(comAdobeGraniteCryptoConfig)); // query parameter
 if (comAdobeGraniteCryptoExtension != null) queryParams.Add("com.adobe.granite.crypto.extension", ApiClient.ParameterToString(comAdobeGraniteCryptoExtension)); // query parameter
 if (comAdobeGraniteCryptoFile != null) queryParams.Add("com.adobe.granite.crypto.file", ApiClient.ParameterToString(comAdobeGraniteCryptoFile)); // query parameter
 if (comAdobeGraniteCryptoJcr != null) queryParams.Add("com.adobe.granite.crypto.jcr", ApiClient.ParameterToString(comAdobeGraniteCryptoJcr)); // query parameter
 if (comAdobeGraniteCsrf != null) queryParams.Add("com.adobe.granite.csrf", ApiClient.ParameterToString(comAdobeGraniteCsrf)); // query parameter
 if (comAdobeGraniteDistributionCore != null) queryParams.Add("com.adobe.granite.distribution.core", ApiClient.ParameterToString(comAdobeGraniteDistributionCore)); // query parameter
 if (comAdobeGraniteDropwizardMetrics != null) queryParams.Add("com.adobe.granite.dropwizard.metrics", ApiClient.ParameterToString(comAdobeGraniteDropwizardMetrics)); // query parameter
 if (comAdobeGraniteFragsImpl != null) queryParams.Add("com.adobe.granite.frags.impl", ApiClient.ParameterToString(comAdobeGraniteFragsImpl)); // query parameter
 if (comAdobeGraniteGibson != null) queryParams.Add("com.adobe.granite.gibson", ApiClient.ParameterToString(comAdobeGraniteGibson)); // query parameter
 if (comAdobeGraniteInfocollector != null) queryParams.Add("com.adobe.granite.infocollector", ApiClient.ParameterToString(comAdobeGraniteInfocollector)); // query parameter
 if (comAdobeGraniteInstallerFactoryPackages != null) queryParams.Add("com.adobe.granite.installer.factory.packages", ApiClient.ParameterToString(comAdobeGraniteInstallerFactoryPackages)); // query parameter
 if (comAdobeGraniteJettySsl != null) queryParams.Add("com.adobe.granite.jetty.ssl", ApiClient.ParameterToString(comAdobeGraniteJettySsl)); // query parameter
 if (comAdobeGraniteJobsAsync != null) queryParams.Add("com.adobe.granite.jobs.async", ApiClient.ParameterToString(comAdobeGraniteJobsAsync)); // query parameter
 if (comAdobeGraniteMaintenanceOak != null) queryParams.Add("com.adobe.granite.maintenance.oak", ApiClient.ParameterToString(comAdobeGraniteMaintenanceOak)); // query parameter
 if (comAdobeGraniteMonitoringCore != null) queryParams.Add("com.adobe.granite.monitoring.core", ApiClient.ParameterToString(comAdobeGraniteMonitoringCore)); // query parameter
 if (comAdobeGraniteQueries != null) queryParams.Add("com.adobe.granite.queries", ApiClient.ParameterToString(comAdobeGraniteQueries)); // query parameter
 if (comAdobeGraniteReplicationHcImpl != null) queryParams.Add("com.adobe.granite.replication.hc.impl", ApiClient.ParameterToString(comAdobeGraniteReplicationHcImpl)); // query parameter
 if (comAdobeGraniteRepositoryChecker != null) queryParams.Add("com.adobe.granite.repository.checker", ApiClient.ParameterToString(comAdobeGraniteRepositoryChecker)); // query parameter
 if (comAdobeGraniteRepositoryHcImpl != null) queryParams.Add("com.adobe.granite.repository.hc.impl", ApiClient.ParameterToString(comAdobeGraniteRepositoryHcImpl)); // query parameter
 if (comAdobeGraniteRestAssets != null) queryParams.Add("com.adobe.granite.rest.assets", ApiClient.ParameterToString(comAdobeGraniteRestAssets)); // query parameter
 if (comAdobeGraniteSecurityUi != null) queryParams.Add("com.adobe.granite.security.ui", ApiClient.ParameterToString(comAdobeGraniteSecurityUi)); // query parameter
 if (comAdobeGraniteStartup != null) queryParams.Add("com.adobe.granite.startup", ApiClient.ParameterToString(comAdobeGraniteStartup)); // query parameter
 if (comAdobeGraniteTagsoup != null) queryParams.Add("com.adobe.granite.tagsoup", ApiClient.ParameterToString(comAdobeGraniteTagsoup)); // query parameter
 if (comAdobeGraniteTaskmanagementCore != null) queryParams.Add("com.adobe.granite.taskmanagement.core", ApiClient.ParameterToString(comAdobeGraniteTaskmanagementCore)); // query parameter
 if (comAdobeGraniteTaskmanagementWorkflow != null) queryParams.Add("com.adobe.granite.taskmanagement.workflow", ApiClient.ParameterToString(comAdobeGraniteTaskmanagementWorkflow)); // query parameter
 if (comAdobeGraniteUiClientlibsCompilerLess != null) queryParams.Add("com.adobe.granite.ui.clientlibs.compiler.less", ApiClient.ParameterToString(comAdobeGraniteUiClientlibsCompilerLess)); // query parameter
 if (comAdobeGraniteUiClientlibsProcessorGcc != null) queryParams.Add("com.adobe.granite.ui.clientlibs.processor.gcc", ApiClient.ParameterToString(comAdobeGraniteUiClientlibsProcessorGcc)); // query parameter
 if (comAdobeGraniteWebconsolePlugins != null) queryParams.Add("com.adobe.granite.webconsole.plugins", ApiClient.ParameterToString(comAdobeGraniteWebconsolePlugins)); // query parameter
 if (comAdobeGraniteWorkflowConsole != null) queryParams.Add("com.adobe.granite.workflow.console", ApiClient.ParameterToString(comAdobeGraniteWorkflowConsole)); // query parameter
 if (comAdobeXmpWorkerFilesNativeFragmentLinux != null) queryParams.Add("com.adobe.xmp.worker.files.native.fragment.linux", ApiClient.ParameterToString(comAdobeXmpWorkerFilesNativeFragmentLinux)); // query parameter
 if (comAdobeXmpWorkerFilesNativeFragmentMacosx != null) queryParams.Add("com.adobe.xmp.worker.files.native.fragment.macosx", ApiClient.ParameterToString(comAdobeXmpWorkerFilesNativeFragmentMacosx)); // query parameter
 if (comAdobeXmpWorkerFilesNativeFragmentWin != null) queryParams.Add("com.adobe.xmp.worker.files.native.fragment.win", ApiClient.ParameterToString(comAdobeXmpWorkerFilesNativeFragmentWin)); // query parameter
 if (comDayCommonsOsgiWrapperSimpleJndi != null) queryParams.Add("com.day.commons.osgi.wrapper.simple-jndi", ApiClient.ParameterToString(comDayCommonsOsgiWrapperSimpleJndi)); // query parameter
 if (comDayCqCqAuthhandler != null) queryParams.Add("com.day.cq.cq-authhandler", ApiClient.ParameterToString(comDayCqCqAuthhandler)); // query parameter
 if (comDayCqCqCompatConfigupdate != null) queryParams.Add("com.day.cq.cq-compat-configupdate", ApiClient.ParameterToString(comDayCqCqCompatConfigupdate)); // query parameter
 if (comDayCqCqLicensebranding != null) queryParams.Add("com.day.cq.cq-licensebranding", ApiClient.ParameterToString(comDayCqCqLicensebranding)); // query parameter
 if (comDayCqCqNotifcationImpl != null) queryParams.Add("com.day.cq.cq-notifcation-impl", ApiClient.ParameterToString(comDayCqCqNotifcationImpl)); // query parameter
 if (comDayCqCqReplicationAudit != null) queryParams.Add("com.day.cq.cq-replication-audit", ApiClient.ParameterToString(comDayCqCqReplicationAudit)); // query parameter
 if (comDayCqCqSearchExt != null) queryParams.Add("com.day.cq.cq-search-ext", ApiClient.ParameterToString(comDayCqCqSearchExt)); // query parameter
 if (comDayCqDamCqDamAnnotationPrint != null) queryParams.Add("com.day.cq.dam.cq-dam-annotation-print", ApiClient.ParameterToString(comDayCqDamCqDamAnnotationPrint)); // query parameter
 if (comDayCqDamCqDamAssetUsage != null) queryParams.Add("com.day.cq.dam.cq-dam-asset-usage", ApiClient.ParameterToString(comDayCqDamCqDamAssetUsage)); // query parameter
 if (comDayCqDamCqDamS7dam != null) queryParams.Add("com.day.cq.dam.cq-dam-s7dam", ApiClient.ParameterToString(comDayCqDamCqDamS7dam)); // query parameter
 if (comDayCqDamCqDamSimilaritysearch != null) queryParams.Add("com.day.cq.dam.cq-dam-similaritysearch", ApiClient.ParameterToString(comDayCqDamCqDamSimilaritysearch)); // query parameter
 if (comDayCqDamDamWebdavSupport != null) queryParams.Add("com.day.cq.dam.dam-webdav-support", ApiClient.ParameterToString(comDayCqDamDamWebdavSupport)); // query parameter
 if (comDayCqPreUpgradeTasks != null) queryParams.Add("com.day.cq.pre-upgrade-tasks", ApiClient.ParameterToString(comDayCqPreUpgradeTasks)); // query parameter
 if (comDayCqReplicationExtensions != null) queryParams.Add("com.day.cq.replication.extensions", ApiClient.ParameterToString(comDayCqReplicationExtensions)); // query parameter
 if (comDayCqWcmCqMsmCore != null) queryParams.Add("com.day.cq.wcm.cq-msm-core", ApiClient.ParameterToString(comDayCqWcmCqMsmCore)); // query parameter
 if (comDayCqWcmCqWcmTranslation != null) queryParams.Add("com.day.cq.wcm.cq-wcm-translation", ApiClient.ParameterToString(comDayCqWcmCqWcmTranslation)); // query parameter
 if (dayCommonsJrawio != null) queryParams.Add("day-commons-jrawio", ApiClient.ParameterToString(dayCommonsJrawio)); // query parameter
 if (orgApacheAriesJmxWhiteboard != null) queryParams.Add("org.apache.aries.jmx.whiteboard", ApiClient.ParameterToString(orgApacheAriesJmxWhiteboard)); // query parameter
 if (orgApacheFelixHttpSslfilter != null) queryParams.Add("org.apache.felix.http.sslfilter", ApiClient.ParameterToString(orgApacheFelixHttpSslfilter)); // query parameter
 if (orgApacheFelixOrgApacheFelixThreaddump != null) queryParams.Add("org.apache.felix.org.apache.felix.threaddump", ApiClient.ParameterToString(orgApacheFelixOrgApacheFelixThreaddump)); // query parameter
 if (orgApacheFelixWebconsolePluginsDs != null) queryParams.Add("org.apache.felix.webconsole.plugins.ds", ApiClient.ParameterToString(orgApacheFelixWebconsolePluginsDs)); // query parameter
 if (orgApacheFelixWebconsolePluginsEvent != null) queryParams.Add("org.apache.felix.webconsole.plugins.event", ApiClient.ParameterToString(orgApacheFelixWebconsolePluginsEvent)); // query parameter
 if (orgApacheFelixWebconsolePluginsMemoryusage != null) queryParams.Add("org.apache.felix.webconsole.plugins.memoryusage", ApiClient.ParameterToString(orgApacheFelixWebconsolePluginsMemoryusage)); // query parameter
 if (orgApacheFelixWebconsolePluginsPackageadmin != null) queryParams.Add("org.apache.felix.webconsole.plugins.packageadmin", ApiClient.ParameterToString(orgApacheFelixWebconsolePluginsPackageadmin)); // query parameter
 if (orgApacheJackrabbitOakAuthLdap != null) queryParams.Add("org.apache.jackrabbit.oak-auth-ldap", ApiClient.ParameterToString(orgApacheJackrabbitOakAuthLdap)); // query parameter
 if (orgApacheJackrabbitOakSegmentTar != null) queryParams.Add("org.apache.jackrabbit.oak-segment-tar", ApiClient.ParameterToString(orgApacheJackrabbitOakSegmentTar)); // query parameter
 if (orgApacheJackrabbitOakSolrOsgi != null) queryParams.Add("org.apache.jackrabbit.oak-solr-osgi", ApiClient.ParameterToString(orgApacheJackrabbitOakSolrOsgi)); // query parameter
 if (orgApacheSlingBundleresourceImpl != null) queryParams.Add("org.apache.sling.bundleresource.impl", ApiClient.ParameterToString(orgApacheSlingBundleresourceImpl)); // query parameter
 if (orgApacheSlingCommonsFsclassloader != null) queryParams.Add("org.apache.sling.commons.fsclassloader", ApiClient.ParameterToString(orgApacheSlingCommonsFsclassloader)); // query parameter
 if (orgApacheSlingCommonsLogWebconsole != null) queryParams.Add("org.apache.sling.commons.log.webconsole", ApiClient.ParameterToString(orgApacheSlingCommonsLogWebconsole)); // query parameter
 if (orgApacheSlingDatasource != null) queryParams.Add("org.apache.sling.datasource", ApiClient.ParameterToString(orgApacheSlingDatasource)); // query parameter
 if (orgApacheSlingDiscoveryBase != null) queryParams.Add("org.apache.sling.discovery.base", ApiClient.ParameterToString(orgApacheSlingDiscoveryBase)); // query parameter
 if (orgApacheSlingDiscoveryOak != null) queryParams.Add("org.apache.sling.discovery.oak", ApiClient.ParameterToString(orgApacheSlingDiscoveryOak)); // query parameter
 if (orgApacheSlingDiscoverySupport != null) queryParams.Add("org.apache.sling.discovery.support", ApiClient.ParameterToString(orgApacheSlingDiscoverySupport)); // query parameter
 if (orgApacheSlingDistributionApi != null) queryParams.Add("org.apache.sling.distribution.api", ApiClient.ParameterToString(orgApacheSlingDistributionApi)); // query parameter
 if (orgApacheSlingDistributionCore != null) queryParams.Add("org.apache.sling.distribution.core", ApiClient.ParameterToString(orgApacheSlingDistributionCore)); // query parameter
 if (orgApacheSlingExtensionsWebconsolesecurityprovider != null) queryParams.Add("org.apache.sling.extensions.webconsolesecurityprovider", ApiClient.ParameterToString(orgApacheSlingExtensionsWebconsolesecurityprovider)); // query parameter
 if (orgApacheSlingHcWebconsole != null) queryParams.Add("org.apache.sling.hc.webconsole", ApiClient.ParameterToString(orgApacheSlingHcWebconsole)); // query parameter
 if (orgApacheSlingInstallerConsole != null) queryParams.Add("org.apache.sling.installer.console", ApiClient.ParameterToString(orgApacheSlingInstallerConsole)); // query parameter
 if (orgApacheSlingInstallerProviderFile != null) queryParams.Add("org.apache.sling.installer.provider.file", ApiClient.ParameterToString(orgApacheSlingInstallerProviderFile)); // query parameter
 if (orgApacheSlingInstallerProviderJcr != null) queryParams.Add("org.apache.sling.installer.provider.jcr", ApiClient.ParameterToString(orgApacheSlingInstallerProviderJcr)); // query parameter
 if (orgApacheSlingJcrDavex != null) queryParams.Add("org.apache.sling.jcr.davex", ApiClient.ParameterToString(orgApacheSlingJcrDavex)); // query parameter
 if (orgApacheSlingJcrResourcesecurity != null) queryParams.Add("org.apache.sling.jcr.resourcesecurity", ApiClient.ParameterToString(orgApacheSlingJcrResourcesecurity)); // query parameter
 if (orgApacheSlingJmxProvider != null) queryParams.Add("org.apache.sling.jmx.provider", ApiClient.ParameterToString(orgApacheSlingJmxProvider)); // query parameter
 if (orgApacheSlingLaunchpadInstaller != null) queryParams.Add("org.apache.sling.launchpad.installer", ApiClient.ParameterToString(orgApacheSlingLaunchpadInstaller)); // query parameter
 if (orgApacheSlingModelsImpl != null) queryParams.Add("org.apache.sling.models.impl", ApiClient.ParameterToString(orgApacheSlingModelsImpl)); // query parameter
 if (orgApacheSlingRepoinitParser != null) queryParams.Add("org.apache.sling.repoinit.parser", ApiClient.ParameterToString(orgApacheSlingRepoinitParser)); // query parameter
 if (orgApacheSlingResourceInventory != null) queryParams.Add("org.apache.sling.resource.inventory", ApiClient.ParameterToString(orgApacheSlingResourceInventory)); // query parameter
 if (orgApacheSlingResourceresolver != null) queryParams.Add("org.apache.sling.resourceresolver", ApiClient.ParameterToString(orgApacheSlingResourceresolver)); // query parameter
 if (orgApacheSlingScriptingJavascript != null) queryParams.Add("org.apache.sling.scripting.javascript", ApiClient.ParameterToString(orgApacheSlingScriptingJavascript)); // query parameter
 if (orgApacheSlingScriptingJst != null) queryParams.Add("org.apache.sling.scripting.jst", ApiClient.ParameterToString(orgApacheSlingScriptingJst)); // query parameter
 if (orgApacheSlingScriptingSightlyJsProvider != null) queryParams.Add("org.apache.sling.scripting.sightly.js.provider", ApiClient.ParameterToString(orgApacheSlingScriptingSightlyJsProvider)); // query parameter
 if (orgApacheSlingScriptingSightlyModelsProvider != null) queryParams.Add("org.apache.sling.scripting.sightly.models.provider", ApiClient.ParameterToString(orgApacheSlingScriptingSightlyModelsProvider)); // query parameter
 if (orgApacheSlingSecurity != null) queryParams.Add("org.apache.sling.security", ApiClient.ParameterToString(orgApacheSlingSecurity)); // query parameter
 if (orgApacheSlingServletsCompat != null) queryParams.Add("org.apache.sling.servlets.compat", ApiClient.ParameterToString(orgApacheSlingServletsCompat)); // query parameter
 if (orgApacheSlingServletsGet != null) queryParams.Add("org.apache.sling.servlets.get", ApiClient.ParameterToString(orgApacheSlingServletsGet)); // query parameter
 if (orgApacheSlingStartupfilterDisabler != null) queryParams.Add("org.apache.sling.startupfilter.disabler", ApiClient.ParameterToString(orgApacheSlingStartupfilterDisabler)); // query parameter
 if (orgApacheSlingTracer != null) queryParams.Add("org.apache.sling.tracer", ApiClient.ParameterToString(orgApacheSlingTracer)); // query parameter
 if (weRetailClientAppCore != null) queryParams.Add("we.retail.client.app.core", ApiClient.ParameterToString(weRetailClientAppCore)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteApicontrollerFilterResolverHookFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteApicontrollerFilterResolverHookFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo</returns>            
        public ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo ComAdobeGraniteAuthCertImplClientCertAuthHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthCertImplClientCertAuthHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthCertImplClientCertAuthHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="configid"></param> 
        /// <param name="scope"></param> 
        /// <returns>ComAdobeGraniteAuthImsInfo</returns>            
        public ComAdobeGraniteAuthImsInfo ComAdobeGraniteAuthIms (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configid, string scope)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (configid != null) queryParams.Add("configid", ApiClient.ParameterToString(configid)); // query parameter
 if (scope != null) queryParams.Add("scope", ApiClient.ParameterToString(scope)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthIms: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthIms: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <returns>ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo</returns>            
        public ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="authImsClientSecret"></param> 
        /// <param name="customizerType"></param> 
        /// <returns>ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo</returns>            
        public ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authImsClientSecret, string customizerType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (authImsClientSecret != null) queryParams.Add("auth.ims.client.secret", ApiClient.ParameterToString(authImsClientSecret)); // query parameter
 if (customizerType != null) queryParams.Add("customizer.type", ApiClient.ParameterToString(customizerType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <returns>ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo</returns>            
        public ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <param name="oauthProviderImsAuthorizationUrl"></param> 
        /// <param name="oauthProviderImsTokenUrl"></param> 
        /// <param name="oauthProviderImsProfileUrl"></param> 
        /// <param name="oauthProviderImsExtendedDetailsUrls"></param> 
        /// <param name="oauthProviderImsValidateTokenUrl"></param> 
        /// <param name="oauthProviderImsSessionProperty"></param> 
        /// <param name="oauthProviderImsServiceTokenClientId"></param> 
        /// <param name="oauthProviderImsServiceTokenClientSecret"></param> 
        /// <param name="oauthProviderImsServiceToken"></param> 
        /// <param name="imsOrgRef"></param> 
        /// <param name="imsGroupMapping"></param> 
        /// <param name="oauthProviderImsOnlyLicenseGroup"></param> 
        /// <returns>ComAdobeGraniteAuthImsImplIMSProviderImplInfo</returns>            
        public ComAdobeGraniteAuthImsImplIMSProviderImplInfo ComAdobeGraniteAuthImsImplIMSProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderImsAuthorizationUrl, string oauthProviderImsTokenUrl, string oauthProviderImsProfileUrl, List<string> oauthProviderImsExtendedDetailsUrls, string oauthProviderImsValidateTokenUrl, string oauthProviderImsSessionProperty, string oauthProviderImsServiceTokenClientId, string oauthProviderImsServiceTokenClientSecret, string oauthProviderImsServiceToken, string imsOrgRef, List<string> imsGroupMapping, bool? oauthProviderImsOnlyLicenseGroup)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
 if (oauthProviderImsAuthorizationUrl != null) queryParams.Add("oauth.provider.ims.authorization.url", ApiClient.ParameterToString(oauthProviderImsAuthorizationUrl)); // query parameter
 if (oauthProviderImsTokenUrl != null) queryParams.Add("oauth.provider.ims.token.url", ApiClient.ParameterToString(oauthProviderImsTokenUrl)); // query parameter
 if (oauthProviderImsProfileUrl != null) queryParams.Add("oauth.provider.ims.profile.url", ApiClient.ParameterToString(oauthProviderImsProfileUrl)); // query parameter
 if (oauthProviderImsExtendedDetailsUrls != null) queryParams.Add("oauth.provider.ims.extended.details.urls", ApiClient.ParameterToString(oauthProviderImsExtendedDetailsUrls)); // query parameter
 if (oauthProviderImsValidateTokenUrl != null) queryParams.Add("oauth.provider.ims.validate.token.url", ApiClient.ParameterToString(oauthProviderImsValidateTokenUrl)); // query parameter
 if (oauthProviderImsSessionProperty != null) queryParams.Add("oauth.provider.ims.session.property", ApiClient.ParameterToString(oauthProviderImsSessionProperty)); // query parameter
 if (oauthProviderImsServiceTokenClientId != null) queryParams.Add("oauth.provider.ims.service.token.client.id", ApiClient.ParameterToString(oauthProviderImsServiceTokenClientId)); // query parameter
 if (oauthProviderImsServiceTokenClientSecret != null) queryParams.Add("oauth.provider.ims.service.token.client.secret", ApiClient.ParameterToString(oauthProviderImsServiceTokenClientSecret)); // query parameter
 if (oauthProviderImsServiceToken != null) queryParams.Add("oauth.provider.ims.service.token", ApiClient.ParameterToString(oauthProviderImsServiceToken)); // query parameter
 if (imsOrgRef != null) queryParams.Add("ims.org.ref", ApiClient.ParameterToString(imsOrgRef)); // query parameter
 if (imsGroupMapping != null) queryParams.Add("ims.group.mapping", ApiClient.ParameterToString(imsGroupMapping)); // query parameter
 if (oauthProviderImsOnlyLicenseGroup != null) queryParams.Add("oauth.provider.ims.only.license.group", ApiClient.ParameterToString(oauthProviderImsOnlyLicenseGroup)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplIMSProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsImplIMSProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsImplIMSProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthConfigmanagerImsConfigid"></param> 
        /// <param name="imsOwningEntity"></param> 
        /// <param name="aemInstanceId"></param> 
        /// <param name="imsServiceCode"></param> 
        /// <returns>ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo</returns>            
        public ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo ComAdobeGraniteAuthImsImplImsConfigProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigmanagerImsConfigid, string imsOwningEntity, string aemInstanceId, string imsServiceCode)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthConfigmanagerImsConfigid != null) queryParams.Add("oauth.configmanager.ims.configid", ApiClient.ParameterToString(oauthConfigmanagerImsConfigid)); // query parameter
 if (imsOwningEntity != null) queryParams.Add("ims.owningEntity", ApiClient.ParameterToString(imsOwningEntity)); // query parameter
 if (aemInstanceId != null) queryParams.Add("aem.instanceId", ApiClient.ParameterToString(aemInstanceId)); // query parameter
 if (imsServiceCode != null) queryParams.Add("ims.serviceCode", ApiClient.ParameterToString(imsServiceCode)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplImsConfigProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthImsImplImsConfigProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="authTokenProviderTitle"></param> 
        /// <param name="authTokenProviderDefaultClaims"></param> 
        /// <param name="authTokenProviderEndpoint"></param> 
        /// <param name="authAccessTokenRequest"></param> 
        /// <param name="authTokenProviderKeypairAlias"></param> 
        /// <param name="authTokenProviderConnTimeout"></param> 
        /// <param name="authTokenProviderSoTimeout"></param> 
        /// <param name="authTokenProviderClientId"></param> 
        /// <param name="authTokenProviderScope"></param> 
        /// <param name="authTokenProviderReuseAccessToken"></param> 
        /// <param name="authTokenProviderRelaxedSsl"></param> 
        /// <param name="tokenRequestCustomizerType"></param> 
        /// <param name="authTokenValidatorType"></param> 
        /// <returns>ComAdobeGraniteAuthOauthAccesstokenProviderInfo</returns>            
        public ComAdobeGraniteAuthOauthAccesstokenProviderInfo ComAdobeGraniteAuthOauthAccesstokenProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string authTokenProviderTitle, List<string> authTokenProviderDefaultClaims, string authTokenProviderEndpoint, string authAccessTokenRequest, string authTokenProviderKeypairAlias, int? authTokenProviderConnTimeout, int? authTokenProviderSoTimeout, string authTokenProviderClientId, string authTokenProviderScope, bool? authTokenProviderReuseAccessToken, bool? authTokenProviderRelaxedSsl, string tokenRequestCustomizerType, string authTokenValidatorType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (authTokenProviderTitle != null) queryParams.Add("auth.token.provider.title", ApiClient.ParameterToString(authTokenProviderTitle)); // query parameter
 if (authTokenProviderDefaultClaims != null) queryParams.Add("auth.token.provider.default.claims", ApiClient.ParameterToString(authTokenProviderDefaultClaims)); // query parameter
 if (authTokenProviderEndpoint != null) queryParams.Add("auth.token.provider.endpoint", ApiClient.ParameterToString(authTokenProviderEndpoint)); // query parameter
 if (authAccessTokenRequest != null) queryParams.Add("auth.access.token.request", ApiClient.ParameterToString(authAccessTokenRequest)); // query parameter
 if (authTokenProviderKeypairAlias != null) queryParams.Add("auth.token.provider.keypair.alias", ApiClient.ParameterToString(authTokenProviderKeypairAlias)); // query parameter
 if (authTokenProviderConnTimeout != null) queryParams.Add("auth.token.provider.conn.timeout", ApiClient.ParameterToString(authTokenProviderConnTimeout)); // query parameter
 if (authTokenProviderSoTimeout != null) queryParams.Add("auth.token.provider.so.timeout", ApiClient.ParameterToString(authTokenProviderSoTimeout)); // query parameter
 if (authTokenProviderClientId != null) queryParams.Add("auth.token.provider.client.id", ApiClient.ParameterToString(authTokenProviderClientId)); // query parameter
 if (authTokenProviderScope != null) queryParams.Add("auth.token.provider.scope", ApiClient.ParameterToString(authTokenProviderScope)); // query parameter
 if (authTokenProviderReuseAccessToken != null) queryParams.Add("auth.token.provider.reuse.access.token", ApiClient.ParameterToString(authTokenProviderReuseAccessToken)); // query parameter
 if (authTokenProviderRelaxedSsl != null) queryParams.Add("auth.token.provider.relaxed.ssl", ApiClient.ParameterToString(authTokenProviderRelaxedSsl)); // query parameter
 if (tokenRequestCustomizerType != null) queryParams.Add("token.request.customizer.type", ApiClient.ParameterToString(tokenRequestCustomizerType)); // query parameter
 if (authTokenValidatorType != null) queryParams.Add("auth.token.validator.type", ApiClient.ParameterToString(authTokenValidatorType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthAccesstokenProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthAccesstokenProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthAccesstokenProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthAccesstokenProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="oauthClientIdsAllowed"></param> 
        /// <param name="authBearerSyncIms"></param> 
        /// <param name="authTokenRequestParameter"></param> 
        /// <param name="oauthBearerConfigid"></param> 
        /// <param name="oauthJwtSupport"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo</returns>            
        public ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, List<string> oauthClientIdsAllowed, bool? authBearerSyncIms, string authTokenRequestParameter, string oauthBearerConfigid, bool? oauthJwtSupport)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (oauthClientIdsAllowed != null) queryParams.Add("oauth.clientIds.allowed", ApiClient.ParameterToString(oauthClientIdsAllowed)); // query parameter
 if (authBearerSyncIms != null) queryParams.Add("auth.bearer.sync.ims", ApiClient.ParameterToString(authBearerSyncIms)); // query parameter
 if (authTokenRequestParameter != null) queryParams.Add("auth.tokenRequestParameter", ApiClient.ParameterToString(authTokenRequestParameter)); // query parameter
 if (oauthBearerConfigid != null) queryParams.Add("oauth.bearer.configid", ApiClient.ParameterToString(oauthBearerConfigid)); // query parameter
 if (oauthJwtSupport != null) queryParams.Add("oauth.jwt.support", ApiClient.ParameterToString(oauthJwtSupport)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="authTokenValidatorType"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo</returns>            
        public ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authTokenValidatorType)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (authTokenValidatorType != null) queryParams.Add("auth.token.validator.type", ApiClient.ParameterToString(authTokenValidatorType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo</returns>            
        public ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo ComAdobeGraniteAuthOauthImplFacebookProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplFacebookProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplFacebookProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <param name="oauthProviderGithubAuthorizationUrl"></param> 
        /// <param name="oauthProviderGithubTokenUrl"></param> 
        /// <param name="oauthProviderGithubProfileUrl"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplGithubProviderImplInfo</returns>            
        public ComAdobeGraniteAuthOauthImplGithubProviderImplInfo ComAdobeGraniteAuthOauthImplGithubProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGithubAuthorizationUrl, string oauthProviderGithubTokenUrl, string oauthProviderGithubProfileUrl)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
 if (oauthProviderGithubAuthorizationUrl != null) queryParams.Add("oauth.provider.github.authorization.url", ApiClient.ParameterToString(oauthProviderGithubAuthorizationUrl)); // query parameter
 if (oauthProviderGithubTokenUrl != null) queryParams.Add("oauth.provider.github.token.url", ApiClient.ParameterToString(oauthProviderGithubTokenUrl)); // query parameter
 if (oauthProviderGithubProfileUrl != null) queryParams.Add("oauth.provider.github.profile.url", ApiClient.ParameterToString(oauthProviderGithubProfileUrl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplGithubProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplGithubProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplGithubProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplGithubProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <param name="oauthProviderGraniteAuthorizationUrl"></param> 
        /// <param name="oauthProviderGraniteTokenUrl"></param> 
        /// <param name="oauthProviderGraniteProfileUrl"></param> 
        /// <param name="oauthProviderGraniteExtendedDetailsUrls"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplGraniteProviderInfo</returns>            
        public ComAdobeGraniteAuthOauthImplGraniteProviderInfo ComAdobeGraniteAuthOauthImplGraniteProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId, string oauthProviderGraniteAuthorizationUrl, string oauthProviderGraniteTokenUrl, string oauthProviderGraniteProfileUrl, string oauthProviderGraniteExtendedDetailsUrls)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
 if (oauthProviderGraniteAuthorizationUrl != null) queryParams.Add("oauth.provider.granite.authorization.url", ApiClient.ParameterToString(oauthProviderGraniteAuthorizationUrl)); // query parameter
 if (oauthProviderGraniteTokenUrl != null) queryParams.Add("oauth.provider.granite.token.url", ApiClient.ParameterToString(oauthProviderGraniteTokenUrl)); // query parameter
 if (oauthProviderGraniteProfileUrl != null) queryParams.Add("oauth.provider.granite.profile.url", ApiClient.ParameterToString(oauthProviderGraniteProfileUrl)); // query parameter
 if (oauthProviderGraniteExtendedDetailsUrls != null) queryParams.Add("oauth.provider.granite.extended.details.urls", ApiClient.ParameterToString(oauthProviderGraniteExtendedDetailsUrls)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplGraniteProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplGraniteProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplGraniteProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplGraniteProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthCookieLoginTimeout"></param> 
        /// <param name="oauthCookieMaxAge"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo</returns>            
        public ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthCookieLoginTimeout != null) queryParams.Add("oauth.cookie.login.timeout", ApiClient.ParameterToString(oauthCookieLoginTimeout)); // query parameter
 if (oauthCookieMaxAge != null) queryParams.Add("oauth.cookie.max.age", ApiClient.ParameterToString(oauthCookieMaxAge)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplHelperProviderConfigManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplHelperProviderConfigManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthCookieLoginTimeout"></param> 
        /// <param name="oauthCookieMaxAge"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo</returns>            
        public ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthCookieLoginTimeout, string oauthCookieMaxAge)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthCookieLoginTimeout != null) queryParams.Add("oauth.cookie.login.timeout", ApiClient.ParameterToString(oauthCookieLoginTimeout)); // query parameter
 if (oauthCookieMaxAge != null) queryParams.Add("oauth.cookie.max.age", ApiClient.ParameterToString(oauthCookieMaxAge)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo</returns>            
        public ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthProviderId"></param> 
        /// <returns>ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo</returns>            
        public ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo ComAdobeGraniteAuthOauthImplTwitterProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthProviderId)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthProviderId != null) queryParams.Add("oauth.provider.id", ApiClient.ParameterToString(oauthProviderId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplTwitterProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthImplTwitterProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthConfigId"></param> 
        /// <param name="oauthClientId"></param> 
        /// <param name="oauthClientSecret"></param> 
        /// <param name="oauthScope"></param> 
        /// <param name="oauthConfigProviderId"></param> 
        /// <param name="oauthCreateUsers"></param> 
        /// <param name="oauthUseridProperty"></param> 
        /// <param name="forceStrictUsernameMatching"></param> 
        /// <param name="oauthEncodeUserids"></param> 
        /// <param name="oauthHashUserids"></param> 
        /// <param name="oauthCallBackUrl"></param> 
        /// <param name="oauthAccessTokenPersist"></param> 
        /// <param name="oauthAccessTokenPersistCookie"></param> 
        /// <param name="oauthCsrfStateProtection"></param> 
        /// <param name="oauthRedirectRequestParams"></param> 
        /// <param name="oauthConfigSiblingsAllow"></param> 
        /// <returns>ComAdobeGraniteAuthOauthProviderInfo</returns>            
        public ComAdobeGraniteAuthOauthProviderInfo ComAdobeGraniteAuthOauthProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthConfigId, string oauthClientId, string oauthClientSecret, List<string> oauthScope, string oauthConfigProviderId, bool? oauthCreateUsers, string oauthUseridProperty, bool? forceStrictUsernameMatching, bool? oauthEncodeUserids, bool? oauthHashUserids, string oauthCallBackUrl, bool? oauthAccessTokenPersist, bool? oauthAccessTokenPersistCookie, bool? oauthCsrfStateProtection, bool? oauthRedirectRequestParams, bool? oauthConfigSiblingsAllow)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.oauth.provider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthConfigId != null) queryParams.Add("oauth.config.id", ApiClient.ParameterToString(oauthConfigId)); // query parameter
 if (oauthClientId != null) queryParams.Add("oauth.client.id", ApiClient.ParameterToString(oauthClientId)); // query parameter
 if (oauthClientSecret != null) queryParams.Add("oauth.client.secret", ApiClient.ParameterToString(oauthClientSecret)); // query parameter
 if (oauthScope != null) queryParams.Add("oauth.scope", ApiClient.ParameterToString(oauthScope)); // query parameter
 if (oauthConfigProviderId != null) queryParams.Add("oauth.config.provider.id", ApiClient.ParameterToString(oauthConfigProviderId)); // query parameter
 if (oauthCreateUsers != null) queryParams.Add("oauth.create.users", ApiClient.ParameterToString(oauthCreateUsers)); // query parameter
 if (oauthUseridProperty != null) queryParams.Add("oauth.userid.property", ApiClient.ParameterToString(oauthUseridProperty)); // query parameter
 if (forceStrictUsernameMatching != null) queryParams.Add("force.strict.username.matching", ApiClient.ParameterToString(forceStrictUsernameMatching)); // query parameter
 if (oauthEncodeUserids != null) queryParams.Add("oauth.encode.userids", ApiClient.ParameterToString(oauthEncodeUserids)); // query parameter
 if (oauthHashUserids != null) queryParams.Add("oauth.hash.userids", ApiClient.ParameterToString(oauthHashUserids)); // query parameter
 if (oauthCallBackUrl != null) queryParams.Add("oauth.callBackUrl", ApiClient.ParameterToString(oauthCallBackUrl)); // query parameter
 if (oauthAccessTokenPersist != null) queryParams.Add("oauth.access.token.persist", ApiClient.ParameterToString(oauthAccessTokenPersist)); // query parameter
 if (oauthAccessTokenPersistCookie != null) queryParams.Add("oauth.access.token.persist.cookie", ApiClient.ParameterToString(oauthAccessTokenPersistCookie)); // query parameter
 if (oauthCsrfStateProtection != null) queryParams.Add("oauth.csrf.state.protection", ApiClient.ParameterToString(oauthCsrfStateProtection)); // query parameter
 if (oauthRedirectRequestParams != null) queryParams.Add("oauth.redirect.request.params", ApiClient.ParameterToString(oauthRedirectRequestParams)); // query parameter
 if (oauthConfigSiblingsAllow != null) queryParams.Add("oauth.config.siblings.allow", ApiClient.ParameterToString(oauthConfigSiblingsAllow)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthOauthProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthOauthProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthOauthProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="supportedPaths"></param> 
        /// <returns>ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo</returns>            
        public ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedPaths)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (supportedPaths != null) queryParams.Add("supportedPaths", ApiClient.ParameterToString(supportedPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="idpUrl"></param> 
        /// <param name="idpCertAlias"></param> 
        /// <param name="idpHttpRedirect"></param> 
        /// <param name="serviceProviderEntityId"></param> 
        /// <param name="assertionConsumerServiceURL"></param> 
        /// <param name="spPrivateKeyAlias"></param> 
        /// <param name="keyStorePassword"></param> 
        /// <param name="defaultRedirectUrl"></param> 
        /// <param name="userIDAttribute"></param> 
        /// <param name="useEncryption"></param> 
        /// <param name="createUser"></param> 
        /// <param name="userIntermediatePath"></param> 
        /// <param name="addGroupMemberships"></param> 
        /// <param name="groupMembershipAttribute"></param> 
        /// <param name="defaultGroups"></param> 
        /// <param name="nameIdFormat"></param> 
        /// <param name="synchronizeAttributes"></param> 
        /// <param name="handleLogout"></param> 
        /// <param name="logoutUrl"></param> 
        /// <param name="clockTolerance"></param> 
        /// <param name="digestMethod"></param> 
        /// <param name="signatureMethod"></param> 
        /// <param name="identitySyncType"></param> 
        /// <param name="idpIdentifier"></param> 
        /// <returns>ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo</returns>            
        public ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo ComAdobeGraniteAuthSamlSamlAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> path, int? serviceRanking, string idpUrl, string idpCertAlias, bool? idpHttpRedirect, string serviceProviderEntityId, string assertionConsumerServiceURL, string spPrivateKeyAlias, string keyStorePassword, string defaultRedirectUrl, string userIDAttribute, bool? useEncryption, bool? createUser, string userIntermediatePath, bool? addGroupMemberships, string groupMembershipAttribute, List<string> defaultGroups, string nameIdFormat, List<string> synchronizeAttributes, bool? handleLogout, string logoutUrl, int? clockTolerance, string digestMethod, string signatureMethod, string identitySyncType, string idpIdentifier)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (idpUrl != null) queryParams.Add("idpUrl", ApiClient.ParameterToString(idpUrl)); // query parameter
 if (idpCertAlias != null) queryParams.Add("idpCertAlias", ApiClient.ParameterToString(idpCertAlias)); // query parameter
 if (idpHttpRedirect != null) queryParams.Add("idpHttpRedirect", ApiClient.ParameterToString(idpHttpRedirect)); // query parameter
 if (serviceProviderEntityId != null) queryParams.Add("serviceProviderEntityId", ApiClient.ParameterToString(serviceProviderEntityId)); // query parameter
 if (assertionConsumerServiceURL != null) queryParams.Add("assertionConsumerServiceURL", ApiClient.ParameterToString(assertionConsumerServiceURL)); // query parameter
 if (spPrivateKeyAlias != null) queryParams.Add("spPrivateKeyAlias", ApiClient.ParameterToString(spPrivateKeyAlias)); // query parameter
 if (keyStorePassword != null) queryParams.Add("keyStorePassword", ApiClient.ParameterToString(keyStorePassword)); // query parameter
 if (defaultRedirectUrl != null) queryParams.Add("defaultRedirectUrl", ApiClient.ParameterToString(defaultRedirectUrl)); // query parameter
 if (userIDAttribute != null) queryParams.Add("userIDAttribute", ApiClient.ParameterToString(userIDAttribute)); // query parameter
 if (useEncryption != null) queryParams.Add("useEncryption", ApiClient.ParameterToString(useEncryption)); // query parameter
 if (createUser != null) queryParams.Add("createUser", ApiClient.ParameterToString(createUser)); // query parameter
 if (userIntermediatePath != null) queryParams.Add("userIntermediatePath", ApiClient.ParameterToString(userIntermediatePath)); // query parameter
 if (addGroupMemberships != null) queryParams.Add("addGroupMemberships", ApiClient.ParameterToString(addGroupMemberships)); // query parameter
 if (groupMembershipAttribute != null) queryParams.Add("groupMembershipAttribute", ApiClient.ParameterToString(groupMembershipAttribute)); // query parameter
 if (defaultGroups != null) queryParams.Add("defaultGroups", ApiClient.ParameterToString(defaultGroups)); // query parameter
 if (nameIdFormat != null) queryParams.Add("nameIdFormat", ApiClient.ParameterToString(nameIdFormat)); // query parameter
 if (synchronizeAttributes != null) queryParams.Add("synchronizeAttributes", ApiClient.ParameterToString(synchronizeAttributes)); // query parameter
 if (handleLogout != null) queryParams.Add("handleLogout", ApiClient.ParameterToString(handleLogout)); // query parameter
 if (logoutUrl != null) queryParams.Add("logoutUrl", ApiClient.ParameterToString(logoutUrl)); // query parameter
 if (clockTolerance != null) queryParams.Add("clockTolerance", ApiClient.ParameterToString(clockTolerance)); // query parameter
 if (digestMethod != null) queryParams.Add("digestMethod", ApiClient.ParameterToString(digestMethod)); // query parameter
 if (signatureMethod != null) queryParams.Add("signatureMethod", ApiClient.ParameterToString(signatureMethod)); // query parameter
 if (identitySyncType != null) queryParams.Add("identitySyncType", ApiClient.ParameterToString(identitySyncType)); // query parameter
 if (idpIdentifier != null) queryParams.Add("idpIdentifier", ApiClient.ParameterToString(idpIdentifier)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthSamlSamlAuthenticationHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthSamlSamlAuthenticationHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="jaasControlFlag"></param> 
        /// <param name="jaasRealmName"></param> 
        /// <param name="jaasRanking"></param> 
        /// <param name="headers"></param> 
        /// <param name="cookies"></param> 
        /// <param name="parameters"></param> 
        /// <param name="usermap"></param> 
        /// <param name="format"></param> 
        /// <param name="trustedCredentialsAttribute"></param> 
        /// <returns>ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo</returns>            
        public ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, string jaasControlFlag, string jaasRealmName, int? jaasRanking, List<string> headers, List<string> cookies, List<string> parameters, List<string> usermap, string format, string trustedCredentialsAttribute)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (jaasControlFlag != null) queryParams.Add("jaas.controlFlag", ApiClient.ParameterToString(jaasControlFlag)); // query parameter
 if (jaasRealmName != null) queryParams.Add("jaas.realmName", ApiClient.ParameterToString(jaasRealmName)); // query parameter
 if (jaasRanking != null) queryParams.Add("jaas.ranking", ApiClient.ParameterToString(jaasRanking)); // query parameter
 if (headers != null) queryParams.Add("headers", ApiClient.ParameterToString(headers)); // query parameter
 if (cookies != null) queryParams.Add("cookies", ApiClient.ParameterToString(cookies)); // query parameter
 if (parameters != null) queryParams.Add("parameters", ApiClient.ParameterToString(parameters)); // query parameter
 if (usermap != null) queryParams.Add("usermap", ApiClient.ParameterToString(usermap)); // query parameter
 if (format != null) queryParams.Add("format", ApiClient.ParameterToString(format)); // query parameter
 if (trustedCredentialsAttribute != null) queryParams.Add("trustedCredentialsAttribute", ApiClient.ParameterToString(trustedCredentialsAttribute)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="minimumCodeCacheSize"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? minimumCodeCacheSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (minimumCodeCacheSize != null) queryParams.Add("minimum.code.cache.size", ApiClient.ParameterToString(minimumCodeCacheSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="ignoredBundles"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> ignoredBundles)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (ignoredBundles != null) queryParams.Add("ignored.bundles", ApiClient.ParameterToString(ignoredBundles)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="maxQueuedJobs"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo ComAdobeGraniteBundlesHcImplJobsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? maxQueuedJobs)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (maxQueuedJobs != null) queryParams.Add("max.queued.jobs", ApiClient.ParameterToString(maxQueuedJobs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplJobsHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplJobsHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo</returns>            
        public ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="replicateCommentResourceTypes"></param> 
        /// <returns>ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo</returns>            
        public ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> replicateCommentResourceTypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (replicateCommentResourceTypes != null) queryParams.Add("replicate.comment.resourceTypes", ApiClient.ParameterToString(replicateCommentResourceTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="compatgroups"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo</returns>            
        public ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> compatgroups, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (compatgroups != null) queryParams.Add("compatgroups", ApiClient.ParameterToString(compatgroups)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="id"></param> 
        /// <param name="compatPath"></param> 
        /// <param name="newPath"></param> 
        /// <returns>ComAdobeGraniteCompatrouterImplRoutingConfigInfo</returns>            
        public ComAdobeGraniteCompatrouterImplRoutingConfigInfo ComAdobeGraniteCompatrouterImplRoutingConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, string compatPath, string newPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (id != null) queryParams.Add("id", ApiClient.ParameterToString(id)); // query parameter
 if (compatPath != null) queryParams.Add("compatPath", ApiClient.ParameterToString(compatPath)); // query parameter
 if (newPath != null) queryParams.Add("newPath", ApiClient.ParameterToString(newPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplRoutingConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplRoutingConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCompatrouterImplRoutingConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCompatrouterImplRoutingConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="group"></param> 
        /// <param name="ids"></param> 
        /// <returns>ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo</returns>            
        public ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo ComAdobeGraniteCompatrouterImplSwitchMappingConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group, List<string> ids)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (group != null) queryParams.Add("group", ApiClient.ParameterToString(group)); // query parameter
 if (ids != null) queryParams.Add("ids", ApiClient.ParameterToString(ids)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplSwitchMappingConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCompatrouterImplSwitchMappingConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="fallbackPaths"></param> 
        /// <returns>ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo</returns>            
        public ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> fallbackPaths)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (fallbackPaths != null) queryParams.Add("fallbackPaths", ApiClient.ParameterToString(fallbackPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeGraniteContexthubSilentMode"></param> 
        /// <param name="comAdobeGraniteContexthubShowUi"></param> 
        /// <returns>ComAdobeGraniteContexthubImplContextHubImplInfo</returns>            
        public ComAdobeGraniteContexthubImplContextHubImplInfo ComAdobeGraniteContexthubImplContextHubImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? comAdobeGraniteContexthubSilentMode, bool? comAdobeGraniteContexthubShowUi)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeGraniteContexthubSilentMode != null) queryParams.Add("com.adobe.granite.contexthub.silent_mode", ApiClient.ParameterToString(comAdobeGraniteContexthubSilentMode)); // query parameter
 if (comAdobeGraniteContexthubShowUi != null) queryParams.Add("com.adobe.granite.contexthub.show_ui", ApiClient.ParameterToString(comAdobeGraniteContexthubShowUi)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteContexthubImplContextHubImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteContexthubImplContextHubImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteContexthubImplContextHubImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteContexthubImplContextHubImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="alloworigin"></param> 
        /// <param name="alloworiginregexp"></param> 
        /// <param name="allowedpaths"></param> 
        /// <param name="exposedheaders"></param> 
        /// <param name="maxage"></param> 
        /// <param name="supportedheaders"></param> 
        /// <param name="supportedmethods"></param> 
        /// <param name="supportscredentials"></param> 
        /// <returns>ComAdobeGraniteCorsImplCORSPolicyImplInfo</returns>            
        public ComAdobeGraniteCorsImplCORSPolicyImplInfo ComAdobeGraniteCorsImplCORSPolicyImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> alloworigin, List<string> alloworiginregexp, List<string> allowedpaths, List<string> exposedheaders, int? maxage, List<string> supportedheaders, List<string> supportedmethods, bool? supportscredentials)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (alloworigin != null) queryParams.Add("alloworigin", ApiClient.ParameterToString(alloworigin)); // query parameter
 if (alloworiginregexp != null) queryParams.Add("alloworiginregexp", ApiClient.ParameterToString(alloworiginregexp)); // query parameter
 if (allowedpaths != null) queryParams.Add("allowedpaths", ApiClient.ParameterToString(allowedpaths)); // query parameter
 if (exposedheaders != null) queryParams.Add("exposedheaders", ApiClient.ParameterToString(exposedheaders)); // query parameter
 if (maxage != null) queryParams.Add("maxage", ApiClient.ParameterToString(maxage)); // query parameter
 if (supportedheaders != null) queryParams.Add("supportedheaders", ApiClient.ParameterToString(supportedheaders)); // query parameter
 if (supportedmethods != null) queryParams.Add("supportedmethods", ApiClient.ParameterToString(supportedmethods)); // query parameter
 if (supportscredentials != null) queryParams.Add("supportscredentials", ApiClient.ParameterToString(supportscredentials)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCorsImplCORSPolicyImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCorsImplCORSPolicyImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCorsImplCORSPolicyImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCorsImplCORSPolicyImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="filterMethods"></param> 
        /// <param name="filterEnableSafeUserAgents"></param> 
        /// <param name="filterSafeUserAgents"></param> 
        /// <param name="filterExcludedPaths"></param> 
        /// <returns>ComAdobeGraniteCsrfImplCSRFFilterInfo</returns>            
        public ComAdobeGraniteCsrfImplCSRFFilterInfo ComAdobeGraniteCsrfImplCSRFFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> filterMethods, bool? filterEnableSafeUserAgents, List<string> filterSafeUserAgents, List<string> filterExcludedPaths)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (filterMethods != null) queryParams.Add("filter.methods", ApiClient.ParameterToString(filterMethods)); // query parameter
 if (filterEnableSafeUserAgents != null) queryParams.Add("filter.enable.safe.user.agents", ApiClient.ParameterToString(filterEnableSafeUserAgents)); // query parameter
 if (filterSafeUserAgents != null) queryParams.Add("filter.safe.user.agents", ApiClient.ParameterToString(filterSafeUserAgents)); // query parameter
 if (filterExcludedPaths != null) queryParams.Add("filter.excluded.paths", ApiClient.ParameterToString(filterExcludedPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCsrfImplCSRFFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCsrfImplCSRFFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCsrfImplCSRFFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCsrfImplCSRFFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="csrfTokenExpiresIn"></param> 
        /// <param name="slingAuthRequirements"></param> 
        /// <returns>ComAdobeGraniteCsrfImplCSRFServletInfo</returns>            
        public ComAdobeGraniteCsrfImplCSRFServletInfo ComAdobeGraniteCsrfImplCSRFServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? csrfTokenExpiresIn, string slingAuthRequirements)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (csrfTokenExpiresIn != null) queryParams.Add("csrf.token.expires.in", ApiClient.ParameterToString(csrfTokenExpiresIn)); // query parameter
 if (slingAuthRequirements != null) queryParams.Add("sling.auth.requirements", ApiClient.ParameterToString(slingAuthRequirements)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCsrfImplCSRFServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteCsrfImplCSRFServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteCsrfImplCSRFServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteCsrfImplCSRFServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="username"></param> 
        /// <param name="encryptedPassword"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string encryptedPassword)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (username != null) queryParams.Add("username", ApiClient.ParameterToString(username)); // query parameter
 if (encryptedPassword != null) queryParams.Add("encryptedPassword", ApiClient.ParameterToString(encryptedPassword)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="agentName"></param> 
        /// <param name="diffPath"></param> 
        /// <param name="observedPath"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="propertyNames"></param> 
        /// <param name="distributionDelay"></param> 
        /// <param name="serviceUserTarget"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string agentName, string diffPath, string observedPath, string serviceName, string propertyNames, int? distributionDelay, string serviceUserTarget)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (agentName != null) queryParams.Add("agentName", ApiClient.ParameterToString(agentName)); // query parameter
 if (diffPath != null) queryParams.Add("diffPath", ApiClient.ParameterToString(diffPath)); // query parameter
 if (observedPath != null) queryParams.Add("observedPath", ApiClient.ParameterToString(observedPath)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (propertyNames != null) queryParams.Add("propertyNames", ApiClient.ParameterToString(propertyNames)); // query parameter
 if (distributionDelay != null) queryParams.Add("distributionDelay", ApiClient.ParameterToString(distributionDelay)); // query parameter
 if (serviceUserTarget != null) queryParams.Add("serviceUser.target", ApiClient.ParameterToString(serviceUserTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="diffPath"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="serviceUserTarget"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo ComAdobeGraniteDistributionCoreImplDiffDiffEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string diffPath, string serviceName, string serviceUserTarget)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (diffPath != null) queryParams.Add("diffPath", ApiClient.ParameterToString(diffPath)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (serviceUserTarget != null) queryParams.Add("serviceUser.target", ApiClient.ParameterToString(serviceUserTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDiffDiffEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDiffDiffEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="importerName"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> importerName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (importerName != null) queryParams.Add("importer.name", ApiClient.ParameterToString(importerName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerName"></param> 
        /// <param name="forwardRequests"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, bool? forwardRequests)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerName != null) queryParams.Add("providerName", ApiClient.ParameterToString(providerName)); // query parameter
 if (forwardRequests != null) queryParams.Add("forward.requests", ApiClient.ParameterToString(forwardRequests)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="forwardRequests"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forwardRequests)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (forwardRequests != null) queryParams.Add("forward.requests", ApiClient.ParameterToString(forwardRequests)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="userId"></param> 
        /// <param name="accessTokenProviderTarget"></param> 
        /// <returns>ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo</returns>            
        public ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string userId, string accessTokenProviderTarget)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (userId != null) queryParams.Add("userId", ApiClient.ParameterToString(userId)); // query parameter
 if (accessTokenProviderTarget != null) queryParams.Add("accessTokenProvider.target", ApiClient.ParameterToString(accessTokenProviderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="featureName"></param> 
        /// <param name="featureDescription"></param> 
        /// <param name="httpHeaderName"></param> 
        /// <param name="httpHeaderValuepattern"></param> 
        /// <returns>ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo</returns>            
        public ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo ComAdobeGraniteFragsImplCheckHttpHeaderFlag (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string httpHeaderName, string httpHeaderValuepattern)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (featureName != null) queryParams.Add("feature.name", ApiClient.ParameterToString(featureName)); // query parameter
 if (featureDescription != null) queryParams.Add("feature.description", ApiClient.ParameterToString(featureDescription)); // query parameter
 if (httpHeaderName != null) queryParams.Add("http.header.name", ApiClient.ParameterToString(httpHeaderName)); // query parameter
 if (httpHeaderValuepattern != null) queryParams.Add("http.header.valuepattern", ApiClient.ParameterToString(httpHeaderValuepattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteFragsImplCheckHttpHeaderFlag: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteFragsImplCheckHttpHeaderFlag: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="featureName"></param> 
        /// <param name="featureDescription"></param> 
        /// <param name="activePercentage"></param> 
        /// <param name="cookieName"></param> 
        /// <param name="cookieMaxAge"></param> 
        /// <returns>ComAdobeGraniteFragsImplRandomFeatureInfo</returns>            
        public ComAdobeGraniteFragsImplRandomFeatureInfo ComAdobeGraniteFragsImplRandomFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string featureName, string featureDescription, string activePercentage, string cookieName, int? cookieMaxAge)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (featureName != null) queryParams.Add("feature.name", ApiClient.ParameterToString(featureName)); // query parameter
 if (featureDescription != null) queryParams.Add("feature.description", ApiClient.ParameterToString(featureDescription)); // query parameter
 if (activePercentage != null) queryParams.Add("active.percentage", ApiClient.ParameterToString(activePercentage)); // query parameter
 if (cookieName != null) queryParams.Add("cookie.name", ApiClient.ParameterToString(cookieName)); // query parameter
 if (cookieMaxAge != null) queryParams.Add("cookie.maxAge", ApiClient.ParameterToString(cookieMaxAge)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteFragsImplRandomFeature: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteFragsImplRandomFeature: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteFragsImplRandomFeatureInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteFragsImplRandomFeatureInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeGraniteHttpcacheFileDocumentRoot"></param> 
        /// <param name="comAdobeGraniteHttpcacheFileIncludeHost"></param> 
        /// <returns>ComAdobeGraniteHttpcacheFileFileCacheStoreInfo</returns>            
        public ComAdobeGraniteHttpcacheFileFileCacheStoreInfo ComAdobeGraniteHttpcacheFileFileCacheStore (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string comAdobeGraniteHttpcacheFileDocumentRoot, string comAdobeGraniteHttpcacheFileIncludeHost)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeGraniteHttpcacheFileDocumentRoot != null) queryParams.Add("com.adobe.granite.httpcache.file.documentRoot", ApiClient.ParameterToString(comAdobeGraniteHttpcacheFileDocumentRoot)); // query parameter
 if (comAdobeGraniteHttpcacheFileIncludeHost != null) queryParams.Add("com.adobe.granite.httpcache.file.includeHost", ApiClient.ParameterToString(comAdobeGraniteHttpcacheFileIncludeHost)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteHttpcacheFileFileCacheStore: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteHttpcacheFileFileCacheStore: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteHttpcacheFileFileCacheStoreInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteHttpcacheFileFileCacheStoreInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeGraniteHttpcacheUrlPaths"></param> 
        /// <returns>ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo</returns>            
        public ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo ComAdobeGraniteHttpcacheImplOuterCacheFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comAdobeGraniteHttpcacheUrlPaths)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeGraniteHttpcacheUrlPaths != null) queryParams.Add("com.adobe.granite.httpcache.url.paths", ApiClient.ParameterToString(comAdobeGraniteHttpcacheUrlPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteHttpcacheImplOuterCacheFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteHttpcacheImplOuterCacheFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pseudoPatterns"></param> 
        /// <returns>ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo</returns>            
        public ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo ComAdobeGraniteI18nImplBundlePseudoTranslations (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> pseudoPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pseudoPatterns != null) queryParams.Add("pseudo.patterns", ApiClient.ParameterToString(pseudoPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteI18nImplBundlePseudoTranslations: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteI18nImplBundlePseudoTranslations: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="securityPreferencesName"></param> 
        /// <returns>ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo</returns>            
        public ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo ComAdobeGraniteI18nImplPreferencesLocaleResolverService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string securityPreferencesName)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (securityPreferencesName != null) queryParams.Add("security.preferences.name", ApiClient.ParameterToString(securityPreferencesName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteI18nImplPreferencesLocaleResolverService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteI18nImplPreferencesLocaleResolverService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="graniteInfocollectorIncludeThreadDumps"></param> 
        /// <param name="graniteInfocollectorIncludeHeapDump"></param> 
        /// <returns>ComAdobeGraniteInfocollectorInfoCollectorInfo</returns>            
        public ComAdobeGraniteInfocollectorInfoCollectorInfo ComAdobeGraniteInfocollectorInfoCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteInfocollectorIncludeThreadDumps, bool? graniteInfocollectorIncludeHeapDump)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (graniteInfocollectorIncludeThreadDumps != null) queryParams.Add("granite.infocollector.includeThreadDumps", ApiClient.ParameterToString(graniteInfocollectorIncludeThreadDumps)); // query parameter
 if (graniteInfocollectorIncludeHeapDump != null) queryParams.Add("granite.infocollector.includeHeapDump", ApiClient.ParameterToString(graniteInfocollectorIncludeHeapDump)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteInfocollectorInfoCollector: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteInfocollectorInfoCollector: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteInfocollectorInfoCollectorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteInfocollectorInfoCollectorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comAdobeGraniteJettySslPort"></param> 
        /// <param name="comAdobeGraniteJettySslKeystoreUser"></param> 
        /// <param name="comAdobeGraniteJettySslKeystorePassword"></param> 
        /// <param name="comAdobeGraniteJettySslCiphersuitesExcluded"></param> 
        /// <param name="comAdobeGraniteJettySslCiphersuitesIncluded"></param> 
        /// <param name="comAdobeGraniteJettySslClientCertificate"></param> 
        /// <returns>ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo</returns>            
        public ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? comAdobeGraniteJettySslPort, string comAdobeGraniteJettySslKeystoreUser, string comAdobeGraniteJettySslKeystorePassword, List<string> comAdobeGraniteJettySslCiphersuitesExcluded, List<string> comAdobeGraniteJettySslCiphersuitesIncluded, string comAdobeGraniteJettySslClientCertificate)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comAdobeGraniteJettySslPort != null) queryParams.Add("com.adobe.granite.jetty.ssl.port", ApiClient.ParameterToString(comAdobeGraniteJettySslPort)); // query parameter
 if (comAdobeGraniteJettySslKeystoreUser != null) queryParams.Add("com.adobe.granite.jetty.ssl.keystore.user", ApiClient.ParameterToString(comAdobeGraniteJettySslKeystoreUser)); // query parameter
 if (comAdobeGraniteJettySslKeystorePassword != null) queryParams.Add("com.adobe.granite.jetty.ssl.keystore.password", ApiClient.ParameterToString(comAdobeGraniteJettySslKeystorePassword)); // query parameter
 if (comAdobeGraniteJettySslCiphersuitesExcluded != null) queryParams.Add("com.adobe.granite.jetty.ssl.ciphersuites.excluded", ApiClient.ParameterToString(comAdobeGraniteJettySslCiphersuitesExcluded)); // query parameter
 if (comAdobeGraniteJettySslCiphersuitesIncluded != null) queryParams.Add("com.adobe.granite.jetty.ssl.ciphersuites.included", ApiClient.ParameterToString(comAdobeGraniteJettySslCiphersuitesIncluded)); // query parameter
 if (comAdobeGraniteJettySslClientCertificate != null) queryParams.Add("com.adobe.granite.jetty.ssl.client.certificate", ApiClient.ParameterToString(comAdobeGraniteJettySslClientCertificate)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="checkInternval"></param> 
        /// <param name="excludeIds"></param> 
        /// <param name="encryptPing"></param> 
        /// <returns>ComAdobeGraniteLicenseImplLicenseCheckFilterInfo</returns>            
        public ComAdobeGraniteLicenseImplLicenseCheckFilterInfo ComAdobeGraniteLicenseImplLicenseCheckFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? checkInternval, List<string> excludeIds, bool? encryptPing)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (checkInternval != null) queryParams.Add("checkInternval", ApiClient.ParameterToString(checkInternval)); // query parameter
 if (excludeIds != null) queryParams.Add("excludeIds", ApiClient.ParameterToString(excludeIds)); // query parameter
 if (encryptPing != null) queryParams.Add("encryptPing", ApiClient.ParameterToString(encryptPing)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLicenseImplLicenseCheckFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLicenseImplLicenseCheckFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteLicenseImplLicenseCheckFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteLicenseImplLicenseCheckFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="messagesQueueSize"></param> 
        /// <param name="loggerConfig"></param> 
        /// <param name="messagesSize"></param> 
        /// <returns>ComAdobeGraniteLoggingImplLogAnalyserImplInfo</returns>            
        public ComAdobeGraniteLoggingImplLogAnalyserImplInfo ComAdobeGraniteLoggingImplLogAnalyserImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? messagesQueueSize, List<string> loggerConfig, int? messagesSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (messagesQueueSize != null) queryParams.Add("messages.queue.size", ApiClient.ParameterToString(messagesQueueSize)); // query parameter
 if (loggerConfig != null) queryParams.Add("logger.config", ApiClient.ParameterToString(loggerConfig)); // query parameter
 if (messagesSize != null) queryParams.Add("messages.size", ApiClient.ParameterToString(messagesSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLoggingImplLogAnalyserImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLoggingImplLogAnalyserImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteLoggingImplLogAnalyserImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteLoggingImplLogAnalyserImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo</returns>            
        public ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo ComAdobeGraniteLoggingImplLogErrorHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLoggingImplLogErrorHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteLoggingImplLogErrorHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="graniteMaintenanceMandatory"></param> 
        /// <param name="jobTopics"></param> 
        /// <returns>ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo</returns>            
        public ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteMaintenanceMandatory, string jobTopics)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (graniteMaintenanceMandatory != null) queryParams.Add("granite.maintenance.mandatory", ApiClient.ParameterToString(graniteMaintenanceMandatory)); // query parameter
 if (jobTopics != null) queryParams.Add("job.topics", ApiClient.ParameterToString(jobTopics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jobTopics"></param> 
        /// <returns>ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo</returns>            
        public ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jobTopics != null) queryParams.Add("job.topics", ApiClient.ParameterToString(jobTopics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fullGcDays"></param> 
        /// <returns>ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo</returns>            
        public ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fullGcDays)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fullGcDays != null) queryParams.Add("full.gc.days", ApiClient.ParameterToString(fullGcDays)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="scriptFilename"></param> 
        /// <param name="scriptDisplay"></param> 
        /// <param name="scriptPath"></param> 
        /// <param name="scriptPlatform"></param> 
        /// <param name="interval"></param> 
        /// <param name="jmxdomain"></param> 
        /// <returns>ComAdobeGraniteMonitoringImplScriptConfigImplInfo</returns>            
        public ComAdobeGraniteMonitoringImplScriptConfigImplInfo ComAdobeGraniteMonitoringImplScriptConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scriptFilename, string scriptDisplay, string scriptPath, List<string> scriptPlatform, int? interval, string jmxdomain)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (scriptFilename != null) queryParams.Add("script.filename", ApiClient.ParameterToString(scriptFilename)); // query parameter
 if (scriptDisplay != null) queryParams.Add("script.display", ApiClient.ParameterToString(scriptDisplay)); // query parameter
 if (scriptPath != null) queryParams.Add("script.path", ApiClient.ParameterToString(scriptPath)); // query parameter
 if (scriptPlatform != null) queryParams.Add("script.platform", ApiClient.ParameterToString(scriptPlatform)); // query parameter
 if (interval != null) queryParams.Add("interval", ApiClient.ParameterToString(interval)); // query parameter
 if (jmxdomain != null) queryParams.Add("jmxdomain", ApiClient.ParameterToString(jmxdomain)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMonitoringImplScriptConfigImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteMonitoringImplScriptConfigImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteMonitoringImplScriptConfigImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteMonitoringImplScriptConfigImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="jaasControlFlag"></param> 
        /// <param name="jaasRealmName"></param> 
        /// <param name="jaasRanking"></param> 
        /// <param name="oauthOfflineValidation"></param> 
        /// <returns>ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo</returns>            
        public ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string jaasControlFlag, string jaasRealmName, int? jaasRanking, bool? oauthOfflineValidation)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (jaasControlFlag != null) queryParams.Add("jaas.controlFlag", ApiClient.ParameterToString(jaasControlFlag)); // query parameter
 if (jaasRealmName != null) queryParams.Add("jaas.realmName", ApiClient.ParameterToString(jaasRealmName)); // query parameter
 if (jaasRanking != null) queryParams.Add("jaas.ranking", ApiClient.ParameterToString(jaasRanking)); // query parameter
 if (oauthOfflineValidation != null) queryParams.Add("oauth.offline.validation", ApiClient.ParameterToString(oauthOfflineValidation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <returns>ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo</returns>            
        public ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo ComAdobeGraniteOauthServerImplAccessTokenCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplAccessTokenCleanupTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplAccessTokenCleanupTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthClientRevocationActive"></param> 
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo</returns>            
        public ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthClientRevocationActive)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthClientRevocationActive != null) queryParams.Add("oauth.client.revocation.active", ApiClient.ParameterToString(oauthClientRevocationActive)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletPaths"></param> 
        /// <param name="oauthRevocationActive"></param> 
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo</returns>            
        public ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, bool? oauthRevocationActive)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletPaths != null) queryParams.Add("sling.servlet.paths", ApiClient.ParameterToString(slingServletPaths)); // query parameter
 if (oauthRevocationActive != null) queryParams.Add("oauth.revocation.active", ApiClient.ParameterToString(oauthRevocationActive)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthIssuer"></param> 
        /// <param name="oauthAccessTokenExpiresIn"></param> 
        /// <param name="osgiHttpWhiteboardServletPattern"></param> 
        /// <param name="osgiHttpWhiteboardContextSelect"></param> 
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo</returns>            
        public ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string oauthIssuer, string oauthAccessTokenExpiresIn, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthIssuer != null) queryParams.Add("oauth.issuer", ApiClient.ParameterToString(oauthIssuer)); // query parameter
 if (oauthAccessTokenExpiresIn != null) queryParams.Add("oauth.access.token.expires.in", ApiClient.ParameterToString(oauthAccessTokenExpiresIn)); // query parameter
 if (osgiHttpWhiteboardServletPattern != null) queryParams.Add("osgi.http.whiteboard.servlet.pattern", ApiClient.ParameterToString(osgiHttpWhiteboardServletPattern)); // query parameter
 if (osgiHttpWhiteboardContextSelect != null) queryParams.Add("osgi.http.whiteboard.context.select", ApiClient.ParameterToString(osgiHttpWhiteboardContextSelect)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="oauthTokenRevocationActive"></param> 
        /// <returns>ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo</returns>            
        public ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? oauthTokenRevocationActive)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (oauthTokenRevocationActive != null) queryParams.Add("oauth.token.revocation.active", ApiClient.ParameterToString(oauthTokenRevocationActive)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="offloadingTransporter"></param> 
        /// <param name="offloadingCleanupPayload"></param> 
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo</returns>            
        public ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo ComAdobeGraniteOffloadingImplOffloadingConfigurator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string offloadingTransporter, bool? offloadingCleanupPayload)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (offloadingTransporter != null) queryParams.Add("offloading.transporter", ApiClient.ParameterToString(offloadingTransporter)); // query parameter
 if (offloadingCleanupPayload != null) queryParams.Add("offloading.cleanup.payload", ApiClient.ParameterToString(offloadingCleanupPayload)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingConfigurator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingConfigurator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="offloadingJobclonerEnabled"></param> 
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo</returns>            
        public ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo ComAdobeGraniteOffloadingImplOffloadingJobCloner (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingJobclonerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (offloadingJobclonerEnabled != null) queryParams.Add("offloading.jobcloner.enabled", ApiClient.ParameterToString(offloadingJobclonerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingJobCloner: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingJobCloner: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="offloadingOffloaderEnabled"></param> 
        /// <returns>ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo</returns>            
        public ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo ComAdobeGraniteOffloadingImplOffloadingJobOffloader (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingOffloaderEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (offloadingOffloaderEnabled != null) queryParams.Add("offloading.offloader.enabled", ApiClient.ParameterToString(offloadingOffloaderEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingJobOffloader: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplOffloadingJobOffloader: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="offloadingAgentmanagerEnabled"></param> 
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo</returns>            
        public ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? offloadingAgentmanagerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (offloadingAgentmanagerEnabled != null) queryParams.Add("offloading.agentmanager.enabled", ApiClient.ParameterToString(offloadingAgentmanagerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultTransportAgentToWorkerPrefix"></param> 
        /// <param name="defaultTransportAgentToMasterPrefix"></param> 
        /// <param name="defaultTransportInputPackage"></param> 
        /// <param name="defaultTransportOutputPackage"></param> 
        /// <param name="defaultTransportReplicationSynchronous"></param> 
        /// <param name="defaultTransportContentpackage"></param> 
        /// <param name="offloadingTransporterDefaultEnabled"></param> 
        /// <returns>ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo</returns>            
        public ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultTransportAgentToWorkerPrefix, string defaultTransportAgentToMasterPrefix, string defaultTransportInputPackage, string defaultTransportOutputPackage, bool? defaultTransportReplicationSynchronous, bool? defaultTransportContentpackage, bool? offloadingTransporterDefaultEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultTransportAgentToWorkerPrefix != null) queryParams.Add("default.transport.agent-to-worker.prefix", ApiClient.ParameterToString(defaultTransportAgentToWorkerPrefix)); // query parameter
 if (defaultTransportAgentToMasterPrefix != null) queryParams.Add("default.transport.agent-to-master.prefix", ApiClient.ParameterToString(defaultTransportAgentToMasterPrefix)); // query parameter
 if (defaultTransportInputPackage != null) queryParams.Add("default.transport.input.package", ApiClient.ParameterToString(defaultTransportInputPackage)); // query parameter
 if (defaultTransportOutputPackage != null) queryParams.Add("default.transport.output.package", ApiClient.ParameterToString(defaultTransportOutputPackage)); // query parameter
 if (defaultTransportReplicationSynchronous != null) queryParams.Add("default.transport.replication.synchronous", ApiClient.ParameterToString(defaultTransportReplicationSynchronous)); // query parameter
 if (defaultTransportContentpackage != null) queryParams.Add("default.transport.contentpackage", ApiClient.ParameterToString(defaultTransportContentpackage)); // query parameter
 if (offloadingTransporterDefaultEnabled != null) queryParams.Add("offloading.transporter.default.enabled", ApiClient.ParameterToString(offloadingTransporterDefaultEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="omnisearchSuggestionRequiretextMin"></param> 
        /// <param name="omnisearchSuggestionSpellcheckRequire"></param> 
        /// <returns>ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo</returns>            
        public ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? omnisearchSuggestionRequiretextMin, bool? omnisearchSuggestionSpellcheckRequire)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (omnisearchSuggestionRequiretextMin != null) queryParams.Add("omnisearch.suggestion.requiretext.min", ApiClient.ParameterToString(omnisearchSuggestionRequiretextMin)); // query parameter
 if (omnisearchSuggestionSpellcheckRequire != null) queryParams.Add("omnisearch.suggestion.spellcheck.require", ApiClient.ParameterToString(omnisearchSuggestionSpellcheckRequire)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="optoutCookies"></param> 
        /// <param name="optoutHeaders"></param> 
        /// <param name="optoutWhitelistCookies"></param> 
        /// <returns>ComAdobeGraniteOptoutImplOptOutServiceImplInfo</returns>            
        public ComAdobeGraniteOptoutImplOptOutServiceImplInfo ComAdobeGraniteOptoutImplOptOutServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> optoutCookies, List<string> optoutHeaders, List<string> optoutWhitelistCookies)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (optoutCookies != null) queryParams.Add("optout.cookies", ApiClient.ParameterToString(optoutCookies)); // query parameter
 if (optoutHeaders != null) queryParams.Add("optout.headers", ApiClient.ParameterToString(optoutHeaders)); // query parameter
 if (optoutWhitelistCookies != null) queryParams.Add("optout.whitelist.cookies", ApiClient.ParameterToString(optoutWhitelistCookies)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOptoutImplOptOutServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteOptoutImplOptOutServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteOptoutImplOptOutServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteOptoutImplOptOutServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="indexingCriticalThreshold"></param> 
        /// <param name="indexingWarnThreshold"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo</returns>            
        public ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? indexingCriticalThreshold, int? indexingWarnThreshold, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (indexingCriticalThreshold != null) queryParams.Add("indexing.critical.threshold", ApiClient.ParameterToString(indexingCriticalThreshold)); // query parameter
 if (indexingWarnThreshold != null) queryParams.Add("indexing.warn.threshold", ApiClient.ParameterToString(indexingWarnThreshold)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="largeIndexCriticalThreshold"></param> 
        /// <param name="largeIndexWarnThreshold"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo</returns>            
        public ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeIndexCriticalThreshold, int? largeIndexWarnThreshold, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (largeIndexCriticalThreshold != null) queryParams.Add("large.index.critical.threshold", ApiClient.ParameterToString(largeIndexCriticalThreshold)); // query parameter
 if (largeIndexWarnThreshold != null) queryParams.Add("large.index.warn.threshold", ApiClient.ParameterToString(largeIndexWarnThreshold)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo</returns>            
        public ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="getPeriod"></param> 
        /// <returns>ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo</returns>            
        public ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? getPeriod)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (getPeriod != null) queryParams.Add("getPeriod", ApiClient.ParameterToString(getPeriod)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo</returns>            
        public ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="numberOfRetriesAllowed"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo</returns>            
        public ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? numberOfRetriesAllowed, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (numberOfRetriesAllowed != null) queryParams.Add("number.of.retries.allowed", ApiClient.ParameterToString(numberOfRetriesAllowed)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo</returns>            
        public ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="excludeSearchPath"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> excludeSearchPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (excludeSearchPath != null) queryParams.Add("exclude.search.path", ApiClient.ParameterToString(excludeSearchPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="accountLogins"></param> 
        /// <param name="consoleLogins"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, List<string> accountLogins, List<string> consoleLogins)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (accountLogins != null) queryParams.Add("account.logins", ApiClient.ParameterToString(accountLogins)); // query parameter
 if (consoleLogins != null) queryParams.Add("console.logins", ApiClient.ParameterToString(consoleLogins)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="diskSpaceWarnThreshold"></param> 
        /// <param name="diskSpaceErrorThreshold"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags, int? diskSpaceWarnThreshold, int? diskSpaceErrorThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (diskSpaceWarnThreshold != null) queryParams.Add("disk.space.warn.threshold", ApiClient.ParameterToString(diskSpaceWarnThreshold)); // query parameter
 if (diskSpaceErrorThreshold != null) queryParams.Add("disk.space.error.threshold", ApiClient.ParameterToString(diskSpaceErrorThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo</returns>            
        public ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="intervalSeconds"></param> 
        /// <param name="commitsPerIntervalThreshold"></param> 
        /// <param name="maxLocationLength"></param> 
        /// <param name="maxDetailsShown"></param> 
        /// <param name="minDetailsPercentage"></param> 
        /// <param name="threadMatchers"></param> 
        /// <param name="maxGreedyDepth"></param> 
        /// <param name="greedyStackMatchers"></param> 
        /// <param name="stackFilters"></param> 
        /// <param name="stackMatchers"></param> 
        /// <param name="stackCategorizers"></param> 
        /// <param name="stackShorteners"></param> 
        /// <returns>ComAdobeGraniteRepositoryImplCommitStatsConfigInfo</returns>            
        public ComAdobeGraniteRepositoryImplCommitStatsConfigInfo ComAdobeGraniteRepositoryImplCommitStatsConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? intervalSeconds, int? commitsPerIntervalThreshold, int? maxLocationLength, int? maxDetailsShown, int? minDetailsPercentage, List<string> threadMatchers, int? maxGreedyDepth, string greedyStackMatchers, List<string> stackFilters, List<string> stackMatchers, List<string> stackCategorizers, List<string> stackShorteners)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (intervalSeconds != null) queryParams.Add("intervalSeconds", ApiClient.ParameterToString(intervalSeconds)); // query parameter
 if (commitsPerIntervalThreshold != null) queryParams.Add("commitsPerIntervalThreshold", ApiClient.ParameterToString(commitsPerIntervalThreshold)); // query parameter
 if (maxLocationLength != null) queryParams.Add("maxLocationLength", ApiClient.ParameterToString(maxLocationLength)); // query parameter
 if (maxDetailsShown != null) queryParams.Add("maxDetailsShown", ApiClient.ParameterToString(maxDetailsShown)); // query parameter
 if (minDetailsPercentage != null) queryParams.Add("minDetailsPercentage", ApiClient.ParameterToString(minDetailsPercentage)); // query parameter
 if (threadMatchers != null) queryParams.Add("threadMatchers", ApiClient.ParameterToString(threadMatchers)); // query parameter
 if (maxGreedyDepth != null) queryParams.Add("maxGreedyDepth", ApiClient.ParameterToString(maxGreedyDepth)); // query parameter
 if (greedyStackMatchers != null) queryParams.Add("greedyStackMatchers", ApiClient.ParameterToString(greedyStackMatchers)); // query parameter
 if (stackFilters != null) queryParams.Add("stackFilters", ApiClient.ParameterToString(stackFilters)); // query parameter
 if (stackMatchers != null) queryParams.Add("stackMatchers", ApiClient.ParameterToString(stackMatchers)); // query parameter
 if (stackCategorizers != null) queryParams.Add("stackCategorizers", ApiClient.ParameterToString(stackCategorizers)); // query parameter
 if (stackShorteners != null) queryParams.Add("stackShorteners", ApiClient.ParameterToString(stackShorteners)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryImplCommitStatsConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryImplCommitStatsConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryImplCommitStatsConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryImplCommitStatsConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="serviceusersSimpleSubjectPopulation"></param> 
        /// <param name="serviceusersList"></param> 
        /// <returns>ComAdobeGraniteRepositoryServiceUserConfigurationInfo</returns>            
        public ComAdobeGraniteRepositoryServiceUserConfigurationInfo ComAdobeGraniteRepositoryServiceUserConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, bool? serviceusersSimpleSubjectPopulation, List<string> serviceusersList)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (serviceusersSimpleSubjectPopulation != null) queryParams.Add("serviceusers.simpleSubjectPopulation", ApiClient.ParameterToString(serviceusersSimpleSubjectPopulation)); // query parameter
 if (serviceusersList != null) queryParams.Add("serviceusers.list", ApiClient.ParameterToString(serviceusersList)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryServiceUserConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRepositoryServiceUserConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRepositoryServiceUserConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRepositoryServiceUserConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo</returns>            
        public ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="types"></param> 
        /// <returns>ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo</returns>            
        public ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo ComAdobeGraniteResourcestatusImplCompositeStatusType (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> types)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (types != null) queryParams.Add("types", ApiClient.ParameterToString(types)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteResourcestatusImplCompositeStatusType: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteResourcestatusImplCompositeStatusType: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerRoot"></param> 
        /// <returns>ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo</returns>            
        public ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoot)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerRoot != null) queryParams.Add("provider.root", ApiClient.ParameterToString(providerRoot)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mimeAllowEmpty"></param> 
        /// <param name="mimeAllowed"></param> 
        /// <returns>ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo</returns>            
        public ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mimeAllowEmpty, List<string> mimeAllowed)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mimeAllowEmpty != null) queryParams.Add("mime.allowEmpty", ApiClient.ParameterToString(mimeAllowEmpty)); // query parameter
 if (mimeAllowed != null) queryParams.Add("mime.allowed", ApiClient.ParameterToString(mimeAllowed)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerRoots"></param> 
        /// <returns>ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo</returns>            
        public ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerRoots != null) queryParams.Add("provider.roots", ApiClient.ParameterToString(providerRoots)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultLimit"></param> 
        /// <param name="useAbsoluteUri"></param> 
        /// <returns>ComAdobeGraniteRestImplServletDefaultGETServletInfo</returns>            
        public ComAdobeGraniteRestImplServletDefaultGETServletInfo ComAdobeGraniteRestImplServletDefaultGETServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultLimit, bool? useAbsoluteUri)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultLimit != null) queryParams.Add("default.limit", ApiClient.ParameterToString(defaultLimit)); // query parameter
 if (useAbsoluteUri != null) queryParams.Add("use.absolute.uri", ApiClient.ParameterToString(useAbsoluteUri)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestImplServletDefaultGETServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteRestImplServletDefaultGETServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteRestImplServletDefaultGETServletInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteRestImplServletDefaultGETServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcTags"></param> 
        /// <returns>ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo</returns>            
        public ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> hcTags)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="adapterCondition"></param> 
        /// <param name="graniteUserpropertiesNodetypes"></param> 
        /// <param name="graniteUserpropertiesResourcetypes"></param> 
        /// <returns>ComAdobeGraniteSecurityUserUserPropertiesServiceInfo</returns>            
        public ComAdobeGraniteSecurityUserUserPropertiesServiceInfo ComAdobeGraniteSecurityUserUserPropertiesService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> graniteUserpropertiesNodetypes, List<string> graniteUserpropertiesResourcetypes)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (adapterCondition != null) queryParams.Add("adapter.condition", ApiClient.ParameterToString(adapterCondition)); // query parameter
 if (graniteUserpropertiesNodetypes != null) queryParams.Add("granite.userproperties.nodetypes", ApiClient.ParameterToString(graniteUserpropertiesNodetypes)); // query parameter
 if (graniteUserpropertiesResourcetypes != null) queryParams.Add("granite.userproperties.resourcetypes", ApiClient.ParameterToString(graniteUserpropertiesResourcetypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSecurityUserUserPropertiesService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSecurityUserUserPropertiesService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteSecurityUserUserPropertiesServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteSecurityUserUserPropertiesServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="group2memberRelationshipOutgoing"></param> 
        /// <param name="group2memberExcludedOutgoing"></param> 
        /// <param name="group2memberRelationshipIncoming"></param> 
        /// <param name="group2memberExcludedIncoming"></param> 
        /// <returns>ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo</returns>            
        public ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string group2memberRelationshipOutgoing, List<string> group2memberExcludedOutgoing, string group2memberRelationshipIncoming, List<string> group2memberExcludedIncoming)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (group2memberRelationshipOutgoing != null) queryParams.Add("group2member.relationship.outgoing", ApiClient.ParameterToString(group2memberRelationshipOutgoing)); // query parameter
 if (group2memberExcludedOutgoing != null) queryParams.Add("group2member.excluded.outgoing", ApiClient.ParameterToString(group2memberExcludedOutgoing)); // query parameter
 if (group2memberRelationshipIncoming != null) queryParams.Add("group2member.relationship.incoming", ApiClient.ParameterToString(group2memberRelationshipIncoming)); // query parameter
 if (group2memberExcludedIncoming != null) queryParams.Add("group2member.excluded.incoming", ApiClient.ParameterToString(group2memberExcludedIncoming)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="jmxObjectname"></param> 
        /// <returns>ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo</returns>            
        public ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, string jmxObjectname)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (jmxObjectname != null) queryParams.Add("jmx.objectname", ApiClient.ParameterToString(jmxObjectname)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="adapterCondition"></param> 
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo</returns>            
        public ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (adapterCondition != null) queryParams.Add("adapter.condition", ApiClient.ParameterToString(adapterCondition)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="archivingEnabled"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="archiveSinceDaysCompleted"></param> 
        /// <returns>ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo</returns>            
        public ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? archivingEnabled, string schedulerExpression, int? archiveSinceDaysCompleted)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (archivingEnabled != null) queryParams.Add("archiving.enabled", ApiClient.ParameterToString(archivingEnabled)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (archiveSinceDaysCompleted != null) queryParams.Add("archive.since.days.completed", ApiClient.ParameterToString(archiveSinceDaysCompleted)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="purgeCompleted"></param> 
        /// <param name="completedAge"></param> 
        /// <param name="purgeActive"></param> 
        /// <param name="activeAge"></param> 
        /// <param name="saveThreshold"></param> 
        /// <returns>ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo</returns>            
        public ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? purgeCompleted, int? completedAge, bool? purgeActive, int? activeAge, int? saveThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (purgeCompleted != null) queryParams.Add("purgeCompleted", ApiClient.ParameterToString(purgeCompleted)); // query parameter
 if (completedAge != null) queryParams.Add("completedAge", ApiClient.ParameterToString(completedAge)); // query parameter
 if (purgeActive != null) queryParams.Add("purgeActive", ApiClient.ParameterToString(purgeActive)); // query parameter
 if (activeAge != null) queryParams.Add("activeAge", ApiClient.ParameterToString(activeAge)); // query parameter
 if (saveThreshold != null) queryParams.Add("saveThreshold", ApiClient.ParameterToString(saveThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="adapterCondition"></param> 
        /// <param name="taskmanagerAdmingroups"></param> 
        /// <returns>ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo</returns>            
        public ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string adapterCondition, List<string> taskmanagerAdmingroups)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (adapterCondition != null) queryParams.Add("adapter.condition", ApiClient.ParameterToString(adapterCondition)); // query parameter
 if (taskmanagerAdmingroups != null) queryParams.Add("taskmanager.admingroups", ApiClient.ParameterToString(taskmanagerAdmingroups)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerPeriod"></param> 
        /// <param name="schedulerRunOn"></param> 
        /// <param name="graniteThreaddumpEnabled"></param> 
        /// <param name="graniteThreaddumpDumpsPerFile"></param> 
        /// <param name="graniteThreaddumpEnableGzipCompression"></param> 
        /// <param name="graniteThreaddumpEnableDirectoriesCompression"></param> 
        /// <param name="graniteThreaddumpEnableJStack"></param> 
        /// <param name="graniteThreaddumpMaxBackupDays"></param> 
        /// <param name="graniteThreaddumpBackupCleanTrigger"></param> 
        /// <returns>ComAdobeGraniteThreaddumpThreadDumpCollectorInfo</returns>            
        public ComAdobeGraniteThreaddumpThreadDumpCollectorInfo ComAdobeGraniteThreaddumpThreadDumpCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, string schedulerRunOn, bool? graniteThreaddumpEnabled, int? graniteThreaddumpDumpsPerFile, bool? graniteThreaddumpEnableGzipCompression, bool? graniteThreaddumpEnableDirectoriesCompression, bool? graniteThreaddumpEnableJStack, int? graniteThreaddumpMaxBackupDays, string graniteThreaddumpBackupCleanTrigger)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerPeriod != null) queryParams.Add("scheduler.period", ApiClient.ParameterToString(schedulerPeriod)); // query parameter
 if (schedulerRunOn != null) queryParams.Add("scheduler.runOn", ApiClient.ParameterToString(schedulerRunOn)); // query parameter
 if (graniteThreaddumpEnabled != null) queryParams.Add("granite.threaddump.enabled", ApiClient.ParameterToString(graniteThreaddumpEnabled)); // query parameter
 if (graniteThreaddumpDumpsPerFile != null) queryParams.Add("granite.threaddump.dumpsPerFile", ApiClient.ParameterToString(graniteThreaddumpDumpsPerFile)); // query parameter
 if (graniteThreaddumpEnableGzipCompression != null) queryParams.Add("granite.threaddump.enableGzipCompression", ApiClient.ParameterToString(graniteThreaddumpEnableGzipCompression)); // query parameter
 if (graniteThreaddumpEnableDirectoriesCompression != null) queryParams.Add("granite.threaddump.enableDirectoriesCompression", ApiClient.ParameterToString(graniteThreaddumpEnableDirectoriesCompression)); // query parameter
 if (graniteThreaddumpEnableJStack != null) queryParams.Add("granite.threaddump.enableJStack", ApiClient.ParameterToString(graniteThreaddumpEnableJStack)); // query parameter
 if (graniteThreaddumpMaxBackupDays != null) queryParams.Add("granite.threaddump.maxBackupDays", ApiClient.ParameterToString(graniteThreaddumpMaxBackupDays)); // query parameter
 if (graniteThreaddumpBackupCleanTrigger != null) queryParams.Add("granite.threaddump.backupCleanTrigger", ApiClient.ParameterToString(graniteThreaddumpBackupCleanTrigger)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteThreaddumpThreadDumpCollector: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteThreaddumpThreadDumpCollector: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteThreaddumpThreadDumpCollectorInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteThreaddumpThreadDumpCollectorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="translationFactory"></param> 
        /// <param name="defaultConnectorLabel"></param> 
        /// <param name="defaultConnectorAttribution"></param> 
        /// <param name="defaultConnectorWorkspaceId"></param> 
        /// <param name="defaultConnectorSubscriptionKey"></param> 
        /// <param name="languageMapLocation"></param> 
        /// <param name="categoryMapLocation"></param> 
        /// <param name="retryAttempts"></param> 
        /// <param name="timeoutCount"></param> 
        /// <returns>ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo</returns>            
        public ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string translationFactory, string defaultConnectorLabel, string defaultConnectorAttribution, string defaultConnectorWorkspaceId, string defaultConnectorSubscriptionKey, string languageMapLocation, string categoryMapLocation, int? retryAttempts, int? timeoutCount)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (translationFactory != null) queryParams.Add("translationFactory", ApiClient.ParameterToString(translationFactory)); // query parameter
 if (defaultConnectorLabel != null) queryParams.Add("defaultConnectorLabel", ApiClient.ParameterToString(defaultConnectorLabel)); // query parameter
 if (defaultConnectorAttribution != null) queryParams.Add("defaultConnectorAttribution", ApiClient.ParameterToString(defaultConnectorAttribution)); // query parameter
 if (defaultConnectorWorkspaceId != null) queryParams.Add("defaultConnectorWorkspaceId", ApiClient.ParameterToString(defaultConnectorWorkspaceId)); // query parameter
 if (defaultConnectorSubscriptionKey != null) queryParams.Add("defaultConnectorSubscriptionKey", ApiClient.ParameterToString(defaultConnectorSubscriptionKey)); // query parameter
 if (languageMapLocation != null) queryParams.Add("languageMapLocation", ApiClient.ParameterToString(languageMapLocation)); // query parameter
 if (categoryMapLocation != null) queryParams.Add("categoryMapLocation", ApiClient.ParameterToString(categoryMapLocation)); // query parameter
 if (retryAttempts != null) queryParams.Add("retryAttempts", ApiClient.ParameterToString(retryAttempts)); // query parameter
 if (timeoutCount != null) queryParams.Add("timeoutCount", ApiClient.ParameterToString(timeoutCount)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultConnectorName"></param> 
        /// <param name="defaultCategory"></param> 
        /// <returns>ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo</returns>            
        public ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo ComAdobeGraniteTranslationCoreImplTranslationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultConnectorName, string defaultCategory)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultConnectorName != null) queryParams.Add("defaultConnectorName", ApiClient.ParameterToString(defaultConnectorName)); // query parameter
 if (defaultCategory != null) queryParams.Add("defaultCategory", ApiClient.ParameterToString(defaultCategory)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTranslationCoreImplTranslationManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteTranslationCoreImplTranslationManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="htmllibmanagerTiming"></param> 
        /// <param name="htmllibmanagerDebugInitJs"></param> 
        /// <param name="htmllibmanagerMinify"></param> 
        /// <param name="htmllibmanagerDebug"></param> 
        /// <param name="htmllibmanagerGzip"></param> 
        /// <param name="htmllibmanagerMaxDataUriSize"></param> 
        /// <param name="htmllibmanagerMaxage"></param> 
        /// <param name="htmllibmanagerForceCQUrlInfo"></param> 
        /// <param name="htmllibmanagerDefaultthemename"></param> 
        /// <param name="htmllibmanagerDefaultuserthemename"></param> 
        /// <param name="htmllibmanagerClientmanager"></param> 
        /// <param name="htmllibmanagerPathList"></param> 
        /// <param name="htmllibmanagerExcludedPathList"></param> 
        /// <param name="htmllibmanagerProcessorJs"></param> 
        /// <param name="htmllibmanagerProcessorCss"></param> 
        /// <param name="htmllibmanagerLongcachePatterns"></param> 
        /// <param name="htmllibmanagerLongcacheFormat"></param> 
        /// <param name="htmllibmanagerUseFileSystemOutputCache"></param> 
        /// <param name="htmllibmanagerFileSystemOutputCacheLocation"></param> 
        /// <param name="htmllibmanagerDisableReplacement"></param> 
        /// <returns>ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo</returns>            
        public ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? htmllibmanagerTiming, string htmllibmanagerDebugInitJs, bool? htmllibmanagerMinify, bool? htmllibmanagerDebug, bool? htmllibmanagerGzip, int? htmllibmanagerMaxDataUriSize, int? htmllibmanagerMaxage, bool? htmllibmanagerForceCQUrlInfo, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerClientmanager, List<string> htmllibmanagerPathList, List<string> htmllibmanagerExcludedPathList, List<string> htmllibmanagerProcessorJs, List<string> htmllibmanagerProcessorCss, List<string> htmllibmanagerLongcachePatterns, string htmllibmanagerLongcacheFormat, bool? htmllibmanagerUseFileSystemOutputCache, string htmllibmanagerFileSystemOutputCacheLocation, List<string> htmllibmanagerDisableReplacement)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (htmllibmanagerTiming != null) queryParams.Add("htmllibmanager.timing", ApiClient.ParameterToString(htmllibmanagerTiming)); // query parameter
 if (htmllibmanagerDebugInitJs != null) queryParams.Add("htmllibmanager.debug.init.js", ApiClient.ParameterToString(htmllibmanagerDebugInitJs)); // query parameter
 if (htmllibmanagerMinify != null) queryParams.Add("htmllibmanager.minify", ApiClient.ParameterToString(htmllibmanagerMinify)); // query parameter
 if (htmllibmanagerDebug != null) queryParams.Add("htmllibmanager.debug", ApiClient.ParameterToString(htmllibmanagerDebug)); // query parameter
 if (htmllibmanagerGzip != null) queryParams.Add("htmllibmanager.gzip", ApiClient.ParameterToString(htmllibmanagerGzip)); // query parameter
 if (htmllibmanagerMaxDataUriSize != null) queryParams.Add("htmllibmanager.maxDataUriSize", ApiClient.ParameterToString(htmllibmanagerMaxDataUriSize)); // query parameter
 if (htmllibmanagerMaxage != null) queryParams.Add("htmllibmanager.maxage", ApiClient.ParameterToString(htmllibmanagerMaxage)); // query parameter
 if (htmllibmanagerForceCQUrlInfo != null) queryParams.Add("htmllibmanager.forceCQUrlInfo", ApiClient.ParameterToString(htmllibmanagerForceCQUrlInfo)); // query parameter
 if (htmllibmanagerDefaultthemename != null) queryParams.Add("htmllibmanager.defaultthemename", ApiClient.ParameterToString(htmllibmanagerDefaultthemename)); // query parameter
 if (htmllibmanagerDefaultuserthemename != null) queryParams.Add("htmllibmanager.defaultuserthemename", ApiClient.ParameterToString(htmllibmanagerDefaultuserthemename)); // query parameter
 if (htmllibmanagerClientmanager != null) queryParams.Add("htmllibmanager.clientmanager", ApiClient.ParameterToString(htmllibmanagerClientmanager)); // query parameter
 if (htmllibmanagerPathList != null) queryParams.Add("htmllibmanager.path.list", ApiClient.ParameterToString(htmllibmanagerPathList)); // query parameter
 if (htmllibmanagerExcludedPathList != null) queryParams.Add("htmllibmanager.excluded.path.list", ApiClient.ParameterToString(htmllibmanagerExcludedPathList)); // query parameter
 if (htmllibmanagerProcessorJs != null) queryParams.Add("htmllibmanager.processor.js", ApiClient.ParameterToString(htmllibmanagerProcessorJs)); // query parameter
 if (htmllibmanagerProcessorCss != null) queryParams.Add("htmllibmanager.processor.css", ApiClient.ParameterToString(htmllibmanagerProcessorCss)); // query parameter
 if (htmllibmanagerLongcachePatterns != null) queryParams.Add("htmllibmanager.longcache.patterns", ApiClient.ParameterToString(htmllibmanagerLongcachePatterns)); // query parameter
 if (htmllibmanagerLongcacheFormat != null) queryParams.Add("htmllibmanager.longcache.format", ApiClient.ParameterToString(htmllibmanagerLongcacheFormat)); // query parameter
 if (htmllibmanagerUseFileSystemOutputCache != null) queryParams.Add("htmllibmanager.useFileSystemOutputCache", ApiClient.ParameterToString(htmllibmanagerUseFileSystemOutputCache)); // query parameter
 if (htmllibmanagerFileSystemOutputCacheLocation != null) queryParams.Add("htmllibmanager.fileSystemOutputCacheLocation", ApiClient.ParameterToString(htmllibmanagerFileSystemOutputCacheLocation)); // query parameter
 if (htmllibmanagerDisableReplacement != null) queryParams.Add("htmllibmanager.disable.replacement", ApiClient.ParameterToString(htmllibmanagerDisableReplacement)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo</returns>            
        public ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="graniteWorkflowWorkflowPublishEventServiceEnabled"></param> 
        /// <returns>ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo</returns>            
        public ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? graniteWorkflowWorkflowPublishEventServiceEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (graniteWorkflowWorkflowPublishEventServiceEnabled != null) queryParams.Add("granite.workflow.WorkflowPublishEventService.enabled", ApiClient.ParameterToString(graniteWorkflowWorkflowPublishEventServiceEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="bucketSize"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo</returns>            
        public ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? bucketSize)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (bucketSize != null) queryParams.Add("bucketSize", ApiClient.ParameterToString(bucketSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultTimeout"></param> 
        /// <param name="maxTimeout"></param> 
        /// <param name="defaultPeriod"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo</returns>            
        public ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? defaultTimeout, int? maxTimeout, int? defaultPeriod)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultTimeout != null) queryParams.Add("default.timeout", ApiClient.ParameterToString(defaultTimeout)); // query parameter
 if (maxTimeout != null) queryParams.Add("max.timeout", ApiClient.ParameterToString(maxTimeout)); // query parameter
 if (defaultPeriod != null) queryParams.Add("default.period", ApiClient.ParameterToString(defaultPeriod)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jobTopics"></param> 
        /// <param name="allowSelfProcessTermination"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreJobJobHandlerInfo</returns>            
        public ComAdobeGraniteWorkflowCoreJobJobHandlerInfo ComAdobeGraniteWorkflowCoreJobJobHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> jobTopics, bool? allowSelfProcessTermination)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jobTopics != null) queryParams.Add("job.topics", ApiClient.ParameterToString(jobTopics)); // query parameter
 if (allowSelfProcessTermination != null) queryParams.Add("allow.self.process.termination", ApiClient.ParameterToString(allowSelfProcessTermination)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJobJobHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreJobJobHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreJobJobHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreJobJobHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jobTopics"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo</returns>            
        public ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jobTopics != null) queryParams.Add("job.topics", ApiClient.ParameterToString(jobTopics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="getSystemWorkflowModels"></param> 
        /// <param name="getPackageRootPath"></param> 
        /// <returns>ComAdobeGraniteWorkflowCorePayloadMapCacheInfo</returns>            
        public ComAdobeGraniteWorkflowCorePayloadMapCacheInfo ComAdobeGraniteWorkflowCorePayloadMapCache (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> getSystemWorkflowModels, string getPackageRootPath)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (getSystemWorkflowModels != null) queryParams.Add("getSystemWorkflowModels", ApiClient.ParameterToString(getSystemWorkflowModels)); // query parameter
 if (getPackageRootPath != null) queryParams.Add("getPackageRootPath", ApiClient.ParameterToString(getPackageRootPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCorePayloadMapCache: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCorePayloadMapCache: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCorePayloadMapCacheInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCorePayloadMapCacheInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="payloadMoveWhiteList"></param> 
        /// <param name="payloadMoveHandleFromWorkflowProcess"></param> 
        /// <returns>ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo</returns>            
        public ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> payloadMoveWhiteList, bool? payloadMoveHandleFromWorkflowProcess)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (payloadMoveWhiteList != null) queryParams.Add("payload.move.white.list", ApiClient.ParameterToString(payloadMoveWhiteList)); // query parameter
 if (payloadMoveHandleFromWorkflowProcess != null) queryParams.Add("payload.move.handle.from.workflow.process", ApiClient.ParameterToString(payloadMoveHandleFromWorkflowProcess)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWorkflowConfigWorkflowPackagesRootPath"></param> 
        /// <param name="cqWorkflowConfigWorkflowProcessLegacyMode"></param> 
        /// <param name="cqWorkflowConfigAllowLocking"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowConfigInfo</returns>            
        public ComAdobeGraniteWorkflowCoreWorkflowConfigInfo ComAdobeGraniteWorkflowCoreWorkflowConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWorkflowConfigWorkflowPackagesRootPath, bool? cqWorkflowConfigWorkflowProcessLegacyMode, bool? cqWorkflowConfigAllowLocking)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWorkflowConfigWorkflowPackagesRootPath != null) queryParams.Add("cq.workflow.config.workflow.packages.root.path", ApiClient.ParameterToString(cqWorkflowConfigWorkflowPackagesRootPath)); // query parameter
 if (cqWorkflowConfigWorkflowProcessLegacyMode != null) queryParams.Add("cq.workflow.config.workflow.process.legacy.mode", ApiClient.ParameterToString(cqWorkflowConfigWorkflowProcessLegacyMode)); // query parameter
 if (cqWorkflowConfigAllowLocking != null) queryParams.Add("cq.workflow.config.allow.locking", ApiClient.ParameterToString(cqWorkflowConfigAllowLocking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreWorkflowConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreWorkflowConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreWorkflowConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreWorkflowConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="graniteWorkflowinboxSortPropertyName"></param> 
        /// <param name="graniteWorkflowinboxSortOrder"></param> 
        /// <param name="cqWorkflowJobRetry"></param> 
        /// <param name="cqWorkflowSuperuser"></param> 
        /// <param name="graniteWorkflowInboxQuerySize"></param> 
        /// <param name="graniteWorkflowAdminUserGroupFilter"></param> 
        /// <param name="graniteWorkflowEnforceWorkitemAssigneePermissions"></param> 
        /// <param name="graniteWorkflowEnforceWorkflowInitiatorPermissions"></param> 
        /// <param name="graniteWorkflowInjectTenantIdInJobTopics"></param> 
        /// <param name="graniteWorkflowMaxPurgeSaveThreshold"></param> 
        /// <param name="graniteWorkflowMaxPurgeQueryCount"></param> 
        /// <returns>ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo</returns>            
        public ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo ComAdobeGraniteWorkflowCoreWorkflowSessionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string graniteWorkflowinboxSortPropertyName, string graniteWorkflowinboxSortOrder, int? cqWorkflowJobRetry, List<string> cqWorkflowSuperuser, int? graniteWorkflowInboxQuerySize, bool? graniteWorkflowAdminUserGroupFilter, bool? graniteWorkflowEnforceWorkitemAssigneePermissions, bool? graniteWorkflowEnforceWorkflowInitiatorPermissions, bool? graniteWorkflowInjectTenantIdInJobTopics, int? graniteWorkflowMaxPurgeSaveThreshold, int? graniteWorkflowMaxPurgeQueryCount)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (graniteWorkflowinboxSortPropertyName != null) queryParams.Add("granite.workflowinbox.sort.propertyName", ApiClient.ParameterToString(graniteWorkflowinboxSortPropertyName)); // query parameter
 if (graniteWorkflowinboxSortOrder != null) queryParams.Add("granite.workflowinbox.sort.order", ApiClient.ParameterToString(graniteWorkflowinboxSortOrder)); // query parameter
 if (cqWorkflowJobRetry != null) queryParams.Add("cq.workflow.job.retry", ApiClient.ParameterToString(cqWorkflowJobRetry)); // query parameter
 if (cqWorkflowSuperuser != null) queryParams.Add("cq.workflow.superuser", ApiClient.ParameterToString(cqWorkflowSuperuser)); // query parameter
 if (graniteWorkflowInboxQuerySize != null) queryParams.Add("granite.workflow.inboxQuerySize", ApiClient.ParameterToString(graniteWorkflowInboxQuerySize)); // query parameter
 if (graniteWorkflowAdminUserGroupFilter != null) queryParams.Add("granite.workflow.adminUserGroupFilter", ApiClient.ParameterToString(graniteWorkflowAdminUserGroupFilter)); // query parameter
 if (graniteWorkflowEnforceWorkitemAssigneePermissions != null) queryParams.Add("granite.workflow.enforceWorkitemAssigneePermissions", ApiClient.ParameterToString(graniteWorkflowEnforceWorkitemAssigneePermissions)); // query parameter
 if (graniteWorkflowEnforceWorkflowInitiatorPermissions != null) queryParams.Add("granite.workflow.enforceWorkflowInitiatorPermissions", ApiClient.ParameterToString(graniteWorkflowEnforceWorkflowInitiatorPermissions)); // query parameter
 if (graniteWorkflowInjectTenantIdInJobTopics != null) queryParams.Add("granite.workflow.injectTenantIdInJobTopics", ApiClient.ParameterToString(graniteWorkflowInjectTenantIdInJobTopics)); // query parameter
 if (graniteWorkflowMaxPurgeSaveThreshold != null) queryParams.Add("granite.workflow.maxPurgeSaveThreshold", ApiClient.ParameterToString(graniteWorkflowMaxPurgeSaveThreshold)); // query parameter
 if (graniteWorkflowMaxPurgeQueryCount != null) queryParams.Add("granite.workflow.maxPurgeQueryCount", ApiClient.ParameterToString(graniteWorkflowMaxPurgeQueryCount)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreWorkflowSessionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowCoreWorkflowSessionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="scheduledpurgeName"></param> 
        /// <param name="scheduledpurgeWorkflowStatus"></param> 
        /// <param name="scheduledpurgeModelIds"></param> 
        /// <param name="scheduledpurgeDaysold"></param> 
        /// <returns>ComAdobeGraniteWorkflowPurgeSchedulerInfo</returns>            
        public ComAdobeGraniteWorkflowPurgeSchedulerInfo ComAdobeGraniteWorkflowPurgeScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scheduledpurgeName, string scheduledpurgeWorkflowStatus, List<string> scheduledpurgeModelIds, int? scheduledpurgeDaysold)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (scheduledpurgeName != null) queryParams.Add("scheduledpurge.name", ApiClient.ParameterToString(scheduledpurgeName)); // query parameter
 if (scheduledpurgeWorkflowStatus != null) queryParams.Add("scheduledpurge.workflowStatus", ApiClient.ParameterToString(scheduledpurgeWorkflowStatus)); // query parameter
 if (scheduledpurgeModelIds != null) queryParams.Add("scheduledpurge.modelIds", ApiClient.ParameterToString(scheduledpurgeModelIds)); // query parameter
 if (scheduledpurgeDaysold != null) queryParams.Add("scheduledpurge.daysold", ApiClient.ParameterToString(scheduledpurgeDaysold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowPurgeScheduler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeGraniteWorkflowPurgeScheduler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeGraniteWorkflowPurgeSchedulerInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeGraniteWorkflowPurgeSchedulerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxConnections"></param> 
        /// <param name="maxRequests"></param> 
        /// <param name="requestTimeout"></param> 
        /// <param name="requestRetries"></param> 
        /// <param name="launchTimeout"></param> 
        /// <returns>ComAdobeOctopusNcommBootstrapInfo</returns>            
        public ComAdobeOctopusNcommBootstrapInfo ComAdobeOctopusNcommBootstrap (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxConnections, int? maxRequests, int? requestTimeout, int? requestRetries, int? launchTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxConnections != null) queryParams.Add("maxConnections", ApiClient.ParameterToString(maxConnections)); // query parameter
 if (maxRequests != null) queryParams.Add("maxRequests", ApiClient.ParameterToString(maxRequests)); // query parameter
 if (requestTimeout != null) queryParams.Add("requestTimeout", ApiClient.ParameterToString(requestTimeout)); // query parameter
 if (requestRetries != null) queryParams.Add("requestRetries", ApiClient.ParameterToString(requestRetries)); // query parameter
 if (launchTimeout != null) queryParams.Add("launchTimeout", ApiClient.ParameterToString(launchTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeOctopusNcommBootstrap: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeOctopusNcommBootstrap: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeOctopusNcommBootstrapInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeOctopusNcommBootstrapInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="communitiesIntegrationLivefyreSlingEventFilter"></param> 
        /// <returns>ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo</returns>            
        public ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string communitiesIntegrationLivefyreSlingEventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (communitiesIntegrationLivefyreSlingEventFilter != null) queryParams.Add("communities.integration.livefyre.sling.event.filter", ApiClient.ParameterToString(communitiesIntegrationLivefyreSlingEventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxConnections"></param> 
        /// <param name="maxRequests"></param> 
        /// <param name="requestTimeout"></param> 
        /// <param name="logDir"></param> 
        /// <returns>ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo</returns>            
        public ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo ComAdobeXmpWorkerFilesNcommXMPFilesNComm (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxConnections, string maxRequests, string requestTimeout, string logDir)
        {
            
    
            var path = "/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxConnections != null) queryParams.Add("maxConnections", ApiClient.ParameterToString(maxConnections)); // query parameter
 if (maxRequests != null) queryParams.Add("maxRequests", ApiClient.ParameterToString(maxRequests)); // query parameter
 if (requestTimeout != null) queryParams.Add("requestTimeout", ApiClient.ParameterToString(requestTimeout)); // query parameter
 if (logDir != null) queryParams.Add("logDir", ApiClient.ParameterToString(logDir)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeXmpWorkerFilesNcommXMPFilesNComm: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComAdobeXmpWorkerFilesNcommXMPFilesNComm: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo) ApiClient.Deserialize(response.Content, typeof(ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jdbcDriverClass"></param> 
        /// <param name="jdbcConnectionUri"></param> 
        /// <param name="jdbcUsername"></param> 
        /// <param name="jdbcPassword"></param> 
        /// <param name="jdbcValidationQuery"></param> 
        /// <param name="defaultReadonly"></param> 
        /// <param name="defaultAutocommit"></param> 
        /// <param name="poolSize"></param> 
        /// <param name="poolMaxWaitMsec"></param> 
        /// <param name="datasourceName"></param> 
        /// <param name="datasourceSvcProperties"></param> 
        /// <returns>ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo</returns>            
        public ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo ComDayCommonsDatasourceJdbcpoolJdbcPoolService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jdbcDriverClass, string jdbcConnectionUri, string jdbcUsername, string jdbcPassword, string jdbcValidationQuery, bool? defaultReadonly, bool? defaultAutocommit, int? poolSize, int? poolMaxWaitMsec, string datasourceName, List<string> datasourceSvcProperties)
        {
            
    
            var path = "/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jdbcDriverClass != null) queryParams.Add("jdbc.driver.class", ApiClient.ParameterToString(jdbcDriverClass)); // query parameter
 if (jdbcConnectionUri != null) queryParams.Add("jdbc.connection.uri", ApiClient.ParameterToString(jdbcConnectionUri)); // query parameter
 if (jdbcUsername != null) queryParams.Add("jdbc.username", ApiClient.ParameterToString(jdbcUsername)); // query parameter
 if (jdbcPassword != null) queryParams.Add("jdbc.password", ApiClient.ParameterToString(jdbcPassword)); // query parameter
 if (jdbcValidationQuery != null) queryParams.Add("jdbc.validation.query", ApiClient.ParameterToString(jdbcValidationQuery)); // query parameter
 if (defaultReadonly != null) queryParams.Add("default.readonly", ApiClient.ParameterToString(defaultReadonly)); // query parameter
 if (defaultAutocommit != null) queryParams.Add("default.autocommit", ApiClient.ParameterToString(defaultAutocommit)); // query parameter
 if (poolSize != null) queryParams.Add("pool.size", ApiClient.ParameterToString(poolSize)); // query parameter
 if (poolMaxWaitMsec != null) queryParams.Add("pool.max.wait.msec", ApiClient.ParameterToString(poolMaxWaitMsec)); // query parameter
 if (datasourceName != null) queryParams.Add("datasource.name", ApiClient.ParameterToString(datasourceName)); // query parameter
 if (datasourceSvcProperties != null) queryParams.Add("datasource.svc.properties", ApiClient.ParameterToString(datasourceSvcProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCommonsDatasourceJdbcpoolJdbcPoolService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCommonsDatasourceJdbcpoolJdbcPoolService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="proxyEnabled"></param> 
        /// <param name="proxyHost"></param> 
        /// <param name="proxyUser"></param> 
        /// <param name="proxyPassword"></param> 
        /// <param name="proxyNtlmHost"></param> 
        /// <param name="proxyNtlmDomain"></param> 
        /// <param name="proxyExceptions"></param> 
        /// <returns>ComDayCommonsHttpclientInfo</returns>            
        public ComDayCommonsHttpclientInfo ComDayCommonsHttpclient (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, string proxyUser, string proxyPassword, string proxyNtlmHost, string proxyNtlmDomain, List<string> proxyExceptions)
        {
            
    
            var path = "/system/console/configMgr/com.day.commons.httpclient";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (proxyEnabled != null) queryParams.Add("proxy.enabled", ApiClient.ParameterToString(proxyEnabled)); // query parameter
 if (proxyHost != null) queryParams.Add("proxy.host", ApiClient.ParameterToString(proxyHost)); // query parameter
 if (proxyUser != null) queryParams.Add("proxy.user", ApiClient.ParameterToString(proxyUser)); // query parameter
 if (proxyPassword != null) queryParams.Add("proxy.password", ApiClient.ParameterToString(proxyPassword)); // query parameter
 if (proxyNtlmHost != null) queryParams.Add("proxy.ntlm.host", ApiClient.ParameterToString(proxyNtlmHost)); // query parameter
 if (proxyNtlmDomain != null) queryParams.Add("proxy.ntlm.domain", ApiClient.ParameterToString(proxyNtlmDomain)); // query parameter
 if (proxyExceptions != null) queryParams.Add("proxy.exceptions", ApiClient.ParameterToString(proxyExceptions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCommonsHttpclient: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCommonsHttpclient: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCommonsHttpclientInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCommonsHttpclientInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqStoreListenerAdditionalStorePaths"></param> 
        /// <returns>ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo</returns>            
        public ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo ComDayCqAnalyticsImplStorePropertiesChangeListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqStoreListenerAdditionalStorePaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqStoreListenerAdditionalStorePaths != null) queryParams.Add("cq.store.listener.additionalStorePaths", ApiClient.ParameterToString(cqStoreListenerAdditionalStorePaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsImplStorePropertiesChangeListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsImplStorePropertiesChangeListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="allowedPaths"></param> 
        /// <param name="cqAnalyticsSaintExporterPagesize"></param> 
        /// <returns>ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo</returns>            
        public ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> allowedPaths, int? cqAnalyticsSaintExporterPagesize)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (allowedPaths != null) queryParams.Add("allowed.paths", ApiClient.ParameterToString(allowedPaths)); // query parameter
 if (cqAnalyticsSaintExporterPagesize != null) queryParams.Add("cq.analytics.saint.exporter.pagesize", ApiClient.ParameterToString(cqAnalyticsSaintExporterPagesize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="reportFetchAttempts"></param> 
        /// <param name="reportFetchDelay"></param> 
        /// <returns>ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo</returns>            
        public ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo ComDayCqAnalyticsSitecatalystImplImporterReportImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? reportFetchAttempts, int? reportFetchDelay)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (reportFetchAttempts != null) queryParams.Add("report.fetch.attempts", ApiClient.ParameterToString(reportFetchAttempts)); // query parameter
 if (reportFetchDelay != null) queryParams.Add("report.fetch.delay", ApiClient.ParameterToString(reportFetchDelay)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplImporterReportImporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplImporterReportImporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsAdapterfactoryContextstores"></param> 
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo</returns>            
        public ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsAdapterfactoryContextstores)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsAdapterfactoryContextstores != null) queryParams.Add("cq.analytics.adapterfactory.contextstores", ApiClient.ParameterToString(cqAnalyticsAdapterfactoryContextstores)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsSitecatalystServiceDatacenterUrl"></param> 
        /// <param name="devhostnamepatterns"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <returns>ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo</returns>            
        public ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAnalyticsSitecatalystServiceDatacenterUrl, List<string> devhostnamepatterns, int? connectionTimeout, int? socketTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsSitecatalystServiceDatacenterUrl != null) queryParams.Add("cq.analytics.sitecatalyst.service.datacenter.url", ApiClient.ParameterToString(cqAnalyticsSitecatalystServiceDatacenterUrl)); // query parameter
 if (devhostnamepatterns != null) queryParams.Add("devhostnamepatterns", ApiClient.ParameterToString(devhostnamepatterns)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connection.timeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socket.timeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsTestandtargetAccountoptionsupdaterEnabled"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetAccountoptionsupdaterEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsTestandtargetAccountoptionsupdaterEnabled != null) queryParams.Add("cq.analytics.testandtarget.accountoptionsupdater.enabled", ApiClient.ParameterToString(cqAnalyticsTestandtargetAccountoptionsupdaterEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled != null) queryParams.Add("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled", ApiClient.ParameterToString(cqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled != null) queryParams.Add("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled", ApiClient.ParameterToString(cqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsTestandtargetSegmentimporterEnabled"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo ComDayCqAnalyticsTestandtargetImplSegmentImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqAnalyticsTestandtargetSegmentimporterEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsTestandtargetSegmentimporterEnabled != null) queryParams.Add("cq.analytics.testandtarget.segmentimporter.enabled", ApiClient.ParameterToString(cqAnalyticsTestandtargetSegmentimporterEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplSegmentImporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplSegmentImporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="endpointUri"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string endpointUri, int? connectionTimeout, int? socketTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (endpointUri != null) queryParams.Add("endpointUri", ApiClient.ParameterToString(endpointUri)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connectionTimeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socketTimeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="testandtargetEndpointUrl"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string testandtargetEndpointUrl)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (testandtargetEndpointUrl != null) queryParams.Add("testandtarget.endpoint.url", ApiClient.ParameterToString(testandtargetEndpointUrl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAnalyticsTestandtargetApiUrl"></param> 
        /// <param name="cqAnalyticsTestandtargetTimeout"></param> 
        /// <param name="cqAnalyticsTestandtargetSockettimeout"></param> 
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplace"></param> 
        /// <param name="cqAnalyticsTestandtargetRecommendationsUrlReplacewith"></param> 
        /// <returns>ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo</returns>            
        public ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqAnalyticsTestandtargetApiUrl, int? cqAnalyticsTestandtargetTimeout, int? cqAnalyticsTestandtargetSockettimeout, string cqAnalyticsTestandtargetRecommendationsUrlReplace, string cqAnalyticsTestandtargetRecommendationsUrlReplacewith)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAnalyticsTestandtargetApiUrl != null) queryParams.Add("cq.analytics.testandtarget.api.url", ApiClient.ParameterToString(cqAnalyticsTestandtargetApiUrl)); // query parameter
 if (cqAnalyticsTestandtargetTimeout != null) queryParams.Add("cq.analytics.testandtarget.timeout", ApiClient.ParameterToString(cqAnalyticsTestandtargetTimeout)); // query parameter
 if (cqAnalyticsTestandtargetSockettimeout != null) queryParams.Add("cq.analytics.testandtarget.sockettimeout", ApiClient.ParameterToString(cqAnalyticsTestandtargetSockettimeout)); // query parameter
 if (cqAnalyticsTestandtargetRecommendationsUrlReplace != null) queryParams.Add("cq.analytics.testandtarget.recommendations.url.replace", ApiClient.ParameterToString(cqAnalyticsTestandtargetRecommendationsUrlReplace)); // query parameter
 if (cqAnalyticsTestandtargetRecommendationsUrlReplacewith != null) queryParams.Add("cq.analytics.testandtarget.recommendations.url.replacewith", ApiClient.ParameterToString(cqAnalyticsTestandtargetRecommendationsUrlReplacewith)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cugExemptedPrincipals"></param> 
        /// <param name="cugEnabled"></param> 
        /// <param name="cugPrincipalsRegex"></param> 
        /// <param name="cugPrincipalsReplacement"></param> 
        /// <returns>ComDayCqAuthImplCugCugSupportImplInfo</returns>            
        public ComDayCqAuthImplCugCugSupportImplInfo ComDayCqAuthImplCugCugSupportImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugExemptedPrincipals, bool? cugEnabled, string cugPrincipalsRegex, string cugPrincipalsReplacement)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cugExemptedPrincipals != null) queryParams.Add("cug.exempted.principals", ApiClient.ParameterToString(cugExemptedPrincipals)); // query parameter
 if (cugEnabled != null) queryParams.Add("cug.enabled", ApiClient.ParameterToString(cugEnabled)); // query parameter
 if (cugPrincipalsRegex != null) queryParams.Add("cug.principals.regex", ApiClient.ParameterToString(cugPrincipalsRegex)); // query parameter
 if (cugPrincipalsReplacement != null) queryParams.Add("cug.principals.replacement", ApiClient.ParameterToString(cugPrincipalsReplacement)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAuthImplCugCugSupportImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAuthImplCugCugSupportImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAuthImplCugCugSupportImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAuthImplCugCugSupportImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="authLoginselectorMappings"></param> 
        /// <param name="authLoginselectorChangepwMappings"></param> 
        /// <param name="authLoginselectorDefaultloginpage"></param> 
        /// <param name="authLoginselectorDefaultchangepwpage"></param> 
        /// <param name="authLoginselectorHandle"></param> 
        /// <param name="authLoginselectorHandleAllExtensions"></param> 
        /// <returns>ComDayCqAuthImplLoginSelectorHandlerInfo</returns>            
        public ComDayCqAuthImplLoginSelectorHandlerInfo ComDayCqAuthImplLoginSelectorHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, int? serviceRanking, List<string> authLoginselectorMappings, List<string> authLoginselectorChangepwMappings, string authLoginselectorDefaultloginpage, string authLoginselectorDefaultchangepwpage, List<string> authLoginselectorHandle, bool? authLoginselectorHandleAllExtensions)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (authLoginselectorMappings != null) queryParams.Add("auth.loginselector.mappings", ApiClient.ParameterToString(authLoginselectorMappings)); // query parameter
 if (authLoginselectorChangepwMappings != null) queryParams.Add("auth.loginselector.changepw.mappings", ApiClient.ParameterToString(authLoginselectorChangepwMappings)); // query parameter
 if (authLoginselectorDefaultloginpage != null) queryParams.Add("auth.loginselector.defaultloginpage", ApiClient.ParameterToString(authLoginselectorDefaultloginpage)); // query parameter
 if (authLoginselectorDefaultchangepwpage != null) queryParams.Add("auth.loginselector.defaultchangepwpage", ApiClient.ParameterToString(authLoginselectorDefaultchangepwpage)); // query parameter
 if (authLoginselectorHandle != null) queryParams.Add("auth.loginselector.handle", ApiClient.ParameterToString(authLoginselectorHandle)); // query parameter
 if (authLoginselectorHandleAllExtensions != null) queryParams.Add("auth.loginselector.handle.all.extensions", ApiClient.ParameterToString(authLoginselectorHandleAllExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAuthImplLoginSelectorHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqAuthImplLoginSelectorHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqAuthImplLoginSelectorHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqAuthImplLoginSelectorHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="externalizerDomains"></param> 
        /// <param name="externalizerHost"></param> 
        /// <param name="externalizerContextpath"></param> 
        /// <param name="externalizerEncodedpath"></param> 
        /// <returns>ComDayCqCommonsImplExternalizerImplInfo</returns>            
        public ComDayCqCommonsImplExternalizerImplInfo ComDayCqCommonsImplExternalizerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> externalizerDomains, string externalizerHost, string externalizerContextpath, bool? externalizerEncodedpath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (externalizerDomains != null) queryParams.Add("externalizer.domains", ApiClient.ParameterToString(externalizerDomains)); // query parameter
 if (externalizerHost != null) queryParams.Add("externalizer.host", ApiClient.ParameterToString(externalizerHost)); // query parameter
 if (externalizerContextpath != null) queryParams.Add("externalizer.contextpath", ApiClient.ParameterToString(externalizerContextpath)); // query parameter
 if (externalizerEncodedpath != null) queryParams.Add("externalizer.encodedpath", ApiClient.ParameterToString(externalizerEncodedpath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCommonsImplExternalizerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCommonsImplExternalizerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqCommonsImplExternalizerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqCommonsImplExternalizerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="rootmappingTarget"></param> 
        /// <returns>ComDayCqCommonsServletsRootMappingServletInfo</returns>            
        public ComDayCqCommonsServletsRootMappingServletInfo ComDayCqCommonsServletsRootMappingServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string rootmappingTarget)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (rootmappingTarget != null) queryParams.Add("rootmapping.target", ApiClient.ParameterToString(rootmappingTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCommonsServletsRootMappingServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCommonsServletsRootMappingServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqCommonsServletsRootMappingServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqCommonsServletsRootMappingServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="codeupgradetasks"></param> 
        /// <param name="codeupgradetaskfilters"></param> 
        /// <returns>ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo</returns>            
        public ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> codeupgradetasks, List<string> codeupgradetaskfilters)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (codeupgradetasks != null) queryParams.Add("codeupgradetasks", ApiClient.ParameterToString(codeupgradetasks)); // query parameter
 if (codeupgradetaskfilters != null) queryParams.Add("codeupgradetaskfilters", ApiClient.ParameterToString(codeupgradetaskfilters)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="upgradeTaskIgnoreList"></param> 
        /// <returns>ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo</returns>            
        public ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> upgradeTaskIgnoreList)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (upgradeTaskIgnoreList != null) queryParams.Add("upgradeTaskIgnoreList", ApiClient.ParameterToString(upgradeTaskIgnoreList)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="effectiveBundleListPath"></param> 
        /// <returns>ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo</returns>            
        public ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string effectiveBundleListPath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (effectiveBundleListPath != null) queryParams.Add("effectiveBundleListPath", ApiClient.ParameterToString(effectiveBundleListPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="contentsyncFallbackAuthorizable"></param> 
        /// <param name="contentsyncFallbackUpdateuser"></param> 
        /// <returns>ComDayCqContentsyncImplContentSyncManagerImplInfo</returns>            
        public ComDayCqContentsyncImplContentSyncManagerImplInfo ComDayCqContentsyncImplContentSyncManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string contentsyncFallbackAuthorizable, string contentsyncFallbackUpdateuser)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (contentsyncFallbackAuthorizable != null) queryParams.Add("contentsync.fallback.authorizable", ApiClient.ParameterToString(contentsyncFallbackAuthorizable)); // query parameter
 if (contentsyncFallbackUpdateuser != null) queryParams.Add("contentsync.fallback.updateuser", ApiClient.ParameterToString(contentsyncFallbackUpdateuser)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqContentsyncImplContentSyncManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqContentsyncImplContentSyncManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqContentsyncImplContentSyncManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqContentsyncImplContentSyncManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="largeFileThreshold"></param> 
        /// <param name="largeCommentThreshold"></param> 
        /// <param name="cqDamEnableExtMetaExtraction"></param> 
        /// <returns>ComDayCqDamCommonsHandlerStandardImageHandlerInfo</returns>            
        public ComDayCqDamCommonsHandlerStandardImageHandlerInfo ComDayCqDamCommonsHandlerStandardImageHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold, int? largeCommentThreshold, bool? cqDamEnableExtMetaExtraction)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (largeFileThreshold != null) queryParams.Add("large_file_threshold", ApiClient.ParameterToString(largeFileThreshold)); // query parameter
 if (largeCommentThreshold != null) queryParams.Add("large_comment_threshold", ApiClient.ParameterToString(largeCommentThreshold)); // query parameter
 if (cqDamEnableExtMetaExtraction != null) queryParams.Add("cq.dam.enable.ext.meta.extraction", ApiClient.ParameterToString(cqDamEnableExtMetaExtraction)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsHandlerStandardImageHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsHandlerStandardImageHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCommonsHandlerStandardImageHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCommonsHandlerStandardImageHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="xmpFilterApplyWhitelist"></param> 
        /// <param name="xmpFilterWhitelist"></param> 
        /// <param name="xmpFilterApplyBlacklist"></param> 
        /// <param name="xmpFilterBlacklist"></param> 
        /// <returns>ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo</returns>            
        public ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo ComDayCqDamCommonsMetadataXmpFilterBlackWhite (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpFilterApplyWhitelist, List<string> xmpFilterWhitelist, bool? xmpFilterApplyBlacklist, List<string> xmpFilterBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (xmpFilterApplyWhitelist != null) queryParams.Add("xmp.filter.apply_whitelist", ApiClient.ParameterToString(xmpFilterApplyWhitelist)); // query parameter
 if (xmpFilterWhitelist != null) queryParams.Add("xmp.filter.whitelist", ApiClient.ParameterToString(xmpFilterWhitelist)); // query parameter
 if (xmpFilterApplyBlacklist != null) queryParams.Add("xmp.filter.apply_blacklist", ApiClient.ParameterToString(xmpFilterApplyBlacklist)); // query parameter
 if (xmpFilterBlacklist != null) queryParams.Add("xmp.filter.blacklist", ApiClient.ParameterToString(xmpFilterBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsMetadataXmpFilterBlackWhite: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsMetadataXmpFilterBlackWhite: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="largeFileMin"></param> 
        /// <param name="cacheApply"></param> 
        /// <param name="mimeTypes"></param> 
        /// <returns>ComDayCqDamCommonsUtilImplAssetCacheImplInfo</returns>            
        public ComDayCqDamCommonsUtilImplAssetCacheImplInfo ComDayCqDamCommonsUtilImplAssetCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileMin, bool? cacheApply, List<string> mimeTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (largeFileMin != null) queryParams.Add("large.file.min", ApiClient.ParameterToString(largeFileMin)); // query parameter
 if (cacheApply != null) queryParams.Add("cache.apply", ApiClient.ParameterToString(cacheApply)); // query parameter
 if (mimeTypes != null) queryParams.Add("mime.types", ApiClient.ParameterToString(mimeTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsUtilImplAssetCacheImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCommonsUtilImplAssetCacheImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCommonsUtilImplAssetCacheImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCommonsUtilImplAssetCacheImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamConfigAnnotationPdfDocumentWidth"></param> 
        /// <param name="cqDamConfigAnnotationPdfDocumentHeight"></param> 
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingHorizontal"></param> 
        /// <param name="cqDamConfigAnnotationPdfDocumentPaddingVertical"></param> 
        /// <param name="cqDamConfigAnnotationPdfFontSize"></param> 
        /// <param name="cqDamConfigAnnotationPdfFontColor"></param> 
        /// <param name="cqDamConfigAnnotationPdfFontFamily"></param> 
        /// <param name="cqDamConfigAnnotationPdfFontLight"></param> 
        /// <param name="cqDamConfigAnnotationPdfMarginTextImage"></param> 
        /// <param name="cqDamConfigAnnotationPdfMinImageHeight"></param> 
        /// <param name="cqDamConfigAnnotationPdfReviewStatusWidth"></param> 
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorApproved"></param> 
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorRejected"></param> 
        /// <param name="cqDamConfigAnnotationPdfReviewStatusColorChangesRequested"></param> 
        /// <param name="cqDamConfigAnnotationPdfAnnotationMarkerWidth"></param> 
        /// <param name="cqDamConfigAnnotationPdfAssetMinheight"></param> 
        /// <returns>ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo</returns>            
        public ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigAnnotationPdfDocumentWidth, int? cqDamConfigAnnotationPdfDocumentHeight, int? cqDamConfigAnnotationPdfDocumentPaddingHorizontal, int? cqDamConfigAnnotationPdfDocumentPaddingVertical, int? cqDamConfigAnnotationPdfFontSize, string cqDamConfigAnnotationPdfFontColor, string cqDamConfigAnnotationPdfFontFamily, string cqDamConfigAnnotationPdfFontLight, int? cqDamConfigAnnotationPdfMarginTextImage, int? cqDamConfigAnnotationPdfMinImageHeight, int? cqDamConfigAnnotationPdfReviewStatusWidth, string cqDamConfigAnnotationPdfReviewStatusColorApproved, string cqDamConfigAnnotationPdfReviewStatusColorRejected, string cqDamConfigAnnotationPdfReviewStatusColorChangesRequested, int? cqDamConfigAnnotationPdfAnnotationMarkerWidth, int? cqDamConfigAnnotationPdfAssetMinheight)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamConfigAnnotationPdfDocumentWidth != null) queryParams.Add("cq.dam.config.annotation.pdf.document.width", ApiClient.ParameterToString(cqDamConfigAnnotationPdfDocumentWidth)); // query parameter
 if (cqDamConfigAnnotationPdfDocumentHeight != null) queryParams.Add("cq.dam.config.annotation.pdf.document.height", ApiClient.ParameterToString(cqDamConfigAnnotationPdfDocumentHeight)); // query parameter
 if (cqDamConfigAnnotationPdfDocumentPaddingHorizontal != null) queryParams.Add("cq.dam.config.annotation.pdf.document.padding.horizontal", ApiClient.ParameterToString(cqDamConfigAnnotationPdfDocumentPaddingHorizontal)); // query parameter
 if (cqDamConfigAnnotationPdfDocumentPaddingVertical != null) queryParams.Add("cq.dam.config.annotation.pdf.document.padding.vertical", ApiClient.ParameterToString(cqDamConfigAnnotationPdfDocumentPaddingVertical)); // query parameter
 if (cqDamConfigAnnotationPdfFontSize != null) queryParams.Add("cq.dam.config.annotation.pdf.font.size", ApiClient.ParameterToString(cqDamConfigAnnotationPdfFontSize)); // query parameter
 if (cqDamConfigAnnotationPdfFontColor != null) queryParams.Add("cq.dam.config.annotation.pdf.font.color", ApiClient.ParameterToString(cqDamConfigAnnotationPdfFontColor)); // query parameter
 if (cqDamConfigAnnotationPdfFontFamily != null) queryParams.Add("cq.dam.config.annotation.pdf.font.family", ApiClient.ParameterToString(cqDamConfigAnnotationPdfFontFamily)); // query parameter
 if (cqDamConfigAnnotationPdfFontLight != null) queryParams.Add("cq.dam.config.annotation.pdf.font.light", ApiClient.ParameterToString(cqDamConfigAnnotationPdfFontLight)); // query parameter
 if (cqDamConfigAnnotationPdfMarginTextImage != null) queryParams.Add("cq.dam.config.annotation.pdf.marginTextImage", ApiClient.ParameterToString(cqDamConfigAnnotationPdfMarginTextImage)); // query parameter
 if (cqDamConfigAnnotationPdfMinImageHeight != null) queryParams.Add("cq.dam.config.annotation.pdf.minImageHeight", ApiClient.ParameterToString(cqDamConfigAnnotationPdfMinImageHeight)); // query parameter
 if (cqDamConfigAnnotationPdfReviewStatusWidth != null) queryParams.Add("cq.dam.config.annotation.pdf.reviewStatus.width", ApiClient.ParameterToString(cqDamConfigAnnotationPdfReviewStatusWidth)); // query parameter
 if (cqDamConfigAnnotationPdfReviewStatusColorApproved != null) queryParams.Add("cq.dam.config.annotation.pdf.reviewStatus.color.approved", ApiClient.ParameterToString(cqDamConfigAnnotationPdfReviewStatusColorApproved)); // query parameter
 if (cqDamConfigAnnotationPdfReviewStatusColorRejected != null) queryParams.Add("cq.dam.config.annotation.pdf.reviewStatus.color.rejected", ApiClient.ParameterToString(cqDamConfigAnnotationPdfReviewStatusColorRejected)); // query parameter
 if (cqDamConfigAnnotationPdfReviewStatusColorChangesRequested != null) queryParams.Add("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", ApiClient.ParameterToString(cqDamConfigAnnotationPdfReviewStatusColorChangesRequested)); // query parameter
 if (cqDamConfigAnnotationPdfAnnotationMarkerWidth != null) queryParams.Add("cq.dam.config.annotation.pdf.annotationMarker.width", ApiClient.ParameterToString(cqDamConfigAnnotationPdfAnnotationMarkerWidth)); // query parameter
 if (cqDamConfigAnnotationPdfAssetMinheight != null) queryParams.Add("cq.dam.config.annotation.pdf.asset.minheight", ApiClient.ParameterToString(cqDamConfigAnnotationPdfAssetMinheight)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComDayCqDamCoreImplAssetMoveListenerInfo</returns>            
        public ComDayCqDamCoreImplAssetMoveListenerInfo ComDayCqDamCoreImplAssetMoveListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssetMoveListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssetMoveListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplAssetMoveListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplAssetMoveListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isEnabled"></param> 
        /// <returns>ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo</returns>            
        public ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isEnabled != null) queryParams.Add("isEnabled", ApiClient.ParameterToString(isEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamAdhocAssetSharePrezipMaxcontentsize"></param> 
        /// <returns>ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo</returns>            
        public ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamAdhocAssetSharePrezipMaxcontentsize)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamAdhocAssetSharePrezipMaxcontentsize != null) queryParams.Add("cq.dam.adhoc.asset.share.prezip.maxcontentsize", ApiClient.ParameterToString(cqDamAdhocAssetSharePrezipMaxcontentsize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamImageCacheMaxMemory"></param> 
        /// <param name="cqDamImageCacheMaxAge"></param> 
        /// <param name="cqDamImageCacheMaxDimension"></param> 
        /// <returns>ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo</returns>            
        public ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo ComDayCqDamCoreImplCacheCQBufferedImageCache (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamImageCacheMaxMemory, int? cqDamImageCacheMaxAge, string cqDamImageCacheMaxDimension)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamImageCacheMaxMemory != null) queryParams.Add("cq.dam.image.cache.max.memory", ApiClient.ParameterToString(cqDamImageCacheMaxMemory)); // query parameter
 if (cqDamImageCacheMaxAge != null) queryParams.Add("cq.dam.image.cache.max.age", ApiClient.ParameterToString(cqDamImageCacheMaxAge)); // query parameter
 if (cqDamImageCacheMaxDimension != null) queryParams.Add("cq.dam.image.cache.max.dimension", ApiClient.ParameterToString(cqDamImageCacheMaxDimension)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplCacheCQBufferedImageCache: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplCacheCQBufferedImageCache: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="changeeventlistenerObservedPaths"></param> 
        /// <returns>ComDayCqDamCoreImplDamChangeEventListenerInfo</returns>            
        public ComDayCqDamCoreImplDamChangeEventListenerInfo ComDayCqDamCoreImplDamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> changeeventlistenerObservedPaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (changeeventlistenerObservedPaths != null) queryParams.Add("changeeventlistener.observed.paths", ApiClient.ParameterToString(changeeventlistenerObservedPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamChangeEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamChangeEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplDamChangeEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplDamChangeEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="maxSavedActivities"></param> 
        /// <param name="saveInterval"></param> 
        /// <param name="enableActivityPurge"></param> 
        /// <param name="eventTypes"></param> 
        /// <returns>ComDayCqDamCoreImplDamEventPurgeServiceInfo</returns>            
        public ComDayCqDamCoreImplDamEventPurgeServiceInfo ComDayCqDamCoreImplDamEventPurgeService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedActivities, int? saveInterval, bool? enableActivityPurge, string eventTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (maxSavedActivities != null) queryParams.Add("maxSavedActivities", ApiClient.ParameterToString(maxSavedActivities)); // query parameter
 if (saveInterval != null) queryParams.Add("saveInterval", ApiClient.ParameterToString(saveInterval)); // query parameter
 if (enableActivityPurge != null) queryParams.Add("enableActivityPurge", ApiClient.ParameterToString(enableActivityPurge)); // query parameter
 if (eventTypes != null) queryParams.Add("eventTypes", ApiClient.ParameterToString(eventTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamEventPurgeService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamEventPurgeService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplDamEventPurgeServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplDamEventPurgeServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="eventQueueLength"></param> 
        /// <param name="eventrecorderEnabled"></param> 
        /// <param name="eventrecorderBlacklist"></param> 
        /// <param name="eventrecorderEventtypes"></param> 
        /// <returns>ComDayCqDamCoreImplDamEventRecorderImplInfo</returns>            
        public ComDayCqDamCoreImplDamEventRecorderImplInfo ComDayCqDamCoreImplDamEventRecorderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? eventQueueLength, bool? eventrecorderEnabled, List<string> eventrecorderBlacklist, string eventrecorderEventtypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (eventQueueLength != null) queryParams.Add("event.queue.length", ApiClient.ParameterToString(eventQueueLength)); // query parameter
 if (eventrecorderEnabled != null) queryParams.Add("eventrecorder.enabled", ApiClient.ParameterToString(eventrecorderEnabled)); // query parameter
 if (eventrecorderBlacklist != null) queryParams.Add("eventrecorder.blacklist", ApiClient.ParameterToString(eventrecorderBlacklist)); // query parameter
 if (eventrecorderEventtypes != null) queryParams.Add("eventrecorder.eventtypes", ApiClient.ParameterToString(eventrecorderEventtypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamEventRecorderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplDamEventRecorderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplDamEventRecorderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplDamEventRecorderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComDayCqDamCoreImplEventDamEventAuditListenerInfo</returns>            
        public ComDayCqDamCoreImplEventDamEventAuditListenerInfo ComDayCqDamCoreImplEventDamEventAuditListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplEventDamEventAuditListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplEventDamEventAuditListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplEventDamEventAuditListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplEventDamEventAuditListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamExpiryNotificationSchedulerIstimebased"></param> 
        /// <param name="cqDamExpiryNotificationSchedulerTimebasedRule"></param> 
        /// <param name="cqDamExpiryNotificationSchedulerPeriodRule"></param> 
        /// <param name="sendEmail"></param> 
        /// <param name="assetExpiredLimit"></param> 
        /// <param name="priorNotificationSeconds"></param> 
        /// <param name="cqDamExpiryNotificationUrlProtocol"></param> 
        /// <returns>ComDayCqDamCoreImplExpiryNotificationJobImplInfo</returns>            
        public ComDayCqDamCoreImplExpiryNotificationJobImplInfo ComDayCqDamCoreImplExpiryNotificationJobImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamExpiryNotificationSchedulerIstimebased, string cqDamExpiryNotificationSchedulerTimebasedRule, int? cqDamExpiryNotificationSchedulerPeriodRule, bool? sendEmail, int? assetExpiredLimit, int? priorNotificationSeconds, string cqDamExpiryNotificationUrlProtocol)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamExpiryNotificationSchedulerIstimebased != null) queryParams.Add("cq.dam.expiry.notification.scheduler.istimebased", ApiClient.ParameterToString(cqDamExpiryNotificationSchedulerIstimebased)); // query parameter
 if (cqDamExpiryNotificationSchedulerTimebasedRule != null) queryParams.Add("cq.dam.expiry.notification.scheduler.timebased.rule", ApiClient.ParameterToString(cqDamExpiryNotificationSchedulerTimebasedRule)); // query parameter
 if (cqDamExpiryNotificationSchedulerPeriodRule != null) queryParams.Add("cq.dam.expiry.notification.scheduler.period.rule", ApiClient.ParameterToString(cqDamExpiryNotificationSchedulerPeriodRule)); // query parameter
 if (sendEmail != null) queryParams.Add("send_email", ApiClient.ParameterToString(sendEmail)); // query parameter
 if (assetExpiredLimit != null) queryParams.Add("asset_expired_limit", ApiClient.ParameterToString(assetExpiredLimit)); // query parameter
 if (priorNotificationSeconds != null) queryParams.Add("prior_notification_seconds", ApiClient.ParameterToString(priorNotificationSeconds)); // query parameter
 if (cqDamExpiryNotificationUrlProtocol != null) queryParams.Add("cq.dam.expiry.notification.url.protocol", ApiClient.ParameterToString(cqDamExpiryNotificationUrlProtocol)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplExpiryNotificationJobImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplExpiryNotificationJobImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplExpiryNotificationJobImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplExpiryNotificationJobImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="isEnabled"></param> 
        /// <returns>ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo</returns>            
        public ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? isEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (isEnabled != null) queryParams.Add("isEnabled", ApiClient.ParameterToString(isEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="skipBufferedcache"></param> 
        /// <returns>ComDayCqDamCoreImplGfxCommonsGfxRendererInfo</returns>            
        public ComDayCqDamCoreImplGfxCommonsGfxRendererInfo ComDayCqDamCoreImplGfxCommonsGfxRenderer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? skipBufferedcache)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (skipBufferedcache != null) queryParams.Add("skip.bufferedcache", ApiClient.ParameterToString(skipBufferedcache)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplGfxCommonsGfxRenderer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplGfxCommonsGfxRenderer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplGfxCommonsGfxRendererInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplGfxCommonsGfxRendererInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mimetype"></param> 
        /// <returns>ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo</returns>            
        public ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo ComDayCqDamCoreImplHandlerEPSFormatHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mimetype)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mimetype != null) queryParams.Add("mimetype", ApiClient.ParameterToString(mimetype)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerEPSFormatHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerEPSFormatHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mimetype"></param> 
        /// <returns>ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo</returns>            
        public ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo ComDayCqDamCoreImplHandlerIndesignFormatHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimetype)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mimetype != null) queryParams.Add("mimetype", ApiClient.ParameterToString(mimetype)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerIndesignFormatHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerIndesignFormatHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamEnableExtMetaExtraction"></param> 
        /// <param name="largeFileThreshold"></param> 
        /// <param name="largeCommentThreshold"></param> 
        /// <returns>ComDayCqDamCoreImplHandlerJpegHandlerInfo</returns>            
        public ComDayCqDamCoreImplHandlerJpegHandlerInfo ComDayCqDamCoreImplHandlerJpegHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamEnableExtMetaExtraction, int? largeFileThreshold, int? largeCommentThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamEnableExtMetaExtraction != null) queryParams.Add("cq.dam.enable.ext.meta.extraction", ApiClient.ParameterToString(cqDamEnableExtMetaExtraction)); // query parameter
 if (largeFileThreshold != null) queryParams.Add("large_file_threshold", ApiClient.ParameterToString(largeFileThreshold)); // query parameter
 if (largeCommentThreshold != null) queryParams.Add("large_comment_threshold", ApiClient.ParameterToString(largeCommentThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerJpegHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerJpegHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplHandlerJpegHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplHandlerJpegHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="xmphandlerCqFormats"></param> 
        /// <returns>ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo</returns>            
        public ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo ComDayCqDamCoreImplHandlerXmpNCommXMPHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> xmphandlerCqFormats)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (xmphandlerCqFormats != null) queryParams.Add("xmphandler.cq.formats", ApiClient.ParameterToString(xmphandlerCqFormats)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerXmpNCommXMPHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplHandlerXmpNCommXMPHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jmxObjectname"></param> 
        /// <param name="propertyMeasureEnabled"></param> 
        /// <param name="propertyName"></param> 
        /// <param name="propertyMaxWaitMs"></param> 
        /// <param name="propertyMaxRate"></param> 
        /// <param name="fulltextMeasureEnabled"></param> 
        /// <param name="fulltextName"></param> 
        /// <param name="fulltextMaxWaitMs"></param> 
        /// <param name="fulltextMaxRate"></param> 
        /// <returns>ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo</returns>            
        public ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? propertyMeasureEnabled, string propertyName, int? propertyMaxWaitMs, decimal? propertyMaxRate, bool? fulltextMeasureEnabled, string fulltextName, int? fulltextMaxWaitMs, decimal? fulltextMaxRate)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jmxObjectname != null) queryParams.Add("jmx.objectname", ApiClient.ParameterToString(jmxObjectname)); // query parameter
 if (propertyMeasureEnabled != null) queryParams.Add("property.measure.enabled", ApiClient.ParameterToString(propertyMeasureEnabled)); // query parameter
 if (propertyName != null) queryParams.Add("property.name", ApiClient.ParameterToString(propertyName)); // query parameter
 if (propertyMaxWaitMs != null) queryParams.Add("property.max.wait.ms", ApiClient.ParameterToString(propertyMaxWaitMs)); // query parameter
 if (propertyMaxRate != null) queryParams.Add("property.max.rate", ApiClient.ParameterToString(propertyMaxRate)); // query parameter
 if (fulltextMeasureEnabled != null) queryParams.Add("fulltext.measure.enabled", ApiClient.ParameterToString(fulltextMeasureEnabled)); // query parameter
 if (fulltextName != null) queryParams.Add("fulltext.name", ApiClient.ParameterToString(fulltextName)); // query parameter
 if (fulltextMaxWaitMs != null) queryParams.Add("fulltext.max.wait.ms", ApiClient.ParameterToString(fulltextMaxWaitMs)); // query parameter
 if (fulltextMaxRate != null) queryParams.Add("fulltext.max.rate", ApiClient.ParameterToString(fulltextMaxRate)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jmxObjectname"></param> 
        /// <returns>ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo</returns>            
        public ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jmxObjectname != null) queryParams.Add("jmx.objectname", ApiClient.ParameterToString(jmxObjectname)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jmxObjectname"></param> 
        /// <param name="active"></param> 
        /// <returns>ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo</returns>            
        public ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jmxObjectname, bool? active)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jmxObjectname != null) queryParams.Add("jmx.objectname", ApiClient.ParameterToString(jmxObjectname)); // query parameter
 if (active != null) queryParams.Add("active", ApiClient.ParameterToString(active)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="operation"></param> 
        /// <param name="emailEnabled"></param> 
        /// <returns>ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo</returns>            
        public ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, bool? emailEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (operation != null) queryParams.Add("operation", ApiClient.ParameterToString(operation)); // query parameter
 if (emailEnabled != null) queryParams.Add("emailEnabled", ApiClient.ParameterToString(emailEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="operation"></param> 
        /// <param name="operationIcon"></param> 
        /// <param name="topicName"></param> 
        /// <param name="emailEnabled"></param> 
        /// <returns>ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo</returns>            
        public ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string operation, string operationIcon, string topicName, bool? emailEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (operation != null) queryParams.Add("operation", ApiClient.ParameterToString(operation)); // query parameter
 if (operationIcon != null) queryParams.Add("operationIcon", ApiClient.ParameterToString(operationIcon)); // query parameter
 if (topicName != null) queryParams.Add("topicName", ApiClient.ParameterToString(topicName)); // query parameter
 if (emailEnabled != null) queryParams.Add("emailEnabled", ApiClient.ParameterToString(emailEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletPaths"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="cqDamEnableAnonymous"></param> 
        /// <returns>ComDayCqDamCoreImplLightboxLightboxServletInfo</returns>            
        public ComDayCqDamCoreImplLightboxLightboxServletInfo ComDayCqDamCoreImplLightboxLightboxServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, List<string> slingServletMethods, bool? cqDamEnableAnonymous)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletPaths != null) queryParams.Add("sling.servlet.paths", ApiClient.ParameterToString(slingServletPaths)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (cqDamEnableAnonymous != null) queryParams.Add("cq.dam.enable.anonymous", ApiClient.ParameterToString(cqDamEnableAnonymous)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplLightboxLightboxServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplLightboxLightboxServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplLightboxLightboxServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplLightboxLightboxServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="granitedata"></param> 
        /// <returns>ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo</returns>            
        public ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo ComDayCqDamCoreImplMetadataEditorSelectComponentHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> granitedata)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (granitedata != null) queryParams.Add("granite:data", ApiClient.ParameterToString(granitedata)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMetadataEditorSelectComponentHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMetadataEditorSelectComponentHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamAllowAllMime"></param> 
        /// <param name="cqDamAllowedAssetMimes"></param> 
        /// <returns>ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo</returns>            
        public ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamAllowAllMime, List<string> cqDamAllowedAssetMimes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamAllowAllMime != null) queryParams.Add("cq.dam.allow.all.mime", ApiClient.ParameterToString(cqDamAllowAllMime)); // query parameter
 if (cqDamAllowedAssetMimes != null) queryParams.Add("cq.dam.allowed.asset.mimes", ApiClient.ParameterToString(cqDamAllowedAssetMimes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamDetectAssetMimeFromContent"></param> 
        /// <returns>ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo</returns>            
        public ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDetectAssetMimeFromContent)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamDetectAssetMimeFromContent != null) queryParams.Add("cq.dam.detect.asset.mime.from.content", ApiClient.ParameterToString(cqDamDetectAssetMimeFromContent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamMissingmetadataNotificationSchedulerIstimebased"></param> 
        /// <param name="cqDamMissingmetadataNotificationSchedulerTimebasedRule"></param> 
        /// <param name="cqDamMissingmetadataNotificationSchedulerPeriodRule"></param> 
        /// <param name="cqDamMissingmetadataNotificationRecipient"></param> 
        /// <returns>ComDayCqDamCoreImplMissingMetadataNotificationJobInfo</returns>            
        public ComDayCqDamCoreImplMissingMetadataNotificationJobInfo ComDayCqDamCoreImplMissingMetadataNotificationJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamMissingmetadataNotificationSchedulerIstimebased, string cqDamMissingmetadataNotificationSchedulerTimebasedRule, int? cqDamMissingmetadataNotificationSchedulerPeriodRule, string cqDamMissingmetadataNotificationRecipient)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamMissingmetadataNotificationSchedulerIstimebased != null) queryParams.Add("cq.dam.missingmetadata.notification.scheduler.istimebased", ApiClient.ParameterToString(cqDamMissingmetadataNotificationSchedulerIstimebased)); // query parameter
 if (cqDamMissingmetadataNotificationSchedulerTimebasedRule != null) queryParams.Add("cq.dam.missingmetadata.notification.scheduler.timebased.rule", ApiClient.ParameterToString(cqDamMissingmetadataNotificationSchedulerTimebasedRule)); // query parameter
 if (cqDamMissingmetadataNotificationSchedulerPeriodRule != null) queryParams.Add("cq.dam.missingmetadata.notification.scheduler.period.rule", ApiClient.ParameterToString(cqDamMissingmetadataNotificationSchedulerPeriodRule)); // query parameter
 if (cqDamMissingmetadataNotificationRecipient != null) queryParams.Add("cq.dam.missingmetadata.notification.recipient", ApiClient.ParameterToString(cqDamMissingmetadataNotificationRecipient)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMissingMetadataNotificationJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplMissingMetadataNotificationJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplMissingMetadataNotificationJobInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplMissingMetadataNotificationJobInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="notifyOnComplete"></param> 
        /// <returns>ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo</returns>            
        public ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? notifyOnComplete)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (notifyOnComplete != null) queryParams.Add("Notify on Complete", ApiClient.ParameterToString(notifyOnComplete)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mimeTypes"></param> 
        /// <param name="maxExtract"></param> 
        /// <returns>ComDayCqDamCoreImplProcessTextExtractionProcessInfo</returns>            
        public ComDayCqDamCoreImplProcessTextExtractionProcessInfo ComDayCqDamCoreImplProcessTextExtractionProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes, int? maxExtract)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mimeTypes != null) queryParams.Add("mimeTypes", ApiClient.ParameterToString(mimeTypes)); // query parameter
 if (maxExtract != null) queryParams.Add("maxExtract", ApiClient.ParameterToString(maxExtract)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplProcessTextExtractionProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplProcessTextExtractionProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplProcessTextExtractionProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplProcessTextExtractionProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="xmpPropagate"></param> 
        /// <param name="xmpExcludes"></param> 
        /// <returns>ComDayCqDamCoreImplRenditionMakerImplInfo</returns>            
        public ComDayCqDamCoreImplRenditionMakerImplInfo ComDayCqDamCoreImplRenditionMakerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? xmpPropagate, List<string> xmpExcludes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (xmpPropagate != null) queryParams.Add("xmp.propagate", ApiClient.ParameterToString(xmpPropagate)); // query parameter
 if (xmpExcludes != null) queryParams.Add("xmp.excludes", ApiClient.ParameterToString(xmpExcludes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplRenditionMakerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplRenditionMakerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplRenditionMakerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplRenditionMakerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queryBatchSize"></param> 
        /// <returns>ComDayCqDamCoreImplReportsReportExportServiceInfo</returns>            
        public ComDayCqDamCoreImplReportsReportExportServiceInfo ComDayCqDamCoreImplReportsReportExportService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryBatchSize)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queryBatchSize != null) queryParams.Add("queryBatchSize", ApiClient.ParameterToString(queryBatchSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplReportsReportExportService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplReportsReportExportService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplReportsReportExportServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplReportsReportExportServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="maxSavedReports"></param> 
        /// <param name="timeDuration"></param> 
        /// <param name="enableReportPurge"></param> 
        /// <returns>ComDayCqDamCoreImplReportsReportPurgeServiceInfo</returns>            
        public ComDayCqDamCoreImplReportsReportPurgeServiceInfo ComDayCqDamCoreImplReportsReportPurgeService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, int? maxSavedReports, int? timeDuration, bool? enableReportPurge)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (maxSavedReports != null) queryParams.Add("maxSavedReports", ApiClient.ParameterToString(maxSavedReports)); // query parameter
 if (timeDuration != null) queryParams.Add("timeDuration", ApiClient.ParameterToString(timeDuration)); // query parameter
 if (enableReportPurge != null) queryParams.Add("enableReportPurge", ApiClient.ParameterToString(enableReportPurge)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplReportsReportPurgeService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplReportsReportPurgeService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplReportsReportPurgeServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplReportsReportPurgeServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComDayCqDamCoreImplServletAssetDownloadServletInfo</returns>            
        public ComDayCqDamCoreImplServletAssetDownloadServletInfo ComDayCqDamCoreImplServletAssetDownloadServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetDownloadServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetDownloadServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletAssetDownloadServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletAssetDownloadServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamBatchStatusMaxassets"></param> 
        /// <returns>ComDayCqDamCoreImplServletAssetStatusServletInfo</returns>            
        public ComDayCqDamCoreImplServletAssetStatusServletInfo ComDayCqDamCoreImplServletAssetStatusServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchStatusMaxassets)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamBatchStatusMaxassets != null) queryParams.Add("cq.dam.batch.status.maxassets", ApiClient.ParameterToString(cqDamBatchStatusMaxassets)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetStatusServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetStatusServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletAssetStatusServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletAssetStatusServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamBatchIndesignMaxassets"></param> 
        /// <returns>ComDayCqDamCoreImplServletAssetXMPSearchServletInfo</returns>            
        public ComDayCqDamCoreImplServletAssetXMPSearchServletInfo ComDayCqDamCoreImplServletAssetXMPSearchServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamBatchIndesignMaxassets)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamBatchIndesignMaxassets != null) queryParams.Add("cq.dam.batch.indesign.maxassets", ApiClient.ParameterToString(cqDamBatchIndesignMaxassets)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetXMPSearchServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletAssetXMPSearchServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletAssetXMPSearchServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletAssetXMPSearchServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamBatchMetadataAssetDefault"></param> 
        /// <param name="cqDamBatchMetadataCollectionDefault"></param> 
        /// <param name="cqDamBatchMetadataMaxresources"></param> 
        /// <returns>ComDayCqDamCoreImplServletBatchMetadataServletInfo</returns>            
        public ComDayCqDamCoreImplServletBatchMetadataServletInfo ComDayCqDamCoreImplServletBatchMetadataServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchMetadataAssetDefault, List<string> cqDamBatchMetadataCollectionDefault, int? cqDamBatchMetadataMaxresources)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamBatchMetadataAssetDefault != null) queryParams.Add("cq.dam.batch.metadata.asset.default", ApiClient.ParameterToString(cqDamBatchMetadataAssetDefault)); // query parameter
 if (cqDamBatchMetadataCollectionDefault != null) queryParams.Add("cq.dam.batch.metadata.collection.default", ApiClient.ParameterToString(cqDamBatchMetadataCollectionDefault)); // query parameter
 if (cqDamBatchMetadataMaxresources != null) queryParams.Add("cq.dam.batch.metadata.maxresources", ApiClient.ParameterToString(cqDamBatchMetadataMaxresources)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletBatchMetadataServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletBatchMetadataServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletBatchMetadataServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletBatchMetadataServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletResourceTypes"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="cqDamDrmEnable"></param> 
        /// <returns>ComDayCqDamCoreImplServletBinaryProviderServletInfo</returns>            
        public ComDayCqDamCoreImplServletBinaryProviderServletInfo ComDayCqDamCoreImplServletBinaryProviderServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, List<string> slingServletMethods, bool? cqDamDrmEnable)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletResourceTypes != null) queryParams.Add("sling.servlet.resourceTypes", ApiClient.ParameterToString(slingServletResourceTypes)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (cqDamDrmEnable != null) queryParams.Add("cq.dam.drm.enable", ApiClient.ParameterToString(cqDamDrmEnable)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletBinaryProviderServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletBinaryProviderServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletBinaryProviderServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletBinaryProviderServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamBatchCollectionProperties"></param> 
        /// <param name="cqDamBatchCollectionMaxcollections"></param> 
        /// <returns>ComDayCqDamCoreImplServletCollectionServletInfo</returns>            
        public ComDayCqDamCoreImplServletCollectionServletInfo ComDayCqDamCoreImplServletCollectionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionProperties, int? cqDamBatchCollectionMaxcollections)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamBatchCollectionProperties != null) queryParams.Add("cq.dam.batch.collection.properties", ApiClient.ParameterToString(cqDamBatchCollectionProperties)); // query parameter
 if (cqDamBatchCollectionMaxcollections != null) queryParams.Add("cq.dam.batch.collection.maxcollections", ApiClient.ParameterToString(cqDamBatchCollectionMaxcollections)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCollectionServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCollectionServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletCollectionServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletCollectionServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamBatchCollectionsProperties"></param> 
        /// <param name="cqDamBatchCollectionsLimit"></param> 
        /// <returns>ComDayCqDamCoreImplServletCollectionsServletInfo</returns>            
        public ComDayCqDamCoreImplServletCollectionsServletInfo ComDayCqDamCoreImplServletCollectionsServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamBatchCollectionsProperties, int? cqDamBatchCollectionsLimit)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamBatchCollectionsProperties != null) queryParams.Add("cq.dam.batch.collections.properties", ApiClient.ParameterToString(cqDamBatchCollectionsProperties)); // query parameter
 if (cqDamBatchCollectionsLimit != null) queryParams.Add("cq.dam.batch.collections.limit", ApiClient.ParameterToString(cqDamBatchCollectionsLimit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCollectionsServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCollectionsServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletCollectionsServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletCollectionsServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="moreInfo"></param> 
        /// <param name="mntoverlaydamguicontentassetsmoreinfoHtmlpath"></param> 
        /// <returns>ComDayCqDamCoreImplServletCompanionServletInfo</returns>            
        public ComDayCqDamCoreImplServletCompanionServletInfo ComDayCqDamCoreImplServletCompanionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string moreInfo, string mntoverlaydamguicontentassetsmoreinfoHtmlpath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (moreInfo != null) queryParams.Add("More Info", ApiClient.ParameterToString(moreInfo)); // query parameter
 if (mntoverlaydamguicontentassetsmoreinfoHtmlpath != null) queryParams.Add("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}", ApiClient.ParameterToString(mntoverlaydamguicontentassetsmoreinfoHtmlpath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCompanionServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCompanionServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletCompanionServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletCompanionServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="detectDuplicate"></param> 
        /// <returns>ComDayCqDamCoreImplServletCreateAssetServletInfo</returns>            
        public ComDayCqDamCoreImplServletCreateAssetServletInfo ComDayCqDamCoreImplServletCreateAssetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? detectDuplicate)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (detectDuplicate != null) queryParams.Add("detect_duplicate", ApiClient.ParameterToString(detectDuplicate)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCreateAssetServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletCreateAssetServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletCreateAssetServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletCreateAssetServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqMimeTypeBlacklist"></param> 
        /// <param name="cqDamEmptyMime"></param> 
        /// <returns>ComDayCqDamCoreImplServletDamContentDispositionFilterInfo</returns>            
        public ComDayCqDamCoreImplServletDamContentDispositionFilterInfo ComDayCqDamCoreImplServletDamContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqMimeTypeBlacklist, bool? cqDamEmptyMime)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqMimeTypeBlacklist != null) queryParams.Add("cq.mime.type.blacklist", ApiClient.ParameterToString(cqMimeTypeBlacklist)); // query parameter
 if (cqDamEmptyMime != null) queryParams.Add("cq.dam.empty.mime", ApiClient.ParameterToString(cqDamEmptyMime)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletDamContentDispositionFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletDamContentDispositionFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletDamContentDispositionFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletDamContentDispositionFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamCoreGuidlookupfilterEnabled"></param> 
        /// <returns>ComDayCqDamCoreImplServletGuidLookupFilterInfo</returns>            
        public ComDayCqDamCoreImplServletGuidLookupFilterInfo ComDayCqDamCoreImplServletGuidLookupFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamCoreGuidlookupfilterEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamCoreGuidlookupfilterEnabled != null) queryParams.Add("cq.dam.core.guidlookupfilter.enabled", ApiClient.ParameterToString(cqDamCoreGuidlookupfilterEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletGuidLookupFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletGuidLookupFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletGuidLookupFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletGuidLookupFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamSyncWorkflowId"></param> 
        /// <param name="cqDamSyncFolderTypes"></param> 
        /// <returns>ComDayCqDamCoreImplServletHealthCheckServletInfo</returns>            
        public ComDayCqDamCoreImplServletHealthCheckServletInfo ComDayCqDamCoreImplServletHealthCheckServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqDamSyncWorkflowId, List<string> cqDamSyncFolderTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamSyncWorkflowId != null) queryParams.Add("cq.dam.sync.workflow.id", ApiClient.ParameterToString(cqDamSyncWorkflowId)); // query parameter
 if (cqDamSyncFolderTypes != null) queryParams.Add("cq.dam.sync.folder.types", ApiClient.ParameterToString(cqDamSyncFolderTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletHealthCheckServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletHealthCheckServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletHealthCheckServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletHealthCheckServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletResourceTypes"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="slingServletExtensions"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <returns>ComDayCqDamCoreImplServletMetadataGetServletInfo</returns>            
        public ComDayCqDamCoreImplServletMetadataGetServletInfo ComDayCqDamCoreImplServletMetadataGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletMethods, string slingServletExtensions, string slingServletSelectors)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletResourceTypes != null) queryParams.Add("sling.servlet.resourceTypes", ApiClient.ParameterToString(slingServletResourceTypes)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (slingServletExtensions != null) queryParams.Add("sling.servlet.extensions", ApiClient.ParameterToString(slingServletExtensions)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletMetadataGetServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletMetadataGetServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletMetadataGetServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletMetadataGetServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamDrmEnable"></param> 
        /// <returns>ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo</returns>            
        public ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamDrmEnable)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamDrmEnable != null) queryParams.Add("cq.dam.drm.enable", ApiClient.ParameterToString(cqDamDrmEnable)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletResourceTypes"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="downloadConfig"></param> 
        /// <param name="viewSelector"></param> 
        /// <param name="sendEmail"></param> 
        /// <returns>ComDayCqDamCoreImplServletResourceCollectionServletInfo</returns>            
        public ComDayCqDamCoreImplServletResourceCollectionServletInfo ComDayCqDamCoreImplServletResourceCollectionServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletResourceTypes, string slingServletMethods, string slingServletSelectors, string downloadConfig, string viewSelector, bool? sendEmail)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletResourceTypes != null) queryParams.Add("sling.servlet.resourceTypes", ApiClient.ParameterToString(slingServletResourceTypes)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (downloadConfig != null) queryParams.Add("download.config", ApiClient.ParameterToString(downloadConfig)); // query parameter
 if (viewSelector != null) queryParams.Add("view.selector", ApiClient.ParameterToString(viewSelector)); // query parameter
 if (sendEmail != null) queryParams.Add("send_email", ApiClient.ParameterToString(sendEmail)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletResourceCollectionServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplServletResourceCollectionServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplServletResourceCollectionServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplServletResourceCollectionServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="createPreviewEnabled"></param> 
        /// <param name="updatePreviewEnabled"></param> 
        /// <param name="queueSize"></param> 
        /// <param name="folderPreviewRenditionRegex"></param> 
        /// <returns>ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo</returns>            
        public ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? createPreviewEnabled, bool? updatePreviewEnabled, int? queueSize, string folderPreviewRenditionRegex)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (createPreviewEnabled != null) queryParams.Add("createPreviewEnabled", ApiClient.ParameterToString(createPreviewEnabled)); // query parameter
 if (updatePreviewEnabled != null) queryParams.Add("updatePreviewEnabled", ApiClient.ParameterToString(updatePreviewEnabled)); // query parameter
 if (queueSize != null) queryParams.Add("queueSize", ApiClient.ParameterToString(queueSize)); // query parameter
 if (folderPreviewRenditionRegex != null) queryParams.Add("folderPreviewRenditionRegex", ApiClient.ParameterToString(folderPreviewRenditionRegex)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamConfigUnzipMaxuncompressedsize"></param> 
        /// <param name="cqDamConfigUnzipEncoding"></param> 
        /// <returns>ComDayCqDamCoreImplUnzipUnzipConfigInfo</returns>            
        public ComDayCqDamCoreImplUnzipUnzipConfigInfo ComDayCqDamCoreImplUnzipUnzipConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamConfigUnzipMaxuncompressedsize, string cqDamConfigUnzipEncoding)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamConfigUnzipMaxuncompressedsize != null) queryParams.Add("cq.dam.config.unzip.maxuncompressedsize", ApiClient.ParameterToString(cqDamConfigUnzipMaxuncompressedsize)); // query parameter
 if (cqDamConfigUnzipEncoding != null) queryParams.Add("cq.dam.config.unzip.encoding", ApiClient.ParameterToString(cqDamConfigUnzipEncoding)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplUnzipUnzipConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreImplUnzipUnzipConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreImplUnzipUnzipConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreImplUnzipUnzipConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="cqDamEnableSha1"></param> 
        /// <returns>ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo</returns>            
        public ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo ComDayCqDamCoreProcessExifToolExtractMetadataProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (cqDamEnableSha1 != null) queryParams.Add("cq.dam.enable.sha1", ApiClient.ParameterToString(cqDamEnableSha1)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessExifToolExtractMetadataProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessExifToolExtractMetadataProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="cqDamEnableSha1"></param> 
        /// <returns>ComDayCqDamCoreProcessExtractMetadataProcessInfo</returns>            
        public ComDayCqDamCoreProcessExtractMetadataProcessInfo ComDayCqDamCoreProcessExtractMetadataProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (cqDamEnableSha1 != null) queryParams.Add("cq.dam.enable.sha1", ApiClient.ParameterToString(cqDamEnableSha1)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessExtractMetadataProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessExtractMetadataProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreProcessExtractMetadataProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreProcessExtractMetadataProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="cqDamEnableSha1"></param> 
        /// <param name="cqDamMetadataXssprotectedProperties"></param> 
        /// <returns>ComDayCqDamCoreProcessMetadataProcessorProcessInfo</returns>            
        public ComDayCqDamCoreProcessMetadataProcessorProcessInfo ComDayCqDamCoreProcessMetadataProcessorProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? cqDamEnableSha1, List<string> cqDamMetadataXssprotectedProperties)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (cqDamEnableSha1 != null) queryParams.Add("cq.dam.enable.sha1", ApiClient.ParameterToString(cqDamEnableSha1)); // query parameter
 if (cqDamMetadataXssprotectedProperties != null) queryParams.Add("cq.dam.metadata.xssprotected.properties", ApiClient.ParameterToString(cqDamMetadataXssprotectedProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessMetadataProcessorProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamCoreProcessMetadataProcessorProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamCoreProcessMetadataProcessorProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamCoreProcessMetadataProcessorProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="executableSearchpath"></param> 
        /// <returns>ComDayCqDamHandlerFfmpegLocatorImplInfo</returns>            
        public ComDayCqDamHandlerFfmpegLocatorImplInfo ComDayCqDamHandlerFfmpegLocatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> executableSearchpath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (executableSearchpath != null) queryParams.Add("executable.searchpath", ApiClient.ParameterToString(executableSearchpath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerFfmpegLocatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerFfmpegLocatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamHandlerFfmpegLocatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamHandlerFfmpegLocatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="fontmgrSystemFontDir"></param> 
        /// <param name="fontmgrAdobeFontDir"></param> 
        /// <param name="fontmgrCustomerFontDir"></param> 
        /// <returns>ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo</returns>            
        public ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> fontmgrSystemFontDir, string fontmgrAdobeFontDir, string fontmgrCustomerFontDir)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (fontmgrSystemFontDir != null) queryParams.Add("fontmgr.system.font.dir", ApiClient.ParameterToString(fontmgrSystemFontDir)); // query parameter
 if (fontmgrAdobeFontDir != null) queryParams.Add("fontmgr.adobe.font.dir", ApiClient.ParameterToString(fontmgrAdobeFontDir)); // query parameter
 if (fontmgrCustomerFontDir != null) queryParams.Add("fontmgr.customer.font.dir", ApiClient.ParameterToString(fontmgrCustomerFontDir)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="rasterAnnotation"></param> 
        /// <returns>ComDayCqDamHandlerStandardPdfPdfHandlerInfo</returns>            
        public ComDayCqDamHandlerStandardPdfPdfHandlerInfo ComDayCqDamHandlerStandardPdfPdfHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (rasterAnnotation != null) queryParams.Add("raster.annotation", ApiClient.ParameterToString(rasterAnnotation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPdfPdfHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPdfPdfHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamHandlerStandardPdfPdfHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamHandlerStandardPdfPdfHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="rasterAnnotation"></param> 
        /// <returns>ComDayCqDamHandlerStandardPsPostScriptHandlerInfo</returns>            
        public ComDayCqDamHandlerStandardPsPostScriptHandlerInfo ComDayCqDamHandlerStandardPsPostScriptHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? rasterAnnotation)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (rasterAnnotation != null) queryParams.Add("raster.annotation", ApiClient.ParameterToString(rasterAnnotation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPsPostScriptHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPsPostScriptHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamHandlerStandardPsPostScriptHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamHandlerStandardPsPostScriptHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="largeFileThreshold"></param> 
        /// <returns>ComDayCqDamHandlerStandardPsdPsdHandlerInfo</returns>            
        public ComDayCqDamHandlerStandardPsdPsdHandlerInfo ComDayCqDamHandlerStandardPsdPsdHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? largeFileThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (largeFileThreshold != null) queryParams.Add("large_file_threshold", ApiClient.ParameterToString(largeFileThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPsdPsdHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamHandlerStandardPsdPsdHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamHandlerStandardPsdPsdHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamHandlerStandardPsdPsdHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enableMultisession"></param> 
        /// <param name="idsCcEnable"></param> 
        /// <param name="enableRetry"></param> 
        /// <param name="enableRetryScripterror"></param> 
        /// <param name="externalizerDomainCqhost"></param> 
        /// <param name="externalizerDomainHttp"></param> 
        /// <returns>ComDayCqDamIdsImplIDSJobProcessorInfo</returns>            
        public ComDayCqDamIdsImplIDSJobProcessorInfo ComDayCqDamIdsImplIDSJobProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableMultisession, bool? idsCcEnable, bool? enableRetry, bool? enableRetryScripterror, string externalizerDomainCqhost, string externalizerDomainHttp)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enableMultisession != null) queryParams.Add("enable.multisession", ApiClient.ParameterToString(enableMultisession)); // query parameter
 if (idsCcEnable != null) queryParams.Add("ids.cc.enable", ApiClient.ParameterToString(idsCcEnable)); // query parameter
 if (enableRetry != null) queryParams.Add("enable.retry", ApiClient.ParameterToString(enableRetry)); // query parameter
 if (enableRetryScripterror != null) queryParams.Add("enable.retry.scripterror", ApiClient.ParameterToString(enableRetryScripterror)); // query parameter
 if (externalizerDomainCqhost != null) queryParams.Add("externalizer.domain.cqhost", ApiClient.ParameterToString(externalizerDomainCqhost)); // query parameter
 if (externalizerDomainHttp != null) queryParams.Add("externalizer.domain.http", ApiClient.ParameterToString(externalizerDomainHttp)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamIdsImplIDSJobProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamIdsImplIDSJobProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamIdsImplIDSJobProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamIdsImplIDSJobProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxErrorsToBlacklist"></param> 
        /// <param name="retryIntervalToWhitelist"></param> 
        /// <param name="connectTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="connectionUseMax"></param> 
        /// <returns>ComDayCqDamIdsImplIDSPoolManagerImplInfo</returns>            
        public ComDayCqDamIdsImplIDSPoolManagerImplInfo ComDayCqDamIdsImplIDSPoolManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxErrorsToBlacklist, int? retryIntervalToWhitelist, int? connectTimeout, int? socketTimeout, string processLabel, int? connectionUseMax)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxErrorsToBlacklist != null) queryParams.Add("max.errors.to.blacklist", ApiClient.ParameterToString(maxErrorsToBlacklist)); // query parameter
 if (retryIntervalToWhitelist != null) queryParams.Add("retry.interval.to.whitelist", ApiClient.ParameterToString(retryIntervalToWhitelist)); // query parameter
 if (connectTimeout != null) queryParams.Add("connect.timeout", ApiClient.ParameterToString(connectTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socket.timeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (connectionUseMax != null) queryParams.Add("connection.use.max", ApiClient.ParameterToString(connectionUseMax)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamIdsImplIDSPoolManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamIdsImplIDSPoolManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamIdsImplIDSPoolManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamIdsImplIDSPoolManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="extractPages"></param> 
        /// <returns>ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo</returns>            
        public ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo ComDayCqDamInddImplHandlerIndesignXMPHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, bool? extractPages)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (extractPages != null) queryParams.Add("extract.pages", ApiClient.ParameterToString(extractPages)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddImplHandlerIndesignXMPHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddImplHandlerIndesignXMPHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="snippetcreationMaxcollections"></param> 
        /// <returns>ComDayCqDamInddImplServletSnippetCreationServletInfo</returns>            
        public ComDayCqDamInddImplServletSnippetCreationServletInfo ComDayCqDamInddImplServletSnippetCreationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? snippetcreationMaxcollections)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (snippetcreationMaxcollections != null) queryParams.Add("snippetcreation.maxcollections", ApiClient.ParameterToString(snippetcreationMaxcollections)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddImplServletSnippetCreationServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddImplServletSnippetCreationServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamInddImplServletSnippetCreationServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamInddImplServletSnippetCreationServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <param name="cqDamInddPagesRegex"></param> 
        /// <param name="idsJobDecoupled"></param> 
        /// <param name="idsJobWorkflowModel"></param> 
        /// <returns>ComDayCqDamInddProcessINDDMediaExtractProcessInfo</returns>            
        public ComDayCqDamInddProcessINDDMediaExtractProcessInfo ComDayCqDamInddProcessINDDMediaExtractProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel, string cqDamInddPagesRegex, bool? idsJobDecoupled, string idsJobWorkflowModel)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
 if (cqDamInddPagesRegex != null) queryParams.Add("cq.dam.indd.pages.regex", ApiClient.ParameterToString(cqDamInddPagesRegex)); // query parameter
 if (idsJobDecoupled != null) queryParams.Add("ids.job.decoupled", ApiClient.ParameterToString(idsJobDecoupled)); // query parameter
 if (idsJobWorkflowModel != null) queryParams.Add("ids.job.workflow.model", ApiClient.ParameterToString(idsJobWorkflowModel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddProcessINDDMediaExtractProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamInddProcessINDDMediaExtractProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamInddProcessINDDMediaExtractProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamInddProcessINDDMediaExtractProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="batchCommitSize"></param> 
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo</returns>            
        public ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? batchCommitSize)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (batchCommitSize != null) queryParams.Add("batch.commit.size", ApiClient.ParameterToString(batchCommitSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <returns>ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo</returns>            
        public ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="deleteZipFile"></param> 
        /// <returns>ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo</returns>            
        public ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deleteZipFile)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (deleteZipFile != null) queryParams.Add("delete.zip.file", ApiClient.ParameterToString(deleteZipFile)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamS7damDynamicmediaconfigeventlistenerEnabled"></param> 
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo</returns>            
        public ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDynamicmediaconfigeventlistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamS7damDynamicmediaconfigeventlistenerEnabled != null) queryParams.Add("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled", ApiClient.ParameterToString(cqDamS7damDynamicmediaconfigeventlistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="schedulerConcurrent"></param> 
        /// <returns>ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo</returns>            
        public ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (schedulerConcurrent != null) queryParams.Add("scheduler.concurrent", ApiClient.ParameterToString(schedulerConcurrent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingPostOperation"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <returns>ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo</returns>            
        public ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo ComDayCqDamS7damCommonPostServletsSetCreateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingPostOperation != null) queryParams.Add("sling.post.operation", ApiClient.ParameterToString(slingPostOperation)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonPostServletsSetCreateHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonPostServletsSetCreateHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingPostOperation"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <returns>ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo</returns>            
        public ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo ComDayCqDamS7damCommonPostServletsSetModifyHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingPostOperation, string slingServletMethods)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingPostOperation != null) queryParams.Add("sling.post.operation", ApiClient.ParameterToString(slingPostOperation)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonPostServletsSetModifyHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonPostServletsSetModifyHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="processLabel"></param> 
        /// <returns>ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo</returns>            
        public ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string processLabel)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (processLabel != null) queryParams.Add("process.label", ApiClient.ParameterToString(processLabel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamS7damDamchangeeventlistenerEnabled"></param> 
        /// <returns>ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo</returns>            
        public ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo ComDayCqDamS7damCommonS7damDamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamS7damDamchangeeventlistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamS7damDamchangeeventlistenerEnabled != null) queryParams.Add("cq.dam.s7dam.damchangeeventlistener.enabled", ApiClient.ParameterToString(cqDamS7damDamchangeeventlistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonS7damDamChangeEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonS7damDamChangeEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletPaths"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <returns>ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo</returns>            
        public ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo ComDayCqDamS7damCommonServletsS7damProductInfoServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletPaths, string slingServletMethods)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletPaths != null) queryParams.Add("sling.servlet.paths", ApiClient.ParameterToString(slingServletPaths)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonServletsS7damProductInfoServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonServletsS7damProductInfoServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceHttpReadtimeoutName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceHttpMaxretrycountName"></param> 
        /// <param name="cqDamS7damVideoproxyclientserviceUploadprogressIntervalName"></param> 
        /// <returns>ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo</returns>            
        public ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName, int? cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName, int? cqDamS7damVideoproxyclientserviceHttpReadtimeoutName, int? cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName, int? cqDamS7damVideoproxyclientserviceHttpMaxretrycountName, int? cqDamS7damVideoproxyclientserviceUploadprogressIntervalName)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceHttpReadtimeoutName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceHttpReadtimeoutName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceHttpMaxretrycountName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceHttpMaxretrycountName)); // query parameter
 if (cqDamS7damVideoproxyclientserviceUploadprogressIntervalName != null) queryParams.Add("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name", ApiClient.ParameterToString(cqDamS7damVideoproxyclientserviceUploadprogressIntervalName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamScene7ApiclientRecordsperpageNofilterName"></param> 
        /// <param name="cqDamScene7ApiclientRecordsperpageWithfilterName"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7APIClientImplInfo</returns>            
        public ComDayCqDamScene7ImplScene7APIClientImplInfo ComDayCqDamScene7ImplScene7APIClientImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7ApiclientRecordsperpageNofilterName, int? cqDamScene7ApiclientRecordsperpageWithfilterName)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamScene7ApiclientRecordsperpageNofilterName != null) queryParams.Add("cq.dam.scene7.apiclient.recordsperpage.nofilter.name", ApiClient.ParameterToString(cqDamScene7ApiclientRecordsperpageNofilterName)); // query parameter
 if (cqDamScene7ApiclientRecordsperpageWithfilterName != null) queryParams.Add("cq.dam.scene7.apiclient.recordsperpage.withfilter.name", ApiClient.ParameterToString(cqDamScene7ApiclientRecordsperpageWithfilterName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7APIClientImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7APIClientImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7APIClientImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7APIClientImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamScene7AssetmimetypeserviceMapping"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo</returns>            
        public ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqDamScene7AssetmimetypeserviceMapping)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamScene7AssetmimetypeserviceMapping != null) queryParams.Add("cq.dam.scene7.assetmimetypeservice.mapping", ApiClient.ParameterToString(cqDamScene7AssetmimetypeserviceMapping)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamScene7ConfigurationeventlistenerEnabled"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo</returns>            
        public ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo ComDayCqDamScene7ImplScene7ConfigurationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7ConfigurationeventlistenerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamScene7ConfigurationeventlistenerEnabled != null) queryParams.Add("cq.dam.scene7.configurationeventlistener.enabled", ApiClient.ParameterToString(cqDamScene7ConfigurationeventlistenerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7ConfigurationEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7ConfigurationEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamScene7DamchangeeventlistenerEnabled"></param> 
        /// <param name="cqDamScene7DamchangeeventlistenerObservedPaths"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo</returns>            
        public ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo ComDayCqDamScene7ImplScene7DamChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqDamScene7DamchangeeventlistenerEnabled, List<string> cqDamScene7DamchangeeventlistenerObservedPaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamScene7DamchangeeventlistenerEnabled != null) queryParams.Add("cq.dam.scene7.damchangeeventlistener.enabled", ApiClient.ParameterToString(cqDamScene7DamchangeeventlistenerEnabled)); // query parameter
 if (cqDamScene7DamchangeeventlistenerObservedPaths != null) queryParams.Add("cq.dam.scene7.damchangeeventlistener.observed.paths", ApiClient.ParameterToString(cqDamScene7DamchangeeventlistenerObservedPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7DamChangeEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7DamChangeEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="scene7FlashTemplatesRti"></param> 
        /// <param name="scene7FlashTemplatesRsi"></param> 
        /// <param name="scene7FlashTemplatesRb"></param> 
        /// <param name="scene7FlashTemplatesRurl"></param> 
        /// <param name="scene7FlashTemplateUrlFormatParameter"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo</returns>            
        public ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string scene7FlashTemplatesRti, string scene7FlashTemplatesRsi, string scene7FlashTemplatesRb, string scene7FlashTemplatesRurl, string scene7FlashTemplateUrlFormatParameter)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (scene7FlashTemplatesRti != null) queryParams.Add("scene7FlashTemplates.rti", ApiClient.ParameterToString(scene7FlashTemplatesRti)); // query parameter
 if (scene7FlashTemplatesRsi != null) queryParams.Add("scene7FlashTemplates.rsi", ApiClient.ParameterToString(scene7FlashTemplatesRsi)); // query parameter
 if (scene7FlashTemplatesRb != null) queryParams.Add("scene7FlashTemplates.rb", ApiClient.ParameterToString(scene7FlashTemplatesRb)); // query parameter
 if (scene7FlashTemplatesRurl != null) queryParams.Add("scene7FlashTemplates.rurl", ApiClient.ParameterToString(scene7FlashTemplatesRurl)); // query parameter
 if (scene7FlashTemplateUrlFormatParameter != null) queryParams.Add("scene7FlashTemplate.urlFormatParameter", ApiClient.ParameterToString(scene7FlashTemplateUrlFormatParameter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqDamScene7UploadserviceActivejobtimeoutLabel"></param> 
        /// <param name="cqDamScene7UploadserviceConnectionmaxperrouteLabel"></param> 
        /// <returns>ComDayCqDamScene7ImplScene7UploadServiceImplInfo</returns>            
        public ComDayCqDamScene7ImplScene7UploadServiceImplInfo ComDayCqDamScene7ImplScene7UploadServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? cqDamScene7UploadserviceActivejobtimeoutLabel, int? cqDamScene7UploadserviceConnectionmaxperrouteLabel)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqDamScene7UploadserviceActivejobtimeoutLabel != null) queryParams.Add("cq.dam.scene7.uploadservice.activejobtimeout.label", ApiClient.ParameterToString(cqDamScene7UploadserviceActivejobtimeoutLabel)); // query parameter
 if (cqDamScene7UploadserviceConnectionmaxperrouteLabel != null) queryParams.Add("cq.dam.scene7.uploadservice.connectionmaxperroute.label", ApiClient.ParameterToString(cqDamScene7UploadserviceConnectionmaxperrouteLabel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7UploadServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamScene7ImplScene7UploadServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamScene7ImplScene7UploadServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamScene7ImplScene7UploadServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="getCacheExpirationUnit"></param> 
        /// <param name="getCacheExpirationValue"></param> 
        /// <returns>ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo</returns>            
        public ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string getCacheExpirationUnit, int? getCacheExpirationValue)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (getCacheExpirationUnit != null) queryParams.Add("getCacheExpirationUnit", ApiClient.ParameterToString(getCacheExpirationUnit)); // query parameter
 if (getCacheExpirationValue != null) queryParams.Add("getCacheExpirationValue", ApiClient.ParameterToString(getCacheExpirationValue)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="locale"></param> 
        /// <param name="imsConfig"></param> 
        /// <returns>ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo</returns>            
        public ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo ComDayCqDamStockIntegrationImplConfigurationStockConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string locale, string imsConfig)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (locale != null) queryParams.Add("locale", ApiClient.ParameterToString(locale)); // query parameter
 if (imsConfig != null) queryParams.Add("imsConfig", ApiClient.ParameterToString(imsConfig)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamStockIntegrationImplConfigurationStockConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamStockIntegrationImplConfigurationStockConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>ComDayCqDamVideoImplServletVideoTestServletInfo</returns>            
        public ComDayCqDamVideoImplServletVideoTestServletInfo ComDayCqDamVideoImplServletVideoTestServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamVideoImplServletVideoTestServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqDamVideoImplServletVideoTestServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqDamVideoImplServletVideoTestServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqDamVideoImplServletVideoTestServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxWidth"></param> 
        /// <param name="maxHeight"></param> 
        /// <returns>ComDayCqExtwidgetServletsImageSpriteServletInfo</returns>            
        public ComDayCqExtwidgetServletsImageSpriteServletInfo ComDayCqExtwidgetServletsImageSpriteServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxWidth, int? maxHeight)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxWidth != null) queryParams.Add("maxWidth", ApiClient.ParameterToString(maxWidth)); // query parameter
 if (maxHeight != null) queryParams.Add("maxHeight", ApiClient.ParameterToString(maxHeight)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqExtwidgetServletsImageSpriteServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqExtwidgetServletsImageSpriteServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqExtwidgetServletsImageSpriteServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqExtwidgetServletsImageSpriteServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fontpath"></param> 
        /// <param name="oversamplingFactor"></param> 
        /// <returns>ComDayCqImageInternalFontFontHelperInfo</returns>            
        public ComDayCqImageInternalFontFontHelperInfo ComDayCqImageInternalFontFontHelper (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> fontpath, int? oversamplingFactor)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.image.internal.font.FontHelper";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fontpath != null) queryParams.Add("fontpath", ApiClient.ParameterToString(fontpath)); // query parameter
 if (oversamplingFactor != null) queryParams.Add("oversamplingFactor", ApiClient.ParameterToString(oversamplingFactor)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqImageInternalFontFontHelper: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqImageInternalFontFontHelper: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqImageInternalFontFontHelperInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqImageInternalFontFontHelperInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="clusterLevelEnable"></param> 
        /// <param name="clusterMasterLevel"></param> 
        /// <param name="clusterSlaveLevel"></param> 
        /// <returns>ComDayCqJcrclustersupportClusterStartLevelControllerInfo</returns>            
        public ComDayCqJcrclustersupportClusterStartLevelControllerInfo ComDayCqJcrclustersupportClusterStartLevelController (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? clusterLevelEnable, int? clusterMasterLevel, int? clusterSlaveLevel)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (clusterLevelEnable != null) queryParams.Add("cluster.level.enable", ApiClient.ParameterToString(clusterLevelEnable)); // query parameter
 if (clusterMasterLevel != null) queryParams.Add("cluster.master.level", ApiClient.ParameterToString(clusterMasterLevel)); // query parameter
 if (clusterSlaveLevel != null) queryParams.Add("cluster.slave.level", ApiClient.ParameterToString(clusterSlaveLevel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqJcrclustersupportClusterStartLevelController: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqJcrclustersupportClusterStartLevelController: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqJcrclustersupportClusterStartLevelControllerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqJcrclustersupportClusterStartLevelControllerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="smtpHost"></param> 
        /// <param name="smtpPort"></param> 
        /// <param name="smtpUser"></param> 
        /// <param name="smtpPassword"></param> 
        /// <param name="fromAddress"></param> 
        /// <param name="smtpSsl"></param> 
        /// <param name="smtpStarttls"></param> 
        /// <param name="debugEmail"></param> 
        /// <returns>ComDayCqMailerDefaultMailServiceInfo</returns>            
        public ComDayCqMailerDefaultMailServiceInfo ComDayCqMailerDefaultMailService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string smtpHost, int? smtpPort, string smtpUser, string smtpPassword, string fromAddress, bool? smtpSsl, bool? smtpStarttls, bool? debugEmail)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mailer.DefaultMailService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (smtpHost != null) queryParams.Add("smtp.host", ApiClient.ParameterToString(smtpHost)); // query parameter
 if (smtpPort != null) queryParams.Add("smtp.port", ApiClient.ParameterToString(smtpPort)); // query parameter
 if (smtpUser != null) queryParams.Add("smtp.user", ApiClient.ParameterToString(smtpUser)); // query parameter
 if (smtpPassword != null) queryParams.Add("smtp.password", ApiClient.ParameterToString(smtpPassword)); // query parameter
 if (fromAddress != null) queryParams.Add("from.address", ApiClient.ParameterToString(fromAddress)); // query parameter
 if (smtpSsl != null) queryParams.Add("smtp.ssl", ApiClient.ParameterToString(smtpSsl)); // query parameter
 if (smtpStarttls != null) queryParams.Add("smtp.starttls", ApiClient.ParameterToString(smtpStarttls)); // query parameter
 if (debugEmail != null) queryParams.Add("debug.email", ApiClient.ParameterToString(debugEmail)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerDefaultMailService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerDefaultMailService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMailerDefaultMailServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMailerDefaultMailServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxRecipientCount"></param> 
        /// <returns>ComDayCqMailerImplCqMailingServiceInfo</returns>            
        public ComDayCqMailerImplCqMailingServiceInfo ComDayCqMailerImplCqMailingService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string maxRecipientCount)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxRecipientCount != null) queryParams.Add("max.recipient.count", ApiClient.ParameterToString(maxRecipientCount)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplCqMailingService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplCqMailingService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMailerImplCqMailingServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMailerImplCqMailingServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mailerEmailCharset"></param> 
        /// <returns>ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo</returns>            
        public ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo ComDayCqMailerImplEmailCqEmailTemplateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mailerEmailCharset)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mailerEmailCharset != null) queryParams.Add("mailer.email.charset", ApiClient.ParameterToString(mailerEmailCharset)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplEmailCqEmailTemplateFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplEmailCqEmailTemplateFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mailerEmailEmbed"></param> 
        /// <param name="mailerEmailCharset"></param> 
        /// <param name="mailerEmailRetrieverUserID"></param> 
        /// <param name="mailerEmailRetrieverUserPWD"></param> 
        /// <returns>ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo</returns>            
        public ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo ComDayCqMailerImplEmailCqRetrieverTemplateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? mailerEmailEmbed, string mailerEmailCharset, string mailerEmailRetrieverUserID, string mailerEmailRetrieverUserPWD)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mailerEmailEmbed != null) queryParams.Add("mailer.email.embed", ApiClient.ParameterToString(mailerEmailEmbed)); // query parameter
 if (mailerEmailCharset != null) queryParams.Add("mailer.email.charset", ApiClient.ParameterToString(mailerEmailCharset)); // query parameter
 if (mailerEmailRetrieverUserID != null) queryParams.Add("mailer.email.retrieverUserID", ApiClient.ParameterToString(mailerEmailRetrieverUserID)); // query parameter
 if (mailerEmailRetrieverUserPWD != null) queryParams.Add("mailer.email.retrieverUserPWD", ApiClient.ParameterToString(mailerEmailRetrieverUserPWD)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplEmailCqRetrieverTemplateFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMailerImplEmailCqRetrieverTemplateFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="aemMcmCampaignFormConstraints"></param> 
        /// <param name="aemMcmCampaignPublicUrl"></param> 
        /// <param name="aemMcmCampaignRelaxedSSL"></param> 
        /// <returns>ComDayCqMcmCampaignImplIntegrationConfigImplInfo</returns>            
        public ComDayCqMcmCampaignImplIntegrationConfigImplInfo ComDayCqMcmCampaignImplIntegrationConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aemMcmCampaignFormConstraints, string aemMcmCampaignPublicUrl, bool? aemMcmCampaignRelaxedSSL)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (aemMcmCampaignFormConstraints != null) queryParams.Add("aem.mcm.campaign.formConstraints", ApiClient.ParameterToString(aemMcmCampaignFormConstraints)); // query parameter
 if (aemMcmCampaignPublicUrl != null) queryParams.Add("aem.mcm.campaign.publicUrl", ApiClient.ParameterToString(aemMcmCampaignPublicUrl)); // query parameter
 if (aemMcmCampaignRelaxedSSL != null) queryParams.Add("aem.mcm.campaign.relaxedSSL", ApiClient.ParameterToString(aemMcmCampaignRelaxedSSL)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCampaignImplIntegrationConfigImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCampaignImplIntegrationConfigImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmCampaignImplIntegrationConfigImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmCampaignImplIntegrationConfigImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo</returns>            
        public ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fromAddress"></param> 
        /// <param name="senderHost"></param> 
        /// <param name="maxBounceCount"></param> 
        /// <returns>ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo</returns>            
        public ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string senderHost, string maxBounceCount)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fromAddress != null) queryParams.Add("from.address", ApiClient.ParameterToString(fromAddress)); // query parameter
 if (senderHost != null) queryParams.Add("sender.host", ApiClient.ParameterToString(senderHost)); // query parameter
 if (maxBounceCount != null) queryParams.Add("max.bounce.count", ApiClient.ParameterToString(maxBounceCount)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="experienceIndirection"></param> 
        /// <param name="touchpointIndirection"></param> 
        /// <returns>ComDayCqMcmImplMCMConfigurationInfo</returns>            
        public ComDayCqMcmImplMCMConfigurationInfo ComDayCqMcmImplMCMConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> experienceIndirection, List<string> touchpointIndirection)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (experienceIndirection != null) queryParams.Add("experience.indirection", ApiClient.ParameterToString(experienceIndirection)); // query parameter
 if (touchpointIndirection != null) queryParams.Add("touchpoint.indirection", ApiClient.ParameterToString(touchpointIndirection)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmImplMCMConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmImplMCMConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmImplMCMConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmImplMCMConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo</returns>            
        public ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo</returns>            
        public ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo</returns>            
        public ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo</returns>            
        public ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo</returns>            
        public ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <returns>ComDayCqNotificationImplNotificationServiceImplInfo</returns>            
        public ComDayCqNotificationImplNotificationServiceImplInfo ComDayCqNotificationImplNotificationServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqNotificationImplNotificationServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqNotificationImplNotificationServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqNotificationImplNotificationServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqNotificationImplNotificationServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="forcelocation"></param> 
        /// <returns>ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo</returns>            
        public ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo ComDayCqPersonalizationImplServletsTargetingConfigurationServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? forcelocation)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (forcelocation != null) queryParams.Add("forcelocation", ApiClient.ParameterToString(forcelocation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPersonalizationImplServletsTargetingConfigurationServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPersonalizationImplServletsTargetingConfigurationServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="id"></param> 
        /// <param name="enabled"></param> 
        /// <param name="reference"></param> 
        /// <param name="interval"></param> 
        /// <param name="expression"></param> 
        /// <param name="source"></param> 
        /// <param name="target"></param> 
        /// <param name="login"></param> 
        /// <param name="password"></param> 
        /// <returns>ComDayCqPollingImporterImplManagedPollConfigImplInfo</returns>            
        public ComDayCqPollingImporterImplManagedPollConfigImplInfo ComDayCqPollingImporterImplManagedPollConfigImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string id, bool? enabled, bool? reference, int? interval, string expression, string source, string target, string login, string password)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (id != null) queryParams.Add("id", ApiClient.ParameterToString(id)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (reference != null) queryParams.Add("reference", ApiClient.ParameterToString(reference)); // query parameter
 if (interval != null) queryParams.Add("interval", ApiClient.ParameterToString(interval)); // query parameter
 if (expression != null) queryParams.Add("expression", ApiClient.ParameterToString(expression)); // query parameter
 if (source != null) queryParams.Add("source", ApiClient.ParameterToString(source)); // query parameter
 if (target != null) queryParams.Add("target", ApiClient.ParameterToString(target)); // query parameter
 if (login != null) queryParams.Add("login", ApiClient.ParameterToString(login)); // query parameter
 if (password != null) queryParams.Add("password", ApiClient.ParameterToString(password)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplManagedPollConfigImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplManagedPollConfigImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqPollingImporterImplManagedPollConfigImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqPollingImporterImplManagedPollConfigImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="importerUser"></param> 
        /// <returns>ComDayCqPollingImporterImplManagedPollingImporterImplInfo</returns>            
        public ComDayCqPollingImporterImplManagedPollingImporterImplInfo ComDayCqPollingImporterImplManagedPollingImporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string importerUser)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (importerUser != null) queryParams.Add("importer.user", ApiClient.ParameterToString(importerUser)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplManagedPollingImporterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplManagedPollingImporterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqPollingImporterImplManagedPollingImporterImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqPollingImporterImplManagedPollingImporterImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="importerMinInterval"></param> 
        /// <param name="importerUser"></param> 
        /// <param name="excludePaths"></param> 
        /// <param name="includePaths"></param> 
        /// <returns>ComDayCqPollingImporterImplPollingImporterImplInfo</returns>            
        public ComDayCqPollingImporterImplPollingImporterImplInfo ComDayCqPollingImporterImplPollingImporterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? importerMinInterval, string importerUser, List<string> excludePaths, List<string> includePaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (importerMinInterval != null) queryParams.Add("importer.min.interval", ApiClient.ParameterToString(importerMinInterval)); // query parameter
 if (importerUser != null) queryParams.Add("importer.user", ApiClient.ParameterToString(importerUser)); // query parameter
 if (excludePaths != null) queryParams.Add("exclude.paths", ApiClient.ParameterToString(excludePaths)); // query parameter
 if (includePaths != null) queryParams.Add("include.paths", ApiClient.ParameterToString(includePaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplPollingImporterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqPollingImporterImplPollingImporterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqPollingImporterImplPollingImporterImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqPollingImporterImplPollingImporterImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>ComDayCqReplicationAuditReplicationEventListenerInfo</returns>            
        public ComDayCqReplicationAuditReplicationEventListenerInfo ComDayCqReplicationAuditReplicationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationAuditReplicationEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationAuditReplicationEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationAuditReplicationEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationAuditReplicationEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="host"></param> 
        /// <param name="port"></param> 
        /// <returns>ComDayCqReplicationContentStaticContentBuilderInfo</returns>            
        public ComDayCqReplicationContentStaticContentBuilderInfo ComDayCqReplicationContentStaticContentBuilder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string host, int? port)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (host != null) queryParams.Add("host", ApiClient.ParameterToString(host)); // query parameter
 if (port != null) queryParams.Add("port", ApiClient.ParameterToString(port)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationContentStaticContentBuilder: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationContentStaticContentBuilder: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationContentStaticContentBuilderInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationContentStaticContentBuilderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jobTopics"></param> 
        /// <param name="serviceUserTarget"></param> 
        /// <param name="agentProviderTarget"></param> 
        /// <returns>ComDayCqReplicationImplAgentManagerImplInfo</returns>            
        public ComDayCqReplicationImplAgentManagerImplInfo ComDayCqReplicationImplAgentManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jobTopics, string serviceUserTarget, string agentProviderTarget)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jobTopics != null) queryParams.Add("job.topics", ApiClient.ParameterToString(jobTopics)); // query parameter
 if (serviceUserTarget != null) queryParams.Add("serviceUser.target", ApiClient.ParameterToString(serviceUserTarget)); // query parameter
 if (agentProviderTarget != null) queryParams.Add("agentProvider.target", ApiClient.ParameterToString(agentProviderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplAgentManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplAgentManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplAgentManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplAgentManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="binaryThreshold"></param> 
        /// <returns>ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo</returns>            
        public ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo ComDayCqReplicationImplContentDurboBinaryLessContentBuilder (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? binaryThreshold)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (binaryThreshold != null) queryParams.Add("binary.threshold", ApiClient.ParameterToString(binaryThreshold)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplContentDurboBinaryLessContentBuilder: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplContentDurboBinaryLessContentBuilder: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="preserveHierarchyNodes"></param> 
        /// <param name="ignoreVersioning"></param> 
        /// <param name="importAcl"></param> 
        /// <param name="saveThreshold"></param> 
        /// <param name="preserveUserPaths"></param> 
        /// <param name="preserveUuid"></param> 
        /// <param name="preserveUuidNodetypes"></param> 
        /// <param name="preserveUuidSubtrees"></param> 
        /// <param name="autoCommit"></param> 
        /// <returns>ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo</returns>            
        public ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo ComDayCqReplicationImplContentDurboDurboImportConfigurationProv (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? preserveHierarchyNodes, bool? ignoreVersioning, bool? importAcl, int? saveThreshold, bool? preserveUserPaths, bool? preserveUuid, List<string> preserveUuidNodetypes, List<string> preserveUuidSubtrees, bool? autoCommit)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (preserveHierarchyNodes != null) queryParams.Add("preserve.hierarchy.nodes", ApiClient.ParameterToString(preserveHierarchyNodes)); // query parameter
 if (ignoreVersioning != null) queryParams.Add("ignore.versioning", ApiClient.ParameterToString(ignoreVersioning)); // query parameter
 if (importAcl != null) queryParams.Add("import.acl", ApiClient.ParameterToString(importAcl)); // query parameter
 if (saveThreshold != null) queryParams.Add("save.threshold", ApiClient.ParameterToString(saveThreshold)); // query parameter
 if (preserveUserPaths != null) queryParams.Add("preserve.user.paths", ApiClient.ParameterToString(preserveUserPaths)); // query parameter
 if (preserveUuid != null) queryParams.Add("preserve.uuid", ApiClient.ParameterToString(preserveUuid)); // query parameter
 if (preserveUuidNodetypes != null) queryParams.Add("preserve.uuid.nodetypes", ApiClient.ParameterToString(preserveUuidNodetypes)); // query parameter
 if (preserveUuidSubtrees != null) queryParams.Add("preserve.uuid.subtrees", ApiClient.ParameterToString(preserveUuidSubtrees)); // query parameter
 if (autoCommit != null) queryParams.Add("auto.commit", ApiClient.ParameterToString(autoCommit)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplContentDurboDurboImportConfigurationProv: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplContentDurboDurboImportConfigurationProv: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="replicationContentUseFileStorage"></param> 
        /// <param name="replicationContentMaxCommitAttempts"></param> 
        /// <returns>ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo</returns>            
        public ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo ComDayCqReplicationImplReplicationContentFactoryProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? replicationContentUseFileStorage, int? replicationContentMaxCommitAttempts)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (replicationContentUseFileStorage != null) queryParams.Add("replication.content.useFileStorage", ApiClient.ParameterToString(replicationContentUseFileStorage)); // query parameter
 if (replicationContentMaxCommitAttempts != null) queryParams.Add("replication.content.maxCommitAttempts", ApiClient.ParameterToString(replicationContentMaxCommitAttempts)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicationContentFactoryProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicationContentFactoryProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="receiverTmpfileThreshold"></param> 
        /// <param name="receiverPackagesUseInstall"></param> 
        /// <returns>ComDayCqReplicationImplReplicationReceiverImplInfo</returns>            
        public ComDayCqReplicationImplReplicationReceiverImplInfo ComDayCqReplicationImplReplicationReceiverImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? receiverTmpfileThreshold, bool? receiverPackagesUseInstall)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (receiverTmpfileThreshold != null) queryParams.Add("receiver.tmpfile.threshold", ApiClient.ParameterToString(receiverTmpfileThreshold)); // query parameter
 if (receiverPackagesUseInstall != null) queryParams.Add("receiver.packages.use.install", ApiClient.ParameterToString(receiverPackagesUseInstall)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicationReceiverImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicationReceiverImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplReplicationReceiverImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplReplicationReceiverImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="distributeEvents"></param> 
        /// <returns>ComDayCqReplicationImplReplicatorImplInfo</returns>            
        public ComDayCqReplicationImplReplicatorImplInfo ComDayCqReplicationImplReplicatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? distributeEvents)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (distributeEvents != null) queryParams.Add("distribute_events", ApiClient.ParameterToString(distributeEvents)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReplicatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplReplicatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplReplicatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerPeriod"></param> 
        /// <returns>ComDayCqReplicationImplReverseReplicatorInfo</returns>            
        public ComDayCqReplicationImplReverseReplicatorInfo ComDayCqReplicationImplReverseReplicator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerPeriod != null) queryParams.Add("scheduler.period", ApiClient.ParameterToString(schedulerPeriod)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReverseReplicator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplReverseReplicator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplReverseReplicatorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplReverseReplicatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disabledCipherSuites"></param> 
        /// <param name="enabledCipherSuites"></param> 
        /// <returns>ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo</returns>            
        public ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo ComDayCqReplicationImplTransportBinaryLessTransportHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disabledCipherSuites != null) queryParams.Add("disabled.cipher.suites", ApiClient.ParameterToString(disabledCipherSuites)); // query parameter
 if (enabledCipherSuites != null) queryParams.Add("enabled.cipher.suites", ApiClient.ParameterToString(enabledCipherSuites)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplTransportBinaryLessTransportHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplTransportBinaryLessTransportHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disabledCipherSuites"></param> 
        /// <param name="enabledCipherSuites"></param> 
        /// <returns>ComDayCqReplicationImplTransportHttpInfo</returns>            
        public ComDayCqReplicationImplTransportHttpInfo ComDayCqReplicationImplTransportHttp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> disabledCipherSuites, List<string> enabledCipherSuites)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.replication.impl.transport.Http";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disabledCipherSuites != null) queryParams.Add("disabled.cipher.suites", ApiClient.ParameterToString(disabledCipherSuites)); // query parameter
 if (enabledCipherSuites != null) queryParams.Add("enabled.cipher.suites", ApiClient.ParameterToString(enabledCipherSuites)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplTransportHttp: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReplicationImplTransportHttp: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReplicationImplTransportHttpInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReplicationImplTransportHttpInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="repcacheEnable"></param> 
        /// <param name="repcacheTtl"></param> 
        /// <param name="repcacheMax"></param> 
        /// <returns>ComDayCqReportingImplCacheCacheImplInfo</returns>            
        public ComDayCqReportingImplCacheCacheImplInfo ComDayCqReportingImplCacheCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? repcacheEnable, int? repcacheTtl, int? repcacheMax)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (repcacheEnable != null) queryParams.Add("repcache.enable", ApiClient.ParameterToString(repcacheEnable)); // query parameter
 if (repcacheTtl != null) queryParams.Add("repcache.ttl", ApiClient.ParameterToString(repcacheTtl)); // query parameter
 if (repcacheMax != null) queryParams.Add("repcache.max", ApiClient.ParameterToString(repcacheMax)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplCacheCacheImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplCacheCacheImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReportingImplCacheCacheImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReportingImplCacheCacheImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="repconfTimezone"></param> 
        /// <param name="repconfLocale"></param> 
        /// <param name="repconfSnapshots"></param> 
        /// <param name="repconfRepdir"></param> 
        /// <param name="repconfHourofday"></param> 
        /// <param name="repconfMinofhour"></param> 
        /// <param name="repconfMaxrows"></param> 
        /// <param name="repconfFakedata"></param> 
        /// <param name="repconfSnapshotuser"></param> 
        /// <param name="repconfEnforcesnapshotuser"></param> 
        /// <returns>ComDayCqReportingImplConfigServiceImplInfo</returns>            
        public ComDayCqReportingImplConfigServiceImplInfo ComDayCqReportingImplConfigServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repconfTimezone, string repconfLocale, string repconfSnapshots, string repconfRepdir, int? repconfHourofday, int? repconfMinofhour, int? repconfMaxrows, bool? repconfFakedata, string repconfSnapshotuser, bool? repconfEnforcesnapshotuser)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (repconfTimezone != null) queryParams.Add("repconf.timezone", ApiClient.ParameterToString(repconfTimezone)); // query parameter
 if (repconfLocale != null) queryParams.Add("repconf.locale", ApiClient.ParameterToString(repconfLocale)); // query parameter
 if (repconfSnapshots != null) queryParams.Add("repconf.snapshots", ApiClient.ParameterToString(repconfSnapshots)); // query parameter
 if (repconfRepdir != null) queryParams.Add("repconf.repdir", ApiClient.ParameterToString(repconfRepdir)); // query parameter
 if (repconfHourofday != null) queryParams.Add("repconf.hourofday", ApiClient.ParameterToString(repconfHourofday)); // query parameter
 if (repconfMinofhour != null) queryParams.Add("repconf.minofhour", ApiClient.ParameterToString(repconfMinofhour)); // query parameter
 if (repconfMaxrows != null) queryParams.Add("repconf.maxrows", ApiClient.ParameterToString(repconfMaxrows)); // query parameter
 if (repconfFakedata != null) queryParams.Add("repconf.fakedata", ApiClient.ParameterToString(repconfFakedata)); // query parameter
 if (repconfSnapshotuser != null) queryParams.Add("repconf.snapshotuser", ApiClient.ParameterToString(repconfSnapshotuser)); // query parameter
 if (repconfEnforcesnapshotuser != null) queryParams.Add("repconf.enforcesnapshotuser", ApiClient.ParameterToString(repconfEnforcesnapshotuser)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplConfigServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplConfigServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReportingImplConfigServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReportingImplConfigServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="requestLogOutput"></param> 
        /// <returns>ComDayCqReportingImplRLogAnalyzerInfo</returns>            
        public ComDayCqReportingImplRLogAnalyzerInfo ComDayCqReportingImplRLogAnalyzer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (requestLogOutput != null) queryParams.Add("request.log.output", ApiClient.ParameterToString(requestLogOutput)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplRLogAnalyzer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqReportingImplRLogAnalyzer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqReportingImplRLogAnalyzerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqReportingImplRLogAnalyzerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerPeriod"></param> 
        /// <param name="schedulerConcurrent"></param> 
        /// <param name="serviceBadLinkToleranceInterval"></param> 
        /// <param name="serviceCheckOverridePatterns"></param> 
        /// <param name="serviceCacheBrokenInternalLinks"></param> 
        /// <param name="serviceSpecialLinkPrefix"></param> 
        /// <param name="serviceSpecialLinkPatterns"></param> 
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo</returns>            
        public ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo ComDayCqRewriterLinkcheckerImplLinkCheckerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? serviceBadLinkToleranceInterval, List<string> serviceCheckOverridePatterns, bool? serviceCacheBrokenInternalLinks, List<string> serviceSpecialLinkPrefix, List<string> serviceSpecialLinkPatterns)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerPeriod != null) queryParams.Add("scheduler.period", ApiClient.ParameterToString(schedulerPeriod)); // query parameter
 if (schedulerConcurrent != null) queryParams.Add("scheduler.concurrent", ApiClient.ParameterToString(schedulerConcurrent)); // query parameter
 if (serviceBadLinkToleranceInterval != null) queryParams.Add("service.bad_link_tolerance_interval", ApiClient.ParameterToString(serviceBadLinkToleranceInterval)); // query parameter
 if (serviceCheckOverridePatterns != null) queryParams.Add("service.check_override_patterns", ApiClient.ParameterToString(serviceCheckOverridePatterns)); // query parameter
 if (serviceCacheBrokenInternalLinks != null) queryParams.Add("service.cache_broken_internal_links", ApiClient.ParameterToString(serviceCacheBrokenInternalLinks)); // query parameter
 if (serviceSpecialLinkPrefix != null) queryParams.Add("service.special_link_prefix", ApiClient.ParameterToString(serviceSpecialLinkPrefix)); // query parameter
 if (serviceSpecialLinkPatterns != null) queryParams.Add("service.special_link_patterns", ApiClient.ParameterToString(serviceSpecialLinkPatterns)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerPeriod"></param> 
        /// <param name="schedulerConcurrent"></param> 
        /// <param name="goodLinkTestInterval"></param> 
        /// <param name="badLinkTestInterval"></param> 
        /// <param name="linkUnusedInterval"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo</returns>            
        public ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, int? goodLinkTestInterval, int? badLinkTestInterval, int? linkUnusedInterval, int? connectionTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerPeriod != null) queryParams.Add("scheduler.period", ApiClient.ParameterToString(schedulerPeriod)); // query parameter
 if (schedulerConcurrent != null) queryParams.Add("scheduler.concurrent", ApiClient.ParameterToString(schedulerConcurrent)); // query parameter
 if (goodLinkTestInterval != null) queryParams.Add("good_link_test_interval", ApiClient.ParameterToString(goodLinkTestInterval)); // query parameter
 if (badLinkTestInterval != null) queryParams.Add("bad_link_test_interval", ApiClient.ParameterToString(badLinkTestInterval)); // query parameter
 if (linkUnusedInterval != null) queryParams.Add("link_unused_interval", ApiClient.ParameterToString(linkUnusedInterval)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connection.timeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="linkcheckertransformerDisableRewriting"></param> 
        /// <param name="linkcheckertransformerDisableChecking"></param> 
        /// <param name="linkcheckertransformerMapCacheSize"></param> 
        /// <param name="linkcheckertransformerStrictExtensionCheck"></param> 
        /// <param name="linkcheckertransformerStripHtmltExtension"></param> 
        /// <param name="linkcheckertransformerRewriteElements"></param> 
        /// <param name="linkcheckertransformerStripExtensionPathBlacklist"></param> 
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo</returns>            
        public ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? linkcheckertransformerDisableRewriting, bool? linkcheckertransformerDisableChecking, int? linkcheckertransformerMapCacheSize, bool? linkcheckertransformerStrictExtensionCheck, bool? linkcheckertransformerStripHtmltExtension, List<string> linkcheckertransformerRewriteElements, List<string> linkcheckertransformerStripExtensionPathBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (linkcheckertransformerDisableRewriting != null) queryParams.Add("linkcheckertransformer.disableRewriting", ApiClient.ParameterToString(linkcheckertransformerDisableRewriting)); // query parameter
 if (linkcheckertransformerDisableChecking != null) queryParams.Add("linkcheckertransformer.disableChecking", ApiClient.ParameterToString(linkcheckertransformerDisableChecking)); // query parameter
 if (linkcheckertransformerMapCacheSize != null) queryParams.Add("linkcheckertransformer.mapCacheSize", ApiClient.ParameterToString(linkcheckertransformerMapCacheSize)); // query parameter
 if (linkcheckertransformerStrictExtensionCheck != null) queryParams.Add("linkcheckertransformer.strictExtensionCheck", ApiClient.ParameterToString(linkcheckertransformerStrictExtensionCheck)); // query parameter
 if (linkcheckertransformerStripHtmltExtension != null) queryParams.Add("linkcheckertransformer.stripHtmltExtension", ApiClient.ParameterToString(linkcheckertransformerStripHtmltExtension)); // query parameter
 if (linkcheckertransformerRewriteElements != null) queryParams.Add("linkcheckertransformer.rewriteElements", ApiClient.ParameterToString(linkcheckertransformerRewriteElements)); // query parameter
 if (linkcheckertransformerStripExtensionPathBlacklist != null) queryParams.Add("linkcheckertransformer.stripExtensionPathBlacklist", ApiClient.ParameterToString(linkcheckertransformerStripExtensionPathBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceMaxLinksPerHost"></param> 
        /// <param name="serviceSaveExternalLinkReferences"></param> 
        /// <returns>ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo</returns>            
        public ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceMaxLinksPerHost, bool? serviceSaveExternalLinkReferences)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceMaxLinksPerHost != null) queryParams.Add("service.max_links_per_host", ApiClient.ParameterToString(serviceMaxLinksPerHost)); // query parameter
 if (serviceSaveExternalLinkReferences != null) queryParams.Add("service.save_external_link_references", ApiClient.ParameterToString(serviceSaveExternalLinkReferences)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="htmlparserProcessTags"></param> 
        /// <param name="htmlparserPreserveCamelCase"></param> 
        /// <returns>ComDayCqRewriterProcessorImplHtmlParserFactoryInfo</returns>            
        public ComDayCqRewriterProcessorImplHtmlParserFactoryInfo ComDayCqRewriterProcessorImplHtmlParserFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> htmlparserProcessTags, bool? htmlparserPreserveCamelCase)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (htmlparserProcessTags != null) queryParams.Add("htmlparser.processTags", ApiClient.ParameterToString(htmlparserProcessTags)); // query parameter
 if (htmlparserPreserveCamelCase != null) queryParams.Add("htmlparser.preserveCamelCase", ApiClient.ParameterToString(htmlparserPreserveCamelCase)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterProcessorImplHtmlParserFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqRewriterProcessorImplHtmlParserFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqRewriterProcessorImplHtmlParserFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqRewriterProcessorImplHtmlParserFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="excerptProperties"></param> 
        /// <param name="cacheMaxEntries"></param> 
        /// <param name="cacheEntryLifetime"></param> 
        /// <param name="xpathUnion"></param> 
        /// <returns>ComDayCqSearchImplBuilderQueryBuilderImplInfo</returns>            
        public ComDayCqSearchImplBuilderQueryBuilderImplInfo ComDayCqSearchImplBuilderQueryBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excerptProperties, int? cacheMaxEntries, int? cacheEntryLifetime, bool? xpathUnion)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (excerptProperties != null) queryParams.Add("excerpt.properties", ApiClient.ParameterToString(excerptProperties)); // query parameter
 if (cacheMaxEntries != null) queryParams.Add("cache.max.entries", ApiClient.ParameterToString(cacheMaxEntries)); // query parameter
 if (cacheEntryLifetime != null) queryParams.Add("cache.entry.lifetime", ApiClient.ParameterToString(cacheEntryLifetime)); // query parameter
 if (xpathUnion != null) queryParams.Add("xpath.union", ApiClient.ParameterToString(xpathUnion)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchImplBuilderQueryBuilderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchImplBuilderQueryBuilderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqSearchImplBuilderQueryBuilderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqSearchImplBuilderQueryBuilderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pathBuilderTarget"></param> 
        /// <param name="suggestBasepath"></param> 
        /// <returns>ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo</returns>            
        public ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo ComDayCqSearchSuggestImplSuggestionIndexManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathBuilderTarget, string suggestBasepath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pathBuilderTarget != null) queryParams.Add("pathBuilder.target", ApiClient.ParameterToString(pathBuilderTarget)); // query parameter
 if (suggestBasepath != null) queryParams.Add("suggest.basepath", ApiClient.ParameterToString(suggestBasepath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchSuggestImplSuggestionIndexManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchSuggestImplSuggestionIndexManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSearchpromoteConfighandlerEnabled"></param> 
        /// <returns>ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo</returns>            
        public ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqSearchpromoteConfighandlerEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSearchpromoteConfighandlerEnabled != null) queryParams.Add("cq.searchpromote.confighandler.enabled", ApiClient.ParameterToString(cqSearchpromoteConfighandlerEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqSearchpromoteConfigurationServerUri"></param> 
        /// <param name="cqSearchpromoteConfigurationEnvironment"></param> 
        /// <param name="connectionTimeout"></param> 
        /// <param name="socketTimeout"></param> 
        /// <returns>ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo</returns>            
        public ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo ComDayCqSearchpromoteImplSearchPromoteServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string cqSearchpromoteConfigurationServerUri, string cqSearchpromoteConfigurationEnvironment, int? connectionTimeout, int? socketTimeout)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqSearchpromoteConfigurationServerUri != null) queryParams.Add("cq.searchpromote.configuration.server.uri", ApiClient.ParameterToString(cqSearchpromoteConfigurationServerUri)); // query parameter
 if (cqSearchpromoteConfigurationEnvironment != null) queryParams.Add("cq.searchpromote.configuration.environment", ApiClient.ParameterToString(cqSearchpromoteConfigurationEnvironment)); // query parameter
 if (connectionTimeout != null) queryParams.Add("connection.timeout", ApiClient.ParameterToString(connectionTimeout)); // query parameter
 if (socketTimeout != null) queryParams.Add("socket.timeout", ApiClient.ParameterToString(socketTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchpromoteImplSearchPromoteServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSearchpromoteImplSearchPromoteServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqAclsetupRules"></param> 
        /// <returns>ComDayCqSecurityACLSetupInfo</returns>            
        public ComDayCqSecurityACLSetupInfo ComDayCqSecurityACLSetup (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqAclsetupRules)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.security.ACLSetup";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqAclsetupRules != null) queryParams.Add("cq.aclsetup.rules", ApiClient.ParameterToString(cqAclsetupRules)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSecurityACLSetup: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqSecurityACLSetup: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqSecurityACLSetupInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqSecurityACLSetupInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerPeriod"></param> 
        /// <param name="schedulerConcurrent"></param> 
        /// <param name="path"></param> 
        /// <param name="workspace"></param> 
        /// <param name="keywordsPath"></param> 
        /// <param name="asyncEntries"></param> 
        /// <returns>ComDayCqStatisticsImplStatisticsServiceImplInfo</returns>            
        public ComDayCqStatisticsImplStatisticsServiceImplInfo ComDayCqStatisticsImplStatisticsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? schedulerPeriod, bool? schedulerConcurrent, string path, string workspace, string keywordsPath, bool? asyncEntries)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerPeriod != null) queryParams.Add("scheduler.period", ApiClient.ParameterToString(schedulerPeriod)); // query parameter
 if (schedulerConcurrent != null) queryParams.Add("scheduler.concurrent", ApiClient.ParameterToString(schedulerConcurrent)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (workspace != null) queryParams.Add("workspace", ApiClient.ParameterToString(workspace)); // query parameter
 if (keywordsPath != null) queryParams.Add("keywordsPath", ApiClient.ParameterToString(keywordsPath)); // query parameter
 if (asyncEntries != null) queryParams.Add("asyncEntries", ApiClient.ParameterToString(asyncEntries)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqStatisticsImplStatisticsServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqStatisticsImplStatisticsServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqStatisticsImplStatisticsServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqStatisticsImplStatisticsServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="validationEnabled"></param> 
        /// <returns>ComDayCqTaggingImplJcrTagManagerFactoryImplInfo</returns>            
        public ComDayCqTaggingImplJcrTagManagerFactoryImplInfo ComDayCqTaggingImplJcrTagManagerFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? validationEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (validationEnabled != null) queryParams.Add("validation.enabled", ApiClient.ParameterToString(validationEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplJcrTagManagerFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplJcrTagManagerFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqTaggingImplJcrTagManagerFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqTaggingImplJcrTagManagerFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="ignorePath"></param> 
        /// <returns>ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo</returns>            
        public ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo ComDayCqTaggingImplSearchTagPredicateEvaluator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? ignorePath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (ignorePath != null) queryParams.Add("ignore_path", ApiClient.ParameterToString(ignorePath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplSearchTagPredicateEvaluator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplSearchTagPredicateEvaluator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <returns>ComDayCqTaggingImplTagGarbageCollectorInfo</returns>            
        public ComDayCqTaggingImplTagGarbageCollectorInfo ComDayCqTaggingImplTagGarbageCollector (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplTagGarbageCollector: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqTaggingImplTagGarbageCollector: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqTaggingImplTagGarbageCollectorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqTaggingImplTagGarbageCollectorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqPagesupdatehandlerImageresourcetypes"></param> 
        /// <returns>ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo</returns>            
        public ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqPagesupdatehandlerImageresourcetypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqPagesupdatehandlerImageresourcetypes != null) queryParams.Add("cq.pagesupdatehandler.imageresourcetypes", ApiClient.ParameterToString(cqPagesupdatehandlerImageresourcetypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqContentsyncPathrewritertransformerMappingLinks"></param> 
        /// <param name="cqContentsyncPathrewritertransformerMappingClientlibs"></param> 
        /// <param name="cqContentsyncPathrewritertransformerMappingImages"></param> 
        /// <param name="cqContentsyncPathrewritertransformerAttributePattern"></param> 
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryPattern"></param> 
        /// <param name="cqContentsyncPathrewritertransformerClientlibraryReplace"></param> 
        /// <returns>ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo</returns>            
        public ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqContentsyncPathrewritertransformerMappingLinks, List<string> cqContentsyncPathrewritertransformerMappingClientlibs, List<string> cqContentsyncPathrewritertransformerMappingImages, string cqContentsyncPathrewritertransformerAttributePattern, string cqContentsyncPathrewritertransformerClientlibraryPattern, string cqContentsyncPathrewritertransformerClientlibraryReplace)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqContentsyncPathrewritertransformerMappingLinks != null) queryParams.Add("cq.contentsync.pathrewritertransformer.mapping.links", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerMappingLinks)); // query parameter
 if (cqContentsyncPathrewritertransformerMappingClientlibs != null) queryParams.Add("cq.contentsync.pathrewritertransformer.mapping.clientlibs", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerMappingClientlibs)); // query parameter
 if (cqContentsyncPathrewritertransformerMappingImages != null) queryParams.Add("cq.contentsync.pathrewritertransformer.mapping.images", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerMappingImages)); // query parameter
 if (cqContentsyncPathrewritertransformerAttributePattern != null) queryParams.Add("cq.contentsync.pathrewritertransformer.attribute.pattern", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerAttributePattern)); // query parameter
 if (cqContentsyncPathrewritertransformerClientlibraryPattern != null) queryParams.Add("cq.contentsync.pathrewritertransformer.clientlibrary.pattern", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerClientlibraryPattern)); // query parameter
 if (cqContentsyncPathrewritertransformerClientlibraryReplace != null) queryParams.Add("cq.contentsync.pathrewritertransformer.clientlibrary.replace", ApiClient.ParameterToString(cqContentsyncPathrewritertransformerClientlibraryReplace)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="authoringUIModeServiceDefault"></param> 
        /// <returns>ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo</returns>            
        public ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo ComDayCqWcmCoreImplAuthoringUIModeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string authoringUIModeServiceDefault)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (authoringUIModeServiceDefault != null) queryParams.Add("authoringUIModeService.default", ApiClient.ParameterToString(authoringUIModeServiceDefault)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplAuthoringUIModeServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplAuthoringUIModeServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="wcmcommandservletDeleteWhitelist"></param> 
        /// <returns>ComDayCqWcmCoreImplCommandsWCMCommandServletInfo</returns>            
        public ComDayCqWcmCoreImplCommandsWCMCommandServletInfo ComDayCqWcmCoreImplCommandsWCMCommandServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> wcmcommandservletDeleteWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (wcmcommandservletDeleteWhitelist != null) queryParams.Add("wcmcommandservlet.delete_whitelist", ApiClient.ParameterToString(wcmcommandservletDeleteWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplCommandsWCMCommandServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplCommandsWCMCommandServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplCommandsWCMCommandServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplCommandsWCMCommandServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="dimDefaultMode"></param> 
        /// <param name="dimAppcacheEnabled"></param> 
        /// <returns>ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo</returns>            
        public ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dimDefaultMode, bool? dimAppcacheEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (dimDefaultMode != null) queryParams.Add("dim.default.mode", ApiClient.ParameterToString(dimDefaultMode)); // query parameter
 if (dimAppcacheEnabled != null) queryParams.Add("dim.appcache.enabled", ApiClient.ParameterToString(dimAppcacheEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="configured"></param> 
        /// <returns>ComDayCqWcmCoreImplEventPageEventAuditListenerInfo</returns>            
        public ComDayCqWcmCoreImplEventPageEventAuditListenerInfo ComDayCqWcmCoreImplEventPageEventAuditListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string configured)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (configured != null) queryParams.Add("configured", ApiClient.ParameterToString(configured)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventPageEventAuditListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventPageEventAuditListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplEventPageEventAuditListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplEventPageEventAuditListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="paths"></param> 
        /// <returns>ComDayCqWcmCoreImplEventPagePostProcessorInfo</returns>            
        public ComDayCqWcmCoreImplEventPagePostProcessorInfo ComDayCqWcmCoreImplEventPagePostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (paths != null) queryParams.Add("paths", ApiClient.ParameterToString(paths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventPagePostProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventPagePostProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplEventPagePostProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplEventPagePostProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="paths"></param> 
        /// <param name="excludedPaths"></param> 
        /// <returns>ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo</returns>            
        public ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo ComDayCqWcmCoreImplEventRepositoryChangeEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> paths, List<string> excludedPaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (paths != null) queryParams.Add("paths", ApiClient.ParameterToString(paths)); // query parameter
 if (excludedPaths != null) queryParams.Add("excludedPaths", ApiClient.ParameterToString(excludedPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventRepositoryChangeEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventRepositoryChangeEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="paths"></param> 
        /// <returns>ComDayCqWcmCoreImplEventTemplatePostProcessorInfo</returns>            
        public ComDayCqWcmCoreImplEventTemplatePostProcessorInfo ComDayCqWcmCoreImplEventTemplatePostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string paths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (paths != null) queryParams.Add("paths", ApiClient.ParameterToString(paths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventTemplatePostProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplEventTemplatePostProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplEventTemplatePostProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplEventTemplatePostProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="langmgrListPath"></param> 
        /// <param name="langmgrCountryDefault"></param> 
        /// <returns>ComDayCqWcmCoreImplLanguageManagerImplInfo</returns>            
        public ComDayCqWcmCoreImplLanguageManagerImplInfo ComDayCqWcmCoreImplLanguageManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string langmgrListPath, List<string> langmgrCountryDefault)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (langmgrListPath != null) queryParams.Add("langmgr.list.path", ApiClient.ParameterToString(langmgrListPath)); // query parameter
 if (langmgrCountryDefault != null) queryParams.Add("langmgr.country.default", ApiClient.ParameterToString(langmgrCountryDefault)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplLanguageManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplLanguageManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplLanguageManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplLanguageManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="linkExpiredPrefix"></param> 
        /// <param name="linkExpiredRemove"></param> 
        /// <param name="linkExpiredSuffix"></param> 
        /// <param name="linkInvalidPrefix"></param> 
        /// <param name="linkInvalidRemove"></param> 
        /// <param name="linkInvalidSuffix"></param> 
        /// <param name="linkPredatedPrefix"></param> 
        /// <param name="linkPredatedRemove"></param> 
        /// <param name="linkPredatedSuffix"></param> 
        /// <param name="linkWcmmodes"></param> 
        /// <returns>ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo</returns>            
        public ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string linkExpiredPrefix, bool? linkExpiredRemove, string linkExpiredSuffix, string linkInvalidPrefix, bool? linkInvalidRemove, string linkInvalidSuffix, string linkPredatedPrefix, bool? linkPredatedRemove, string linkPredatedSuffix, List<string> linkWcmmodes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (linkExpiredPrefix != null) queryParams.Add("link.expired.prefix", ApiClient.ParameterToString(linkExpiredPrefix)); // query parameter
 if (linkExpiredRemove != null) queryParams.Add("link.expired.remove", ApiClient.ParameterToString(linkExpiredRemove)); // query parameter
 if (linkExpiredSuffix != null) queryParams.Add("link.expired.suffix", ApiClient.ParameterToString(linkExpiredSuffix)); // query parameter
 if (linkInvalidPrefix != null) queryParams.Add("link.invalid.prefix", ApiClient.ParameterToString(linkInvalidPrefix)); // query parameter
 if (linkInvalidRemove != null) queryParams.Add("link.invalid.remove", ApiClient.ParameterToString(linkInvalidRemove)); // query parameter
 if (linkInvalidSuffix != null) queryParams.Add("link.invalid.suffix", ApiClient.ParameterToString(linkInvalidSuffix)); // query parameter
 if (linkPredatedPrefix != null) queryParams.Add("link.predated.prefix", ApiClient.ParameterToString(linkPredatedPrefix)); // query parameter
 if (linkPredatedRemove != null) queryParams.Add("link.predated.remove", ApiClient.ParameterToString(linkPredatedRemove)); // query parameter
 if (linkPredatedSuffix != null) queryParams.Add("link.predated.suffix", ApiClient.ParameterToString(linkPredatedSuffix)); // query parameter
 if (linkWcmmodes != null) queryParams.Add("link.wcmmodes", ApiClient.ParameterToString(linkWcmmodes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pageInfoProviderPropertyRegexDefault"></param> 
        /// <param name="pageInfoProviderPropertyName"></param> 
        /// <returns>ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo</returns>            
        public ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo ComDayCqWcmCoreImplPagePageInfoAggregatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageInfoProviderPropertyRegexDefault, string pageInfoProviderPropertyName)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pageInfoProviderPropertyRegexDefault != null) queryParams.Add("page.info.provider.property.regex.default", ApiClient.ParameterToString(pageInfoProviderPropertyRegexDefault)); // query parameter
 if (pageInfoProviderPropertyName != null) queryParams.Add("page.info.provider.property.name", ApiClient.ParameterToString(pageInfoProviderPropertyName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplPagePageInfoAggregatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplPagePageInfoAggregatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="illegalCharMapping"></param> 
        /// <param name="pageSubTreeActivationCheck"></param> 
        /// <returns>ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo</returns>            
        public ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo ComDayCqWcmCoreImplPagePageManagerFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string illegalCharMapping, bool? pageSubTreeActivationCheck)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (illegalCharMapping != null) queryParams.Add("illegalCharMapping", ApiClient.ParameterToString(illegalCharMapping)); // query parameter
 if (pageSubTreeActivationCheck != null) queryParams.Add("pageSubTreeActivationCheck", ApiClient.ParameterToString(pageSubTreeActivationCheck)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplPagePageManagerFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplPagePageManagerFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="contentReferenceConfigResourceTypes"></param> 
        /// <returns>ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo</returns>            
        public ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo ComDayCqWcmCoreImplReferencesContentContentReferenceConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> contentReferenceConfigResourceTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (contentReferenceConfigResourceTypes != null) queryParams.Add("contentReferenceConfig.resourceTypes", ApiClient.ParameterToString(contentReferenceConfigResourceTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplReferencesContentContentReferenceConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplReferencesContentContentReferenceConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="damShowexpired"></param> 
        /// <param name="damShowhidden"></param> 
        /// <param name="tagTitleSearch"></param> 
        /// <param name="guessTotal"></param> 
        /// <param name="damExpiryProperty"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo</returns>            
        public ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? damShowexpired, bool? damShowhidden, bool? tagTitleSearch, string guessTotal, string damExpiryProperty)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (damShowexpired != null) queryParams.Add("dam.showexpired", ApiClient.ParameterToString(damShowexpired)); // query parameter
 if (damShowhidden != null) queryParams.Add("dam.showhidden", ApiClient.ParameterToString(damShowhidden)); // query parameter
 if (tagTitleSearch != null) queryParams.Add("tagTitleSearch", ApiClient.ParameterToString(tagTitleSearch)); // query parameter
 if (guessTotal != null) queryParams.Add("guessTotal", ApiClient.ParameterToString(guessTotal)); // query parameter
 if (damExpiryProperty != null) queryParams.Add("dam.expiryProperty", ApiClient.ParameterToString(damExpiryProperty)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="itemResourceTypes"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo</returns>            
        public ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> itemResourceTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (itemResourceTypes != null) queryParams.Add("item.resource.types", ApiClient.ParameterToString(itemResourceTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="guessTotal"></param> 
        /// <param name="tagTitleSearch"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo</returns>            
        public ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo ComDayCqWcmCoreImplServletsContentfinderPageViewHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string guessTotal, bool? tagTitleSearch)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (guessTotal != null) queryParams.Add("guessTotal", ApiClient.ParameterToString(guessTotal)); // query parameter
 if (tagTitleSearch != null) queryParams.Add("tagTitleSearch", ApiClient.ParameterToString(tagTitleSearch)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderPageViewHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsContentfinderPageViewHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="scope"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsFindReplaceServletInfo</returns>            
        public ComDayCqWcmCoreImplServletsFindReplaceServletInfo ComDayCqWcmCoreImplServletsFindReplaceServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> scope)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (scope != null) queryParams.Add("scope", ApiClient.ParameterToString(scope)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsFindReplaceServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsFindReplaceServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsFindReplaceServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsFindReplaceServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="referencesearchservletMaxReferencesPerPage"></param> 
        /// <param name="referencesearchservletMaxPages"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsReferenceSearchServletInfo</returns>            
        public ComDayCqWcmCoreImplServletsReferenceSearchServletInfo ComDayCqWcmCoreImplServletsReferenceSearchServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? referencesearchservletMaxReferencesPerPage, int? referencesearchservletMaxPages)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (referencesearchservletMaxReferencesPerPage != null) queryParams.Add("referencesearchservlet.maxReferencesPerPage", ApiClient.ParameterToString(referencesearchservletMaxReferencesPerPage)); // query parameter
 if (referencesearchservletMaxPages != null) queryParams.Add("referencesearchservlet.maxPages", ApiClient.ParameterToString(referencesearchservletMaxPages)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsReferenceSearchServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsReferenceSearchServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsReferenceSearchServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsReferenceSearchServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="workspace"></param> 
        /// <param name="dimensions"></param> 
        /// <returns>ComDayCqWcmCoreImplServletsThumbnailServletInfo</returns>            
        public ComDayCqWcmCoreImplServletsThumbnailServletInfo ComDayCqWcmCoreImplServletsThumbnailServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string workspace, List<string> dimensions)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (workspace != null) queryParams.Add("workspace", ApiClient.ParameterToString(workspace)); // query parameter
 if (dimensions != null) queryParams.Add("dimensions", ApiClient.ParameterToString(dimensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsThumbnailServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplServletsThumbnailServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplServletsThumbnailServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplServletsThumbnailServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="nonValidChars"></param> 
        /// <returns>ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo</returns>            
        public ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo ComDayCqWcmCoreImplUtilsDefaultPageNameValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nonValidChars)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (nonValidChars != null) queryParams.Add("nonValidChars", ApiClient.ParameterToString(nonValidChars)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplUtilsDefaultPageNameValidator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplUtilsDefaultPageNameValidator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultExternalizerDomain"></param> 
        /// <returns>ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo</returns>            
        public ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string defaultExternalizerDomain)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultExternalizerDomain != null) queryParams.Add("default.externalizer.domain", ApiClient.ParameterToString(defaultExternalizerDomain)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="versionmanagerCreateVersionOnActivation"></param> 
        /// <param name="versionmanagerPurgingEnabled"></param> 
        /// <param name="versionmanagerPurgePaths"></param> 
        /// <param name="versionmanagerIvPaths"></param> 
        /// <param name="versionmanagerMaxAgeDays"></param> 
        /// <param name="versionmanagerMaxNumberVersions"></param> 
        /// <param name="versionmanagerMinNumberVersions"></param> 
        /// <returns>ComDayCqWcmCoreImplVersionManagerImplInfo</returns>            
        public ComDayCqWcmCoreImplVersionManagerImplInfo ComDayCqWcmCoreImplVersionManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? versionmanagerCreateVersionOnActivation, bool? versionmanagerPurgingEnabled, List<string> versionmanagerPurgePaths, List<string> versionmanagerIvPaths, int? versionmanagerMaxAgeDays, int? versionmanagerMaxNumberVersions, int? versionmanagerMinNumberVersions)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (versionmanagerCreateVersionOnActivation != null) queryParams.Add("versionmanager.createVersionOnActivation", ApiClient.ParameterToString(versionmanagerCreateVersionOnActivation)); // query parameter
 if (versionmanagerPurgingEnabled != null) queryParams.Add("versionmanager.purgingEnabled", ApiClient.ParameterToString(versionmanagerPurgingEnabled)); // query parameter
 if (versionmanagerPurgePaths != null) queryParams.Add("versionmanager.purgePaths", ApiClient.ParameterToString(versionmanagerPurgePaths)); // query parameter
 if (versionmanagerIvPaths != null) queryParams.Add("versionmanager.ivPaths", ApiClient.ParameterToString(versionmanagerIvPaths)); // query parameter
 if (versionmanagerMaxAgeDays != null) queryParams.Add("versionmanager.maxAgeDays", ApiClient.ParameterToString(versionmanagerMaxAgeDays)); // query parameter
 if (versionmanagerMaxNumberVersions != null) queryParams.Add("versionmanager.maxNumberVersions", ApiClient.ParameterToString(versionmanagerMaxNumberVersions)); // query parameter
 if (versionmanagerMinNumberVersions != null) queryParams.Add("versionmanager.minNumberVersions", ApiClient.ParameterToString(versionmanagerMinNumberVersions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVersionManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVersionManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplVersionManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplVersionManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="versionpurgePaths"></param> 
        /// <param name="versionpurgeRecursive"></param> 
        /// <param name="versionpurgeMaxVersions"></param> 
        /// <param name="versionpurgeMinVersions"></param> 
        /// <param name="versionpurgeMaxAgeDays"></param> 
        /// <returns>ComDayCqWcmCoreImplVersionPurgeTaskInfo</returns>            
        public ComDayCqWcmCoreImplVersionPurgeTaskInfo ComDayCqWcmCoreImplVersionPurgeTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> versionpurgePaths, bool? versionpurgeRecursive, int? versionpurgeMaxVersions, int? versionpurgeMinVersions, int? versionpurgeMaxAgeDays)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (versionpurgePaths != null) queryParams.Add("versionpurge.paths", ApiClient.ParameterToString(versionpurgePaths)); // query parameter
 if (versionpurgeRecursive != null) queryParams.Add("versionpurge.recursive", ApiClient.ParameterToString(versionpurgeRecursive)); // query parameter
 if (versionpurgeMaxVersions != null) queryParams.Add("versionpurge.maxVersions", ApiClient.ParameterToString(versionpurgeMaxVersions)); // query parameter
 if (versionpurgeMinVersions != null) queryParams.Add("versionpurge.minVersions", ApiClient.ParameterToString(versionpurgeMinVersions)); // query parameter
 if (versionpurgeMaxAgeDays != null) queryParams.Add("versionpurge.maxAgeDays", ApiClient.ParameterToString(versionpurgeMaxAgeDays)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVersionPurgeTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplVersionPurgeTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplVersionPurgeTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplVersionPurgeTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="wcmdbgfilterEnabled"></param> 
        /// <param name="wcmdbgfilterJspDebug"></param> 
        /// <returns>ComDayCqWcmCoreImplWCMDebugFilterInfo</returns>            
        public ComDayCqWcmCoreImplWCMDebugFilterInfo ComDayCqWcmCoreImplWCMDebugFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdbgfilterEnabled, bool? wcmdbgfilterJspDebug)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (wcmdbgfilterEnabled != null) queryParams.Add("wcmdbgfilter.enabled", ApiClient.ParameterToString(wcmdbgfilterEnabled)); // query parameter
 if (wcmdbgfilterJspDebug != null) queryParams.Add("wcmdbgfilter.jspDebug", ApiClient.ParameterToString(wcmdbgfilterJspDebug)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWCMDebugFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWCMDebugFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplWCMDebugFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplWCMDebugFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="wcmdevmodefilterEnabled"></param> 
        /// <returns>ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo</returns>            
        public ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo ComDayCqWcmCoreImplWCMDeveloperModeFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? wcmdevmodefilterEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (wcmdevmodefilterEnabled != null) queryParams.Add("wcmdevmodefilter.enabled", ApiClient.ParameterToString(wcmdevmodefilterEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWCMDeveloperModeFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWCMDeveloperModeFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="filterOrder"></param> 
        /// <param name="filterScope"></param> 
        /// <returns>ComDayCqWcmCoreImplWarpTimeWarpFilterInfo</returns>            
        public ComDayCqWcmCoreImplWarpTimeWarpFilterInfo ComDayCqWcmCoreImplWarpTimeWarpFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filterOrder, string filterScope)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (filterOrder != null) queryParams.Add("filter.order", ApiClient.ParameterToString(filterOrder)); // query parameter
 if (filterScope != null) queryParams.Add("filter.scope", ApiClient.ParameterToString(filterScope)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWarpTimeWarpFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreImplWarpTimeWarpFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreImplWarpTimeWarpFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreImplWarpTimeWarpFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mvtstatisticsTrackingurl"></param> 
        /// <returns>ComDayCqWcmCoreMvtMVTStatisticsImplInfo</returns>            
        public ComDayCqWcmCoreMvtMVTStatisticsImplInfo ComDayCqWcmCoreMvtMVTStatisticsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mvtstatisticsTrackingurl)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mvtstatisticsTrackingurl != null) queryParams.Add("mvtstatistics.trackingurl", ApiClient.ParameterToString(mvtstatisticsTrackingurl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreMvtMVTStatisticsImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreMvtMVTStatisticsImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreMvtMVTStatisticsImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreMvtMVTStatisticsImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pageviewstatisticsTrackingurl"></param> 
        /// <param name="pageviewstatisticsTrackingscriptEnabled"></param> 
        /// <returns>ComDayCqWcmCoreStatsPageViewStatisticsImplInfo</returns>            
        public ComDayCqWcmCoreStatsPageViewStatisticsImplInfo ComDayCqWcmCoreStatsPageViewStatisticsImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pageviewstatisticsTrackingurl, string pageviewstatisticsTrackingscriptEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pageviewstatisticsTrackingurl != null) queryParams.Add("pageviewstatistics.trackingurl", ApiClient.ParameterToString(pageviewstatisticsTrackingurl)); // query parameter
 if (pageviewstatisticsTrackingscriptEnabled != null) queryParams.Add("pageviewstatistics.trackingscript.enabled", ApiClient.ParameterToString(pageviewstatisticsTrackingscriptEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreStatsPageViewStatisticsImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreStatsPageViewStatisticsImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreStatsPageViewStatisticsImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreStatsPageViewStatisticsImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="wcmfilterMode"></param> 
        /// <returns>ComDayCqWcmCoreWCMRequestFilterInfo</returns>            
        public ComDayCqWcmCoreWCMRequestFilterInfo ComDayCqWcmCoreWCMRequestFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string wcmfilterMode)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (wcmfilterMode != null) queryParams.Add("wcmfilter.mode", ApiClient.ParameterToString(wcmfilterMode)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreWCMRequestFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmCoreWCMRequestFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmCoreWCMRequestFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmCoreWCMRequestFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="extractFilter"></param> 
        /// <returns>ComDayCqWcmDesignimporterDesignPackageImporterInfo</returns>            
        public ComDayCqWcmDesignimporterDesignPackageImporterInfo ComDayCqWcmDesignimporterDesignPackageImporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extractFilter)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (extractFilter != null) queryParams.Add("extract.filter", ApiClient.ParameterToString(extractFilter)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterDesignPackageImporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterDesignPackageImporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterDesignPackageImporterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterDesignPackageImporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="filepattern"></param> 
        /// <param name="buildPageNodes"></param> 
        /// <param name="buildClientLibs"></param> 
        /// <param name="buildCanvasComponent"></param> 
        /// <returns>ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo</returns>            
        public ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplCanvasBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (filepattern != null) queryParams.Add("filepattern", ApiClient.ParameterToString(filepattern)); // query parameter
 if (buildPageNodes != null) queryParams.Add("build.page.nodes", ApiClient.ParameterToString(buildPageNodes)); // query parameter
 if (buildClientLibs != null) queryParams.Add("build.client.libs", ApiClient.ParameterToString(buildClientLibs)); // query parameter
 if (buildCanvasComponent != null) queryParams.Add("build.canvas.component", ApiClient.ParameterToString(buildCanvasComponent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplCanvasBuilderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplCanvasBuilderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="minThreadPoolSize"></param> 
        /// <param name="maxThreadPoolSize"></param> 
        /// <returns>ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo</returns>            
        public ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minThreadPoolSize, int? maxThreadPoolSize)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (minThreadPoolSize != null) queryParams.Add("minThreadPoolSize", ApiClient.ParameterToString(minThreadPoolSize)); // query parameter
 if (maxThreadPoolSize != null) queryParams.Add("maxThreadPoolSize", ApiClient.ParameterToString(maxThreadPoolSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="searchPattern"></param> 
        /// <param name="replacePattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo</returns>            
        public ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo ComDayCqWcmDesignimporterImplEntryPreprocessorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string searchPattern, string replacePattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (searchPattern != null) queryParams.Add("search.pattern", ApiClient.ParameterToString(searchPattern)); // query parameter
 if (replacePattern != null) queryParams.Add("replace.pattern", ApiClient.ParameterToString(replacePattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplEntryPreprocessorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplEntryPreprocessorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="filepattern"></param> 
        /// <param name="deviceGroups"></param> 
        /// <param name="buildPageNodes"></param> 
        /// <param name="buildClientLibs"></param> 
        /// <param name="buildCanvasComponent"></param> 
        /// <returns>ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo</returns>            
        public ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string filepattern, List<string> deviceGroups, bool? buildPageNodes, bool? buildClientLibs, bool? buildCanvasComponent)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (filepattern != null) queryParams.Add("filepattern", ApiClient.ParameterToString(filepattern)); // query parameter
 if (deviceGroups != null) queryParams.Add("device.groups", ApiClient.ParameterToString(deviceGroups)); // query parameter
 if (buildPageNodes != null) queryParams.Add("build.page.nodes", ApiClient.ParameterToString(buildPageNodes)); // query parameter
 if (buildClientLibs != null) queryParams.Add("build.client.libs", ApiClient.ParameterToString(buildClientLibs)); // query parameter
 if (buildCanvasComponent != null) queryParams.Add("build.canvas.component", ApiClient.ParameterToString(buildCanvasComponent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <param name="componentResourceType"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern, string componentResourceType)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
 if (componentResourceType != null) queryParams.Add("component.resourceType", ApiClient.ParameterToString(componentResourceType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="tagpattern"></param> 
        /// <returns>ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo</returns>            
        public ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string tagpattern)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (tagpattern != null) queryParams.Add("tagpattern", ApiClient.ParameterToString(tagpattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="slingServletResourceTypes"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="formsFormchooserservletAdvansesearchRequire"></param> 
        /// <returns>ComDayCqWcmFoundationFormsImplFormChooserServletInfo</returns>            
        public ComDayCqWcmFoundationFormsImplFormChooserServletInfo ComDayCqWcmFoundationFormsImplFormChooserServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serviceName, string slingServletResourceTypes, string slingServletSelectors, List<string> slingServletMethods, bool? formsFormchooserservletAdvansesearchRequire)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceName != null) queryParams.Add("service.name", ApiClient.ParameterToString(serviceName)); // query parameter
 if (slingServletResourceTypes != null) queryParams.Add("sling.servlet.resourceTypes", ApiClient.ParameterToString(slingServletResourceTypes)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (formsFormchooserservletAdvansesearchRequire != null) queryParams.Add("forms.formchooserservlet.advansesearch.require", ApiClient.ParameterToString(formsFormchooserservletAdvansesearchRequire)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormChooserServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormChooserServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationFormsImplFormChooserServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationFormsImplFormChooserServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="formsFormparagraphpostprocessorEnabled"></param> 
        /// <param name="formsFormparagraphpostprocessorFormresourcetypes"></param> 
        /// <returns>ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo</returns>            
        public ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? formsFormparagraphpostprocessorEnabled, List<string> formsFormparagraphpostprocessorFormresourcetypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (formsFormparagraphpostprocessorEnabled != null) queryParams.Add("forms.formparagraphpostprocessor.enabled", ApiClient.ParameterToString(formsFormparagraphpostprocessorEnabled)); // query parameter
 if (formsFormparagraphpostprocessorFormresourcetypes != null) queryParams.Add("forms.formparagraphpostprocessor.formresourcetypes", ApiClient.ParameterToString(formsFormparagraphpostprocessorFormresourcetypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="nameWhitelist"></param> 
        /// <param name="allowExpressions"></param> 
        /// <returns>ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo</returns>            
        public ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo ComDayCqWcmFoundationFormsImplFormsHandlingServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string nameWhitelist, bool? allowExpressions)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (nameWhitelist != null) queryParams.Add("name.whitelist", ApiClient.ParameterToString(nameWhitelist)); // query parameter
 if (allowExpressions != null) queryParams.Add("allow.expressions", ApiClient.ParameterToString(allowExpressions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormsHandlingServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplFormsHandlingServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletResourceTypes"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="resourceWhitelist"></param> 
        /// <param name="resourceBlacklist"></param> 
        /// <returns>ComDayCqWcmFoundationFormsImplMailServletInfo</returns>            
        public ComDayCqWcmFoundationFormsImplMailServletInfo ComDayCqWcmFoundationFormsImplMailServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingServletResourceTypes, string slingServletSelectors, List<string> resourceWhitelist, string resourceBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletResourceTypes != null) queryParams.Add("sling.servlet.resourceTypes", ApiClient.ParameterToString(slingServletResourceTypes)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (resourceWhitelist != null) queryParams.Add("resource.whitelist", ApiClient.ParameterToString(resourceWhitelist)); // query parameter
 if (resourceBlacklist != null) queryParams.Add("resource.blacklist", ApiClient.ParameterToString(resourceBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplMailServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationFormsImplMailServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationFormsImplMailServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationFormsImplMailServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="adaptSupportedWidths"></param> 
        /// <returns>ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo</returns>            
        public ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo ComDayCqWcmFoundationImplAdaptiveImageComponentServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> adaptSupportedWidths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (adaptSupportedWidths != null) queryParams.Add("adapt.supported.widths", ApiClient.ParameterToString(adaptSupportedWidths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplAdaptiveImageComponentServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplAdaptiveImageComponentServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="authHttpNologin"></param> 
        /// <param name="authHttpRealm"></param> 
        /// <param name="authDefaultLoginpage"></param> 
        /// <param name="authCredForm"></param> 
        /// <param name="authCredUtf8"></param> 
        /// <returns>ComDayCqWcmFoundationImplHTTPAuthHandlerInfo</returns>            
        public ComDayCqWcmFoundationImplHTTPAuthHandlerInfo ComDayCqWcmFoundationImplHTTPAuthHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, bool? authHttpNologin, string authHttpRealm, string authDefaultLoginpage, List<string> authCredForm, List<string> authCredUtf8)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (authHttpNologin != null) queryParams.Add("auth.http.nologin", ApiClient.ParameterToString(authHttpNologin)); // query parameter
 if (authHttpRealm != null) queryParams.Add("auth.http.realm", ApiClient.ParameterToString(authHttpRealm)); // query parameter
 if (authDefaultLoginpage != null) queryParams.Add("auth.default.loginpage", ApiClient.ParameterToString(authDefaultLoginpage)); // query parameter
 if (authCredForm != null) queryParams.Add("auth.cred.form", ApiClient.ParameterToString(authCredForm)); // query parameter
 if (authCredUtf8 != null) queryParams.Add("auth.cred.utf8", ApiClient.ParameterToString(authCredUtf8)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplHTTPAuthHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplHTTPAuthHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationImplHTTPAuthHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationImplHTTPAuthHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingAuthRequirements"></param> 
        /// <returns>ComDayCqWcmFoundationImplPageImpressionsTrackerInfo</returns>            
        public ComDayCqWcmFoundationImplPageImpressionsTrackerInfo ComDayCqWcmFoundationImplPageImpressionsTracker (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingAuthRequirements)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingAuthRequirements != null) queryParams.Add("sling.auth.requirements", ApiClient.ParameterToString(slingAuthRequirements)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplPageImpressionsTracker: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplPageImpressionsTracker: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationImplPageImpressionsTrackerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationImplPageImpressionsTrackerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="excludedResourceTypes"></param> 
        /// <returns>ComDayCqWcmFoundationImplPageRedirectServletInfo</returns>            
        public ComDayCqWcmFoundationImplPageRedirectServletInfo ComDayCqWcmFoundationImplPageRedirectServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> excludedResourceTypes)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (excludedResourceTypes != null) queryParams.Add("excluded.resource.types", ApiClient.ParameterToString(excludedResourceTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplPageRedirectServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationImplPageRedirectServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationImplPageRedirectServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationImplPageRedirectServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="defaultAttachmentTypeBlacklist"></param> 
        /// <param name="baselineAttachmentTypeBlacklist"></param> 
        /// <returns>ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo</returns>            
        public ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> defaultAttachmentTypeBlacklist, List<string> baselineAttachmentTypeBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (defaultAttachmentTypeBlacklist != null) queryParams.Add("default.attachment.type.blacklist", ApiClient.ParameterToString(defaultAttachmentTypeBlacklist)); // query parameter
 if (baselineAttachmentTypeBlacklist != null) queryParams.Add("baseline.attachment.type.blacklist", ApiClient.ParameterToString(baselineAttachmentTypeBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="parameterWhitelist"></param> 
        /// <param name="parameterWhitelistPrefixes"></param> 
        /// <param name="binaryParameterWhitelist"></param> 
        /// <param name="modifierWhitelist"></param> 
        /// <param name="operationWhitelist"></param> 
        /// <param name="operationWhitelistPrefixes"></param> 
        /// <param name="typehintWhitelist"></param> 
        /// <param name="resourcetypeWhitelist"></param> 
        /// <returns>ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo</returns>            
        public ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parameterWhitelist, List<string> parameterWhitelistPrefixes, List<string> binaryParameterWhitelist, List<string> modifierWhitelist, List<string> operationWhitelist, List<string> operationWhitelistPrefixes, List<string> typehintWhitelist, List<string> resourcetypeWhitelist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (parameterWhitelist != null) queryParams.Add("parameter.whitelist", ApiClient.ParameterToString(parameterWhitelist)); // query parameter
 if (parameterWhitelistPrefixes != null) queryParams.Add("parameter.whitelist.prefixes", ApiClient.ParameterToString(parameterWhitelistPrefixes)); // query parameter
 if (binaryParameterWhitelist != null) queryParams.Add("binary.parameter.whitelist", ApiClient.ParameterToString(binaryParameterWhitelist)); // query parameter
 if (modifierWhitelist != null) queryParams.Add("modifier.whitelist", ApiClient.ParameterToString(modifierWhitelist)); // query parameter
 if (operationWhitelist != null) queryParams.Add("operation.whitelist", ApiClient.ParameterToString(operationWhitelist)); // query parameter
 if (operationWhitelistPrefixes != null) queryParams.Add("operation.whitelist.prefixes", ApiClient.ParameterToString(operationWhitelistPrefixes)); // query parameter
 if (typehintWhitelist != null) queryParams.Add("typehint.whitelist", ApiClient.ParameterToString(typehintWhitelist)); // query parameter
 if (resourcetypeWhitelist != null) queryParams.Add("resourcetype.whitelist", ApiClient.ParameterToString(resourcetypeWhitelist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="deviceInfoTransformerEnabled"></param> 
        /// <param name="deviceInfoTransformerCssStyle"></param> 
        /// <returns>ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo</returns>            
        public ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? deviceInfoTransformerEnabled, string deviceInfoTransformerCssStyle)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (deviceInfoTransformerEnabled != null) queryParams.Add("device.info.transformer.enabled", ApiClient.ParameterToString(deviceInfoTransformerEnabled)); // query parameter
 if (deviceInfoTransformerCssStyle != null) queryParams.Add("device.info.transformer.css.style", ApiClient.ParameterToString(deviceInfoTransformerCssStyle)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="redirectEnabled"></param> 
        /// <param name="redirectStatsEnabled"></param> 
        /// <param name="redirectExtensions"></param> 
        /// <param name="redirectPaths"></param> 
        /// <returns>ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo</returns>            
        public ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo ComDayCqWcmMobileCoreImplRedirectRedirectFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? redirectEnabled, bool? redirectStatsEnabled, List<string> redirectExtensions, List<string> redirectPaths)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (redirectEnabled != null) queryParams.Add("redirect.enabled", ApiClient.ParameterToString(redirectEnabled)); // query parameter
 if (redirectStatsEnabled != null) queryParams.Add("redirect.stats.enabled", ApiClient.ParameterToString(redirectStatsEnabled)); // query parameter
 if (redirectExtensions != null) queryParams.Add("redirect.extensions", ApiClient.ParameterToString(redirectExtensions)); // query parameter
 if (redirectPaths != null) queryParams.Add("redirect.paths", ApiClient.ParameterToString(redirectPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMobileCoreImplRedirectRedirectFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMobileCoreImplRedirectRedirectFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <param name="contentcopyactionOrderStyle"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo ComDayCqWcmMsmImplActionsContentCopyActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, string contentcopyactionOrderStyle)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
 if (contentcopyactionOrderStyle != null) queryParams.Add("contentcopyaction.order.style", ApiClient.ParameterToString(contentcopyactionOrderStyle)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentCopyActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentCopyActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo ComDayCqWcmMsmImplActionsContentDeleteActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentDeleteActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentDeleteActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <param name="cqWcmMsmActionIgnoredMixin"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsContentUpdateActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, List<string> cqWcmMsmActionIgnoredMixin)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
 if (cqWcmMsmActionIgnoredMixin != null) queryParams.Add("cq.wcm.msm.action.ignoredMixin", ApiClient.ParameterToString(cqWcmMsmActionIgnoredMixin)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentUpdateActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsContentUpdateActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo ComDayCqWcmMsmImplActionsOrderChildrenActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsOrderChildrenActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsOrderChildrenActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <param name="cqWcmMsmImplActionsPagemovePropReferenceUpdate"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo ComDayCqWcmMsmImplActionsPageMoveActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionsPagemovePropReferenceUpdate)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
 if (cqWcmMsmImplActionsPagemovePropReferenceUpdate != null) queryParams.Add("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate", ApiClient.ParameterToString(cqWcmMsmImplActionsPagemovePropReferenceUpdate)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsPageMoveActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsPageMoveActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <param name="cqWcmMsmImplActionReferencesupdatePropUpdateNested"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops, bool? cqWcmMsmImplActionReferencesupdatePropUpdateNested)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
 if (cqWcmMsmImplActionReferencesupdatePropUpdateNested != null) queryParams.Add("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested", ApiClient.ParameterToString(cqWcmMsmImplActionReferencesupdatePropUpdateNested)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmMsmActionExcludednodetypes"></param> 
        /// <param name="cqWcmMsmActionExcludedparagraphitems"></param> 
        /// <param name="cqWcmMsmActionExcludedprops"></param> 
        /// <returns>ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo</returns>            
        public ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo ComDayCqWcmMsmImplActionsVersionCopyActionFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cqWcmMsmActionExcludednodetypes, List<string> cqWcmMsmActionExcludedparagraphitems, List<string> cqWcmMsmActionExcludedprops)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmMsmActionExcludednodetypes != null) queryParams.Add("cq.wcm.msm.action.excludednodetypes", ApiClient.ParameterToString(cqWcmMsmActionExcludednodetypes)); // query parameter
 if (cqWcmMsmActionExcludedparagraphitems != null) queryParams.Add("cq.wcm.msm.action.excludedparagraphitems", ApiClient.ParameterToString(cqWcmMsmActionExcludedparagraphitems)); // query parameter
 if (cqWcmMsmActionExcludedprops != null) queryParams.Add("cq.wcm.msm.action.excludedprops", ApiClient.ParameterToString(cqWcmMsmActionExcludedprops)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsVersionCopyActionFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplActionsVersionCopyActionFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="liverelationshipmgrRelationsconfigDefault"></param> 
        /// <returns>ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo</returns>            
        public ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo ComDayCqWcmMsmImplLiveRelationshipManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string liverelationshipmgrRelationsconfigDefault)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (liverelationshipmgrRelationsconfigDefault != null) queryParams.Add("liverelationshipmgr.relationsconfig.default", ApiClient.ParameterToString(liverelationshipmgrRelationsconfigDefault)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplLiveRelationshipManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplLiveRelationshipManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="rolloutmgrExcludedpropsDefault"></param> 
        /// <param name="rolloutmgrExcludedparagraphpropsDefault"></param> 
        /// <param name="rolloutmgrExcludednodetypesDefault"></param> 
        /// <param name="rolloutmgrThreadpoolMaxsize"></param> 
        /// <param name="rolloutmgrThreadpoolMaxshutdowntime"></param> 
        /// <param name="rolloutmgrThreadpoolPriority"></param> 
        /// <param name="rolloutmgrCommitSize"></param> 
        /// <param name="rolloutmgrConflicthandlingEnabled"></param> 
        /// <returns>ComDayCqWcmMsmImplRolloutManagerImplInfo</returns>            
        public ComDayCqWcmMsmImplRolloutManagerImplInfo ComDayCqWcmMsmImplRolloutManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, List<string> rolloutmgrExcludedpropsDefault, List<string> rolloutmgrExcludedparagraphpropsDefault, List<string> rolloutmgrExcludednodetypesDefault, int? rolloutmgrThreadpoolMaxsize, int? rolloutmgrThreadpoolMaxshutdowntime, string rolloutmgrThreadpoolPriority, int? rolloutmgrCommitSize, bool? rolloutmgrConflicthandlingEnabled)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (rolloutmgrExcludedpropsDefault != null) queryParams.Add("rolloutmgr.excludedprops.default", ApiClient.ParameterToString(rolloutmgrExcludedpropsDefault)); // query parameter
 if (rolloutmgrExcludedparagraphpropsDefault != null) queryParams.Add("rolloutmgr.excludedparagraphprops.default", ApiClient.ParameterToString(rolloutmgrExcludedparagraphpropsDefault)); // query parameter
 if (rolloutmgrExcludednodetypesDefault != null) queryParams.Add("rolloutmgr.excludednodetypes.default", ApiClient.ParameterToString(rolloutmgrExcludednodetypesDefault)); // query parameter
 if (rolloutmgrThreadpoolMaxsize != null) queryParams.Add("rolloutmgr.threadpool.maxsize", ApiClient.ParameterToString(rolloutmgrThreadpoolMaxsize)); // query parameter
 if (rolloutmgrThreadpoolMaxshutdowntime != null) queryParams.Add("rolloutmgr.threadpool.maxshutdowntime", ApiClient.ParameterToString(rolloutmgrThreadpoolMaxshutdowntime)); // query parameter
 if (rolloutmgrThreadpoolPriority != null) queryParams.Add("rolloutmgr.threadpool.priority", ApiClient.ParameterToString(rolloutmgrThreadpoolPriority)); // query parameter
 if (rolloutmgrCommitSize != null) queryParams.Add("rolloutmgr.commit.size", ApiClient.ParameterToString(rolloutmgrCommitSize)); // query parameter
 if (rolloutmgrConflicthandlingEnabled != null) queryParams.Add("rolloutmgr.conflicthandling.enabled", ApiClient.ParameterToString(rolloutmgrConflicthandlingEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplRolloutManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplRolloutManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplRolloutManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplRolloutManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="auditlogservletDefaultEventsCount"></param> 
        /// <param name="auditlogservletDefaultPath"></param> 
        /// <returns>ComDayCqWcmMsmImplServletsAuditLogServletInfo</returns>            
        public ComDayCqWcmMsmImplServletsAuditLogServletInfo ComDayCqWcmMsmImplServletsAuditLogServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? auditlogservletDefaultEventsCount, string auditlogservletDefaultPath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (auditlogservletDefaultEventsCount != null) queryParams.Add("auditlogservlet.default.events.count", ApiClient.ParameterToString(auditlogservletDefaultEventsCount)); // query parameter
 if (auditlogservletDefaultPath != null) queryParams.Add("auditlogservlet.default.path", ApiClient.ParameterToString(auditlogservletDefaultPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplServletsAuditLogServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmMsmImplServletsAuditLogServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmMsmImplServletsAuditLogServletInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmMsmImplServletsAuditLogServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="emailFrom"></param> 
        /// <returns>ComDayCqWcmNotificationEmailImplEmailChannelInfo</returns>            
        public ComDayCqWcmNotificationEmailImplEmailChannelInfo ComDayCqWcmNotificationEmailImplEmailChannel (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string emailFrom)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (emailFrom != null) queryParams.Add("email.from", ApiClient.ParameterToString(emailFrom)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmNotificationEmailImplEmailChannel: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmNotificationEmailImplEmailChannel: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmNotificationEmailImplEmailChannelInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmNotificationEmailImplEmailChannelInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventTopics"></param> 
        /// <returns>ComDayCqWcmNotificationImplNotificationManagerImplInfo</returns>            
        public ComDayCqWcmNotificationImplNotificationManagerImplInfo ComDayCqWcmNotificationImplNotificationManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> eventTopics)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventTopics != null) queryParams.Add("event.topics", ApiClient.ParameterToString(eventTopics)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmNotificationImplNotificationManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmNotificationImplNotificationManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmNotificationImplNotificationManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmNotificationImplNotificationManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="comDayCqWcmScriptingBvpScriptEngines"></param> 
        /// <returns>ComDayCqWcmScriptingImplBVPManagerInfo</returns>            
        public ComDayCqWcmScriptingImplBVPManagerInfo ComDayCqWcmScriptingImplBVPManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> comDayCqWcmScriptingBvpScriptEngines)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (comDayCqWcmScriptingBvpScriptEngines != null) queryParams.Add("com.day.cq.wcm.scripting.bvp.script.engines", ApiClient.ParameterToString(comDayCqWcmScriptingBvpScriptEngines)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmScriptingImplBVPManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmScriptingImplBVPManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmScriptingImplBVPManagerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmScriptingImplBVPManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cqWcmUndoEnabled"></param> 
        /// <param name="cqWcmUndoPath"></param> 
        /// <param name="cqWcmUndoValidity"></param> 
        /// <param name="cqWcmUndoSteps"></param> 
        /// <param name="cqWcmUndoPersistence"></param> 
        /// <param name="cqWcmUndoPersistenceMode"></param> 
        /// <param name="cqWcmUndoMarkermode"></param> 
        /// <param name="cqWcmUndoWhitelist"></param> 
        /// <param name="cqWcmUndoBlacklist"></param> 
        /// <returns>ComDayCqWcmUndoUndoConfigInfo</returns>            
        public ComDayCqWcmUndoUndoConfigInfo ComDayCqWcmUndoUndoConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? cqWcmUndoEnabled, string cqWcmUndoPath, int? cqWcmUndoValidity, int? cqWcmUndoSteps, string cqWcmUndoPersistence, bool? cqWcmUndoPersistenceMode, string cqWcmUndoMarkermode, List<string> cqWcmUndoWhitelist, List<string> cqWcmUndoBlacklist)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cqWcmUndoEnabled != null) queryParams.Add("cq.wcm.undo.enabled", ApiClient.ParameterToString(cqWcmUndoEnabled)); // query parameter
 if (cqWcmUndoPath != null) queryParams.Add("cq.wcm.undo.path", ApiClient.ParameterToString(cqWcmUndoPath)); // query parameter
 if (cqWcmUndoValidity != null) queryParams.Add("cq.wcm.undo.validity", ApiClient.ParameterToString(cqWcmUndoValidity)); // query parameter
 if (cqWcmUndoSteps != null) queryParams.Add("cq.wcm.undo.steps", ApiClient.ParameterToString(cqWcmUndoSteps)); // query parameter
 if (cqWcmUndoPersistence != null) queryParams.Add("cq.wcm.undo.persistence", ApiClient.ParameterToString(cqWcmUndoPersistence)); // query parameter
 if (cqWcmUndoPersistenceMode != null) queryParams.Add("cq.wcm.undo.persistence.mode", ApiClient.ParameterToString(cqWcmUndoPersistenceMode)); // query parameter
 if (cqWcmUndoMarkermode != null) queryParams.Add("cq.wcm.undo.markermode", ApiClient.ParameterToString(cqWcmUndoMarkermode)); // query parameter
 if (cqWcmUndoWhitelist != null) queryParams.Add("cq.wcm.undo.whitelist", ApiClient.ParameterToString(cqWcmUndoWhitelist)); // query parameter
 if (cqWcmUndoBlacklist != null) queryParams.Add("cq.wcm.undo.blacklist", ApiClient.ParameterToString(cqWcmUndoBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmUndoUndoConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmUndoUndoConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmUndoUndoConfigInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmUndoUndoConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="flushAgents"></param> 
        /// <returns>ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo</returns>            
        public ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo ComDayCqWcmWebservicesupportImplReplicationEventListener (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> flushAgents)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (flushAgents != null) queryParams.Add("Flush agents", ApiClient.ParameterToString(flushAgents)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWebservicesupportImplReplicationEventListener: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWebservicesupportImplReplicationEventListener: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="eventFilter"></param> 
        /// <param name="minThreadPoolSize"></param> 
        /// <param name="maxThreadPoolSize"></param> 
        /// <param name="cqWcmWorkflowTerminateOnActivate"></param> 
        /// <param name="cqWcmWorklfowTerminateExclusionList"></param> 
        /// <returns>ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo</returns>            
        public ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string eventFilter, int? minThreadPoolSize, int? maxThreadPoolSize, bool? cqWcmWorkflowTerminateOnActivate, List<string> cqWcmWorklfowTerminateExclusionList)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (eventFilter != null) queryParams.Add("event.filter", ApiClient.ParameterToString(eventFilter)); // query parameter
 if (minThreadPoolSize != null) queryParams.Add("minThreadPoolSize", ApiClient.ParameterToString(minThreadPoolSize)); // query parameter
 if (maxThreadPoolSize != null) queryParams.Add("maxThreadPoolSize", ApiClient.ParameterToString(maxThreadPoolSize)); // query parameter
 if (cqWcmWorkflowTerminateOnActivate != null) queryParams.Add("cq.wcm.workflow.terminate.on.activate", ApiClient.ParameterToString(cqWcmWorkflowTerminateOnActivate)); // query parameter
 if (cqWcmWorklfowTerminateExclusionList != null) queryParams.Add("cq.wcm.worklfow.terminate.exclusion.list", ApiClient.ParameterToString(cqWcmWorklfowTerminateExclusionList)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="workflowpackageinfoproviderFilter"></param> 
        /// <param name="workflowpackageinfoproviderFilterRootpath"></param> 
        /// <returns>ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo</returns>            
        public ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> workflowpackageinfoproviderFilter, string workflowpackageinfoproviderFilterRootpath)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (workflowpackageinfoproviderFilter != null) queryParams.Add("workflowpackageinfoprovider.filter", ApiClient.ParameterToString(workflowpackageinfoproviderFilter)); // query parameter
 if (workflowpackageinfoproviderFilterRootpath != null) queryParams.Add("workflowpackageinfoprovider.filter.rootpath", ApiClient.ParameterToString(workflowpackageinfoproviderFilterRootpath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="htmllibmanagerClientmanager"></param> 
        /// <param name="htmllibmanagerDebug"></param> 
        /// <param name="htmllibmanagerDebugConsole"></param> 
        /// <param name="htmllibmanagerDebugInitJs"></param> 
        /// <param name="htmllibmanagerDefaultthemename"></param> 
        /// <param name="htmllibmanagerDefaultuserthemename"></param> 
        /// <param name="htmllibmanagerFirebuglitePath"></param> 
        /// <param name="htmllibmanagerForceCQUrlInfo"></param> 
        /// <param name="htmllibmanagerGzip"></param> 
        /// <param name="htmllibmanagerMaxage"></param> 
        /// <param name="htmllibmanagerMaxDataUriSize"></param> 
        /// <param name="htmllibmanagerMinify"></param> 
        /// <param name="htmllibmanagerPathList"></param> 
        /// <param name="htmllibmanagerTiming"></param> 
        /// <returns>ComDayCqWidgetImplHtmlLibraryManagerImplInfo</returns>            
        public ComDayCqWidgetImplHtmlLibraryManagerImplInfo ComDayCqWidgetImplHtmlLibraryManagerImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string htmllibmanagerClientmanager, bool? htmllibmanagerDebug, bool? htmllibmanagerDebugConsole, string htmllibmanagerDebugInitJs, string htmllibmanagerDefaultthemename, string htmllibmanagerDefaultuserthemename, string htmllibmanagerFirebuglitePath, bool? htmllibmanagerForceCQUrlInfo, bool? htmllibmanagerGzip, int? htmllibmanagerMaxage, int? htmllibmanagerMaxDataUriSize, bool? htmllibmanagerMinify, List<string> htmllibmanagerPathList, bool? htmllibmanagerTiming)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (htmllibmanagerClientmanager != null) queryParams.Add("htmllibmanager.clientmanager", ApiClient.ParameterToString(htmllibmanagerClientmanager)); // query parameter
 if (htmllibmanagerDebug != null) queryParams.Add("htmllibmanager.debug", ApiClient.ParameterToString(htmllibmanagerDebug)); // query parameter
 if (htmllibmanagerDebugConsole != null) queryParams.Add("htmllibmanager.debug.console", ApiClient.ParameterToString(htmllibmanagerDebugConsole)); // query parameter
 if (htmllibmanagerDebugInitJs != null) queryParams.Add("htmllibmanager.debug.init.js", ApiClient.ParameterToString(htmllibmanagerDebugInitJs)); // query parameter
 if (htmllibmanagerDefaultthemename != null) queryParams.Add("htmllibmanager.defaultthemename", ApiClient.ParameterToString(htmllibmanagerDefaultthemename)); // query parameter
 if (htmllibmanagerDefaultuserthemename != null) queryParams.Add("htmllibmanager.defaultuserthemename", ApiClient.ParameterToString(htmllibmanagerDefaultuserthemename)); // query parameter
 if (htmllibmanagerFirebuglitePath != null) queryParams.Add("htmllibmanager.firebuglite.path", ApiClient.ParameterToString(htmllibmanagerFirebuglitePath)); // query parameter
 if (htmllibmanagerForceCQUrlInfo != null) queryParams.Add("htmllibmanager.forceCQUrlInfo", ApiClient.ParameterToString(htmllibmanagerForceCQUrlInfo)); // query parameter
 if (htmllibmanagerGzip != null) queryParams.Add("htmllibmanager.gzip", ApiClient.ParameterToString(htmllibmanagerGzip)); // query parameter
 if (htmllibmanagerMaxage != null) queryParams.Add("htmllibmanager.maxage", ApiClient.ParameterToString(htmllibmanagerMaxage)); // query parameter
 if (htmllibmanagerMaxDataUriSize != null) queryParams.Add("htmllibmanager.maxDataUriSize", ApiClient.ParameterToString(htmllibmanagerMaxDataUriSize)); // query parameter
 if (htmllibmanagerMinify != null) queryParams.Add("htmllibmanager.minify", ApiClient.ParameterToString(htmllibmanagerMinify)); // query parameter
 if (htmllibmanagerPathList != null) queryParams.Add("htmllibmanager.path.list", ApiClient.ParameterToString(htmllibmanagerPathList)); // query parameter
 if (htmllibmanagerTiming != null) queryParams.Add("htmllibmanager.timing", ApiClient.ParameterToString(htmllibmanagerTiming)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWidgetImplHtmlLibraryManagerImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWidgetImplHtmlLibraryManagerImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWidgetImplHtmlLibraryManagerImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWidgetImplHtmlLibraryManagerImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="extendableWidgets"></param> 
        /// <param name="widgetextensionproviderDebug"></param> 
        /// <returns>ComDayCqWidgetImplWidgetExtensionProviderImplInfo</returns>            
        public ComDayCqWidgetImplWidgetExtensionProviderImplInfo ComDayCqWidgetImplWidgetExtensionProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extendableWidgets, bool? widgetextensionproviderDebug)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (extendableWidgets != null) queryParams.Add("extendable.widgets", ApiClient.ParameterToString(extendableWidgets)); // query parameter
 if (widgetextensionproviderDebug != null) queryParams.Add("widgetextensionprovider.debug", ApiClient.ParameterToString(widgetextensionproviderDebug)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWidgetImplWidgetExtensionProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWidgetImplWidgetExtensionProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWidgetImplWidgetExtensionProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWidgetImplWidgetExtensionProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="fromAddress"></param> 
        /// <param name="hostPrefix"></param> 
        /// <param name="notifyOnabort"></param> 
        /// <param name="notifyOncomplete"></param> 
        /// <param name="notifyOncontainercomplete"></param> 
        /// <param name="notifyUseronly"></param> 
        /// <returns>ComDayCqWorkflowImplEmailEMailNotificationServiceInfo</returns>            
        public ComDayCqWorkflowImplEmailEMailNotificationServiceInfo ComDayCqWorkflowImplEmailEMailNotificationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string fromAddress, string hostPrefix, bool? notifyOnabort, bool? notifyOncomplete, bool? notifyOncontainercomplete, bool? notifyUseronly)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (fromAddress != null) queryParams.Add("from.address", ApiClient.ParameterToString(fromAddress)); // query parameter
 if (hostPrefix != null) queryParams.Add("host.prefix", ApiClient.ParameterToString(hostPrefix)); // query parameter
 if (notifyOnabort != null) queryParams.Add("notify.onabort", ApiClient.ParameterToString(notifyOnabort)); // query parameter
 if (notifyOncomplete != null) queryParams.Add("notify.oncomplete", ApiClient.ParameterToString(notifyOncomplete)); // query parameter
 if (notifyOncontainercomplete != null) queryParams.Add("notify.oncontainercomplete", ApiClient.ParameterToString(notifyOncontainercomplete)); // query parameter
 if (notifyUseronly != null) queryParams.Add("notify.useronly", ApiClient.ParameterToString(notifyUseronly)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWorkflowImplEmailEMailNotificationService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWorkflowImplEmailEMailNotificationService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWorkflowImplEmailEMailNotificationServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWorkflowImplEmailEMailNotificationServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="notifyOnupdate"></param> 
        /// <param name="notifyOncomplete"></param> 
        /// <returns>ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo</returns>            
        public ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo ComDayCqWorkflowImplEmailTaskEMailNotificationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? notifyOnupdate, bool? notifyOncomplete)
        {
            
    
            var path = "/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (notifyOnupdate != null) queryParams.Add("notify.onupdate", ApiClient.ParameterToString(notifyOnupdate)); // query parameter
 if (notifyOncomplete != null) queryParams.Add("notify.oncomplete", ApiClient.ParameterToString(notifyOncomplete)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWorkflowImplEmailTaskEMailNotificationService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCqWorkflowImplEmailTaskEMailNotificationService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="tokenRequiredAttr"></param> 
        /// <param name="tokenAlternateUrl"></param> 
        /// <param name="tokenEncapsulated"></param> 
        /// <param name="skipTokenRefresh"></param> 
        /// <returns>ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo</returns>            
        public ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string tokenRequiredAttr, string tokenAlternateUrl, bool? tokenEncapsulated, List<string> skipTokenRefresh)
        {
            
    
            var path = "/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (tokenRequiredAttr != null) queryParams.Add("token.required.attr", ApiClient.ParameterToString(tokenRequiredAttr)); // query parameter
 if (tokenAlternateUrl != null) queryParams.Add("token.alternate.url", ApiClient.ParameterToString(tokenAlternateUrl)); // query parameter
 if (tokenEncapsulated != null) queryParams.Add("token.encapsulated", ApiClient.ParameterToString(tokenEncapsulated)); // query parameter
 if (skipTokenRefresh != null) queryParams.Add("skip.token.refresh", ApiClient.ParameterToString(skipTokenRefresh)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enableTokenCleanupTask"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="batchSize"></param> 
        /// <returns>ComDayCrxSecurityTokenImplTokenCleanupTaskInfo</returns>            
        public ComDayCrxSecurityTokenImplTokenCleanupTaskInfo ComDayCrxSecurityTokenImplTokenCleanupTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enableTokenCleanupTask, string schedulerExpression, int? batchSize)
        {
            
    
            var path = "/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enableTokenCleanupTask != null) queryParams.Add("enable.token.cleanup.task", ApiClient.ParameterToString(enableTokenCleanupTask)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (batchSize != null) queryParams.Add("batch.size", ApiClient.ParameterToString(batchSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCrxSecurityTokenImplTokenCleanupTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling ComDayCrxSecurityTokenImplTokenCleanupTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (ComDayCrxSecurityTokenImplTokenCleanupTaskInfo) ApiClient.Deserialize(response.Content, typeof(ComDayCrxSecurityTokenImplTokenCleanupTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="supportedLocales"></param> 
        /// <param name="localizableProperties"></param> 
        /// <returns>GuideLocalizationServiceInfo</returns>            
        public GuideLocalizationServiceInfo GuideLocalizationService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> supportedLocales, List<string> localizableProperties)
        {
            
    
            var path = "/system/console/configMgr/Guide Localization Service";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (supportedLocales != null) queryParams.Add("supportedLocales", ApiClient.ParameterToString(supportedLocales)); // query parameter
 if (localizableProperties != null) queryParams.Add("Localizable Properties", ApiClient.ParameterToString(localizableProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling GuideLocalizationService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling GuideLocalizationService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (GuideLocalizationServiceInfo) ApiClient.Deserialize(response.Content, typeof(GuideLocalizationServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="priority"></param> 
        /// <returns>MessagingUserComponentFactoryInfo</returns>            
        public MessagingUserComponentFactoryInfo MessagingUserComponentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? priority)
        {
            
    
            var path = "/system/console/configMgr/MessagingUserComponentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling MessagingUserComponentFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling MessagingUserComponentFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (MessagingUserComponentFactoryInfo) ApiClient.Deserialize(response.Content, typeof(MessagingUserComponentFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="attributeChangeNotificationEnabled"></param> 
        /// <returns>OrgApacheAriesJmxFrameworkStateConfigInfo</returns>            
        public OrgApacheAriesJmxFrameworkStateConfigInfo OrgApacheAriesJmxFrameworkStateConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? attributeChangeNotificationEnabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (attributeChangeNotificationEnabled != null) queryParams.Add("attributeChangeNotificationEnabled", ApiClient.ParameterToString(attributeChangeNotificationEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheAriesJmxFrameworkStateConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheAriesJmxFrameworkStateConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheAriesJmxFrameworkStateConfigInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheAriesJmxFrameworkStateConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheFelixEventadminThreadPoolSize"></param> 
        /// <param name="orgApacheFelixEventadminAsyncToSyncThreadRatio"></param> 
        /// <param name="orgApacheFelixEventadminTimeout"></param> 
        /// <param name="orgApacheFelixEventadminRequireTopic"></param> 
        /// <param name="orgApacheFelixEventadminIgnoreTimeout"></param> 
        /// <param name="orgApacheFelixEventadminIgnoreTopic"></param> 
        /// <returns>OrgApacheFelixEventadminImplEventAdminInfo</returns>            
        public OrgApacheFelixEventadminImplEventAdminInfo OrgApacheFelixEventadminImplEventAdmin (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheFelixEventadminThreadPoolSize, decimal? orgApacheFelixEventadminAsyncToSyncThreadRatio, int? orgApacheFelixEventadminTimeout, bool? orgApacheFelixEventadminRequireTopic, List<string> orgApacheFelixEventadminIgnoreTimeout, List<string> orgApacheFelixEventadminIgnoreTopic)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheFelixEventadminThreadPoolSize != null) queryParams.Add("org.apache.felix.eventadmin.ThreadPoolSize", ApiClient.ParameterToString(orgApacheFelixEventadminThreadPoolSize)); // query parameter
 if (orgApacheFelixEventadminAsyncToSyncThreadRatio != null) queryParams.Add("org.apache.felix.eventadmin.AsyncToSyncThreadRatio", ApiClient.ParameterToString(orgApacheFelixEventadminAsyncToSyncThreadRatio)); // query parameter
 if (orgApacheFelixEventadminTimeout != null) queryParams.Add("org.apache.felix.eventadmin.Timeout", ApiClient.ParameterToString(orgApacheFelixEventadminTimeout)); // query parameter
 if (orgApacheFelixEventadminRequireTopic != null) queryParams.Add("org.apache.felix.eventadmin.RequireTopic", ApiClient.ParameterToString(orgApacheFelixEventadminRequireTopic)); // query parameter
 if (orgApacheFelixEventadminIgnoreTimeout != null) queryParams.Add("org.apache.felix.eventadmin.IgnoreTimeout", ApiClient.ParameterToString(orgApacheFelixEventadminIgnoreTimeout)); // query parameter
 if (orgApacheFelixEventadminIgnoreTopic != null) queryParams.Add("org.apache.felix.eventadmin.IgnoreTopic", ApiClient.ParameterToString(orgApacheFelixEventadminIgnoreTopic)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixEventadminImplEventAdmin: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixEventadminImplEventAdmin: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixEventadminImplEventAdminInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixEventadminImplEventAdminInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheFelixHttpHost"></param> 
        /// <param name="orgApacheFelixHttpEnable"></param> 
        /// <param name="orgOsgiServiceHttpPort"></param> 
        /// <param name="orgApacheFelixHttpTimeout"></param> 
        /// <param name="orgApacheFelixHttpsEnable"></param> 
        /// <param name="orgOsgiServiceHttpPortSecure"></param> 
        /// <param name="orgApacheFelixHttpsKeystore"></param> 
        /// <param name="orgApacheFelixHttpsKeystorePassword"></param> 
        /// <param name="orgApacheFelixHttpsKeystoreKeyPassword"></param> 
        /// <param name="orgApacheFelixHttpsTruststore"></param> 
        /// <param name="orgApacheFelixHttpsTruststorePassword"></param> 
        /// <param name="orgApacheFelixHttpsClientcertificate"></param> 
        /// <param name="orgApacheFelixHttpContextPath"></param> 
        /// <param name="orgApacheFelixHttpMbeans"></param> 
        /// <param name="orgApacheFelixHttpSessionTimeout"></param> 
        /// <param name="orgApacheFelixHttpJettyThreadpoolMax"></param> 
        /// <param name="orgApacheFelixHttpJettyAcceptors"></param> 
        /// <param name="orgApacheFelixHttpJettySelectors"></param> 
        /// <param name="orgApacheFelixHttpJettyHeaderBufferSize"></param> 
        /// <param name="orgApacheFelixHttpJettyRequestBufferSize"></param> 
        /// <param name="orgApacheFelixHttpJettyResponseBufferSize"></param> 
        /// <param name="orgApacheFelixHttpJettyMaxFormSize"></param> 
        /// <param name="orgApacheFelixHttpPathExclusions"></param> 
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesExcluded"></param> 
        /// <param name="orgApacheFelixHttpsJettyCiphersuitesIncluded"></param> 
        /// <param name="orgApacheFelixHttpJettySendServerHeader"></param> 
        /// <param name="orgApacheFelixHttpsJettyProtocolsIncluded"></param> 
        /// <param name="orgApacheFelixHttpsJettyProtocolsExcluded"></param> 
        /// <param name="orgApacheFelixProxyLoadBalancerConnectionEnable"></param> 
        /// <param name="orgApacheFelixHttpsJettyRenegotiateAllowed"></param> 
        /// <param name="orgApacheFelixHttpsJettySessionCookieHttpOnly"></param> 
        /// <param name="orgApacheFelixHttpsJettySessionCookieSecure"></param> 
        /// <param name="orgEclipseJettyServletSessionIdPathParameterName"></param> 
        /// <param name="orgEclipseJettyServletCheckingRemoteSessionIdEncoding"></param> 
        /// <param name="orgEclipseJettyServletSessionCookie"></param> 
        /// <param name="orgEclipseJettyServletSessionDomain"></param> 
        /// <param name="orgEclipseJettyServletSessionPath"></param> 
        /// <param name="orgEclipseJettyServletMaxAge"></param> 
        /// <param name="orgApacheFelixHttpName"></param> 
        /// <param name="orgApacheFelixJettyGziphandlerEnable"></param> 
        /// <param name="orgApacheFelixJettyGzipMinGzipSize"></param> 
        /// <param name="orgApacheFelixJettyGzipCompressionLevel"></param> 
        /// <param name="orgApacheFelixJettyGzipInflateBufferSize"></param> 
        /// <param name="orgApacheFelixJettyGzipSyncFlush"></param> 
        /// <param name="orgApacheFelixJettyGzipExcludedUserAgents"></param> 
        /// <param name="orgApacheFelixJettyGzipIncludedMethods"></param> 
        /// <param name="orgApacheFelixJettyGzipExcludedMethods"></param> 
        /// <param name="orgApacheFelixJettyGzipIncludedPaths"></param> 
        /// <param name="orgApacheFelixJettyGzipExcludedPaths"></param> 
        /// <param name="orgApacheFelixJettyGzipIncludedMimeTypes"></param> 
        /// <param name="orgApacheFelixJettyGzipExcludedMimeTypes"></param> 
        /// <param name="orgApacheFelixHttpSessionInvalidate"></param> 
        /// <param name="orgApacheFelixHttpSessionUniqueid"></param> 
        /// <returns>OrgApacheFelixHttpInfo</returns>            
        public OrgApacheFelixHttpInfo OrgApacheFelixHttp (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheFelixHttpHost, bool? orgApacheFelixHttpEnable, int? orgOsgiServiceHttpPort, int? orgApacheFelixHttpTimeout, bool? orgApacheFelixHttpsEnable, int? orgOsgiServiceHttpPortSecure, string orgApacheFelixHttpsKeystore, string orgApacheFelixHttpsKeystorePassword, string orgApacheFelixHttpsKeystoreKeyPassword, string orgApacheFelixHttpsTruststore, string orgApacheFelixHttpsTruststorePassword, string orgApacheFelixHttpsClientcertificate, string orgApacheFelixHttpContextPath, bool? orgApacheFelixHttpMbeans, int? orgApacheFelixHttpSessionTimeout, int? orgApacheFelixHttpJettyThreadpoolMax, int? orgApacheFelixHttpJettyAcceptors, int? orgApacheFelixHttpJettySelectors, int? orgApacheFelixHttpJettyHeaderBufferSize, int? orgApacheFelixHttpJettyRequestBufferSize, int? orgApacheFelixHttpJettyResponseBufferSize, int? orgApacheFelixHttpJettyMaxFormSize, List<string> orgApacheFelixHttpPathExclusions, List<string> orgApacheFelixHttpsJettyCiphersuitesExcluded, List<string> orgApacheFelixHttpsJettyCiphersuitesIncluded, bool? orgApacheFelixHttpJettySendServerHeader, List<string> orgApacheFelixHttpsJettyProtocolsIncluded, List<string> orgApacheFelixHttpsJettyProtocolsExcluded, bool? orgApacheFelixProxyLoadBalancerConnectionEnable, bool? orgApacheFelixHttpsJettyRenegotiateAllowed, bool? orgApacheFelixHttpsJettySessionCookieHttpOnly, bool? orgApacheFelixHttpsJettySessionCookieSecure, string orgEclipseJettyServletSessionIdPathParameterName, bool? orgEclipseJettyServletCheckingRemoteSessionIdEncoding, string orgEclipseJettyServletSessionCookie, string orgEclipseJettyServletSessionDomain, string orgEclipseJettyServletSessionPath, int? orgEclipseJettyServletMaxAge, string orgApacheFelixHttpName, bool? orgApacheFelixJettyGziphandlerEnable, int? orgApacheFelixJettyGzipMinGzipSize, int? orgApacheFelixJettyGzipCompressionLevel, int? orgApacheFelixJettyGzipInflateBufferSize, bool? orgApacheFelixJettyGzipSyncFlush, List<string> orgApacheFelixJettyGzipExcludedUserAgents, List<string> orgApacheFelixJettyGzipIncludedMethods, List<string> orgApacheFelixJettyGzipExcludedMethods, List<string> orgApacheFelixJettyGzipIncludedPaths, List<string> orgApacheFelixJettyGzipExcludedPaths, List<string> orgApacheFelixJettyGzipIncludedMimeTypes, List<string> orgApacheFelixJettyGzipExcludedMimeTypes, bool? orgApacheFelixHttpSessionInvalidate, bool? orgApacheFelixHttpSessionUniqueid)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.http";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheFelixHttpHost != null) queryParams.Add("org.apache.felix.http.host", ApiClient.ParameterToString(orgApacheFelixHttpHost)); // query parameter
 if (orgApacheFelixHttpEnable != null) queryParams.Add("org.apache.felix.http.enable", ApiClient.ParameterToString(orgApacheFelixHttpEnable)); // query parameter
 if (orgOsgiServiceHttpPort != null) queryParams.Add("org.osgi.service.http.port", ApiClient.ParameterToString(orgOsgiServiceHttpPort)); // query parameter
 if (orgApacheFelixHttpTimeout != null) queryParams.Add("org.apache.felix.http.timeout", ApiClient.ParameterToString(orgApacheFelixHttpTimeout)); // query parameter
 if (orgApacheFelixHttpsEnable != null) queryParams.Add("org.apache.felix.https.enable", ApiClient.ParameterToString(orgApacheFelixHttpsEnable)); // query parameter
 if (orgOsgiServiceHttpPortSecure != null) queryParams.Add("org.osgi.service.http.port.secure", ApiClient.ParameterToString(orgOsgiServiceHttpPortSecure)); // query parameter
 if (orgApacheFelixHttpsKeystore != null) queryParams.Add("org.apache.felix.https.keystore", ApiClient.ParameterToString(orgApacheFelixHttpsKeystore)); // query parameter
 if (orgApacheFelixHttpsKeystorePassword != null) queryParams.Add("org.apache.felix.https.keystore.password", ApiClient.ParameterToString(orgApacheFelixHttpsKeystorePassword)); // query parameter
 if (orgApacheFelixHttpsKeystoreKeyPassword != null) queryParams.Add("org.apache.felix.https.keystore.key.password", ApiClient.ParameterToString(orgApacheFelixHttpsKeystoreKeyPassword)); // query parameter
 if (orgApacheFelixHttpsTruststore != null) queryParams.Add("org.apache.felix.https.truststore", ApiClient.ParameterToString(orgApacheFelixHttpsTruststore)); // query parameter
 if (orgApacheFelixHttpsTruststorePassword != null) queryParams.Add("org.apache.felix.https.truststore.password", ApiClient.ParameterToString(orgApacheFelixHttpsTruststorePassword)); // query parameter
 if (orgApacheFelixHttpsClientcertificate != null) queryParams.Add("org.apache.felix.https.clientcertificate", ApiClient.ParameterToString(orgApacheFelixHttpsClientcertificate)); // query parameter
 if (orgApacheFelixHttpContextPath != null) queryParams.Add("org.apache.felix.http.context_path", ApiClient.ParameterToString(orgApacheFelixHttpContextPath)); // query parameter
 if (orgApacheFelixHttpMbeans != null) queryParams.Add("org.apache.felix.http.mbeans", ApiClient.ParameterToString(orgApacheFelixHttpMbeans)); // query parameter
 if (orgApacheFelixHttpSessionTimeout != null) queryParams.Add("org.apache.felix.http.session.timeout", ApiClient.ParameterToString(orgApacheFelixHttpSessionTimeout)); // query parameter
 if (orgApacheFelixHttpJettyThreadpoolMax != null) queryParams.Add("org.apache.felix.http.jetty.threadpool.max", ApiClient.ParameterToString(orgApacheFelixHttpJettyThreadpoolMax)); // query parameter
 if (orgApacheFelixHttpJettyAcceptors != null) queryParams.Add("org.apache.felix.http.jetty.acceptors", ApiClient.ParameterToString(orgApacheFelixHttpJettyAcceptors)); // query parameter
 if (orgApacheFelixHttpJettySelectors != null) queryParams.Add("org.apache.felix.http.jetty.selectors", ApiClient.ParameterToString(orgApacheFelixHttpJettySelectors)); // query parameter
 if (orgApacheFelixHttpJettyHeaderBufferSize != null) queryParams.Add("org.apache.felix.http.jetty.headerBufferSize", ApiClient.ParameterToString(orgApacheFelixHttpJettyHeaderBufferSize)); // query parameter
 if (orgApacheFelixHttpJettyRequestBufferSize != null) queryParams.Add("org.apache.felix.http.jetty.requestBufferSize", ApiClient.ParameterToString(orgApacheFelixHttpJettyRequestBufferSize)); // query parameter
 if (orgApacheFelixHttpJettyResponseBufferSize != null) queryParams.Add("org.apache.felix.http.jetty.responseBufferSize", ApiClient.ParameterToString(orgApacheFelixHttpJettyResponseBufferSize)); // query parameter
 if (orgApacheFelixHttpJettyMaxFormSize != null) queryParams.Add("org.apache.felix.http.jetty.maxFormSize", ApiClient.ParameterToString(orgApacheFelixHttpJettyMaxFormSize)); // query parameter
 if (orgApacheFelixHttpPathExclusions != null) queryParams.Add("org.apache.felix.http.path_exclusions", ApiClient.ParameterToString(orgApacheFelixHttpPathExclusions)); // query parameter
 if (orgApacheFelixHttpsJettyCiphersuitesExcluded != null) queryParams.Add("org.apache.felix.https.jetty.ciphersuites.excluded", ApiClient.ParameterToString(orgApacheFelixHttpsJettyCiphersuitesExcluded)); // query parameter
 if (orgApacheFelixHttpsJettyCiphersuitesIncluded != null) queryParams.Add("org.apache.felix.https.jetty.ciphersuites.included", ApiClient.ParameterToString(orgApacheFelixHttpsJettyCiphersuitesIncluded)); // query parameter
 if (orgApacheFelixHttpJettySendServerHeader != null) queryParams.Add("org.apache.felix.http.jetty.sendServerHeader", ApiClient.ParameterToString(orgApacheFelixHttpJettySendServerHeader)); // query parameter
 if (orgApacheFelixHttpsJettyProtocolsIncluded != null) queryParams.Add("org.apache.felix.https.jetty.protocols.included", ApiClient.ParameterToString(orgApacheFelixHttpsJettyProtocolsIncluded)); // query parameter
 if (orgApacheFelixHttpsJettyProtocolsExcluded != null) queryParams.Add("org.apache.felix.https.jetty.protocols.excluded", ApiClient.ParameterToString(orgApacheFelixHttpsJettyProtocolsExcluded)); // query parameter
 if (orgApacheFelixProxyLoadBalancerConnectionEnable != null) queryParams.Add("org.apache.felix.proxy.load.balancer.connection.enable", ApiClient.ParameterToString(orgApacheFelixProxyLoadBalancerConnectionEnable)); // query parameter
 if (orgApacheFelixHttpsJettyRenegotiateAllowed != null) queryParams.Add("org.apache.felix.https.jetty.renegotiateAllowed", ApiClient.ParameterToString(orgApacheFelixHttpsJettyRenegotiateAllowed)); // query parameter
 if (orgApacheFelixHttpsJettySessionCookieHttpOnly != null) queryParams.Add("org.apache.felix.https.jetty.session.cookie.httpOnly", ApiClient.ParameterToString(orgApacheFelixHttpsJettySessionCookieHttpOnly)); // query parameter
 if (orgApacheFelixHttpsJettySessionCookieSecure != null) queryParams.Add("org.apache.felix.https.jetty.session.cookie.secure", ApiClient.ParameterToString(orgApacheFelixHttpsJettySessionCookieSecure)); // query parameter
 if (orgEclipseJettyServletSessionIdPathParameterName != null) queryParams.Add("org.eclipse.jetty.servlet.SessionIdPathParameterName", ApiClient.ParameterToString(orgEclipseJettyServletSessionIdPathParameterName)); // query parameter
 if (orgEclipseJettyServletCheckingRemoteSessionIdEncoding != null) queryParams.Add("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding", ApiClient.ParameterToString(orgEclipseJettyServletCheckingRemoteSessionIdEncoding)); // query parameter
 if (orgEclipseJettyServletSessionCookie != null) queryParams.Add("org.eclipse.jetty.servlet.SessionCookie", ApiClient.ParameterToString(orgEclipseJettyServletSessionCookie)); // query parameter
 if (orgEclipseJettyServletSessionDomain != null) queryParams.Add("org.eclipse.jetty.servlet.SessionDomain", ApiClient.ParameterToString(orgEclipseJettyServletSessionDomain)); // query parameter
 if (orgEclipseJettyServletSessionPath != null) queryParams.Add("org.eclipse.jetty.servlet.SessionPath", ApiClient.ParameterToString(orgEclipseJettyServletSessionPath)); // query parameter
 if (orgEclipseJettyServletMaxAge != null) queryParams.Add("org.eclipse.jetty.servlet.MaxAge", ApiClient.ParameterToString(orgEclipseJettyServletMaxAge)); // query parameter
 if (orgApacheFelixHttpName != null) queryParams.Add("org.apache.felix.http.name", ApiClient.ParameterToString(orgApacheFelixHttpName)); // query parameter
 if (orgApacheFelixJettyGziphandlerEnable != null) queryParams.Add("org.apache.felix.jetty.gziphandler.enable", ApiClient.ParameterToString(orgApacheFelixJettyGziphandlerEnable)); // query parameter
 if (orgApacheFelixJettyGzipMinGzipSize != null) queryParams.Add("org.apache.felix.jetty.gzip.minGzipSize", ApiClient.ParameterToString(orgApacheFelixJettyGzipMinGzipSize)); // query parameter
 if (orgApacheFelixJettyGzipCompressionLevel != null) queryParams.Add("org.apache.felix.jetty.gzip.compressionLevel", ApiClient.ParameterToString(orgApacheFelixJettyGzipCompressionLevel)); // query parameter
 if (orgApacheFelixJettyGzipInflateBufferSize != null) queryParams.Add("org.apache.felix.jetty.gzip.inflateBufferSize", ApiClient.ParameterToString(orgApacheFelixJettyGzipInflateBufferSize)); // query parameter
 if (orgApacheFelixJettyGzipSyncFlush != null) queryParams.Add("org.apache.felix.jetty.gzip.syncFlush", ApiClient.ParameterToString(orgApacheFelixJettyGzipSyncFlush)); // query parameter
 if (orgApacheFelixJettyGzipExcludedUserAgents != null) queryParams.Add("org.apache.felix.jetty.gzip.excludedUserAgents", ApiClient.ParameterToString(orgApacheFelixJettyGzipExcludedUserAgents)); // query parameter
 if (orgApacheFelixJettyGzipIncludedMethods != null) queryParams.Add("org.apache.felix.jetty.gzip.includedMethods", ApiClient.ParameterToString(orgApacheFelixJettyGzipIncludedMethods)); // query parameter
 if (orgApacheFelixJettyGzipExcludedMethods != null) queryParams.Add("org.apache.felix.jetty.gzip.excludedMethods", ApiClient.ParameterToString(orgApacheFelixJettyGzipExcludedMethods)); // query parameter
 if (orgApacheFelixJettyGzipIncludedPaths != null) queryParams.Add("org.apache.felix.jetty.gzip.includedPaths", ApiClient.ParameterToString(orgApacheFelixJettyGzipIncludedPaths)); // query parameter
 if (orgApacheFelixJettyGzipExcludedPaths != null) queryParams.Add("org.apache.felix.jetty.gzip.excludedPaths", ApiClient.ParameterToString(orgApacheFelixJettyGzipExcludedPaths)); // query parameter
 if (orgApacheFelixJettyGzipIncludedMimeTypes != null) queryParams.Add("org.apache.felix.jetty.gzip.includedMimeTypes", ApiClient.ParameterToString(orgApacheFelixJettyGzipIncludedMimeTypes)); // query parameter
 if (orgApacheFelixJettyGzipExcludedMimeTypes != null) queryParams.Add("org.apache.felix.jetty.gzip.excludedMimeTypes", ApiClient.ParameterToString(orgApacheFelixJettyGzipExcludedMimeTypes)); // query parameter
 if (orgApacheFelixHttpSessionInvalidate != null) queryParams.Add("org.apache.felix.http.session.invalidate", ApiClient.ParameterToString(orgApacheFelixHttpSessionInvalidate)); // query parameter
 if (orgApacheFelixHttpSessionUniqueid != null) queryParams.Add("org.apache.felix.http.session.uniqueid", ApiClient.ParameterToString(orgApacheFelixHttpSessionUniqueid)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixHttp: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixHttp: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixHttpInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixHttpInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="sslForwardHeader"></param> 
        /// <param name="sslForwardValue"></param> 
        /// <param name="sslForwardCertHeader"></param> 
        /// <param name="rewriteAbsoluteUrls"></param> 
        /// <returns>OrgApacheFelixHttpSslfilterSslFilterInfo</returns>            
        public OrgApacheFelixHttpSslfilterSslFilterInfo OrgApacheFelixHttpSslfilterSslFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string sslForwardHeader, string sslForwardValue, string sslForwardCertHeader, bool? rewriteAbsoluteUrls)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (sslForwardHeader != null) queryParams.Add("ssl-forward.header", ApiClient.ParameterToString(sslForwardHeader)); // query parameter
 if (sslForwardValue != null) queryParams.Add("ssl-forward.value", ApiClient.ParameterToString(sslForwardValue)); // query parameter
 if (sslForwardCertHeader != null) queryParams.Add("ssl-forward-cert.header", ApiClient.ParameterToString(sslForwardCertHeader)); // query parameter
 if (rewriteAbsoluteUrls != null) queryParams.Add("rewrite.absolute.urls", ApiClient.ParameterToString(rewriteAbsoluteUrls)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixHttpSslfilterSslFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixHttpSslfilterSslFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixHttpSslfilterSslFilterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixHttpSslfilterSslFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jaasControlFlag"></param> 
        /// <param name="jaasRanking"></param> 
        /// <param name="jaasRealmName"></param> 
        /// <param name="jaasClassname"></param> 
        /// <param name="jaasOptions"></param> 
        /// <returns>OrgApacheFelixJaasConfigurationFactoryInfo</returns>            
        public OrgApacheFelixJaasConfigurationFactoryInfo OrgApacheFelixJaasConfigurationFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasControlFlag, int? jaasRanking, string jaasRealmName, string jaasClassname, List<string> jaasOptions)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.jaas.Configuration.factory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jaasControlFlag != null) queryParams.Add("jaas.controlFlag", ApiClient.ParameterToString(jaasControlFlag)); // query parameter
 if (jaasRanking != null) queryParams.Add("jaas.ranking", ApiClient.ParameterToString(jaasRanking)); // query parameter
 if (jaasRealmName != null) queryParams.Add("jaas.realmName", ApiClient.ParameterToString(jaasRealmName)); // query parameter
 if (jaasClassname != null) queryParams.Add("jaas.classname", ApiClient.ParameterToString(jaasClassname)); // query parameter
 if (jaasOptions != null) queryParams.Add("jaas.options", ApiClient.ParameterToString(jaasOptions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixJaasConfigurationFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixJaasConfigurationFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixJaasConfigurationFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixJaasConfigurationFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jaasDefaultRealmName"></param> 
        /// <param name="jaasConfigProviderName"></param> 
        /// <param name="jaasGlobalConfigPolicy"></param> 
        /// <returns>OrgApacheFelixJaasConfigurationSpiInfo</returns>            
        public OrgApacheFelixJaasConfigurationSpiInfo OrgApacheFelixJaasConfigurationSpi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jaasDefaultRealmName, string jaasConfigProviderName, string jaasGlobalConfigPolicy)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jaasDefaultRealmName != null) queryParams.Add("jaas.defaultRealmName", ApiClient.ParameterToString(jaasDefaultRealmName)); // query parameter
 if (jaasConfigProviderName != null) queryParams.Add("jaas.configProviderName", ApiClient.ParameterToString(jaasConfigProviderName)); // query parameter
 if (jaasGlobalConfigPolicy != null) queryParams.Add("jaas.globalConfigPolicy", ApiClient.ParameterToString(jaasGlobalConfigPolicy)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixJaasConfigurationSpi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixJaasConfigurationSpi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixJaasConfigurationSpiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixJaasConfigurationSpiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="dsLoglevel"></param> 
        /// <param name="dsFactoryEnabled"></param> 
        /// <param name="dsDelayedKeepInstances"></param> 
        /// <param name="dsLockTimeoutMilliseconds"></param> 
        /// <param name="dsStopTimeoutMilliseconds"></param> 
        /// <param name="dsGlobalExtender"></param> 
        /// <returns>OrgApacheFelixScrScrServiceInfo</returns>            
        public OrgApacheFelixScrScrServiceInfo OrgApacheFelixScrScrService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? dsLoglevel, bool? dsFactoryEnabled, bool? dsDelayedKeepInstances, int? dsLockTimeoutMilliseconds, int? dsStopTimeoutMilliseconds, bool? dsGlobalExtender)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.scr.ScrService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (dsLoglevel != null) queryParams.Add("ds.loglevel", ApiClient.ParameterToString(dsLoglevel)); // query parameter
 if (dsFactoryEnabled != null) queryParams.Add("ds.factory.enabled", ApiClient.ParameterToString(dsFactoryEnabled)); // query parameter
 if (dsDelayedKeepInstances != null) queryParams.Add("ds.delayed.keepInstances", ApiClient.ParameterToString(dsDelayedKeepInstances)); // query parameter
 if (dsLockTimeoutMilliseconds != null) queryParams.Add("ds.lock.timeout.milliseconds", ApiClient.ParameterToString(dsLockTimeoutMilliseconds)); // query parameter
 if (dsStopTimeoutMilliseconds != null) queryParams.Add("ds.stop.timeout.milliseconds", ApiClient.ParameterToString(dsStopTimeoutMilliseconds)); // query parameter
 if (dsGlobalExtender != null) queryParams.Add("ds.global.extender", ApiClient.ParameterToString(dsGlobalExtender)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixScrScrService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixScrScrService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixScrScrServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixScrScrServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="componentsList"></param> 
        /// <param name="type"></param> 
        /// <returns>OrgApacheFelixSystemreadyImplComponentsCheckInfo</returns>            
        public OrgApacheFelixSystemreadyImplComponentsCheckInfo OrgApacheFelixSystemreadyImplComponentsCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> componentsList, string type)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (componentsList != null) queryParams.Add("components.list", ApiClient.ParameterToString(componentsList)); // query parameter
 if (type != null) queryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplComponentsCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplComponentsCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadyImplComponentsCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadyImplComponentsCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="timeout"></param> 
        /// <param name="targetStartLevel"></param> 
        /// <param name="targetStartLevelPropName"></param> 
        /// <param name="type"></param> 
        /// <returns>OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo</returns>            
        public OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo OrgApacheFelixSystemreadyImplFrameworkStartCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeout, int? targetStartLevel, string targetStartLevelPropName, string type)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (timeout != null) queryParams.Add("timeout", ApiClient.ParameterToString(timeout)); // query parameter
 if (targetStartLevel != null) queryParams.Add("target.start.level", ApiClient.ParameterToString(targetStartLevel)); // query parameter
 if (targetStartLevelPropName != null) queryParams.Add("target.start.level.prop.name", ApiClient.ParameterToString(targetStartLevelPropName)); // query parameter
 if (type != null) queryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplFrameworkStartCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplFrameworkStartCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="servicesList"></param> 
        /// <param name="type"></param> 
        /// <returns>OrgApacheFelixSystemreadyImplServicesCheckInfo</returns>            
        public OrgApacheFelixSystemreadyImplServicesCheckInfo OrgApacheFelixSystemreadyImplServicesCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servicesList, string type)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (servicesList != null) queryParams.Add("services.list", ApiClient.ParameterToString(servicesList)); // query parameter
 if (type != null) queryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServicesCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServicesCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadyImplServicesCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadyImplServicesCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="osgiHttpWhiteboardServletPattern"></param> 
        /// <param name="osgiHttpWhiteboardContextSelect"></param> 
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo</returns>            
        public OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo OrgApacheFelixSystemreadyImplServletSystemAliveServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (osgiHttpWhiteboardServletPattern != null) queryParams.Add("osgi.http.whiteboard.servlet.pattern", ApiClient.ParameterToString(osgiHttpWhiteboardServletPattern)); // query parameter
 if (osgiHttpWhiteboardContextSelect != null) queryParams.Add("osgi.http.whiteboard.context.select", ApiClient.ParameterToString(osgiHttpWhiteboardContextSelect)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServletSystemAliveServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServletSystemAliveServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="osgiHttpWhiteboardServletPattern"></param> 
        /// <param name="osgiHttpWhiteboardContextSelect"></param> 
        /// <returns>OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo</returns>            
        public OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo OrgApacheFelixSystemreadyImplServletSystemReadyServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardServletPattern, string osgiHttpWhiteboardContextSelect)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (osgiHttpWhiteboardServletPattern != null) queryParams.Add("osgi.http.whiteboard.servlet.pattern", ApiClient.ParameterToString(osgiHttpWhiteboardServletPattern)); // query parameter
 if (osgiHttpWhiteboardContextSelect != null) queryParams.Add("osgi.http.whiteboard.context.select", ApiClient.ParameterToString(osgiHttpWhiteboardContextSelect)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServletSystemReadyServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadyImplServletSystemReadyServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pollInterval"></param> 
        /// <returns>OrgApacheFelixSystemreadySystemReadyMonitorInfo</returns>            
        public OrgApacheFelixSystemreadySystemReadyMonitorInfo OrgApacheFelixSystemreadySystemReadyMonitor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? pollInterval)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pollInterval != null) queryParams.Add("poll.interval", ApiClient.ParameterToString(pollInterval)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadySystemReadyMonitor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixSystemreadySystemReadyMonitor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixSystemreadySystemReadyMonitorInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixSystemreadySystemReadyMonitorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="managerRoot"></param> 
        /// <param name="httpServiceFilter"></param> 
        /// <param name="defaultRender"></param> 
        /// <param name="realm"></param> 
        /// <param name="username"></param> 
        /// <param name="password"></param> 
        /// <param name="category"></param> 
        /// <param name="locale"></param> 
        /// <param name="loglevel"></param> 
        /// <param name="plugins"></param> 
        /// <returns>OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo</returns>            
        public OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo OrgApacheFelixWebconsoleInternalServletOsgiManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string managerRoot, string httpServiceFilter, string defaultRender, string realm, string username, string password, string category, string locale, int? loglevel, string plugins)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (managerRoot != null) queryParams.Add("manager.root", ApiClient.ParameterToString(managerRoot)); // query parameter
 if (httpServiceFilter != null) queryParams.Add("http.service.filter", ApiClient.ParameterToString(httpServiceFilter)); // query parameter
 if (defaultRender != null) queryParams.Add("default.render", ApiClient.ParameterToString(defaultRender)); // query parameter
 if (realm != null) queryParams.Add("realm", ApiClient.ParameterToString(realm)); // query parameter
 if (username != null) queryParams.Add("username", ApiClient.ParameterToString(username)); // query parameter
 if (password != null) queryParams.Add("password", ApiClient.ParameterToString(password)); // query parameter
 if (category != null) queryParams.Add("category", ApiClient.ParameterToString(category)); // query parameter
 if (locale != null) queryParams.Add("locale", ApiClient.ParameterToString(locale)); // query parameter
 if (loglevel != null) queryParams.Add("loglevel", ApiClient.ParameterToString(loglevel)); // query parameter
 if (plugins != null) queryParams.Add("plugins", ApiClient.ParameterToString(plugins)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsoleInternalServletOsgiManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsoleInternalServletOsgiManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxSize"></param> 
        /// <returns>OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo</returns>            
        public OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo OrgApacheFelixWebconsolePluginsEventInternalPluginServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxSize)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxSize != null) queryParams.Add("max.size", ApiClient.ParameterToString(maxSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsolePluginsEventInternalPluginServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsolePluginsEventInternalPluginServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="felixMemoryusageDumpThreshold"></param> 
        /// <param name="felixMemoryusageDumpInterval"></param> 
        /// <param name="felixMemoryusageDumpLocation"></param> 
        /// <returns>OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo</returns>            
        public OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? felixMemoryusageDumpThreshold, int? felixMemoryusageDumpInterval, string felixMemoryusageDumpLocation)
        {
            
    
            var path = "/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (felixMemoryusageDumpThreshold != null) queryParams.Add("felix.memoryusage.dump.threshold", ApiClient.ParameterToString(felixMemoryusageDumpThreshold)); // query parameter
 if (felixMemoryusageDumpInterval != null) queryParams.Add("felix.memoryusage.dump.interval", ApiClient.ParameterToString(felixMemoryusageDumpInterval)); // query parameter
 if (felixMemoryusageDumpLocation != null) queryParams.Add("felix.memoryusage.dump.location", ApiClient.ParameterToString(felixMemoryusageDumpLocation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="proxyEnabled"></param> 
        /// <param name="proxyHost"></param> 
        /// <param name="proxyPort"></param> 
        /// <param name="proxyUser"></param> 
        /// <param name="proxyPassword"></param> 
        /// <param name="proxyExceptions"></param> 
        /// <returns>OrgApacheHttpProxyconfiguratorInfo</returns>            
        public OrgApacheHttpProxyconfiguratorInfo OrgApacheHttpProxyconfigurator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? proxyEnabled, string proxyHost, int? proxyPort, string proxyUser, string proxyPassword, List<string> proxyExceptions)
        {
            
    
            var path = "/system/console/configMgr/org.apache.http.proxyconfigurator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (proxyEnabled != null) queryParams.Add("proxy.enabled", ApiClient.ParameterToString(proxyEnabled)); // query parameter
 if (proxyHost != null) queryParams.Add("proxy.host", ApiClient.ParameterToString(proxyHost)); // query parameter
 if (proxyPort != null) queryParams.Add("proxy.port", ApiClient.ParameterToString(proxyPort)); // query parameter
 if (proxyUser != null) queryParams.Add("proxy.user", ApiClient.ParameterToString(proxyUser)); // query parameter
 if (proxyPassword != null) queryParams.Add("proxy.password", ApiClient.ParameterToString(proxyPassword)); // query parameter
 if (proxyExceptions != null) queryParams.Add("proxy.exceptions", ApiClient.ParameterToString(proxyExceptions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheHttpProxyconfigurator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheHttpProxyconfigurator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheHttpProxyconfiguratorInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheHttpProxyconfiguratorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="dir"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo</returns>            
        public OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string dir)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (dir != null) queryParams.Add("dir", ApiClient.ParameterToString(dir)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo</returns>            
        public OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mongouri"></param> 
        /// <param name="db"></param> 
        /// <param name="socketKeepAlive"></param> 
        /// <param name="cache"></param> 
        /// <param name="nodeCachePercentage"></param> 
        /// <param name="prevDocCachePercentage"></param> 
        /// <param name="childrenCachePercentage"></param> 
        /// <param name="diffCachePercentage"></param> 
        /// <param name="cacheSegmentCount"></param> 
        /// <param name="cacheStackMoveDistance"></param> 
        /// <param name="blobCacheSize"></param> 
        /// <param name="persistentCache"></param> 
        /// <param name="journalCache"></param> 
        /// <param name="customBlobStore"></param> 
        /// <param name="journalGCInterval"></param> 
        /// <param name="journalGCMaxAge"></param> 
        /// <param name="prefetchExternalChanges"></param> 
        /// <param name="role"></param> 
        /// <param name="versionGcMaxAgeInSecs"></param> 
        /// <param name="versionGCExpression"></param> 
        /// <param name="versionGCTimeLimitInSecs"></param> 
        /// <param name="blobGcMaxAgeInSecs"></param> 
        /// <param name="blobTrackSnapshotIntervalInSecs"></param> 
        /// <param name="repositoryHome"></param> 
        /// <param name="maxReplicationLagInSecs"></param> 
        /// <param name="documentStoreType"></param> 
        /// <param name="bundlingDisabled"></param> 
        /// <param name="updateLimit"></param> 
        /// <param name="persistentCacheIncludes"></param> 
        /// <param name="leaseCheckMode"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo</returns>            
        public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mongouri, string db, bool? socketKeepAlive, int? cache, int? nodeCachePercentage, int? prevDocCachePercentage, int? childrenCachePercentage, int? diffCachePercentage, int? cacheSegmentCount, int? cacheStackMoveDistance, int? blobCacheSize, string persistentCache, string journalCache, bool? customBlobStore, int? journalGCInterval, int? journalGCMaxAge, bool? prefetchExternalChanges, string role, int? versionGcMaxAgeInSecs, string versionGCExpression, int? versionGCTimeLimitInSecs, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string repositoryHome, int? maxReplicationLagInSecs, string documentStoreType, bool? bundlingDisabled, int? updateLimit, List<string> persistentCacheIncludes, string leaseCheckMode)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mongouri != null) queryParams.Add("mongouri", ApiClient.ParameterToString(mongouri)); // query parameter
 if (db != null) queryParams.Add("db", ApiClient.ParameterToString(db)); // query parameter
 if (socketKeepAlive != null) queryParams.Add("socketKeepAlive", ApiClient.ParameterToString(socketKeepAlive)); // query parameter
 if (cache != null) queryParams.Add("cache", ApiClient.ParameterToString(cache)); // query parameter
 if (nodeCachePercentage != null) queryParams.Add("nodeCachePercentage", ApiClient.ParameterToString(nodeCachePercentage)); // query parameter
 if (prevDocCachePercentage != null) queryParams.Add("prevDocCachePercentage", ApiClient.ParameterToString(prevDocCachePercentage)); // query parameter
 if (childrenCachePercentage != null) queryParams.Add("childrenCachePercentage", ApiClient.ParameterToString(childrenCachePercentage)); // query parameter
 if (diffCachePercentage != null) queryParams.Add("diffCachePercentage", ApiClient.ParameterToString(diffCachePercentage)); // query parameter
 if (cacheSegmentCount != null) queryParams.Add("cacheSegmentCount", ApiClient.ParameterToString(cacheSegmentCount)); // query parameter
 if (cacheStackMoveDistance != null) queryParams.Add("cacheStackMoveDistance", ApiClient.ParameterToString(cacheStackMoveDistance)); // query parameter
 if (blobCacheSize != null) queryParams.Add("blobCacheSize", ApiClient.ParameterToString(blobCacheSize)); // query parameter
 if (persistentCache != null) queryParams.Add("persistentCache", ApiClient.ParameterToString(persistentCache)); // query parameter
 if (journalCache != null) queryParams.Add("journalCache", ApiClient.ParameterToString(journalCache)); // query parameter
 if (customBlobStore != null) queryParams.Add("customBlobStore", ApiClient.ParameterToString(customBlobStore)); // query parameter
 if (journalGCInterval != null) queryParams.Add("journalGCInterval", ApiClient.ParameterToString(journalGCInterval)); // query parameter
 if (journalGCMaxAge != null) queryParams.Add("journalGCMaxAge", ApiClient.ParameterToString(journalGCMaxAge)); // query parameter
 if (prefetchExternalChanges != null) queryParams.Add("prefetchExternalChanges", ApiClient.ParameterToString(prefetchExternalChanges)); // query parameter
 if (role != null) queryParams.Add("role", ApiClient.ParameterToString(role)); // query parameter
 if (versionGcMaxAgeInSecs != null) queryParams.Add("versionGcMaxAgeInSecs", ApiClient.ParameterToString(versionGcMaxAgeInSecs)); // query parameter
 if (versionGCExpression != null) queryParams.Add("versionGCExpression", ApiClient.ParameterToString(versionGCExpression)); // query parameter
 if (versionGCTimeLimitInSecs != null) queryParams.Add("versionGCTimeLimitInSecs", ApiClient.ParameterToString(versionGCTimeLimitInSecs)); // query parameter
 if (blobGcMaxAgeInSecs != null) queryParams.Add("blobGcMaxAgeInSecs", ApiClient.ParameterToString(blobGcMaxAgeInSecs)); // query parameter
 if (blobTrackSnapshotIntervalInSecs != null) queryParams.Add("blobTrackSnapshotIntervalInSecs", ApiClient.ParameterToString(blobTrackSnapshotIntervalInSecs)); // query parameter
 if (repositoryHome != null) queryParams.Add("repository.home", ApiClient.ParameterToString(repositoryHome)); // query parameter
 if (maxReplicationLagInSecs != null) queryParams.Add("maxReplicationLagInSecs", ApiClient.ParameterToString(maxReplicationLagInSecs)); // query parameter
 if (documentStoreType != null) queryParams.Add("documentStoreType", ApiClient.ParameterToString(documentStoreType)); // query parameter
 if (bundlingDisabled != null) queryParams.Add("bundlingDisabled", ApiClient.ParameterToString(bundlingDisabled)); // query parameter
 if (updateLimit != null) queryParams.Add("updateLimit", ApiClient.ParameterToString(updateLimit)); // query parameter
 if (persistentCacheIncludes != null) queryParams.Add("persistentCacheIncludes", ApiClient.ParameterToString(persistentCacheIncludes)); // query parameter
 if (leaseCheckMode != null) queryParams.Add("leaseCheckMode", ApiClient.ParameterToString(leaseCheckMode)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="persistentCacheIncludes"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo</returns>            
        public OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> persistentCacheIncludes)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (persistentCacheIncludes != null) queryParams.Add("persistentCacheIncludes", ApiClient.ParameterToString(persistentCacheIncludes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="includedPaths"></param> 
        /// <param name="enableAsyncObserver"></param> 
        /// <param name="observerQueueSize"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo</returns>            
        public OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> includedPaths, bool? enableAsyncObserver, int? observerQueueSize)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (includedPaths != null) queryParams.Add("includedPaths", ApiClient.ParameterToString(includedPaths)); // query parameter
 if (enableAsyncObserver != null) queryParams.Add("enableAsyncObserver", ApiClient.ParameterToString(enableAsyncObserver)); // query parameter
 if (observerQueueSize != null) queryParams.Add("observerQueueSize", ApiClient.ParameterToString(observerQueueSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="asyncConfigs"></param> 
        /// <param name="leaseTimeOutMinutes"></param> 
        /// <param name="failingIndexTimeoutSeconds"></param> 
        /// <param name="errorWarnIntervalSeconds"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> asyncConfigs, int? leaseTimeOutMinutes, int? failingIndexTimeoutSeconds, int? errorWarnIntervalSeconds)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (asyncConfigs != null) queryParams.Add("asyncConfigs", ApiClient.ParameterToString(asyncConfigs)); // query parameter
 if (leaseTimeOutMinutes != null) queryParams.Add("leaseTimeOutMinutes", ApiClient.ParameterToString(leaseTimeOutMinutes)); // query parameter
 if (failingIndexTimeoutSeconds != null) queryParams.Add("failingIndexTimeoutSeconds", ApiClient.ParameterToString(failingIndexTimeoutSeconds)); // query parameter
 if (errorWarnIntervalSeconds != null) queryParams.Add("errorWarnIntervalSeconds", ApiClient.ParameterToString(errorWarnIntervalSeconds)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="disabled"></param> 
        /// <param name="debug"></param> 
        /// <param name="localIndexDir"></param> 
        /// <param name="enableOpenIndexAsync"></param> 
        /// <param name="threadPoolSize"></param> 
        /// <param name="prefetchIndexFiles"></param> 
        /// <param name="extractedTextCacheSizeInMB"></param> 
        /// <param name="extractedTextCacheExpiryInSecs"></param> 
        /// <param name="alwaysUsePreExtractedCache"></param> 
        /// <param name="booleanClauseLimit"></param> 
        /// <param name="enableHybridIndexing"></param> 
        /// <param name="hybridQueueSize"></param> 
        /// <param name="disableStoredIndexDefinition"></param> 
        /// <param name="deletedBlobsCollectionEnabled"></param> 
        /// <param name="propIndexCleanerIntervalInSecs"></param> 
        /// <param name="enableSingleBlobIndexFiles"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? disabled, bool? debug, string localIndexDir, bool? enableOpenIndexAsync, int? threadPoolSize, bool? prefetchIndexFiles, int? extractedTextCacheSizeInMB, int? extractedTextCacheExpiryInSecs, bool? alwaysUsePreExtractedCache, int? booleanClauseLimit, bool? enableHybridIndexing, int? hybridQueueSize, bool? disableStoredIndexDefinition, bool? deletedBlobsCollectionEnabled, int? propIndexCleanerIntervalInSecs, bool? enableSingleBlobIndexFiles)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (disabled != null) queryParams.Add("disabled", ApiClient.ParameterToString(disabled)); // query parameter
 if (debug != null) queryParams.Add("debug", ApiClient.ParameterToString(debug)); // query parameter
 if (localIndexDir != null) queryParams.Add("localIndexDir", ApiClient.ParameterToString(localIndexDir)); // query parameter
 if (enableOpenIndexAsync != null) queryParams.Add("enableOpenIndexAsync", ApiClient.ParameterToString(enableOpenIndexAsync)); // query parameter
 if (threadPoolSize != null) queryParams.Add("threadPoolSize", ApiClient.ParameterToString(threadPoolSize)); // query parameter
 if (prefetchIndexFiles != null) queryParams.Add("prefetchIndexFiles", ApiClient.ParameterToString(prefetchIndexFiles)); // query parameter
 if (extractedTextCacheSizeInMB != null) queryParams.Add("extractedTextCacheSizeInMB", ApiClient.ParameterToString(extractedTextCacheSizeInMB)); // query parameter
 if (extractedTextCacheExpiryInSecs != null) queryParams.Add("extractedTextCacheExpiryInSecs", ApiClient.ParameterToString(extractedTextCacheExpiryInSecs)); // query parameter
 if (alwaysUsePreExtractedCache != null) queryParams.Add("alwaysUsePreExtractedCache", ApiClient.ParameterToString(alwaysUsePreExtractedCache)); // query parameter
 if (booleanClauseLimit != null) queryParams.Add("booleanClauseLimit", ApiClient.ParameterToString(booleanClauseLimit)); // query parameter
 if (enableHybridIndexing != null) queryParams.Add("enableHybridIndexing", ApiClient.ParameterToString(enableHybridIndexing)); // query parameter
 if (hybridQueueSize != null) queryParams.Add("hybridQueueSize", ApiClient.ParameterToString(hybridQueueSize)); // query parameter
 if (disableStoredIndexDefinition != null) queryParams.Add("disableStoredIndexDefinition", ApiClient.ParameterToString(disableStoredIndexDefinition)); // query parameter
 if (deletedBlobsCollectionEnabled != null) queryParams.Add("deletedBlobsCollectionEnabled", ApiClient.ParameterToString(deletedBlobsCollectionEnabled)); // query parameter
 if (propIndexCleanerIntervalInSecs != null) queryParams.Add("propIndexCleanerIntervalInSecs", ApiClient.ParameterToString(propIndexCleanerIntervalInSecs)); // query parameter
 if (enableSingleBlobIndexFiles != null) queryParams.Add("enableSingleBlobIndexFiles", ApiClient.ParameterToString(enableSingleBlobIndexFiles)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="solrHomePath"></param> 
        /// <param name="solrCoreName"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHomePath, string solrCoreName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (solrHomePath != null) queryParams.Add("solr.home.path", ApiClient.ParameterToString(solrHomePath)); // query parameter
 if (solrCoreName != null) queryParams.Add("solr.core.name", ApiClient.ParameterToString(solrCoreName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="pathDescField"></param> 
        /// <param name="pathChildField"></param> 
        /// <param name="pathParentField"></param> 
        /// <param name="pathExactField"></param> 
        /// <param name="catchAllField"></param> 
        /// <param name="collapsedPathField"></param> 
        /// <param name="pathDepthField"></param> 
        /// <param name="commitPolicy"></param> 
        /// <param name="rows"></param> 
        /// <param name="pathRestrictions"></param> 
        /// <param name="propertyRestrictions"></param> 
        /// <param name="primarytypesRestrictions"></param> 
        /// <param name="ignoredProperties"></param> 
        /// <param name="usedProperties"></param> 
        /// <param name="typeMappings"></param> 
        /// <param name="propertyMappings"></param> 
        /// <param name="collapseJcrcontentNodes"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string pathDescField, string pathChildField, string pathParentField, string pathExactField, string catchAllField, string collapsedPathField, string pathDepthField, string commitPolicy, int? rows, bool? pathRestrictions, bool? propertyRestrictions, bool? primarytypesRestrictions, List<string> ignoredProperties, List<string> usedProperties, List<string> typeMappings, List<string> propertyMappings, bool? collapseJcrcontentNodes)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (pathDescField != null) queryParams.Add("path.desc.field", ApiClient.ParameterToString(pathDescField)); // query parameter
 if (pathChildField != null) queryParams.Add("path.child.field", ApiClient.ParameterToString(pathChildField)); // query parameter
 if (pathParentField != null) queryParams.Add("path.parent.field", ApiClient.ParameterToString(pathParentField)); // query parameter
 if (pathExactField != null) queryParams.Add("path.exact.field", ApiClient.ParameterToString(pathExactField)); // query parameter
 if (catchAllField != null) queryParams.Add("catch.all.field", ApiClient.ParameterToString(catchAllField)); // query parameter
 if (collapsedPathField != null) queryParams.Add("collapsed.path.field", ApiClient.ParameterToString(collapsedPathField)); // query parameter
 if (pathDepthField != null) queryParams.Add("path.depth.field", ApiClient.ParameterToString(pathDepthField)); // query parameter
 if (commitPolicy != null) queryParams.Add("commit.policy", ApiClient.ParameterToString(commitPolicy)); // query parameter
 if (rows != null) queryParams.Add("rows", ApiClient.ParameterToString(rows)); // query parameter
 if (pathRestrictions != null) queryParams.Add("path.restrictions", ApiClient.ParameterToString(pathRestrictions)); // query parameter
 if (propertyRestrictions != null) queryParams.Add("property.restrictions", ApiClient.ParameterToString(propertyRestrictions)); // query parameter
 if (primarytypesRestrictions != null) queryParams.Add("primarytypes.restrictions", ApiClient.ParameterToString(primarytypesRestrictions)); // query parameter
 if (ignoredProperties != null) queryParams.Add("ignored.properties", ApiClient.ParameterToString(ignoredProperties)); // query parameter
 if (usedProperties != null) queryParams.Add("used.properties", ApiClient.ParameterToString(usedProperties)); // query parameter
 if (typeMappings != null) queryParams.Add("type.mappings", ApiClient.ParameterToString(typeMappings)); // query parameter
 if (propertyMappings != null) queryParams.Add("property.mappings", ApiClient.ParameterToString(propertyMappings)); // query parameter
 if (collapseJcrcontentNodes != null) queryParams.Add("collapse.jcrcontent.nodes", ApiClient.ParameterToString(collapseJcrcontentNodes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="solrHttpUrl"></param> 
        /// <param name="solrZkHost"></param> 
        /// <param name="solrCollection"></param> 
        /// <param name="solrSocketTimeout"></param> 
        /// <param name="solrConnectionTimeout"></param> 
        /// <param name="solrShardsNo"></param> 
        /// <param name="solrReplicationFactor"></param> 
        /// <param name="solrConfDir"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string solrHttpUrl, string solrZkHost, string solrCollection, int? solrSocketTimeout, int? solrConnectionTimeout, int? solrShardsNo, int? solrReplicationFactor, string solrConfDir)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (solrHttpUrl != null) queryParams.Add("solr.http.url", ApiClient.ParameterToString(solrHttpUrl)); // query parameter
 if (solrZkHost != null) queryParams.Add("solr.zk.host", ApiClient.ParameterToString(solrZkHost)); // query parameter
 if (solrCollection != null) queryParams.Add("solr.collection", ApiClient.ParameterToString(solrCollection)); // query parameter
 if (solrSocketTimeout != null) queryParams.Add("solr.socket.timeout", ApiClient.ParameterToString(solrSocketTimeout)); // query parameter
 if (solrConnectionTimeout != null) queryParams.Add("solr.connection.timeout", ApiClient.ParameterToString(solrConnectionTimeout)); // query parameter
 if (solrShardsNo != null) queryParams.Add("solr.shards.no", ApiClient.ParameterToString(solrShardsNo)); // query parameter
 if (solrReplicationFactor != null) queryParams.Add("solr.replication.factor", ApiClient.ParameterToString(solrReplicationFactor)); // query parameter
 if (solrConfDir != null) queryParams.Add("solr.conf.dir", ApiClient.ParameterToString(solrConfDir)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queryAggregation"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? queryAggregation)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queryAggregation != null) queryParams.Add("query.aggregation", ApiClient.ParameterToString(queryAggregation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serverType"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo</returns>            
        public OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string serverType)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serverType != null) queryParams.Add("server.type", ApiClient.ParameterToString(serverType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerType"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo</returns>            
        public OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerType)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerType != null) queryParams.Add("providerType", ApiClient.ParameterToString(providerType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxItems"></param> 
        /// <param name="maxPathDepth"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo</returns>            
        public OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxItems, int? maxPathDepth, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxItems != null) queryParams.Add("maxItems", ApiClient.ParameterToString(maxItems)); // query parameter
 if (maxPathDepth != null) queryParams.Add("maxPathDepth", ApiClient.ParameterToString(maxPathDepth)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queryLimitInMemory"></param> 
        /// <param name="queryLimitReads"></param> 
        /// <param name="queryFailTraversal"></param> 
        /// <param name="fastQuerySize"></param> 
        /// <returns>OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo</returns>            
        public OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo OrgApacheJackrabbitOakQueryQueryEngineSettingsService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? queryLimitInMemory, int? queryLimitReads, bool? queryFailTraversal, bool? fastQuerySize)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queryLimitInMemory != null) queryParams.Add("queryLimitInMemory", ApiClient.ParameterToString(queryLimitInMemory)); // query parameter
 if (queryLimitReads != null) queryParams.Add("queryLimitReads", ApiClient.ParameterToString(queryLimitReads)); // query parameter
 if (queryFailTraversal != null) queryParams.Add("queryFailTraversal", ApiClient.ParameterToString(queryFailTraversal)); // query parameter
 if (fastQuerySize != null) queryParams.Add("fastQuerySize", ApiClient.ParameterToString(fastQuerySize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakQueryQueryEngineSettingsService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakQueryQueryEngineSettingsService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheJackrabbitOakAuthenticationAppName"></param> 
        /// <param name="orgApacheJackrabbitOakAuthenticationConfigSpiName"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo</returns>            
        public OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheJackrabbitOakAuthenticationAppName, string orgApacheJackrabbitOakAuthenticationConfigSpiName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheJackrabbitOakAuthenticationAppName != null) queryParams.Add("org.apache.jackrabbit.oak.authentication.appName", ApiClient.ParameterToString(orgApacheJackrabbitOakAuthenticationAppName)); // query parameter
 if (orgApacheJackrabbitOakAuthenticationConfigSpiName != null) queryParams.Add("org.apache.jackrabbit.oak.authentication.configSpiName", ApiClient.ParameterToString(orgApacheJackrabbitOakAuthenticationConfigSpiName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerName"></param> 
        /// <param name="hostName"></param> 
        /// <param name="hostPort"></param> 
        /// <param name="hostSsl"></param> 
        /// <param name="hostTls"></param> 
        /// <param name="hostNoCertCheck"></param> 
        /// <param name="bindDn"></param> 
        /// <param name="bindPassword"></param> 
        /// <param name="searchTimeout"></param> 
        /// <param name="adminPoolMaxActive"></param> 
        /// <param name="adminPoolLookupOnValidate"></param> 
        /// <param name="userPoolMaxActive"></param> 
        /// <param name="userPoolLookupOnValidate"></param> 
        /// <param name="userBaseDN"></param> 
        /// <param name="userObjectclass"></param> 
        /// <param name="userIdAttribute"></param> 
        /// <param name="userExtraFilter"></param> 
        /// <param name="userMakeDnPath"></param> 
        /// <param name="groupBaseDN"></param> 
        /// <param name="groupObjectclass"></param> 
        /// <param name="groupNameAttribute"></param> 
        /// <param name="groupExtraFilter"></param> 
        /// <param name="groupMakeDnPath"></param> 
        /// <param name="groupMemberAttribute"></param> 
        /// <param name="useUidForExtId"></param> 
        /// <param name="customattributes"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo</returns>            
        public OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerName, string hostName, int? hostPort, bool? hostSsl, bool? hostTls, bool? hostNoCertCheck, string bindDn, string bindPassword, string searchTimeout, int? adminPoolMaxActive, bool? adminPoolLookupOnValidate, int? userPoolMaxActive, bool? userPoolLookupOnValidate, string userBaseDN, List<string> userObjectclass, string userIdAttribute, string userExtraFilter, bool? userMakeDnPath, string groupBaseDN, List<string> groupObjectclass, string groupNameAttribute, string groupExtraFilter, bool? groupMakeDnPath, string groupMemberAttribute, bool? useUidForExtId, List<string> customattributes)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerName != null) queryParams.Add("provider.name", ApiClient.ParameterToString(providerName)); // query parameter
 if (hostName != null) queryParams.Add("host.name", ApiClient.ParameterToString(hostName)); // query parameter
 if (hostPort != null) queryParams.Add("host.port", ApiClient.ParameterToString(hostPort)); // query parameter
 if (hostSsl != null) queryParams.Add("host.ssl", ApiClient.ParameterToString(hostSsl)); // query parameter
 if (hostTls != null) queryParams.Add("host.tls", ApiClient.ParameterToString(hostTls)); // query parameter
 if (hostNoCertCheck != null) queryParams.Add("host.noCertCheck", ApiClient.ParameterToString(hostNoCertCheck)); // query parameter
 if (bindDn != null) queryParams.Add("bind.dn", ApiClient.ParameterToString(bindDn)); // query parameter
 if (bindPassword != null) queryParams.Add("bind.password", ApiClient.ParameterToString(bindPassword)); // query parameter
 if (searchTimeout != null) queryParams.Add("searchTimeout", ApiClient.ParameterToString(searchTimeout)); // query parameter
 if (adminPoolMaxActive != null) queryParams.Add("adminPool.maxActive", ApiClient.ParameterToString(adminPoolMaxActive)); // query parameter
 if (adminPoolLookupOnValidate != null) queryParams.Add("adminPool.lookupOnValidate", ApiClient.ParameterToString(adminPoolLookupOnValidate)); // query parameter
 if (userPoolMaxActive != null) queryParams.Add("userPool.maxActive", ApiClient.ParameterToString(userPoolMaxActive)); // query parameter
 if (userPoolLookupOnValidate != null) queryParams.Add("userPool.lookupOnValidate", ApiClient.ParameterToString(userPoolLookupOnValidate)); // query parameter
 if (userBaseDN != null) queryParams.Add("user.baseDN", ApiClient.ParameterToString(userBaseDN)); // query parameter
 if (userObjectclass != null) queryParams.Add("user.objectclass", ApiClient.ParameterToString(userObjectclass)); // query parameter
 if (userIdAttribute != null) queryParams.Add("user.idAttribute", ApiClient.ParameterToString(userIdAttribute)); // query parameter
 if (userExtraFilter != null) queryParams.Add("user.extraFilter", ApiClient.ParameterToString(userExtraFilter)); // query parameter
 if (userMakeDnPath != null) queryParams.Add("user.makeDnPath", ApiClient.ParameterToString(userMakeDnPath)); // query parameter
 if (groupBaseDN != null) queryParams.Add("group.baseDN", ApiClient.ParameterToString(groupBaseDN)); // query parameter
 if (groupObjectclass != null) queryParams.Add("group.objectclass", ApiClient.ParameterToString(groupObjectclass)); // query parameter
 if (groupNameAttribute != null) queryParams.Add("group.nameAttribute", ApiClient.ParameterToString(groupNameAttribute)); // query parameter
 if (groupExtraFilter != null) queryParams.Add("group.extraFilter", ApiClient.ParameterToString(groupExtraFilter)); // query parameter
 if (groupMakeDnPath != null) queryParams.Add("group.makeDnPath", ApiClient.ParameterToString(groupMakeDnPath)); // query parameter
 if (groupMemberAttribute != null) queryParams.Add("group.memberAttribute", ApiClient.ParameterToString(groupMemberAttribute)); // query parameter
 if (useUidForExtId != null) queryParams.Add("useUidForExtId", ApiClient.ParameterToString(useUidForExtId)); // query parameter
 if (customattributes != null) queryParams.Add("customattributes", ApiClient.ParameterToString(customattributes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="tokenExpiration"></param> 
        /// <param name="tokenLength"></param> 
        /// <param name="tokenRefresh"></param> 
        /// <param name="tokenCleanupThreshold"></param> 
        /// <param name="passwordHashAlgorithm"></param> 
        /// <param name="passwordHashIterations"></param> 
        /// <param name="passwordSaltSize"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo</returns>            
        public OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tokenExpiration, string tokenLength, bool? tokenRefresh, int? tokenCleanupThreshold, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (tokenExpiration != null) queryParams.Add("tokenExpiration", ApiClient.ParameterToString(tokenExpiration)); // query parameter
 if (tokenLength != null) queryParams.Add("tokenLength", ApiClient.ParameterToString(tokenLength)); // query parameter
 if (tokenRefresh != null) queryParams.Add("tokenRefresh", ApiClient.ParameterToString(tokenRefresh)); // query parameter
 if (tokenCleanupThreshold != null) queryParams.Add("tokenCleanupThreshold", ApiClient.ParameterToString(tokenCleanupThreshold)); // query parameter
 if (passwordHashAlgorithm != null) queryParams.Add("passwordHashAlgorithm", ApiClient.ParameterToString(passwordHashAlgorithm)); // query parameter
 if (passwordHashIterations != null) queryParams.Add("passwordHashIterations", ApiClient.ParameterToString(passwordHashIterations)); // query parameter
 if (passwordSaltSize != null) queryParams.Add("passwordSaltSize", ApiClient.ParameterToString(passwordSaltSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="permissionsJr2"></param> 
        /// <param name="importBehavior"></param> 
        /// <param name="readPaths"></param> 
        /// <param name="administrativePrincipals"></param> 
        /// <param name="configurationRanking"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo</returns>            
        public OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string permissionsJr2, string importBehavior, List<string> readPaths, List<string> administrativePrincipals, int? configurationRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (permissionsJr2 != null) queryParams.Add("permissionsJr2", ApiClient.ParameterToString(permissionsJr2)); // query parameter
 if (importBehavior != null) queryParams.Add("importBehavior", ApiClient.ParameterToString(importBehavior)); // query parameter
 if (readPaths != null) queryParams.Add("readPaths", ApiClient.ParameterToString(readPaths)); // query parameter
 if (administrativePrincipals != null) queryParams.Add("administrativePrincipals", ApiClient.ParameterToString(administrativePrincipals)); // query parameter
 if (configurationRanking != null) queryParams.Add("configurationRanking", ApiClient.ParameterToString(configurationRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="requiredServicePids"></param> 
        /// <param name="authorizationCompositionType"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo</returns>            
        public OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> requiredServicePids, string authorizationCompositionType)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (requiredServicePids != null) queryParams.Add("requiredServicePids", ApiClient.ParameterToString(requiredServicePids)); // query parameter
 if (authorizationCompositionType != null) queryParams.Add("authorizationCompositionType", ApiClient.ParameterToString(authorizationCompositionType)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="length"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo</returns>            
        public OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? length)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (length != null) queryParams.Add("length", ApiClient.ParameterToString(length)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="usersPath"></param> 
        /// <param name="groupsPath"></param> 
        /// <param name="systemRelativePath"></param> 
        /// <param name="defaultDepth"></param> 
        /// <param name="importBehavior"></param> 
        /// <param name="passwordHashAlgorithm"></param> 
        /// <param name="passwordHashIterations"></param> 
        /// <param name="passwordSaltSize"></param> 
        /// <param name="omitAdminPw"></param> 
        /// <param name="supportAutoSave"></param> 
        /// <param name="passwordMaxAge"></param> 
        /// <param name="initialPasswordChange"></param> 
        /// <param name="passwordHistorySize"></param> 
        /// <param name="passwordExpiryForAdmin"></param> 
        /// <param name="cacheExpiration"></param> 
        /// <param name="enableRFC7613UsercaseMappedProfile"></param> 
        /// <returns>OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo</returns>            
        public OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string usersPath, string groupsPath, string systemRelativePath, int? defaultDepth, string importBehavior, string passwordHashAlgorithm, int? passwordHashIterations, int? passwordSaltSize, bool? omitAdminPw, bool? supportAutoSave, int? passwordMaxAge, bool? initialPasswordChange, int? passwordHistorySize, bool? passwordExpiryForAdmin, int? cacheExpiration, bool? enableRFC7613UsercaseMappedProfile)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (usersPath != null) queryParams.Add("usersPath", ApiClient.ParameterToString(usersPath)); // query parameter
 if (groupsPath != null) queryParams.Add("groupsPath", ApiClient.ParameterToString(groupsPath)); // query parameter
 if (systemRelativePath != null) queryParams.Add("systemRelativePath", ApiClient.ParameterToString(systemRelativePath)); // query parameter
 if (defaultDepth != null) queryParams.Add("defaultDepth", ApiClient.ParameterToString(defaultDepth)); // query parameter
 if (importBehavior != null) queryParams.Add("importBehavior", ApiClient.ParameterToString(importBehavior)); // query parameter
 if (passwordHashAlgorithm != null) queryParams.Add("passwordHashAlgorithm", ApiClient.ParameterToString(passwordHashAlgorithm)); // query parameter
 if (passwordHashIterations != null) queryParams.Add("passwordHashIterations", ApiClient.ParameterToString(passwordHashIterations)); // query parameter
 if (passwordSaltSize != null) queryParams.Add("passwordSaltSize", ApiClient.ParameterToString(passwordSaltSize)); // query parameter
 if (omitAdminPw != null) queryParams.Add("omitAdminPw", ApiClient.ParameterToString(omitAdminPw)); // query parameter
 if (supportAutoSave != null) queryParams.Add("supportAutoSave", ApiClient.ParameterToString(supportAutoSave)); // query parameter
 if (passwordMaxAge != null) queryParams.Add("passwordMaxAge", ApiClient.ParameterToString(passwordMaxAge)); // query parameter
 if (initialPasswordChange != null) queryParams.Add("initialPasswordChange", ApiClient.ParameterToString(initialPasswordChange)); // query parameter
 if (passwordHistorySize != null) queryParams.Add("passwordHistorySize", ApiClient.ParameterToString(passwordHistorySize)); // query parameter
 if (passwordExpiryForAdmin != null) queryParams.Add("passwordExpiryForAdmin", ApiClient.ParameterToString(passwordExpiryForAdmin)); // query parameter
 if (cacheExpiration != null) queryParams.Add("cacheExpiration", ApiClient.ParameterToString(cacheExpiration)); // query parameter
 if (enableRFC7613UsercaseMappedProfile != null) queryParams.Add("enableRFC7613UsercaseMappedProfile", ApiClient.ParameterToString(enableRFC7613UsercaseMappedProfile)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="accountName"></param> 
        /// <param name="containerName"></param> 
        /// <param name="accessKey"></param> 
        /// <param name="rootPath"></param> 
        /// <param name="connectionURL"></param> 
        /// <returns>OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo</returns>            
        public OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string accountName, string containerName, string accessKey, string rootPath, string connectionURL)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (accountName != null) queryParams.Add("accountName", ApiClient.ParameterToString(accountName)); // query parameter
 if (containerName != null) queryParams.Add("containerName", ApiClient.ParameterToString(containerName)); // query parameter
 if (accessKey != null) queryParams.Add("accessKey", ApiClient.ParameterToString(accessKey)); // query parameter
 if (rootPath != null) queryParams.Add("rootPath", ApiClient.ParameterToString(rootPath)); // query parameter
 if (connectionURL != null) queryParams.Add("connectionURL", ApiClient.ParameterToString(connectionURL)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="repositoryHome"></param> 
        /// <param name="tarmkMode"></param> 
        /// <param name="tarmkSize"></param> 
        /// <param name="segmentCacheSize"></param> 
        /// <param name="stringCacheSize"></param> 
        /// <param name="templateCacheSize"></param> 
        /// <param name="stringDeduplicationCacheSize"></param> 
        /// <param name="templateDeduplicationCacheSize"></param> 
        /// <param name="nodeDeduplicationCacheSize"></param> 
        /// <param name="pauseCompaction"></param> 
        /// <param name="compactionRetryCount"></param> 
        /// <param name="compactionForceTimeout"></param> 
        /// <param name="compactionSizeDeltaEstimation"></param> 
        /// <param name="compactionDisableEstimation"></param> 
        /// <param name="compactionRetainedGenerations"></param> 
        /// <param name="compactionMemoryThreshold"></param> 
        /// <param name="compactionProgressLog"></param> 
        /// <param name="standby"></param> 
        /// <param name="customBlobStore"></param> 
        /// <param name="customSegmentStore"></param> 
        /// <param name="splitPersistence"></param> 
        /// <param name="repositoryBackupDir"></param> 
        /// <param name="blobGcMaxAgeInSecs"></param> 
        /// <param name="blobTrackSnapshotIntervalInSecs"></param> 
        /// <param name="role"></param> 
        /// <param name="registerDescriptors"></param> 
        /// <param name="dispatchChanges"></param> 
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo</returns>            
        public OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs, string role, bool? registerDescriptors, bool? dispatchChanges)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (repositoryHome != null) queryParams.Add("repository.home", ApiClient.ParameterToString(repositoryHome)); // query parameter
 if (tarmkMode != null) queryParams.Add("tarmk.mode", ApiClient.ParameterToString(tarmkMode)); // query parameter
 if (tarmkSize != null) queryParams.Add("tarmk.size", ApiClient.ParameterToString(tarmkSize)); // query parameter
 if (segmentCacheSize != null) queryParams.Add("segmentCache.size", ApiClient.ParameterToString(segmentCacheSize)); // query parameter
 if (stringCacheSize != null) queryParams.Add("stringCache.size", ApiClient.ParameterToString(stringCacheSize)); // query parameter
 if (templateCacheSize != null) queryParams.Add("templateCache.size", ApiClient.ParameterToString(templateCacheSize)); // query parameter
 if (stringDeduplicationCacheSize != null) queryParams.Add("stringDeduplicationCache.size", ApiClient.ParameterToString(stringDeduplicationCacheSize)); // query parameter
 if (templateDeduplicationCacheSize != null) queryParams.Add("templateDeduplicationCache.size", ApiClient.ParameterToString(templateDeduplicationCacheSize)); // query parameter
 if (nodeDeduplicationCacheSize != null) queryParams.Add("nodeDeduplicationCache.size", ApiClient.ParameterToString(nodeDeduplicationCacheSize)); // query parameter
 if (pauseCompaction != null) queryParams.Add("pauseCompaction", ApiClient.ParameterToString(pauseCompaction)); // query parameter
 if (compactionRetryCount != null) queryParams.Add("compaction.retryCount", ApiClient.ParameterToString(compactionRetryCount)); // query parameter
 if (compactionForceTimeout != null) queryParams.Add("compaction.force.timeout", ApiClient.ParameterToString(compactionForceTimeout)); // query parameter
 if (compactionSizeDeltaEstimation != null) queryParams.Add("compaction.sizeDeltaEstimation", ApiClient.ParameterToString(compactionSizeDeltaEstimation)); // query parameter
 if (compactionDisableEstimation != null) queryParams.Add("compaction.disableEstimation", ApiClient.ParameterToString(compactionDisableEstimation)); // query parameter
 if (compactionRetainedGenerations != null) queryParams.Add("compaction.retainedGenerations", ApiClient.ParameterToString(compactionRetainedGenerations)); // query parameter
 if (compactionMemoryThreshold != null) queryParams.Add("compaction.memoryThreshold", ApiClient.ParameterToString(compactionMemoryThreshold)); // query parameter
 if (compactionProgressLog != null) queryParams.Add("compaction.progressLog", ApiClient.ParameterToString(compactionProgressLog)); // query parameter
 if (standby != null) queryParams.Add("standby", ApiClient.ParameterToString(standby)); // query parameter
 if (customBlobStore != null) queryParams.Add("customBlobStore", ApiClient.ParameterToString(customBlobStore)); // query parameter
 if (customSegmentStore != null) queryParams.Add("customSegmentStore", ApiClient.ParameterToString(customSegmentStore)); // query parameter
 if (splitPersistence != null) queryParams.Add("splitPersistence", ApiClient.ParameterToString(splitPersistence)); // query parameter
 if (repositoryBackupDir != null) queryParams.Add("repository.backup.dir", ApiClient.ParameterToString(repositoryBackupDir)); // query parameter
 if (blobGcMaxAgeInSecs != null) queryParams.Add("blobGcMaxAgeInSecs", ApiClient.ParameterToString(blobGcMaxAgeInSecs)); // query parameter
 if (blobTrackSnapshotIntervalInSecs != null) queryParams.Add("blobTrackSnapshotIntervalInSecs", ApiClient.ParameterToString(blobTrackSnapshotIntervalInSecs)); // query parameter
 if (role != null) queryParams.Add("role", ApiClient.ParameterToString(role)); // query parameter
 if (registerDescriptors != null) queryParams.Add("registerDescriptors", ApiClient.ParameterToString(registerDescriptors)); // query parameter
 if (dispatchChanges != null) queryParams.Add("dispatchChanges", ApiClient.ParameterToString(dispatchChanges)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="commitsTrackerWriterGroups"></param> 
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo</returns>            
        public OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> commitsTrackerWriterGroups)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (commitsTrackerWriterGroups != null) queryParams.Add("commitsTrackerWriterGroups", ApiClient.ParameterToString(commitsTrackerWriterGroups)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="repositoryHome"></param> 
        /// <param name="tarmkMode"></param> 
        /// <param name="tarmkSize"></param> 
        /// <param name="segmentCacheSize"></param> 
        /// <param name="stringCacheSize"></param> 
        /// <param name="templateCacheSize"></param> 
        /// <param name="stringDeduplicationCacheSize"></param> 
        /// <param name="templateDeduplicationCacheSize"></param> 
        /// <param name="nodeDeduplicationCacheSize"></param> 
        /// <param name="pauseCompaction"></param> 
        /// <param name="compactionRetryCount"></param> 
        /// <param name="compactionForceTimeout"></param> 
        /// <param name="compactionSizeDeltaEstimation"></param> 
        /// <param name="compactionDisableEstimation"></param> 
        /// <param name="compactionRetainedGenerations"></param> 
        /// <param name="compactionMemoryThreshold"></param> 
        /// <param name="compactionProgressLog"></param> 
        /// <param name="standby"></param> 
        /// <param name="customBlobStore"></param> 
        /// <param name="customSegmentStore"></param> 
        /// <param name="splitPersistence"></param> 
        /// <param name="repositoryBackupDir"></param> 
        /// <param name="blobGcMaxAgeInSecs"></param> 
        /// <param name="blobTrackSnapshotIntervalInSecs"></param> 
        /// <returns>OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo</returns>            
        public OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo OrgApacheJackrabbitOakSegmentSegmentNodeStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string repositoryHome, string tarmkMode, int? tarmkSize, int? segmentCacheSize, int? stringCacheSize, int? templateCacheSize, int? stringDeduplicationCacheSize, int? templateDeduplicationCacheSize, int? nodeDeduplicationCacheSize, bool? pauseCompaction, int? compactionRetryCount, int? compactionForceTimeout, int? compactionSizeDeltaEstimation, bool? compactionDisableEstimation, int? compactionRetainedGenerations, int? compactionMemoryThreshold, int? compactionProgressLog, bool? standby, bool? customBlobStore, bool? customSegmentStore, bool? splitPersistence, string repositoryBackupDir, int? blobGcMaxAgeInSecs, int? blobTrackSnapshotIntervalInSecs)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (repositoryHome != null) queryParams.Add("repository.home", ApiClient.ParameterToString(repositoryHome)); // query parameter
 if (tarmkMode != null) queryParams.Add("tarmk.mode", ApiClient.ParameterToString(tarmkMode)); // query parameter
 if (tarmkSize != null) queryParams.Add("tarmk.size", ApiClient.ParameterToString(tarmkSize)); // query parameter
 if (segmentCacheSize != null) queryParams.Add("segmentCache.size", ApiClient.ParameterToString(segmentCacheSize)); // query parameter
 if (stringCacheSize != null) queryParams.Add("stringCache.size", ApiClient.ParameterToString(stringCacheSize)); // query parameter
 if (templateCacheSize != null) queryParams.Add("templateCache.size", ApiClient.ParameterToString(templateCacheSize)); // query parameter
 if (stringDeduplicationCacheSize != null) queryParams.Add("stringDeduplicationCache.size", ApiClient.ParameterToString(stringDeduplicationCacheSize)); // query parameter
 if (templateDeduplicationCacheSize != null) queryParams.Add("templateDeduplicationCache.size", ApiClient.ParameterToString(templateDeduplicationCacheSize)); // query parameter
 if (nodeDeduplicationCacheSize != null) queryParams.Add("nodeDeduplicationCache.size", ApiClient.ParameterToString(nodeDeduplicationCacheSize)); // query parameter
 if (pauseCompaction != null) queryParams.Add("pauseCompaction", ApiClient.ParameterToString(pauseCompaction)); // query parameter
 if (compactionRetryCount != null) queryParams.Add("compaction.retryCount", ApiClient.ParameterToString(compactionRetryCount)); // query parameter
 if (compactionForceTimeout != null) queryParams.Add("compaction.force.timeout", ApiClient.ParameterToString(compactionForceTimeout)); // query parameter
 if (compactionSizeDeltaEstimation != null) queryParams.Add("compaction.sizeDeltaEstimation", ApiClient.ParameterToString(compactionSizeDeltaEstimation)); // query parameter
 if (compactionDisableEstimation != null) queryParams.Add("compaction.disableEstimation", ApiClient.ParameterToString(compactionDisableEstimation)); // query parameter
 if (compactionRetainedGenerations != null) queryParams.Add("compaction.retainedGenerations", ApiClient.ParameterToString(compactionRetainedGenerations)); // query parameter
 if (compactionMemoryThreshold != null) queryParams.Add("compaction.memoryThreshold", ApiClient.ParameterToString(compactionMemoryThreshold)); // query parameter
 if (compactionProgressLog != null) queryParams.Add("compaction.progressLog", ApiClient.ParameterToString(compactionProgressLog)); // query parameter
 if (standby != null) queryParams.Add("standby", ApiClient.ParameterToString(standby)); // query parameter
 if (customBlobStore != null) queryParams.Add("customBlobStore", ApiClient.ParameterToString(customBlobStore)); // query parameter
 if (customSegmentStore != null) queryParams.Add("customSegmentStore", ApiClient.ParameterToString(customSegmentStore)); // query parameter
 if (splitPersistence != null) queryParams.Add("splitPersistence", ApiClient.ParameterToString(splitPersistence)); // query parameter
 if (repositoryBackupDir != null) queryParams.Add("repository.backup.dir", ApiClient.ParameterToString(repositoryBackupDir)); // query parameter
 if (blobGcMaxAgeInSecs != null) queryParams.Add("blobGcMaxAgeInSecs", ApiClient.ParameterToString(blobGcMaxAgeInSecs)); // query parameter
 if (blobTrackSnapshotIntervalInSecs != null) queryParams.Add("blobTrackSnapshotIntervalInSecs", ApiClient.ParameterToString(blobTrackSnapshotIntervalInSecs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentSegmentNodeStoreService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingInstallerConfigurationPersist"></param> 
        /// <param name="mode"></param> 
        /// <param name="port"></param> 
        /// <param name="primaryHost"></param> 
        /// <param name="interval"></param> 
        /// <param name="primaryAllowedClientIpRanges"></param> 
        /// <param name="secure"></param> 
        /// <param name="standbyReadtimeout"></param> 
        /// <param name="standbyAutoclean"></param> 
        /// <returns>OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo</returns>            
        public OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, string mode, int? port, string primaryHost, int? interval, List<string> primaryAllowedClientIpRanges, bool? secure, int? standbyReadtimeout, bool? standbyAutoclean)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingInstallerConfigurationPersist != null) queryParams.Add("org.apache.sling.installer.configuration.persist", ApiClient.ParameterToString(orgApacheSlingInstallerConfigurationPersist)); // query parameter
 if (mode != null) queryParams.Add("mode", ApiClient.ParameterToString(mode)); // query parameter
 if (port != null) queryParams.Add("port", ApiClient.ParameterToString(port)); // query parameter
 if (primaryHost != null) queryParams.Add("primary.host", ApiClient.ParameterToString(primaryHost)); // query parameter
 if (interval != null) queryParams.Add("interval", ApiClient.ParameterToString(interval)); // query parameter
 if (primaryAllowedClientIpRanges != null) queryParams.Add("primary.allowed-client-ip-ranges", ApiClient.ParameterToString(primaryAllowedClientIpRanges)); // query parameter
 if (secure != null) queryParams.Add("secure", ApiClient.ParameterToString(secure)); // query parameter
 if (standbyReadtimeout != null) queryParams.Add("standby.readtimeout", ApiClient.ParameterToString(standbyReadtimeout)); // query parameter
 if (standbyAutoclean != null) queryParams.Add("standby.autoclean", ApiClient.ParameterToString(standbyAutoclean)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="handlerName"></param> 
        /// <param name="userExpirationTime"></param> 
        /// <param name="userAutoMembership"></param> 
        /// <param name="userPropertyMapping"></param> 
        /// <param name="userPathPrefix"></param> 
        /// <param name="userMembershipExpTime"></param> 
        /// <param name="userMembershipNestingDepth"></param> 
        /// <param name="userDynamicMembership"></param> 
        /// <param name="userDisableMissing"></param> 
        /// <param name="groupExpirationTime"></param> 
        /// <param name="groupAutoMembership"></param> 
        /// <param name="groupPropertyMapping"></param> 
        /// <param name="groupPathPrefix"></param> 
        /// <param name="enableRFC7613UsercaseMappedProfile"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string handlerName, string userExpirationTime, List<string> userAutoMembership, List<string> userPropertyMapping, string userPathPrefix, string userMembershipExpTime, int? userMembershipNestingDepth, bool? userDynamicMembership, bool? userDisableMissing, string groupExpirationTime, List<string> groupAutoMembership, List<string> groupPropertyMapping, string groupPathPrefix, bool? enableRFC7613UsercaseMappedProfile)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (handlerName != null) queryParams.Add("handler.name", ApiClient.ParameterToString(handlerName)); // query parameter
 if (userExpirationTime != null) queryParams.Add("user.expirationTime", ApiClient.ParameterToString(userExpirationTime)); // query parameter
 if (userAutoMembership != null) queryParams.Add("user.autoMembership", ApiClient.ParameterToString(userAutoMembership)); // query parameter
 if (userPropertyMapping != null) queryParams.Add("user.propertyMapping", ApiClient.ParameterToString(userPropertyMapping)); // query parameter
 if (userPathPrefix != null) queryParams.Add("user.pathPrefix", ApiClient.ParameterToString(userPathPrefix)); // query parameter
 if (userMembershipExpTime != null) queryParams.Add("user.membershipExpTime", ApiClient.ParameterToString(userMembershipExpTime)); // query parameter
 if (userMembershipNestingDepth != null) queryParams.Add("user.membershipNestingDepth", ApiClient.ParameterToString(userMembershipNestingDepth)); // query parameter
 if (userDynamicMembership != null) queryParams.Add("user.dynamicMembership", ApiClient.ParameterToString(userDynamicMembership)); // query parameter
 if (userDisableMissing != null) queryParams.Add("user.disableMissing", ApiClient.ParameterToString(userDisableMissing)); // query parameter
 if (groupExpirationTime != null) queryParams.Add("group.expirationTime", ApiClient.ParameterToString(groupExpirationTime)); // query parameter
 if (groupAutoMembership != null) queryParams.Add("group.autoMembership", ApiClient.ParameterToString(groupAutoMembership)); // query parameter
 if (groupPropertyMapping != null) queryParams.Add("group.propertyMapping", ApiClient.ParameterToString(groupPropertyMapping)); // query parameter
 if (groupPathPrefix != null) queryParams.Add("group.pathPrefix", ApiClient.ParameterToString(groupPathPrefix)); // query parameter
 if (enableRFC7613UsercaseMappedProfile != null) queryParams.Add("enableRFC7613UsercaseMappedProfile", ApiClient.ParameterToString(enableRFC7613UsercaseMappedProfile)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jaasRanking"></param> 
        /// <param name="jaasControlFlag"></param> 
        /// <param name="jaasRealmName"></param> 
        /// <param name="idpName"></param> 
        /// <param name="syncHandlerName"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? jaasRanking, string jaasControlFlag, string jaasRealmName, string idpName, string syncHandlerName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jaasRanking != null) queryParams.Add("jaas.ranking", ApiClient.ParameterToString(jaasRanking)); // query parameter
 if (jaasControlFlag != null) queryParams.Add("jaas.controlFlag", ApiClient.ParameterToString(jaasControlFlag)); // query parameter
 if (jaasRealmName != null) queryParams.Add("jaas.realmName", ApiClient.ParameterToString(jaasRealmName)); // query parameter
 if (idpName != null) queryParams.Add("idp.name", ApiClient.ParameterToString(idpName)); // query parameter
 if (syncHandlerName != null) queryParams.Add("sync.handlerName", ApiClient.ParameterToString(syncHandlerName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="protectExternalId"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? protectExternalId)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (protectExternalId != null) queryParams.Add("protectExternalId", ApiClient.ParameterToString(protectExternalId)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="cugSupportedPaths"></param> 
        /// <param name="cugEnabled"></param> 
        /// <param name="configurationRanking"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> cugSupportedPaths, bool? cugEnabled, int? configurationRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (cugSupportedPaths != null) queryParams.Add("cugSupportedPaths", ApiClient.ParameterToString(cugSupportedPaths)); // query parameter
 if (cugEnabled != null) queryParams.Add("cugEnabled", ApiClient.ParameterToString(cugEnabled)); // query parameter
 if (configurationRanking != null) queryParams.Add("configurationRanking", ApiClient.ParameterToString(configurationRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="principalNames"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> principalNames)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (principalNames != null) queryParams.Add("principalNames", ApiClient.ParameterToString(principalNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabledActions"></param> 
        /// <param name="userPrivilegeNames"></param> 
        /// <param name="groupPrivilegeNames"></param> 
        /// <param name="constraint"></param> 
        /// <returns>OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo</returns>            
        public OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string enabledActions, List<string> userPrivilegeNames, List<string> groupPrivilegeNames, string constraint)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabledActions != null) queryParams.Add("enabledActions", ApiClient.ParameterToString(enabledActions)); // query parameter
 if (userPrivilegeNames != null) queryParams.Add("userPrivilegeNames", ApiClient.ParameterToString(userPrivilegeNames)); // query parameter
 if (groupPrivilegeNames != null) queryParams.Add("groupPrivilegeNames", ApiClient.ParameterToString(groupPrivilegeNames)); // query parameter
 if (constraint != null) queryParams.Add("constraint", ApiClient.ParameterToString(constraint)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="packageRoots"></param> 
        /// <returns>OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo</returns>            
        public OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo OrgApacheJackrabbitVaultPackagingImplPackagingImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> packageRoots)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (packageRoots != null) queryParams.Add("packageRoots", ApiClient.ParameterToString(packageRoots)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitVaultPackagingImplPackagingImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitVaultPackagingImplPackagingImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="homePath"></param> 
        /// <returns>OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo</returns>            
        public OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string homePath)
        {
            
    
            var path = "/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (homePath != null) queryParams.Add("homePath", ApiClient.ParameterToString(homePath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletMethods"></param> 
        /// <param name="slingServletPaths"></param> 
        /// <returns>OrgApacheSlingAuthCoreImplLogoutServletInfo</returns>            
        public OrgApacheSlingAuthCoreImplLogoutServletInfo OrgApacheSlingAuthCoreImplLogoutServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletMethods, string slingServletPaths)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletMethods != null) queryParams.Add("sling.servlet.methods", ApiClient.ParameterToString(slingServletMethods)); // query parameter
 if (slingServletPaths != null) queryParams.Add("sling.servlet.paths", ApiClient.ParameterToString(slingServletPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingAuthCoreImplLogoutServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingAuthCoreImplLogoutServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingAuthCoreImplLogoutServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingAuthCoreImplLogoutServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo</returns>            
        public OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="configBucketNames"></param> 
        /// <returns>OrgApacheSlingCaconfigImplConfigurationResolverImplInfo</returns>            
        public OrgApacheSlingCaconfigImplConfigurationResolverImplInfo OrgApacheSlingCaconfigImplConfigurationResolverImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> configBucketNames)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (configBucketNames != null) queryParams.Add("configBucketNames", ApiClient.ParameterToString(configBucketNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplConfigurationResolverImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplConfigurationResolverImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplConfigurationResolverImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplConfigurationResolverImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="configPropertyInheritancePropertyNames"></param> 
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo</returns>            
        public OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configPropertyInheritancePropertyNames)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (configPropertyInheritancePropertyNames != null) queryParams.Add("configPropertyInheritancePropertyNames", ApiClient.ParameterToString(configPropertyInheritancePropertyNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo</returns>            
        public OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="description"></param> 
        /// <param name="overrides"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo</returns>            
        public OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string description, List<string> overrides, bool? enabled, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (description != null) queryParams.Add("description", ApiClient.ParameterToString(description)); // query parameter
 if (overrides != null) queryParams.Add("overrides", ApiClient.ParameterToString(overrides)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo</returns>            
        public OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="ignorePropertyNameRegex"></param> 
        /// <param name="configCollectionPropertiesResourceNames"></param> 
        /// <returns>OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo</returns>            
        public OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> ignorePropertyNameRegex, List<string> configCollectionPropertiesResourceNames)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (ignorePropertyNameRegex != null) queryParams.Add("ignorePropertyNameRegex", ApiClient.ParameterToString(ignorePropertyNameRegex)); // query parameter
 if (configCollectionPropertiesResourceNames != null) queryParams.Add("configCollectionPropertiesResourceNames", ApiClient.ParameterToString(configCollectionPropertiesResourceNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="configPath"></param> 
        /// <param name="fallbackPaths"></param> 
        /// <param name="configCollectionInheritancePropertyNames"></param> 
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo</returns>            
        public OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, string configPath, List<string> fallbackPaths, List<string> configCollectionInheritancePropertyNames)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (configPath != null) queryParams.Add("configPath", ApiClient.ParameterToString(configPath)); // query parameter
 if (fallbackPaths != null) queryParams.Add("fallbackPaths", ApiClient.ParameterToString(fallbackPaths)); // query parameter
 if (configCollectionInheritancePropertyNames != null) queryParams.Add("configCollectionInheritancePropertyNames", ApiClient.ParameterToString(configCollectionInheritancePropertyNames)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="enabled"></param> 
        /// <param name="configRefResourceNames"></param> 
        /// <param name="configRefPropertyNames"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo</returns>            
        public OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? enabled, List<string> configRefResourceNames, List<string> configRefPropertyNames, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (configRefResourceNames != null) queryParams.Add("configRefResourceNames", ApiClient.ParameterToString(configRefResourceNames)); // query parameter
 if (configRefPropertyNames != null) queryParams.Add("configRefPropertyNames", ApiClient.ParameterToString(configRefPropertyNames)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="parserFeatures"></param> 
        /// <returns>OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo</returns>            
        public OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> parserFeatures)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (parserFeatures != null) queryParams.Add("parser.features", ApiClient.ParameterToString(parserFeatures)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingCommonsLogLevel"></param> 
        /// <param name="orgApacheSlingCommonsLogFile"></param> 
        /// <param name="orgApacheSlingCommonsLogFileNumber"></param> 
        /// <param name="orgApacheSlingCommonsLogFileSize"></param> 
        /// <param name="orgApacheSlingCommonsLogPattern"></param> 
        /// <param name="orgApacheSlingCommonsLogConfigurationFile"></param> 
        /// <param name="orgApacheSlingCommonsLogPackagingDataEnabled"></param> 
        /// <param name="orgApacheSlingCommonsLogMaxCallerDataDepth"></param> 
        /// <param name="orgApacheSlingCommonsLogMaxOldFileCountInDump"></param> 
        /// <param name="orgApacheSlingCommonsLogNumOfLines"></param> 
        /// <returns>OrgApacheSlingCommonsLogLogManagerInfo</returns>            
        public OrgApacheSlingCommonsLogLogManagerInfo OrgApacheSlingCommonsLogLogManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, string orgApacheSlingCommonsLogPattern, string orgApacheSlingCommonsLogConfigurationFile, bool? orgApacheSlingCommonsLogPackagingDataEnabled, int? orgApacheSlingCommonsLogMaxCallerDataDepth, int? orgApacheSlingCommonsLogMaxOldFileCountInDump, int? orgApacheSlingCommonsLogNumOfLines)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingCommonsLogLevel != null) queryParams.Add("org.apache.sling.commons.log.level", ApiClient.ParameterToString(orgApacheSlingCommonsLogLevel)); // query parameter
 if (orgApacheSlingCommonsLogFile != null) queryParams.Add("org.apache.sling.commons.log.file", ApiClient.ParameterToString(orgApacheSlingCommonsLogFile)); // query parameter
 if (orgApacheSlingCommonsLogFileNumber != null) queryParams.Add("org.apache.sling.commons.log.file.number", ApiClient.ParameterToString(orgApacheSlingCommonsLogFileNumber)); // query parameter
 if (orgApacheSlingCommonsLogFileSize != null) queryParams.Add("org.apache.sling.commons.log.file.size", ApiClient.ParameterToString(orgApacheSlingCommonsLogFileSize)); // query parameter
 if (orgApacheSlingCommonsLogPattern != null) queryParams.Add("org.apache.sling.commons.log.pattern", ApiClient.ParameterToString(orgApacheSlingCommonsLogPattern)); // query parameter
 if (orgApacheSlingCommonsLogConfigurationFile != null) queryParams.Add("org.apache.sling.commons.log.configurationFile", ApiClient.ParameterToString(orgApacheSlingCommonsLogConfigurationFile)); // query parameter
 if (orgApacheSlingCommonsLogPackagingDataEnabled != null) queryParams.Add("org.apache.sling.commons.log.packagingDataEnabled", ApiClient.ParameterToString(orgApacheSlingCommonsLogPackagingDataEnabled)); // query parameter
 if (orgApacheSlingCommonsLogMaxCallerDataDepth != null) queryParams.Add("org.apache.sling.commons.log.maxCallerDataDepth", ApiClient.ParameterToString(orgApacheSlingCommonsLogMaxCallerDataDepth)); // query parameter
 if (orgApacheSlingCommonsLogMaxOldFileCountInDump != null) queryParams.Add("org.apache.sling.commons.log.maxOldFileCountInDump", ApiClient.ParameterToString(orgApacheSlingCommonsLogMaxOldFileCountInDump)); // query parameter
 if (orgApacheSlingCommonsLogNumOfLines != null) queryParams.Add("org.apache.sling.commons.log.numOfLines", ApiClient.ParameterToString(orgApacheSlingCommonsLogNumOfLines)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsLogLogManagerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsLogLogManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingCommonsLogLevel"></param> 
        /// <param name="orgApacheSlingCommonsLogFile"></param> 
        /// <param name="orgApacheSlingCommonsLogPattern"></param> 
        /// <param name="orgApacheSlingCommonsLogNames"></param> 
        /// <param name="orgApacheSlingCommonsLogAdditiv"></param> 
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo</returns>            
        public OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo OrgApacheSlingCommonsLogLogManagerFactoryConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogLevel, string orgApacheSlingCommonsLogFile, string orgApacheSlingCommonsLogPattern, List<string> orgApacheSlingCommonsLogNames, bool? orgApacheSlingCommonsLogAdditiv)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingCommonsLogLevel != null) queryParams.Add("org.apache.sling.commons.log.level", ApiClient.ParameterToString(orgApacheSlingCommonsLogLevel)); // query parameter
 if (orgApacheSlingCommonsLogFile != null) queryParams.Add("org.apache.sling.commons.log.file", ApiClient.ParameterToString(orgApacheSlingCommonsLogFile)); // query parameter
 if (orgApacheSlingCommonsLogPattern != null) queryParams.Add("org.apache.sling.commons.log.pattern", ApiClient.ParameterToString(orgApacheSlingCommonsLogPattern)); // query parameter
 if (orgApacheSlingCommonsLogNames != null) queryParams.Add("org.apache.sling.commons.log.names", ApiClient.ParameterToString(orgApacheSlingCommonsLogNames)); // query parameter
 if (orgApacheSlingCommonsLogAdditiv != null) queryParams.Add("org.apache.sling.commons.log.additiv", ApiClient.ParameterToString(orgApacheSlingCommonsLogAdditiv)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManagerFactoryConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManagerFactoryConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingCommonsLogFile"></param> 
        /// <param name="orgApacheSlingCommonsLogFileNumber"></param> 
        /// <param name="orgApacheSlingCommonsLogFileSize"></param> 
        /// <param name="orgApacheSlingCommonsLogFileBuffered"></param> 
        /// <returns>OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo</returns>            
        public OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo OrgApacheSlingCommonsLogLogManagerFactoryWriter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingCommonsLogFile, int? orgApacheSlingCommonsLogFileNumber, string orgApacheSlingCommonsLogFileSize, bool? orgApacheSlingCommonsLogFileBuffered)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingCommonsLogFile != null) queryParams.Add("org.apache.sling.commons.log.file", ApiClient.ParameterToString(orgApacheSlingCommonsLogFile)); // query parameter
 if (orgApacheSlingCommonsLogFileNumber != null) queryParams.Add("org.apache.sling.commons.log.file.number", ApiClient.ParameterToString(orgApacheSlingCommonsLogFileNumber)); // query parameter
 if (orgApacheSlingCommonsLogFileSize != null) queryParams.Add("org.apache.sling.commons.log.file.size", ApiClient.ParameterToString(orgApacheSlingCommonsLogFileSize)); // query parameter
 if (orgApacheSlingCommonsLogFileBuffered != null) queryParams.Add("org.apache.sling.commons.log.file.buffered", ApiClient.ParameterToString(orgApacheSlingCommonsLogFileBuffered)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManagerFactoryWriter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsLogLogManagerFactoryWriter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="period"></param> 
        /// <param name="timeUnit"></param> 
        /// <param name="level"></param> 
        /// <param name="loggerName"></param> 
        /// <param name="prefix"></param> 
        /// <param name="pattern"></param> 
        /// <param name="registryName"></param> 
        /// <returns>OrgApacheSlingCommonsMetricsInternalLogReporterInfo</returns>            
        public OrgApacheSlingCommonsMetricsInternalLogReporterInfo OrgApacheSlingCommonsMetricsInternalLogReporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? period, string timeUnit, string level, string loggerName, string prefix, string pattern, string registryName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (period != null) queryParams.Add("period", ApiClient.ParameterToString(period)); // query parameter
 if (timeUnit != null) queryParams.Add("timeUnit", ApiClient.ParameterToString(timeUnit)); // query parameter
 if (level != null) queryParams.Add("level", ApiClient.ParameterToString(level)); // query parameter
 if (loggerName != null) queryParams.Add("loggerName", ApiClient.ParameterToString(loggerName)); // query parameter
 if (prefix != null) queryParams.Add("prefix", ApiClient.ParameterToString(prefix)); // query parameter
 if (pattern != null) queryParams.Add("pattern", ApiClient.ParameterToString(pattern)); // query parameter
 if (registryName != null) queryParams.Add("registryName", ApiClient.ParameterToString(registryName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMetricsInternalLogReporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMetricsInternalLogReporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsMetricsInternalLogReporterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsMetricsInternalLogReporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="datasources"></param> 
        /// <param name="step"></param> 
        /// <param name="archives"></param> 
        /// <param name="path"></param> 
        /// <returns>OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo</returns>            
        public OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> datasources, int? step, List<string> archives, string path)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (datasources != null) queryParams.Add("datasources", ApiClient.ParameterToString(datasources)); // query parameter
 if (step != null) queryParams.Add("step", ApiClient.ParameterToString(step)); // query parameter
 if (archives != null) queryParams.Add("archives", ApiClient.ParameterToString(archives)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mimeTypes"></param> 
        /// <returns>OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo</returns>            
        public OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> mimeTypes)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mimeTypes != null) queryParams.Add("mime.types", ApiClient.ParameterToString(mimeTypes)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="poolName"></param> 
        /// <param name="allowedPoolNames"></param> 
        /// <param name="schedulerUseleaderforsingle"></param> 
        /// <param name="metricsFilters"></param> 
        /// <param name="slowThresholdMillis"></param> 
        /// <returns>OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo</returns>            
        public OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo OrgApacheSlingCommonsSchedulerImplQuartzScheduler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string poolName, List<string> allowedPoolNames, bool? schedulerUseleaderforsingle, List<string> metricsFilters, int? slowThresholdMillis)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (poolName != null) queryParams.Add("poolName", ApiClient.ParameterToString(poolName)); // query parameter
 if (allowedPoolNames != null) queryParams.Add("allowedPoolNames", ApiClient.ParameterToString(allowedPoolNames)); // query parameter
 if (schedulerUseleaderforsingle != null) queryParams.Add("scheduler.useleaderforsingle", ApiClient.ParameterToString(schedulerUseleaderforsingle)); // query parameter
 if (metricsFilters != null) queryParams.Add("metrics.filters", ApiClient.ParameterToString(metricsFilters)); // query parameter
 if (slowThresholdMillis != null) queryParams.Add("slowThresholdMillis", ApiClient.ParameterToString(slowThresholdMillis)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsSchedulerImplQuartzScheduler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsSchedulerImplQuartzScheduler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxQuartzJobDurationAcceptable"></param> 
        /// <returns>OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo</returns>            
        public OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxQuartzJobDurationAcceptable)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxQuartzJobDurationAcceptable != null) queryParams.Add("max.quartzJob.duration.acceptable", ApiClient.ParameterToString(maxQuartzJobDurationAcceptable)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="minPoolSize"></param> 
        /// <param name="maxPoolSize"></param> 
        /// <param name="queueSize"></param> 
        /// <param name="maxThreadAge"></param> 
        /// <param name="keepAliveTime"></param> 
        /// <param name="blockPolicy"></param> 
        /// <param name="shutdownGraceful"></param> 
        /// <param name="daemon"></param> 
        /// <param name="shutdownWaitTime"></param> 
        /// <param name="priority"></param> 
        /// <returns>OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo</returns>            
        public OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, int? minPoolSize, int? maxPoolSize, int? queueSize, int? maxThreadAge, int? keepAliveTime, string blockPolicy, bool? shutdownGraceful, bool? daemon, int? shutdownWaitTime, string priority)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (minPoolSize != null) queryParams.Add("minPoolSize", ApiClient.ParameterToString(minPoolSize)); // query parameter
 if (maxPoolSize != null) queryParams.Add("maxPoolSize", ApiClient.ParameterToString(maxPoolSize)); // query parameter
 if (queueSize != null) queryParams.Add("queueSize", ApiClient.ParameterToString(queueSize)); // query parameter
 if (maxThreadAge != null) queryParams.Add("maxThreadAge", ApiClient.ParameterToString(maxThreadAge)); // query parameter
 if (keepAliveTime != null) queryParams.Add("keepAliveTime", ApiClient.ParameterToString(keepAliveTime)); // query parameter
 if (blockPolicy != null) queryParams.Add("blockPolicy", ApiClient.ParameterToString(blockPolicy)); // query parameter
 if (shutdownGraceful != null) queryParams.Add("shutdownGraceful", ApiClient.ParameterToString(shutdownGraceful)); // query parameter
 if (daemon != null) queryParams.Add("daemon", ApiClient.ParameterToString(daemon)); // query parameter
 if (shutdownWaitTime != null) queryParams.Add("shutdownWaitTime", ApiClient.ParameterToString(shutdownWaitTime)); // query parameter
 if (priority != null) queryParams.Add("priority", ApiClient.ParameterToString(priority)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="datasourceName"></param> 
        /// <param name="datasourceSvcPropName"></param> 
        /// <param name="driverClassName"></param> 
        /// <param name="url"></param> 
        /// <param name="username"></param> 
        /// <param name="password"></param> 
        /// <param name="defaultAutoCommit"></param> 
        /// <param name="defaultReadOnly"></param> 
        /// <param name="defaultTransactionIsolation"></param> 
        /// <param name="defaultCatalog"></param> 
        /// <param name="maxActive"></param> 
        /// <param name="maxIdle"></param> 
        /// <param name="minIdle"></param> 
        /// <param name="initialSize"></param> 
        /// <param name="maxWait"></param> 
        /// <param name="maxAge"></param> 
        /// <param name="testOnBorrow"></param> 
        /// <param name="testOnReturn"></param> 
        /// <param name="testWhileIdle"></param> 
        /// <param name="validationQuery"></param> 
        /// <param name="validationQueryTimeout"></param> 
        /// <param name="timeBetweenEvictionRunsMillis"></param> 
        /// <param name="minEvictableIdleTimeMillis"></param> 
        /// <param name="connectionProperties"></param> 
        /// <param name="initSQL"></param> 
        /// <param name="jdbcInterceptors"></param> 
        /// <param name="validationInterval"></param> 
        /// <param name="logValidationErrors"></param> 
        /// <param name="datasourceSvcProperties"></param> 
        /// <returns>OrgApacheSlingDatasourceDataSourceFactoryInfo</returns>            
        public OrgApacheSlingDatasourceDataSourceFactoryInfo OrgApacheSlingDatasourceDataSourceFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string driverClassName, string url, string username, string password, string defaultAutoCommit, string defaultReadOnly, string defaultTransactionIsolation, string defaultCatalog, int? maxActive, int? maxIdle, int? minIdle, int? initialSize, int? maxWait, int? maxAge, bool? testOnBorrow, bool? testOnReturn, bool? testWhileIdle, string validationQuery, int? validationQueryTimeout, int? timeBetweenEvictionRunsMillis, int? minEvictableIdleTimeMillis, string connectionProperties, string initSQL, string jdbcInterceptors, int? validationInterval, bool? logValidationErrors, List<string> datasourceSvcProperties)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (datasourceName != null) queryParams.Add("datasource.name", ApiClient.ParameterToString(datasourceName)); // query parameter
 if (datasourceSvcPropName != null) queryParams.Add("datasource.svc.prop.name", ApiClient.ParameterToString(datasourceSvcPropName)); // query parameter
 if (driverClassName != null) queryParams.Add("driverClassName", ApiClient.ParameterToString(driverClassName)); // query parameter
 if (url != null) queryParams.Add("url", ApiClient.ParameterToString(url)); // query parameter
 if (username != null) queryParams.Add("username", ApiClient.ParameterToString(username)); // query parameter
 if (password != null) queryParams.Add("password", ApiClient.ParameterToString(password)); // query parameter
 if (defaultAutoCommit != null) queryParams.Add("defaultAutoCommit", ApiClient.ParameterToString(defaultAutoCommit)); // query parameter
 if (defaultReadOnly != null) queryParams.Add("defaultReadOnly", ApiClient.ParameterToString(defaultReadOnly)); // query parameter
 if (defaultTransactionIsolation != null) queryParams.Add("defaultTransactionIsolation", ApiClient.ParameterToString(defaultTransactionIsolation)); // query parameter
 if (defaultCatalog != null) queryParams.Add("defaultCatalog", ApiClient.ParameterToString(defaultCatalog)); // query parameter
 if (maxActive != null) queryParams.Add("maxActive", ApiClient.ParameterToString(maxActive)); // query parameter
 if (maxIdle != null) queryParams.Add("maxIdle", ApiClient.ParameterToString(maxIdle)); // query parameter
 if (minIdle != null) queryParams.Add("minIdle", ApiClient.ParameterToString(minIdle)); // query parameter
 if (initialSize != null) queryParams.Add("initialSize", ApiClient.ParameterToString(initialSize)); // query parameter
 if (maxWait != null) queryParams.Add("maxWait", ApiClient.ParameterToString(maxWait)); // query parameter
 if (maxAge != null) queryParams.Add("maxAge", ApiClient.ParameterToString(maxAge)); // query parameter
 if (testOnBorrow != null) queryParams.Add("testOnBorrow", ApiClient.ParameterToString(testOnBorrow)); // query parameter
 if (testOnReturn != null) queryParams.Add("testOnReturn", ApiClient.ParameterToString(testOnReturn)); // query parameter
 if (testWhileIdle != null) queryParams.Add("testWhileIdle", ApiClient.ParameterToString(testWhileIdle)); // query parameter
 if (validationQuery != null) queryParams.Add("validationQuery", ApiClient.ParameterToString(validationQuery)); // query parameter
 if (validationQueryTimeout != null) queryParams.Add("validationQueryTimeout", ApiClient.ParameterToString(validationQueryTimeout)); // query parameter
 if (timeBetweenEvictionRunsMillis != null) queryParams.Add("timeBetweenEvictionRunsMillis", ApiClient.ParameterToString(timeBetweenEvictionRunsMillis)); // query parameter
 if (minEvictableIdleTimeMillis != null) queryParams.Add("minEvictableIdleTimeMillis", ApiClient.ParameterToString(minEvictableIdleTimeMillis)); // query parameter
 if (connectionProperties != null) queryParams.Add("connectionProperties", ApiClient.ParameterToString(connectionProperties)); // query parameter
 if (initSQL != null) queryParams.Add("initSQL", ApiClient.ParameterToString(initSQL)); // query parameter
 if (jdbcInterceptors != null) queryParams.Add("jdbcInterceptors", ApiClient.ParameterToString(jdbcInterceptors)); // query parameter
 if (validationInterval != null) queryParams.Add("validationInterval", ApiClient.ParameterToString(validationInterval)); // query parameter
 if (logValidationErrors != null) queryParams.Add("logValidationErrors", ApiClient.ParameterToString(logValidationErrors)); // query parameter
 if (datasourceSvcProperties != null) queryParams.Add("datasource.svc.properties", ApiClient.ParameterToString(datasourceSvcProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDatasourceDataSourceFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDatasourceDataSourceFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDatasourceDataSourceFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDatasourceDataSourceFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="datasourceName"></param> 
        /// <param name="datasourceSvcPropName"></param> 
        /// <param name="datasourceJndiName"></param> 
        /// <param name="jndiProperties"></param> 
        /// <returns>OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo</returns>            
        public OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo OrgApacheSlingDatasourceJNDIDataSourceFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string datasourceName, string datasourceSvcPropName, string datasourceJndiName, List<string> jndiProperties)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (datasourceName != null) queryParams.Add("datasource.name", ApiClient.ParameterToString(datasourceName)); // query parameter
 if (datasourceSvcPropName != null) queryParams.Add("datasource.svc.prop.name", ApiClient.ParameterToString(datasourceSvcPropName)); // query parameter
 if (datasourceJndiName != null) queryParams.Add("datasource.jndi.name", ApiClient.ParameterToString(datasourceJndiName)); // query parameter
 if (jndiProperties != null) queryParams.Add("jndi.properties", ApiClient.ParameterToString(jndiProperties)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDatasourceJNDIDataSourceFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDatasourceJNDIDataSourceFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="connectorPingTimeout"></param> 
        /// <param name="connectorPingInterval"></param> 
        /// <param name="discoveryLiteCheckInterval"></param> 
        /// <param name="clusterSyncServiceTimeout"></param> 
        /// <param name="clusterSyncServiceInterval"></param> 
        /// <param name="enableSyncToken"></param> 
        /// <param name="minEventDelay"></param> 
        /// <param name="socketConnectTimeout"></param> 
        /// <param name="soTimeout"></param> 
        /// <param name="topologyConnectorUrls"></param> 
        /// <param name="topologyConnectorWhitelist"></param> 
        /// <param name="autoStopLocalLoopEnabled"></param> 
        /// <param name="gzipConnectorRequestsEnabled"></param> 
        /// <param name="hmacEnabled"></param> 
        /// <param name="enableEncryption"></param> 
        /// <param name="sharedKey"></param> 
        /// <param name="hmacSharedKeyTTL"></param> 
        /// <param name="backoffStandbyFactor"></param> 
        /// <param name="backoffStableFactor"></param> 
        /// <returns>OrgApacheSlingDiscoveryOakConfigInfo</returns>            
        public OrgApacheSlingDiscoveryOakConfigInfo OrgApacheSlingDiscoveryOakConfig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? connectorPingTimeout, int? connectorPingInterval, int? discoveryLiteCheckInterval, int? clusterSyncServiceTimeout, int? clusterSyncServiceInterval, bool? enableSyncToken, int? minEventDelay, int? socketConnectTimeout, int? soTimeout, List<string> topologyConnectorUrls, List<string> topologyConnectorWhitelist, bool? autoStopLocalLoopEnabled, bool? gzipConnectorRequestsEnabled, bool? hmacEnabled, bool? enableEncryption, string sharedKey, int? hmacSharedKeyTTL, string backoffStandbyFactor, string backoffStableFactor)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.discovery.oak.Config";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (connectorPingTimeout != null) queryParams.Add("connectorPingTimeout", ApiClient.ParameterToString(connectorPingTimeout)); // query parameter
 if (connectorPingInterval != null) queryParams.Add("connectorPingInterval", ApiClient.ParameterToString(connectorPingInterval)); // query parameter
 if (discoveryLiteCheckInterval != null) queryParams.Add("discoveryLiteCheckInterval", ApiClient.ParameterToString(discoveryLiteCheckInterval)); // query parameter
 if (clusterSyncServiceTimeout != null) queryParams.Add("clusterSyncServiceTimeout", ApiClient.ParameterToString(clusterSyncServiceTimeout)); // query parameter
 if (clusterSyncServiceInterval != null) queryParams.Add("clusterSyncServiceInterval", ApiClient.ParameterToString(clusterSyncServiceInterval)); // query parameter
 if (enableSyncToken != null) queryParams.Add("enableSyncToken", ApiClient.ParameterToString(enableSyncToken)); // query parameter
 if (minEventDelay != null) queryParams.Add("minEventDelay", ApiClient.ParameterToString(minEventDelay)); // query parameter
 if (socketConnectTimeout != null) queryParams.Add("socketConnectTimeout", ApiClient.ParameterToString(socketConnectTimeout)); // query parameter
 if (soTimeout != null) queryParams.Add("soTimeout", ApiClient.ParameterToString(soTimeout)); // query parameter
 if (topologyConnectorUrls != null) queryParams.Add("topologyConnectorUrls", ApiClient.ParameterToString(topologyConnectorUrls)); // query parameter
 if (topologyConnectorWhitelist != null) queryParams.Add("topologyConnectorWhitelist", ApiClient.ParameterToString(topologyConnectorWhitelist)); // query parameter
 if (autoStopLocalLoopEnabled != null) queryParams.Add("autoStopLocalLoopEnabled", ApiClient.ParameterToString(autoStopLocalLoopEnabled)); // query parameter
 if (gzipConnectorRequestsEnabled != null) queryParams.Add("gzipConnectorRequestsEnabled", ApiClient.ParameterToString(gzipConnectorRequestsEnabled)); // query parameter
 if (hmacEnabled != null) queryParams.Add("hmacEnabled", ApiClient.ParameterToString(hmacEnabled)); // query parameter
 if (enableEncryption != null) queryParams.Add("enableEncryption", ApiClient.ParameterToString(enableEncryption)); // query parameter
 if (sharedKey != null) queryParams.Add("sharedKey", ApiClient.ParameterToString(sharedKey)); // query parameter
 if (hmacSharedKeyTTL != null) queryParams.Add("hmacSharedKeyTTL", ApiClient.ParameterToString(hmacSharedKeyTTL)); // query parameter
 if (backoffStandbyFactor != null) queryParams.Add("backoffStandbyFactor", ApiClient.ParameterToString(backoffStandbyFactor)); // query parameter
 if (backoffStableFactor != null) queryParams.Add("backoffStableFactor", ApiClient.ParameterToString(backoffStableFactor)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDiscoveryOakConfig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDiscoveryOakConfig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDiscoveryOakConfigInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDiscoveryOakConfigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <returns>OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo</returns>            
        public OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="title"></param> 
        /// <param name="details"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="logLevel"></param> 
        /// <param name="allowedRoots"></param> 
        /// <param name="queueProcessingEnabled"></param> 
        /// <param name="packageImporterEndpoints"></param> 
        /// <param name="passiveQueues"></param> 
        /// <param name="priorityQueues"></param> 
        /// <param name="retryStrategy"></param> 
        /// <param name="retryAttempts"></param> 
        /// <param name="requestAuthorizationStrategyTarget"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <param name="triggersTarget"></param> 
        /// <param name="queueProvider"></param> 
        /// <param name="asyncDelivery"></param> 
        /// <param name="httpConnTimeout"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo</returns>            
        public OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, bool? queueProcessingEnabled, List<string> packageImporterEndpoints, List<string> passiveQueues, List<string> priorityQueues, string retryStrategy, int? retryAttempts, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget, string queueProvider, bool? asyncDelivery, int? httpConnTimeout)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (title != null) queryParams.Add("title", ApiClient.ParameterToString(title)); // query parameter
 if (details != null) queryParams.Add("details", ApiClient.ParameterToString(details)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (logLevel != null) queryParams.Add("log.level", ApiClient.ParameterToString(logLevel)); // query parameter
 if (allowedRoots != null) queryParams.Add("allowed.roots", ApiClient.ParameterToString(allowedRoots)); // query parameter
 if (queueProcessingEnabled != null) queryParams.Add("queue.processing.enabled", ApiClient.ParameterToString(queueProcessingEnabled)); // query parameter
 if (packageImporterEndpoints != null) queryParams.Add("packageImporter.endpoints", ApiClient.ParameterToString(packageImporterEndpoints)); // query parameter
 if (passiveQueues != null) queryParams.Add("passiveQueues", ApiClient.ParameterToString(passiveQueues)); // query parameter
 if (priorityQueues != null) queryParams.Add("priorityQueues", ApiClient.ParameterToString(priorityQueues)); // query parameter
 if (retryStrategy != null) queryParams.Add("retry.strategy", ApiClient.ParameterToString(retryStrategy)); // query parameter
 if (retryAttempts != null) queryParams.Add("retry.attempts", ApiClient.ParameterToString(retryAttempts)); // query parameter
 if (requestAuthorizationStrategyTarget != null) queryParams.Add("requestAuthorizationStrategy.target", ApiClient.ParameterToString(requestAuthorizationStrategyTarget)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
 if (triggersTarget != null) queryParams.Add("triggers.target", ApiClient.ParameterToString(triggersTarget)); // query parameter
 if (queueProvider != null) queryParams.Add("queue.provider", ApiClient.ParameterToString(queueProvider)); // query parameter
 if (asyncDelivery != null) queryParams.Add("async.delivery", ApiClient.ParameterToString(asyncDelivery)); // query parameter
 if (httpConnTimeout != null) queryParams.Add("http.conn.timeout", ApiClient.ParameterToString(httpConnTimeout)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="jcrPrivilege"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo</returns>            
        public OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string jcrPrivilege)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (jcrPrivilege != null) queryParams.Add("jcrPrivilege", ApiClient.ParameterToString(jcrPrivilege)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="title"></param> 
        /// <param name="details"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="logLevel"></param> 
        /// <param name="allowedRoots"></param> 
        /// <param name="requestAuthorizationStrategyTarget"></param> 
        /// <param name="queueProviderFactoryTarget"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <param name="triggersTarget"></param> 
        /// <param name="priorityQueues"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo</returns>            
        public OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, List<string> allowedRoots, string requestAuthorizationStrategyTarget, string queueProviderFactoryTarget, string packageBuilderTarget, string triggersTarget, List<string> priorityQueues)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (title != null) queryParams.Add("title", ApiClient.ParameterToString(title)); // query parameter
 if (details != null) queryParams.Add("details", ApiClient.ParameterToString(details)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (logLevel != null) queryParams.Add("log.level", ApiClient.ParameterToString(logLevel)); // query parameter
 if (allowedRoots != null) queryParams.Add("allowed.roots", ApiClient.ParameterToString(allowedRoots)); // query parameter
 if (requestAuthorizationStrategyTarget != null) queryParams.Add("requestAuthorizationStrategy.target", ApiClient.ParameterToString(requestAuthorizationStrategyTarget)); // query parameter
 if (queueProviderFactoryTarget != null) queryParams.Add("queueProviderFactory.target", ApiClient.ParameterToString(queueProviderFactoryTarget)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
 if (triggersTarget != null) queryParams.Add("triggers.target", ApiClient.ParameterToString(triggersTarget)); // query parameter
 if (priorityQueues != null) queryParams.Add("priorityQueues", ApiClient.ParameterToString(priorityQueues)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="title"></param> 
        /// <param name="details"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="logLevel"></param> 
        /// <param name="queueProcessingEnabled"></param> 
        /// <param name="packageExporterEndpoints"></param> 
        /// <param name="pullItems"></param> 
        /// <param name="httpConnTimeout"></param> 
        /// <param name="requestAuthorizationStrategyTarget"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <param name="triggersTarget"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo</returns>            
        public OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> packageExporterEndpoints, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (title != null) queryParams.Add("title", ApiClient.ParameterToString(title)); // query parameter
 if (details != null) queryParams.Add("details", ApiClient.ParameterToString(details)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (logLevel != null) queryParams.Add("log.level", ApiClient.ParameterToString(logLevel)); // query parameter
 if (queueProcessingEnabled != null) queryParams.Add("queue.processing.enabled", ApiClient.ParameterToString(queueProcessingEnabled)); // query parameter
 if (packageExporterEndpoints != null) queryParams.Add("packageExporter.endpoints", ApiClient.ParameterToString(packageExporterEndpoints)); // query parameter
 if (pullItems != null) queryParams.Add("pull.items", ApiClient.ParameterToString(pullItems)); // query parameter
 if (httpConnTimeout != null) queryParams.Add("http.conn.timeout", ApiClient.ParameterToString(httpConnTimeout)); // query parameter
 if (requestAuthorizationStrategyTarget != null) queryParams.Add("requestAuthorizationStrategy.target", ApiClient.ParameterToString(requestAuthorizationStrategyTarget)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
 if (triggersTarget != null) queryParams.Add("triggers.target", ApiClient.ParameterToString(triggersTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="title"></param> 
        /// <param name="details"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="logLevel"></param> 
        /// <param name="queueProcessingEnabled"></param> 
        /// <param name="packageExporterTarget"></param> 
        /// <param name="packageImporterTarget"></param> 
        /// <param name="requestAuthorizationStrategyTarget"></param> 
        /// <param name="triggersTarget"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo</returns>            
        public OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, string packageExporterTarget, string packageImporterTarget, string requestAuthorizationStrategyTarget, string triggersTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (title != null) queryParams.Add("title", ApiClient.ParameterToString(title)); // query parameter
 if (details != null) queryParams.Add("details", ApiClient.ParameterToString(details)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (logLevel != null) queryParams.Add("log.level", ApiClient.ParameterToString(logLevel)); // query parameter
 if (queueProcessingEnabled != null) queryParams.Add("queue.processing.enabled", ApiClient.ParameterToString(queueProcessingEnabled)); // query parameter
 if (packageExporterTarget != null) queryParams.Add("packageExporter.target", ApiClient.ParameterToString(packageExporterTarget)); // query parameter
 if (packageImporterTarget != null) queryParams.Add("packageImporter.target", ApiClient.ParameterToString(packageImporterTarget)); // query parameter
 if (requestAuthorizationStrategyTarget != null) queryParams.Add("requestAuthorizationStrategy.target", ApiClient.ParameterToString(requestAuthorizationStrategyTarget)); // query parameter
 if (triggersTarget != null) queryParams.Add("triggers.target", ApiClient.ParameterToString(triggersTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="title"></param> 
        /// <param name="details"></param> 
        /// <param name="enabled"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="logLevel"></param> 
        /// <param name="queueProcessingEnabled"></param> 
        /// <param name="passiveQueues"></param> 
        /// <param name="packageExporterEndpoints"></param> 
        /// <param name="packageImporterEndpoints"></param> 
        /// <param name="retryStrategy"></param> 
        /// <param name="retryAttempts"></param> 
        /// <param name="pullItems"></param> 
        /// <param name="httpConnTimeout"></param> 
        /// <param name="requestAuthorizationStrategyTarget"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <param name="triggersTarget"></param> 
        /// <returns>OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo</returns>            
        public OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string title, string details, bool? enabled, string serviceName, string logLevel, bool? queueProcessingEnabled, List<string> passiveQueues, List<string> packageExporterEndpoints, List<string> packageImporterEndpoints, string retryStrategy, int? retryAttempts, int? pullItems, int? httpConnTimeout, string requestAuthorizationStrategyTarget, string transportSecretProviderTarget, string packageBuilderTarget, string triggersTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (title != null) queryParams.Add("title", ApiClient.ParameterToString(title)); // query parameter
 if (details != null) queryParams.Add("details", ApiClient.ParameterToString(details)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (logLevel != null) queryParams.Add("log.level", ApiClient.ParameterToString(logLevel)); // query parameter
 if (queueProcessingEnabled != null) queryParams.Add("queue.processing.enabled", ApiClient.ParameterToString(queueProcessingEnabled)); // query parameter
 if (passiveQueues != null) queryParams.Add("passiveQueues", ApiClient.ParameterToString(passiveQueues)); // query parameter
 if (packageExporterEndpoints != null) queryParams.Add("packageExporter.endpoints", ApiClient.ParameterToString(packageExporterEndpoints)); // query parameter
 if (packageImporterEndpoints != null) queryParams.Add("packageImporter.endpoints", ApiClient.ParameterToString(packageImporterEndpoints)); // query parameter
 if (retryStrategy != null) queryParams.Add("retry.strategy", ApiClient.ParameterToString(retryStrategy)); // query parameter
 if (retryAttempts != null) queryParams.Add("retry.attempts", ApiClient.ParameterToString(retryAttempts)); // query parameter
 if (pullItems != null) queryParams.Add("pull.items", ApiClient.ParameterToString(pullItems)); // query parameter
 if (httpConnTimeout != null) queryParams.Add("http.conn.timeout", ApiClient.ParameterToString(httpConnTimeout)); // query parameter
 if (requestAuthorizationStrategyTarget != null) queryParams.Add("requestAuthorizationStrategy.target", ApiClient.ParameterToString(requestAuthorizationStrategyTarget)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
 if (triggersTarget != null) queryParams.Add("triggers.target", ApiClient.ParameterToString(triggersTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <param name="numberOfRetriesAllowed"></param> 
        /// <returns>OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo</returns>            
        public OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, int? numberOfRetriesAllowed)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
 if (numberOfRetriesAllowed != null) queryParams.Add("numberOfRetriesAllowed", ApiClient.ParameterToString(numberOfRetriesAllowed)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="queue"></param> 
        /// <param name="dropInvalidItems"></param> 
        /// <param name="agentTarget"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo OrgApacheSlingDistributionPackagingImplExporterAgentDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string queue, bool? dropInvalidItems, string agentTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (queue != null) queryParams.Add("queue", ApiClient.ParameterToString(queue)); // query parameter
 if (dropInvalidItems != null) queryParams.Add("drop.invalid.items", ApiClient.ParameterToString(dropInvalidItems)); // query parameter
 if (agentTarget != null) queryParams.Add("agent.target", ApiClient.ParameterToString(agentTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterAgentDistributio: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterAgentDistributio: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplExporterLocalDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterLocalDistributio: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterLocalDistributio: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="endpoints"></param> 
        /// <param name="pullItems"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, int? pullItems, string packageBuilderTarget, string transportSecretProviderTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (endpoints != null) queryParams.Add("endpoints", ApiClient.ParameterToString(endpoints)); // query parameter
 if (pullItems != null) queryParams.Add("pull.items", ApiClient.ParameterToString(pullItems)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="packageBuilderTarget"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo OrgApacheSlingDistributionPackagingImplImporterLocalDistributio (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string packageBuilderTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (packageBuilderTarget != null) queryParams.Add("packageBuilder.target", ApiClient.ParameterToString(packageBuilderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterLocalDistributio: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterLocalDistributio: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="endpoints"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, List<string> endpoints, string transportSecretProviderTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (endpoints != null) queryParams.Add("endpoints", ApiClient.ParameterToString(endpoints)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="path"></param> 
        /// <param name="privilegeName"></param> 
        /// <returns>OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo</returns>            
        public OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string serviceName, string path, string privilegeName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (serviceName != null) queryParams.Add("service.name", ApiClient.ParameterToString(serviceName)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (privilegeName != null) queryParams.Add("privilege.name", ApiClient.ParameterToString(privilegeName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerRoots"></param> 
        /// <param name="kind"></param> 
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo</returns>            
        public OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo OrgApacheSlingDistributionResourcesImplDistributionConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerRoots != null) queryParams.Add("provider.roots", ApiClient.ParameterToString(providerRoots)); // query parameter
 if (kind != null) queryParams.Add("kind", ApiClient.ParameterToString(kind)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionResourcesImplDistributionConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionResourcesImplDistributionConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerRoots"></param> 
        /// <param name="kind"></param> 
        /// <returns>OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo</returns>            
        public OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo OrgApacheSlingDistributionResourcesImplDistributionServiceResour (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots, string kind)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerRoots != null) queryParams.Add("provider.roots", ApiClient.ParameterToString(providerRoots)); // query parameter
 if (kind != null) queryParams.Add("kind", ApiClient.ParameterToString(kind)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionResourcesImplDistributionServiceResour: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionResourcesImplDistributionServiceResour: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="type"></param> 
        /// <param name="formatTarget"></param> 
        /// <param name="tempFsFolder"></param> 
        /// <param name="fileThreshold"></param> 
        /// <param name="memoryUnit"></param> 
        /// <param name="useOffHeapMemory"></param> 
        /// <param name="digestAlgorithm"></param> 
        /// <param name="monitoringQueueSize"></param> 
        /// <param name="cleanupDelay"></param> 
        /// <param name="packageFilters"></param> 
        /// <param name="propertyFilters"></param> 
        /// <returns>OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo</returns>            
        public OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo OrgApacheSlingDistributionSerializationImplDistributionPackageBu (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string formatTarget, string tempFsFolder, int? fileThreshold, string memoryUnit, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, int? cleanupDelay, List<string> packageFilters, List<string> propertyFilters)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (type != null) queryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
 if (formatTarget != null) queryParams.Add("format.target", ApiClient.ParameterToString(formatTarget)); // query parameter
 if (tempFsFolder != null) queryParams.Add("tempFsFolder", ApiClient.ParameterToString(tempFsFolder)); // query parameter
 if (fileThreshold != null) queryParams.Add("fileThreshold", ApiClient.ParameterToString(fileThreshold)); // query parameter
 if (memoryUnit != null) queryParams.Add("memoryUnit", ApiClient.ParameterToString(memoryUnit)); // query parameter
 if (useOffHeapMemory != null) queryParams.Add("useOffHeapMemory", ApiClient.ParameterToString(useOffHeapMemory)); // query parameter
 if (digestAlgorithm != null) queryParams.Add("digestAlgorithm", ApiClient.ParameterToString(digestAlgorithm)); // query parameter
 if (monitoringQueueSize != null) queryParams.Add("monitoringQueueSize", ApiClient.ParameterToString(monitoringQueueSize)); // query parameter
 if (cleanupDelay != null) queryParams.Add("cleanupDelay", ApiClient.ParameterToString(cleanupDelay)); // query parameter
 if (packageFilters != null) queryParams.Add("package.filters", ApiClient.ParameterToString(packageFilters)); // query parameter
 if (propertyFilters != null) queryParams.Add("property.filters", ApiClient.ParameterToString(propertyFilters)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionSerializationImplDistributionPackageBu: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionSerializationImplDistributionPackageBu: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="type"></param> 
        /// <param name="importMode"></param> 
        /// <param name="aclHandling"></param> 
        /// <param name="packageRoots"></param> 
        /// <param name="packageFilters"></param> 
        /// <param name="propertyFilters"></param> 
        /// <param name="tempFsFolder"></param> 
        /// <param name="useBinaryReferences"></param> 
        /// <param name="autoSaveThreshold"></param> 
        /// <param name="cleanupDelay"></param> 
        /// <param name="fileThreshold"></param> 
        /// <param name="MEGA_BYTES"></param> 
        /// <param name="useOffHeapMemory"></param> 
        /// <param name="digestAlgorithm"></param> 
        /// <param name="monitoringQueueSize"></param> 
        /// <param name="pathsMapping"></param> 
        /// <param name="strictImport"></param> 
        /// <returns>OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo</returns>            
        public OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo OrgApacheSlingDistributionSerializationImplVltVaultDistribution (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string type, string importMode, string aclHandling, string packageRoots, List<string> packageFilters, List<string> propertyFilters, string tempFsFolder, bool? useBinaryReferences, int? autoSaveThreshold, int? cleanupDelay, int? fileThreshold, string MEGA_BYTES, bool? useOffHeapMemory, string digestAlgorithm, int? monitoringQueueSize, List<string> pathsMapping, bool? strictImport)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (type != null) queryParams.Add("type", ApiClient.ParameterToString(type)); // query parameter
 if (importMode != null) queryParams.Add("importMode", ApiClient.ParameterToString(importMode)); // query parameter
 if (aclHandling != null) queryParams.Add("aclHandling", ApiClient.ParameterToString(aclHandling)); // query parameter
 if (packageRoots != null) queryParams.Add("package.roots", ApiClient.ParameterToString(packageRoots)); // query parameter
 if (packageFilters != null) queryParams.Add("package.filters", ApiClient.ParameterToString(packageFilters)); // query parameter
 if (propertyFilters != null) queryParams.Add("property.filters", ApiClient.ParameterToString(propertyFilters)); // query parameter
 if (tempFsFolder != null) queryParams.Add("tempFsFolder", ApiClient.ParameterToString(tempFsFolder)); // query parameter
 if (useBinaryReferences != null) queryParams.Add("useBinaryReferences", ApiClient.ParameterToString(useBinaryReferences)); // query parameter
 if (autoSaveThreshold != null) queryParams.Add("autoSaveThreshold", ApiClient.ParameterToString(autoSaveThreshold)); // query parameter
 if (cleanupDelay != null) queryParams.Add("cleanupDelay", ApiClient.ParameterToString(cleanupDelay)); // query parameter
 if (fileThreshold != null) queryParams.Add("fileThreshold", ApiClient.ParameterToString(fileThreshold)); // query parameter
 if (MEGA_BYTES != null) queryParams.Add("MEGA_BYTES", ApiClient.ParameterToString(MEGA_BYTES)); // query parameter
 if (useOffHeapMemory != null) queryParams.Add("useOffHeapMemory", ApiClient.ParameterToString(useOffHeapMemory)); // query parameter
 if (digestAlgorithm != null) queryParams.Add("digestAlgorithm", ApiClient.ParameterToString(digestAlgorithm)); // query parameter
 if (monitoringQueueSize != null) queryParams.Add("monitoringQueueSize", ApiClient.ParameterToString(monitoringQueueSize)); // query parameter
 if (pathsMapping != null) queryParams.Add("pathsMapping", ApiClient.ParameterToString(pathsMapping)); // query parameter
 if (strictImport != null) queryParams.Add("strictImport", ApiClient.ParameterToString(strictImport)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionSerializationImplVltVaultDistribution: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionSerializationImplVltVaultDistribution: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="username"></param> 
        /// <param name="password"></param> 
        /// <returns>OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo</returns>            
        public OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo OrgApacheSlingDistributionTransportImplUserCredentialsDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string username, string password)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (username != null) queryParams.Add("username", ApiClient.ParameterToString(username)); // query parameter
 if (password != null) queryParams.Add("password", ApiClient.ParameterToString(password)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTransportImplUserCredentialsDistributi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTransportImplUserCredentialsDistributi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="path"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo OrgApacheSlingDistributionTriggerImplDistributionEventDistribute (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplDistributionEventDistribute: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplDistributionEventDistribute: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="path"></param> 
        /// <param name="ignoredPathsPatterns"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="deep"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, List<string> ignoredPathsPatterns, string serviceName, bool? deep)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (ignoredPathsPatterns != null) queryParams.Add("ignoredPathsPatterns", ApiClient.ParameterToString(ignoredPathsPatterns)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (deep != null) queryParams.Add("deep", ApiClient.ParameterToString(deep)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="path"></param> 
        /// <param name="serviceName"></param> 
        /// <param name="nuggetsPath"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string serviceName, string nuggetsPath)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
 if (nuggetsPath != null) queryParams.Add("nuggetsPath", ApiClient.ParameterToString(nuggetsPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="endpoint"></param> 
        /// <param name="transportSecretProviderTarget"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string endpoint, string transportSecretProviderTarget)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (endpoint != null) queryParams.Add("endpoint", ApiClient.ParameterToString(endpoint)); // query parameter
 if (transportSecretProviderTarget != null) queryParams.Add("transportSecretProvider.target", ApiClient.ParameterToString(transportSecretProviderTarget)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="path"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="path"></param> 
        /// <param name="seconds"></param> 
        /// <param name="serviceName"></param> 
        /// <returns>OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo</returns>            
        public OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string path, string seconds, string serviceName)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (seconds != null) queryParams.Add("seconds", ApiClient.ParameterToString(seconds)); // query parameter
 if (serviceName != null) queryParams.Add("serviceName", ApiClient.ParameterToString(serviceName)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="osgiHttpWhiteboardContextSelect"></param> 
        /// <param name="osgiHttpWhiteboardListener"></param> 
        /// <param name="authSudoCookie"></param> 
        /// <param name="authSudoParameter"></param> 
        /// <param name="authAnnonymous"></param> 
        /// <param name="slingAuthRequirements"></param> 
        /// <param name="slingAuthAnonymousUser"></param> 
        /// <param name="slingAuthAnonymousPassword"></param> 
        /// <param name="authHttp"></param> 
        /// <param name="authHttpRealm"></param> 
        /// <param name="authUriSuffix"></param> 
        /// <returns>OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo</returns>            
        public OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo OrgApacheSlingEngineImplAuthSlingAuthenticator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardContextSelect, string osgiHttpWhiteboardListener, string authSudoCookie, string authSudoParameter, bool? authAnnonymous, List<string> slingAuthRequirements, string slingAuthAnonymousUser, string slingAuthAnonymousPassword, string authHttp, string authHttpRealm, List<string> authUriSuffix)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (osgiHttpWhiteboardContextSelect != null) queryParams.Add("osgi.http.whiteboard.context.select", ApiClient.ParameterToString(osgiHttpWhiteboardContextSelect)); // query parameter
 if (osgiHttpWhiteboardListener != null) queryParams.Add("osgi.http.whiteboard.listener", ApiClient.ParameterToString(osgiHttpWhiteboardListener)); // query parameter
 if (authSudoCookie != null) queryParams.Add("auth.sudo.cookie", ApiClient.ParameterToString(authSudoCookie)); // query parameter
 if (authSudoParameter != null) queryParams.Add("auth.sudo.parameter", ApiClient.ParameterToString(authSudoParameter)); // query parameter
 if (authAnnonymous != null) queryParams.Add("auth.annonymous", ApiClient.ParameterToString(authAnnonymous)); // query parameter
 if (slingAuthRequirements != null) queryParams.Add("sling.auth.requirements", ApiClient.ParameterToString(slingAuthRequirements)); // query parameter
 if (slingAuthAnonymousUser != null) queryParams.Add("sling.auth.anonymous.user", ApiClient.ParameterToString(slingAuthAnonymousUser)); // query parameter
 if (slingAuthAnonymousPassword != null) queryParams.Add("sling.auth.anonymous.password", ApiClient.ParameterToString(slingAuthAnonymousPassword)); // query parameter
 if (authHttp != null) queryParams.Add("auth.http", ApiClient.ParameterToString(authHttp)); // query parameter
 if (authHttpRealm != null) queryParams.Add("auth.http.realm", ApiClient.ParameterToString(authHttpRealm)); // query parameter
 if (authUriSuffix != null) queryParams.Add("auth.uri.suffix", ApiClient.ParameterToString(authUriSuffix)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplAuthSlingAuthenticator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplAuthSlingAuthenticator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="extensions"></param> 
        /// <param name="minDurationMs"></param> 
        /// <param name="maxDurationMs"></param> 
        /// <param name="compactLogFormat"></param> 
        /// <returns>OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo</returns>            
        public OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> extensions, int? minDurationMs, int? maxDurationMs, bool? compactLogFormat)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (extensions != null) queryParams.Add("extensions", ApiClient.ParameterToString(extensions)); // query parameter
 if (minDurationMs != null) queryParams.Add("minDurationMs", ApiClient.ParameterToString(minDurationMs)); // query parameter
 if (maxDurationMs != null) queryParams.Add("maxDurationMs", ApiClient.ParameterToString(maxDurationMs)); // query parameter
 if (compactLogFormat != null) queryParams.Add("compactLogFormat", ApiClient.ParameterToString(compactLogFormat)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="requestLogOutput"></param> 
        /// <param name="requestLogOutputtype"></param> 
        /// <param name="requestLogEnabled"></param> 
        /// <param name="accessLogOutput"></param> 
        /// <param name="accessLogOutputtype"></param> 
        /// <param name="accessLogEnabled"></param> 
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerInfo</returns>            
        public OrgApacheSlingEngineImplLogRequestLoggerInfo OrgApacheSlingEngineImplLogRequestLogger (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogOutput, int? requestLogOutputtype, bool? requestLogEnabled, string accessLogOutput, int? accessLogOutputtype, bool? accessLogEnabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (requestLogOutput != null) queryParams.Add("request.log.output", ApiClient.ParameterToString(requestLogOutput)); // query parameter
 if (requestLogOutputtype != null) queryParams.Add("request.log.outputtype", ApiClient.ParameterToString(requestLogOutputtype)); // query parameter
 if (requestLogEnabled != null) queryParams.Add("request.log.enabled", ApiClient.ParameterToString(requestLogEnabled)); // query parameter
 if (accessLogOutput != null) queryParams.Add("access.log.output", ApiClient.ParameterToString(accessLogOutput)); // query parameter
 if (accessLogOutputtype != null) queryParams.Add("access.log.outputtype", ApiClient.ParameterToString(accessLogOutputtype)); // query parameter
 if (accessLogEnabled != null) queryParams.Add("access.log.enabled", ApiClient.ParameterToString(accessLogEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplLogRequestLogger: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplLogRequestLogger: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineImplLogRequestLoggerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineImplLogRequestLoggerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="requestLogServiceFormat"></param> 
        /// <param name="requestLogServiceOutput"></param> 
        /// <param name="requestLogServiceOutputtype"></param> 
        /// <param name="requestLogServiceOnentry"></param> 
        /// <returns>OrgApacheSlingEngineImplLogRequestLoggerServiceInfo</returns>            
        public OrgApacheSlingEngineImplLogRequestLoggerServiceInfo OrgApacheSlingEngineImplLogRequestLoggerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string requestLogServiceFormat, string requestLogServiceOutput, int? requestLogServiceOutputtype, bool? requestLogServiceOnentry)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (requestLogServiceFormat != null) queryParams.Add("request.log.service.format", ApiClient.ParameterToString(requestLogServiceFormat)); // query parameter
 if (requestLogServiceOutput != null) queryParams.Add("request.log.service.output", ApiClient.ParameterToString(requestLogServiceOutput)); // query parameter
 if (requestLogServiceOutputtype != null) queryParams.Add("request.log.service.outputtype", ApiClient.ParameterToString(requestLogServiceOutputtype)); // query parameter
 if (requestLogServiceOnentry != null) queryParams.Add("request.log.service.onentry", ApiClient.ParameterToString(requestLogServiceOnentry)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplLogRequestLoggerService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplLogRequestLoggerService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineImplLogRequestLoggerServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineImplLogRequestLoggerServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingMaxCalls"></param> 
        /// <param name="slingMaxInclusions"></param> 
        /// <param name="slingTraceAllow"></param> 
        /// <param name="slingMaxRecordRequests"></param> 
        /// <param name="slingStorePatternRequests"></param> 
        /// <param name="slingServerinfo"></param> 
        /// <param name="slingAdditionalResponseHeaders"></param> 
        /// <returns>OrgApacheSlingEngineImplSlingMainServletInfo</returns>            
        public OrgApacheSlingEngineImplSlingMainServletInfo OrgApacheSlingEngineImplSlingMainServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? slingMaxCalls, int? slingMaxInclusions, bool? slingTraceAllow, int? slingMaxRecordRequests, List<string> slingStorePatternRequests, string slingServerinfo, List<string> slingAdditionalResponseHeaders)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingMaxCalls != null) queryParams.Add("sling.max.calls", ApiClient.ParameterToString(slingMaxCalls)); // query parameter
 if (slingMaxInclusions != null) queryParams.Add("sling.max.inclusions", ApiClient.ParameterToString(slingMaxInclusions)); // query parameter
 if (slingTraceAllow != null) queryParams.Add("sling.trace.allow", ApiClient.ParameterToString(slingTraceAllow)); // query parameter
 if (slingMaxRecordRequests != null) queryParams.Add("sling.max.record.requests", ApiClient.ParameterToString(slingMaxRecordRequests)); // query parameter
 if (slingStorePatternRequests != null) queryParams.Add("sling.store.pattern.requests", ApiClient.ParameterToString(slingStorePatternRequests)); // query parameter
 if (slingServerinfo != null) queryParams.Add("sling.serverinfo", ApiClient.ParameterToString(slingServerinfo)); // query parameter
 if (slingAdditionalResponseHeaders != null) queryParams.Add("sling.additional.response.headers", ApiClient.ParameterToString(slingAdditionalResponseHeaders)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplSlingMainServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineImplSlingMainServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineImplSlingMainServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineImplSlingMainServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingDefaultParameterEncoding"></param> 
        /// <param name="slingDefaultMaxParameters"></param> 
        /// <param name="fileLocation"></param> 
        /// <param name="fileThreshold"></param> 
        /// <param name="fileMax"></param> 
        /// <param name="requestMax"></param> 
        /// <param name="slingDefaultParameterCheckForAdditionalContainerParameters"></param> 
        /// <returns>OrgApacheSlingEngineParametersInfo</returns>            
        public OrgApacheSlingEngineParametersInfo OrgApacheSlingEngineParameters (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingDefaultParameterEncoding, int? slingDefaultMaxParameters, string fileLocation, int? fileThreshold, int? fileMax, int? requestMax, bool? slingDefaultParameterCheckForAdditionalContainerParameters)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.engine.parameters";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingDefaultParameterEncoding != null) queryParams.Add("sling.default.parameter.encoding", ApiClient.ParameterToString(slingDefaultParameterEncoding)); // query parameter
 if (slingDefaultMaxParameters != null) queryParams.Add("sling.default.max.parameters", ApiClient.ParameterToString(slingDefaultMaxParameters)); // query parameter
 if (fileLocation != null) queryParams.Add("file.location", ApiClient.ParameterToString(fileLocation)); // query parameter
 if (fileThreshold != null) queryParams.Add("file.threshold", ApiClient.ParameterToString(fileThreshold)); // query parameter
 if (fileMax != null) queryParams.Add("file.max", ApiClient.ParameterToString(fileMax)); // query parameter
 if (requestMax != null) queryParams.Add("request.max", ApiClient.ParameterToString(requestMax)); // query parameter
 if (slingDefaultParameterCheckForAdditionalContainerParameters != null) queryParams.Add("sling.default.parameter.checkForAdditionalContainerParameters", ApiClient.ParameterToString(slingDefaultParameterCheckForAdditionalContainerParameters)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineParameters: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEngineParameters: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEngineParametersInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEngineParametersInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="minPoolSize"></param> 
        /// <returns>OrgApacheSlingEventImplEventingThreadPoolInfo</returns>            
        public OrgApacheSlingEventImplEventingThreadPoolInfo OrgApacheSlingEventImplEventingThreadPool (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? minPoolSize)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (minPoolSize != null) queryParams.Add("minPoolSize", ApiClient.ParameterToString(minPoolSize)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplEventingThreadPool: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplEventingThreadPool: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEventImplEventingThreadPoolInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEventImplEventingThreadPoolInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queuePriority"></param> 
        /// <param name="queueRetries"></param> 
        /// <param name="queueRetrydelay"></param> 
        /// <param name="queueMaxparallel"></param> 
        /// <returns>OrgApacheSlingEventImplJobsDefaultJobManagerInfo</returns>            
        public OrgApacheSlingEventImplJobsDefaultJobManagerInfo OrgApacheSlingEventImplJobsDefaultJobManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queuePriority, int? queueRetries, int? queueRetrydelay, int? queueMaxparallel)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queuePriority != null) queryParams.Add("queue.priority", ApiClient.ParameterToString(queuePriority)); // query parameter
 if (queueRetries != null) queryParams.Add("queue.retries", ApiClient.ParameterToString(queueRetries)); // query parameter
 if (queueRetrydelay != null) queryParams.Add("queue.retrydelay", ApiClient.ParameterToString(queueRetrydelay)); // query parameter
 if (queueMaxparallel != null) queryParams.Add("queue.maxparallel", ApiClient.ParameterToString(queueMaxparallel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsDefaultJobManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsDefaultJobManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEventImplJobsDefaultJobManagerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEventImplJobsDefaultJobManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jobConsumermanagerDisableDistribution"></param> 
        /// <param name="startupDelay"></param> 
        /// <param name="cleanupPeriod"></param> 
        /// <returns>OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo</returns>            
        public OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo OrgApacheSlingEventImplJobsJcrPersistenceHandler (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? jobConsumermanagerDisableDistribution, int? startupDelay, int? cleanupPeriod)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jobConsumermanagerDisableDistribution != null) queryParams.Add("job.consumermanager.disableDistribution", ApiClient.ParameterToString(jobConsumermanagerDisableDistribution)); // query parameter
 if (startupDelay != null) queryParams.Add("startup.delay", ApiClient.ParameterToString(startupDelay)); // query parameter
 if (cleanupPeriod != null) queryParams.Add("cleanup.period", ApiClient.ParameterToString(cleanupPeriod)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsJcrPersistenceHandler: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsJcrPersistenceHandler: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingInstallerConfigurationPersist"></param> 
        /// <param name="jobConsumermanagerWhitelist"></param> 
        /// <param name="jobConsumermanagerBlacklist"></param> 
        /// <returns>OrgApacheSlingEventImplJobsJobConsumerManagerInfo</returns>            
        public OrgApacheSlingEventImplJobsJobConsumerManagerInfo OrgApacheSlingEventImplJobsJobConsumerManager (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? orgApacheSlingInstallerConfigurationPersist, List<string> jobConsumermanagerWhitelist, List<string> jobConsumermanagerBlacklist)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingInstallerConfigurationPersist != null) queryParams.Add("org.apache.sling.installer.configuration.persist", ApiClient.ParameterToString(orgApacheSlingInstallerConfigurationPersist)); // query parameter
 if (jobConsumermanagerWhitelist != null) queryParams.Add("job.consumermanager.whitelist", ApiClient.ParameterToString(jobConsumermanagerWhitelist)); // query parameter
 if (jobConsumermanagerBlacklist != null) queryParams.Add("job.consumermanager.blacklist", ApiClient.ParameterToString(jobConsumermanagerBlacklist)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsJobConsumerManager: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventImplJobsJobConsumerManager: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEventImplJobsJobConsumerManagerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEventImplJobsJobConsumerManagerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="queueName"></param> 
        /// <param name="queueTopics"></param> 
        /// <param name="queueType"></param> 
        /// <param name="queuePriority"></param> 
        /// <param name="queueRetries"></param> 
        /// <param name="queueRetrydelay"></param> 
        /// <param name="queueMaxparallel"></param> 
        /// <param name="queueKeepJobs"></param> 
        /// <param name="queuePreferRunOnCreationInstance"></param> 
        /// <param name="queueThreadPoolSize"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>OrgApacheSlingEventJobsQueueConfigurationInfo</returns>            
        public OrgApacheSlingEventJobsQueueConfigurationInfo OrgApacheSlingEventJobsQueueConfiguration (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string queueName, List<string> queueTopics, string queueType, string queuePriority, int? queueRetries, int? queueRetrydelay, decimal? queueMaxparallel, bool? queueKeepJobs, bool? queuePreferRunOnCreationInstance, int? queueThreadPoolSize, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (queueName != null) queryParams.Add("queue.name", ApiClient.ParameterToString(queueName)); // query parameter
 if (queueTopics != null) queryParams.Add("queue.topics", ApiClient.ParameterToString(queueTopics)); // query parameter
 if (queueType != null) queryParams.Add("queue.type", ApiClient.ParameterToString(queueType)); // query parameter
 if (queuePriority != null) queryParams.Add("queue.priority", ApiClient.ParameterToString(queuePriority)); // query parameter
 if (queueRetries != null) queryParams.Add("queue.retries", ApiClient.ParameterToString(queueRetries)); // query parameter
 if (queueRetrydelay != null) queryParams.Add("queue.retrydelay", ApiClient.ParameterToString(queueRetrydelay)); // query parameter
 if (queueMaxparallel != null) queryParams.Add("queue.maxparallel", ApiClient.ParameterToString(queueMaxparallel)); // query parameter
 if (queueKeepJobs != null) queryParams.Add("queue.keepJobs", ApiClient.ParameterToString(queueKeepJobs)); // query parameter
 if (queuePreferRunOnCreationInstance != null) queryParams.Add("queue.preferRunOnCreationInstance", ApiClient.ParameterToString(queuePreferRunOnCreationInstance)); // query parameter
 if (queueThreadPoolSize != null) queryParams.Add("queue.threadPoolSize", ApiClient.ParameterToString(queueThreadPoolSize)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventJobsQueueConfiguration: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingEventJobsQueueConfiguration: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingEventJobsQueueConfigurationInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingEventJobsQueueConfigurationInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="users"></param> 
        /// <param name="groups"></param> 
        /// <returns>OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo</returns>            
        public OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> users, List<string> groups)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (users != null) queryParams.Add("users", ApiClient.ParameterToString(users)); // query parameter
 if (groups != null) queryParams.Add("groups", ApiClient.ParameterToString(groups)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="description"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheSlingFeatureflagsFeatureInfo</returns>            
        public OrgApacheSlingFeatureflagsFeatureInfo OrgApacheSlingFeatureflagsFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.featureflags.Feature";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (description != null) queryParams.Add("description", ApiClient.ParameterToString(description)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingFeatureflagsFeature: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingFeatureflagsFeature: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingFeatureflagsFeatureInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingFeatureflagsFeatureInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="name"></param> 
        /// <param name="description"></param> 
        /// <param name="enabled"></param> 
        /// <returns>OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo</returns>            
        public OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo OrgApacheSlingFeatureflagsImplConfiguredFeature (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string name, string description, bool? enabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (name != null) queryParams.Add("name", ApiClient.ParameterToString(name)); // query parameter
 if (description != null) queryParams.Add("description", ApiClient.ParameterToString(description)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingFeatureflagsImplConfiguredFeature: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingFeatureflagsImplConfiguredFeature: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingHapiToolsResourcetype"></param> 
        /// <param name="orgApacheSlingHapiToolsCollectionresourcetype"></param> 
        /// <param name="orgApacheSlingHapiToolsSearchpaths"></param> 
        /// <param name="orgApacheSlingHapiToolsExternalurl"></param> 
        /// <param name="orgApacheSlingHapiToolsEnabled"></param> 
        /// <returns>OrgApacheSlingHapiImplHApiUtilImplInfo</returns>            
        public OrgApacheSlingHapiImplHApiUtilImplInfo OrgApacheSlingHapiImplHApiUtilImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string orgApacheSlingHapiToolsResourcetype, string orgApacheSlingHapiToolsCollectionresourcetype, List<string> orgApacheSlingHapiToolsSearchpaths, string orgApacheSlingHapiToolsExternalurl, bool? orgApacheSlingHapiToolsEnabled)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingHapiToolsResourcetype != null) queryParams.Add("org.apache.sling.hapi.tools.resourcetype", ApiClient.ParameterToString(orgApacheSlingHapiToolsResourcetype)); // query parameter
 if (orgApacheSlingHapiToolsCollectionresourcetype != null) queryParams.Add("org.apache.sling.hapi.tools.collectionresourcetype", ApiClient.ParameterToString(orgApacheSlingHapiToolsCollectionresourcetype)); // query parameter
 if (orgApacheSlingHapiToolsSearchpaths != null) queryParams.Add("org.apache.sling.hapi.tools.searchpaths", ApiClient.ParameterToString(orgApacheSlingHapiToolsSearchpaths)); // query parameter
 if (orgApacheSlingHapiToolsExternalurl != null) queryParams.Add("org.apache.sling.hapi.tools.externalurl", ApiClient.ParameterToString(orgApacheSlingHapiToolsExternalurl)); // query parameter
 if (orgApacheSlingHapiToolsEnabled != null) queryParams.Add("org.apache.sling.hapi.tools.enabled", ApiClient.ParameterToString(orgApacheSlingHapiToolsEnabled)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHapiImplHApiUtilImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHapiImplHApiUtilImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHapiImplHApiUtilImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHapiImplHApiUtilImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <param name="filterTags"></param> 
        /// <param name="filterCombineTagsWithOr"></param> 
        /// <returns>OrgApacheSlingHcCoreImplCompositeHealthCheckInfo</returns>            
        public OrgApacheSlingHcCoreImplCompositeHealthCheckInfo OrgApacheSlingHcCoreImplCompositeHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, List<string> filterTags, bool? filterCombineTagsWithOr)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
 if (filterTags != null) queryParams.Add("filter.tags", ApiClient.ParameterToString(filterTags)); // query parameter
 if (filterCombineTagsWithOr != null) queryParams.Add("filter.combineTagsWithOr", ApiClient.ParameterToString(filterCombineTagsWithOr)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplCompositeHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplCompositeHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplCompositeHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplCompositeHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="timeoutInMs"></param> 
        /// <param name="longRunningFutureThresholdForCriticalMs"></param> 
        /// <param name="resultCacheTtlInMs"></param> 
        /// <returns>OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo</returns>            
        public OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? timeoutInMs, int? longRunningFutureThresholdForCriticalMs, int? resultCacheTtlInMs)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (timeoutInMs != null) queryParams.Add("timeoutInMs", ApiClient.ParameterToString(timeoutInMs)); // query parameter
 if (longRunningFutureThresholdForCriticalMs != null) queryParams.Add("longRunningFutureThresholdForCriticalMs", ApiClient.ParameterToString(longRunningFutureThresholdForCriticalMs)); // query parameter
 if (resultCacheTtlInMs != null) queryParams.Add("resultCacheTtlInMs", ApiClient.ParameterToString(resultCacheTtlInMs)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <param name="mbeanName"></param> 
        /// <param name="attributeName"></param> 
        /// <param name="attributeValueConstraint"></param> 
        /// <returns>OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo</returns>            
        public OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo OrgApacheSlingHcCoreImplJmxAttributeHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string mbeanName, string attributeName, string attributeValueConstraint)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
 if (mbeanName != null) queryParams.Add("mbean.name", ApiClient.ParameterToString(mbeanName)); // query parameter
 if (attributeName != null) queryParams.Add("attribute.name", ApiClient.ParameterToString(attributeName)); // query parameter
 if (attributeValueConstraint != null) queryParams.Add("attribute.value.constraint", ApiClient.ParameterToString(attributeValueConstraint)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplJmxAttributeHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplJmxAttributeHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="hcName"></param> 
        /// <param name="hcTags"></param> 
        /// <param name="hcMbeanName"></param> 
        /// <param name="expression"></param> 
        /// <param name="languageExtension"></param> 
        /// <returns>OrgApacheSlingHcCoreImplScriptableHealthCheckInfo</returns>            
        public OrgApacheSlingHcCoreImplScriptableHealthCheckInfo OrgApacheSlingHcCoreImplScriptableHealthCheck (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string hcName, List<string> hcTags, string hcMbeanName, string expression, string languageExtension)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (hcName != null) queryParams.Add("hc.name", ApiClient.ParameterToString(hcName)); // query parameter
 if (hcTags != null) queryParams.Add("hc.tags", ApiClient.ParameterToString(hcTags)); // query parameter
 if (hcMbeanName != null) queryParams.Add("hc.mbean.name", ApiClient.ParameterToString(hcMbeanName)); // query parameter
 if (expression != null) queryParams.Add("expression", ApiClient.ParameterToString(expression)); // query parameter
 if (languageExtension != null) queryParams.Add("language.extension", ApiClient.ParameterToString(languageExtension)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplScriptableHealthCheck: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplScriptableHealthCheck: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplScriptableHealthCheckInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplScriptableHealthCheckInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="servletPath"></param> 
        /// <param name="disabled"></param> 
        /// <param name="corsAccessControlAllowOrigin"></param> 
        /// <returns>OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo</returns>            
        public OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletPath, bool? disabled, string corsAccessControlAllowOrigin)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (servletPath != null) queryParams.Add("servletPath", ApiClient.ParameterToString(servletPath)); // query parameter
 if (disabled != null) queryParams.Add("disabled", ApiClient.ParameterToString(disabled)); // query parameter
 if (corsAccessControlAllowOrigin != null) queryParams.Add("cors.accessControlAllowOrigin", ApiClient.ParameterToString(corsAccessControlAllowOrigin)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="totalWidth"></param> 
        /// <param name="colWidthName"></param> 
        /// <param name="colWidthResult"></param> 
        /// <param name="colWidthTiming"></param> 
        /// <returns>OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo</returns>            
        public OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? totalWidth, int? colWidthName, int? colWidthResult, int? colWidthTiming)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (totalWidth != null) queryParams.Add("totalWidth", ApiClient.ParameterToString(totalWidth)); // query parameter
 if (colWidthName != null) queryParams.Add("colWidthName", ApiClient.ParameterToString(colWidthName)); // query parameter
 if (colWidthResult != null) queryParams.Add("colWidthResult", ApiClient.ParameterToString(colWidthResult)); // query parameter
 if (colWidthTiming != null) queryParams.Add("colWidthTiming", ApiClient.ParameterToString(colWidthTiming)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="slingFilterScope"></param> 
        /// <returns>OrgApacheSlingI18nImplI18NFilterInfo</returns>            
        public OrgApacheSlingI18nImplI18NFilterInfo OrgApacheSlingI18nImplI18NFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> slingFilterScope)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (slingFilterScope != null) queryParams.Add("sling.filter.scope", ApiClient.ParameterToString(slingFilterScope)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingI18nImplI18NFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingI18nImplI18NFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingI18nImplI18NFilterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingI18nImplI18NFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="localeDefault"></param> 
        /// <param name="preloadBundles"></param> 
        /// <param name="invalidationDelay"></param> 
        /// <returns>OrgApacheSlingI18nImplJcrResourceBundleProviderInfo</returns>            
        public OrgApacheSlingI18nImplJcrResourceBundleProviderInfo OrgApacheSlingI18nImplJcrResourceBundleProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string localeDefault, bool? preloadBundles, int? invalidationDelay)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (localeDefault != null) queryParams.Add("locale.default", ApiClient.ParameterToString(localeDefault)); // query parameter
 if (preloadBundles != null) queryParams.Add("preload.bundles", ApiClient.ParameterToString(preloadBundles)); // query parameter
 if (invalidationDelay != null) queryParams.Add("invalidation.delay", ApiClient.ParameterToString(invalidationDelay)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingI18nImplJcrResourceBundleProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingI18nImplJcrResourceBundleProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingI18nImplJcrResourceBundleProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingI18nImplJcrResourceBundleProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="handlerSchemes"></param> 
        /// <param name="slingJcrinstallFolderNameRegexp"></param> 
        /// <param name="slingJcrinstallFolderMaxDepth"></param> 
        /// <param name="slingJcrinstallSearchPath"></param> 
        /// <param name="slingJcrinstallNewConfigPath"></param> 
        /// <param name="slingJcrinstallSignalPath"></param> 
        /// <param name="slingJcrinstallEnableWriteback"></param> 
        /// <returns>OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo</returns>            
        public OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo OrgApacheSlingInstallerProviderJcrImplJcrInstaller (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> handlerSchemes, string slingJcrinstallFolderNameRegexp, int? slingJcrinstallFolderMaxDepth, List<string> slingJcrinstallSearchPath, string slingJcrinstallNewConfigPath, string slingJcrinstallSignalPath, bool? slingJcrinstallEnableWriteback)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (handlerSchemes != null) queryParams.Add("handler.schemes", ApiClient.ParameterToString(handlerSchemes)); // query parameter
 if (slingJcrinstallFolderNameRegexp != null) queryParams.Add("sling.jcrinstall.folder.name.regexp", ApiClient.ParameterToString(slingJcrinstallFolderNameRegexp)); // query parameter
 if (slingJcrinstallFolderMaxDepth != null) queryParams.Add("sling.jcrinstall.folder.max.depth", ApiClient.ParameterToString(slingJcrinstallFolderMaxDepth)); // query parameter
 if (slingJcrinstallSearchPath != null) queryParams.Add("sling.jcrinstall.search.path", ApiClient.ParameterToString(slingJcrinstallSearchPath)); // query parameter
 if (slingJcrinstallNewConfigPath != null) queryParams.Add("sling.jcrinstall.new.config.path", ApiClient.ParameterToString(slingJcrinstallNewConfigPath)); // query parameter
 if (slingJcrinstallSignalPath != null) queryParams.Add("sling.jcrinstall.signal.path", ApiClient.ParameterToString(slingJcrinstallSignalPath)); // query parameter
 if (slingJcrinstallEnableWriteback != null) queryParams.Add("sling.jcrinstall.enable.writeback", ApiClient.ParameterToString(slingJcrinstallEnableWriteback)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingInstallerProviderJcrImplJcrInstaller: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingInstallerProviderJcrImplJcrInstaller: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="whitelistBypass"></param> 
        /// <param name="whitelistBundlesRegexp"></param> 
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo</returns>            
        public OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelist (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? whitelistBypass, string whitelistBundlesRegexp)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (whitelistBypass != null) queryParams.Add("whitelist.bypass", ApiClient.ParameterToString(whitelistBypass)); // query parameter
 if (whitelistBundlesRegexp != null) queryParams.Add("whitelist.bundles.regexp", ApiClient.ParameterToString(whitelistBundlesRegexp)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrBaseInternalLoginAdminWhitelist: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrBaseInternalLoginAdminWhitelist: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="whitelistName"></param> 
        /// <param name="whitelistBundles"></param> 
        /// <returns>OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo</returns>            
        public OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string whitelistName, List<string> whitelistBundles)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (whitelistName != null) queryParams.Add("whitelist.name", ApiClient.ParameterToString(whitelistName)); // query parameter
 if (whitelistBundles != null) queryParams.Add("whitelist.bundles", ApiClient.ParameterToString(whitelistBundles)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="alias"></param> 
        /// <param name="davCreateAbsoluteUri"></param> 
        /// <param name="davProtectedhandlers"></param> 
        /// <returns>OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo</returns>            
        public OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo OrgApacheSlingJcrDavexImplServletsSlingDavExServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string alias, bool? davCreateAbsoluteUri, string davProtectedhandlers)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (alias != null) queryParams.Add("alias", ApiClient.ParameterToString(alias)); // query parameter
 if (davCreateAbsoluteUri != null) queryParams.Add("dav.create-absolute-uri", ApiClient.ParameterToString(davCreateAbsoluteUri)); // query parameter
 if (davProtectedhandlers != null) queryParams.Add("dav.protectedhandlers", ApiClient.ParameterToString(davProtectedhandlers)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrDavexImplServletsSlingDavExServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrDavexImplServletsSlingDavExServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="javaNamingFactoryInitial"></param> 
        /// <param name="javaNamingProviderUrl"></param> 
        /// <returns>OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo</returns>            
        public OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string javaNamingFactoryInitial, string javaNamingProviderUrl)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (javaNamingFactoryInitial != null) queryParams.Add("java.naming.factory.initial", ApiClient.ParameterToString(javaNamingFactoryInitial)); // query parameter
 if (javaNamingProviderUrl != null) queryParams.Add("java.naming.provider.url", ApiClient.ParameterToString(javaNamingProviderUrl)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="port"></param> 
        /// <returns>OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo</returns>            
        public OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? port)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (port != null) queryParams.Add("port", ApiClient.ParameterToString(port)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="references"></param> 
        /// <returns>OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo</returns>            
        public OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo OrgApacheSlingJcrRepoinitImplRepositoryInitializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (references != null) queryParams.Add("references", ApiClient.ParameterToString(references)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrRepoinitImplRepositoryInitializer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrRepoinitImplRepositoryInitializer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="references"></param> 
        /// <param name="scripts"></param> 
        /// <returns>OrgApacheSlingJcrRepoinitRepositoryInitializerInfo</returns>            
        public OrgApacheSlingJcrRepoinitRepositoryInitializerInfo OrgApacheSlingJcrRepoinitRepositoryInitializer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> references, List<string> scripts)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (references != null) queryParams.Add("references", ApiClient.ParameterToString(references)); // query parameter
 if (scripts != null) queryParams.Add("scripts", ApiClient.ParameterToString(scripts)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrRepoinitRepositoryInitializer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrRepoinitRepositoryInitializer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrRepoinitRepositoryInitializerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrRepoinitRepositoryInitializerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="resourceResolverSearchpath"></param> 
        /// <param name="resourceResolverManglenamespaces"></param> 
        /// <param name="resourceResolverAllowDirect"></param> 
        /// <param name="resourceResolverRequiredProviders"></param> 
        /// <param name="resourceResolverRequiredProvidernames"></param> 
        /// <param name="resourceResolverVirtual"></param> 
        /// <param name="resourceResolverMapping"></param> 
        /// <param name="resourceResolverMapLocation"></param> 
        /// <param name="resourceResolverMapObservation"></param> 
        /// <param name="resourceResolverDefaultVanityRedirectStatus"></param> 
        /// <param name="resourceResolverEnableVanitypath"></param> 
        /// <param name="resourceResolverVanitypathMaxEntries"></param> 
        /// <param name="resourceResolverVanitypathMaxEntriesStartup"></param> 
        /// <param name="resourceResolverVanitypathBloomfilterMaxBytes"></param> 
        /// <param name="resourceResolverOptimizeAliasResolution"></param> 
        /// <param name="resourceResolverVanitypathWhitelist"></param> 
        /// <param name="resourceResolverVanitypathBlacklist"></param> 
        /// <param name="resourceResolverVanityPrecedence"></param> 
        /// <param name="resourceResolverProviderhandlingParanoid"></param> 
        /// <param name="resourceResolverLogClosing"></param> 
        /// <param name="resourceResolverLogUnclosed"></param> 
        /// <returns>OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo</returns>            
        public OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> resourceResolverSearchpath, bool? resourceResolverManglenamespaces, bool? resourceResolverAllowDirect, List<string> resourceResolverRequiredProviders, List<string> resourceResolverRequiredProvidernames, List<string> resourceResolverVirtual, List<string> resourceResolverMapping, string resourceResolverMapLocation, List<string> resourceResolverMapObservation, int? resourceResolverDefaultVanityRedirectStatus, bool? resourceResolverEnableVanitypath, int? resourceResolverVanitypathMaxEntries, bool? resourceResolverVanitypathMaxEntriesStartup, int? resourceResolverVanitypathBloomfilterMaxBytes, bool? resourceResolverOptimizeAliasResolution, List<string> resourceResolverVanitypathWhitelist, List<string> resourceResolverVanitypathBlacklist, bool? resourceResolverVanityPrecedence, bool? resourceResolverProviderhandlingParanoid, bool? resourceResolverLogClosing, bool? resourceResolverLogUnclosed)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (resourceResolverSearchpath != null) queryParams.Add("resource.resolver.searchpath", ApiClient.ParameterToString(resourceResolverSearchpath)); // query parameter
 if (resourceResolverManglenamespaces != null) queryParams.Add("resource.resolver.manglenamespaces", ApiClient.ParameterToString(resourceResolverManglenamespaces)); // query parameter
 if (resourceResolverAllowDirect != null) queryParams.Add("resource.resolver.allowDirect", ApiClient.ParameterToString(resourceResolverAllowDirect)); // query parameter
 if (resourceResolverRequiredProviders != null) queryParams.Add("resource.resolver.required.providers", ApiClient.ParameterToString(resourceResolverRequiredProviders)); // query parameter
 if (resourceResolverRequiredProvidernames != null) queryParams.Add("resource.resolver.required.providernames", ApiClient.ParameterToString(resourceResolverRequiredProvidernames)); // query parameter
 if (resourceResolverVirtual != null) queryParams.Add("resource.resolver.virtual", ApiClient.ParameterToString(resourceResolverVirtual)); // query parameter
 if (resourceResolverMapping != null) queryParams.Add("resource.resolver.mapping", ApiClient.ParameterToString(resourceResolverMapping)); // query parameter
 if (resourceResolverMapLocation != null) queryParams.Add("resource.resolver.map.location", ApiClient.ParameterToString(resourceResolverMapLocation)); // query parameter
 if (resourceResolverMapObservation != null) queryParams.Add("resource.resolver.map.observation", ApiClient.ParameterToString(resourceResolverMapObservation)); // query parameter
 if (resourceResolverDefaultVanityRedirectStatus != null) queryParams.Add("resource.resolver.default.vanity.redirect.status", ApiClient.ParameterToString(resourceResolverDefaultVanityRedirectStatus)); // query parameter
 if (resourceResolverEnableVanitypath != null) queryParams.Add("resource.resolver.enable.vanitypath", ApiClient.ParameterToString(resourceResolverEnableVanitypath)); // query parameter
 if (resourceResolverVanitypathMaxEntries != null) queryParams.Add("resource.resolver.vanitypath.maxEntries", ApiClient.ParameterToString(resourceResolverVanitypathMaxEntries)); // query parameter
 if (resourceResolverVanitypathMaxEntriesStartup != null) queryParams.Add("resource.resolver.vanitypath.maxEntries.startup", ApiClient.ParameterToString(resourceResolverVanitypathMaxEntriesStartup)); // query parameter
 if (resourceResolverVanitypathBloomfilterMaxBytes != null) queryParams.Add("resource.resolver.vanitypath.bloomfilter.maxBytes", ApiClient.ParameterToString(resourceResolverVanitypathBloomfilterMaxBytes)); // query parameter
 if (resourceResolverOptimizeAliasResolution != null) queryParams.Add("resource.resolver.optimize.alias.resolution", ApiClient.ParameterToString(resourceResolverOptimizeAliasResolution)); // query parameter
 if (resourceResolverVanitypathWhitelist != null) queryParams.Add("resource.resolver.vanitypath.whitelist", ApiClient.ParameterToString(resourceResolverVanitypathWhitelist)); // query parameter
 if (resourceResolverVanitypathBlacklist != null) queryParams.Add("resource.resolver.vanitypath.blacklist", ApiClient.ParameterToString(resourceResolverVanitypathBlacklist)); // query parameter
 if (resourceResolverVanityPrecedence != null) queryParams.Add("resource.resolver.vanity.precedence", ApiClient.ParameterToString(resourceResolverVanityPrecedence)); // query parameter
 if (resourceResolverProviderhandlingParanoid != null) queryParams.Add("resource.resolver.providerhandling.paranoid", ApiClient.ParameterToString(resourceResolverProviderhandlingParanoid)); // query parameter
 if (resourceResolverLogClosing != null) queryParams.Add("resource.resolver.log.closing", ApiClient.ParameterToString(resourceResolverLogClosing)); // query parameter
 if (resourceResolverLogUnclosed != null) queryParams.Add("resource.resolver.log.unclosed", ApiClient.ParameterToString(resourceResolverLogUnclosed)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="allowOnlySystemUser"></param> 
        /// <returns>OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo</returns>            
        public OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo OrgApacheSlingJcrResourceInternalJcrSystemUserValidator (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowOnlySystemUser)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (allowOnlySystemUser != null) queryParams.Add("allow.only.system.user", ApiClient.ParameterToString(allowOnlySystemUser)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourceInternalJcrSystemUserValidator: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourceInternalJcrSystemUserValidator: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="path"></param> 
        /// <param name="checkpathPrefix"></param> 
        /// <param name="jcrPath"></param> 
        /// <returns>OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo</returns>            
        public OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string path, string checkpathPrefix, string jcrPath)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
 if (checkpathPrefix != null) queryParams.Add("checkpath.prefix", ApiClient.ParameterToString(checkpathPrefix)); // query parameter
 if (jcrPath != null) queryParams.Add("jcrPath", ApiClient.ParameterToString(jcrPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="typeCollections"></param> 
        /// <param name="typeNoncollections"></param> 
        /// <param name="typeContent"></param> 
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo</returns>            
        public OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, string typeCollections, string typeNoncollections, string typeContent)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (typeCollections != null) queryParams.Add("type.collections", ApiClient.ParameterToString(typeCollections)); // query parameter
 if (typeNoncollections != null) queryParams.Add("type.noncollections", ApiClient.ParameterToString(typeNoncollections)); // query parameter
 if (typeContent != null) queryParams.Add("type.content", ApiClient.ParameterToString(typeContent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <returns>OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo</returns>            
        public OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="davRoot"></param> 
        /// <param name="davCreateAbsoluteUri"></param> 
        /// <param name="davRealm"></param> 
        /// <param name="collectionTypes"></param> 
        /// <param name="filterPrefixes"></param> 
        /// <param name="filterTypes"></param> 
        /// <param name="filterUris"></param> 
        /// <param name="typeCollections"></param> 
        /// <param name="typeNoncollections"></param> 
        /// <param name="typeContent"></param> 
        /// <returns>OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo</returns>            
        public OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string davRoot, bool? davCreateAbsoluteUri, string davRealm, List<string> collectionTypes, List<string> filterPrefixes, string filterTypes, string filterUris, string typeCollections, string typeNoncollections, string typeContent)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (davRoot != null) queryParams.Add("dav.root", ApiClient.ParameterToString(davRoot)); // query parameter
 if (davCreateAbsoluteUri != null) queryParams.Add("dav.create-absolute-uri", ApiClient.ParameterToString(davCreateAbsoluteUri)); // query parameter
 if (davRealm != null) queryParams.Add("dav.realm", ApiClient.ParameterToString(davRealm)); // query parameter
 if (collectionTypes != null) queryParams.Add("collection.types", ApiClient.ParameterToString(collectionTypes)); // query parameter
 if (filterPrefixes != null) queryParams.Add("filter.prefixes", ApiClient.ParameterToString(filterPrefixes)); // query parameter
 if (filterTypes != null) queryParams.Add("filter.types", ApiClient.ParameterToString(filterTypes)); // query parameter
 if (filterUris != null) queryParams.Add("filter.uris", ApiClient.ParameterToString(filterUris)); // query parameter
 if (typeCollections != null) queryParams.Add("type.collections", ApiClient.ParameterToString(typeCollections)); // query parameter
 if (typeNoncollections != null) queryParams.Add("type.noncollections", ApiClient.ParameterToString(typeNoncollections)); // query parameter
 if (typeContent != null) queryParams.Add("type.content", ApiClient.ParameterToString(typeContent)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="providerRoots"></param> 
        /// <returns>OrgApacheSlingJmxProviderImplJMXResourceProviderInfo</returns>            
        public OrgApacheSlingJmxProviderImplJMXResourceProviderInfo OrgApacheSlingJmxProviderImplJMXResourceProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string providerRoots)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (providerRoots != null) queryParams.Add("provider.roots", ApiClient.ParameterToString(providerRoots)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJmxProviderImplJMXResourceProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingJmxProviderImplJMXResourceProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingJmxProviderImplJMXResourceProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingJmxProviderImplJMXResourceProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="osgiHttpWhiteboardListener"></param> 
        /// <param name="osgiHttpWhiteboardContextSelect"></param> 
        /// <param name="maxRecursionDepth"></param> 
        /// <param name="cleanupJobPeriod"></param> 
        /// <returns>OrgApacheSlingModelsImplModelAdapterFactoryInfo</returns>            
        public OrgApacheSlingModelsImplModelAdapterFactoryInfo OrgApacheSlingModelsImplModelAdapterFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string osgiHttpWhiteboardListener, string osgiHttpWhiteboardContextSelect, int? maxRecursionDepth, int? cleanupJobPeriod)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (osgiHttpWhiteboardListener != null) queryParams.Add("osgi.http.whiteboard.listener", ApiClient.ParameterToString(osgiHttpWhiteboardListener)); // query parameter
 if (osgiHttpWhiteboardContextSelect != null) queryParams.Add("osgi.http.whiteboard.context.select", ApiClient.ParameterToString(osgiHttpWhiteboardContextSelect)); // query parameter
 if (maxRecursionDepth != null) queryParams.Add("max.recursion.depth", ApiClient.ParameterToString(maxRecursionDepth)); // query parameter
 if (cleanupJobPeriod != null) queryParams.Add("cleanup.job.period", ApiClient.ParameterToString(cleanupJobPeriod)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingModelsImplModelAdapterFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingModelsImplModelAdapterFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingModelsImplModelAdapterFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingModelsImplModelAdapterFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="maxRecursionLevels"></param> 
        /// <returns>OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo</returns>            
        public OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? maxRecursionLevels)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (maxRecursionLevels != null) queryParams.Add("max.recursion.levels", ApiClient.ParameterToString(maxRecursionLevels)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="felixInventoryPrinterName"></param> 
        /// <param name="felixInventoryPrinterTitle"></param> 
        /// <param name="path"></param> 
        /// <returns>OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo</returns>            
        public OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string felixInventoryPrinterName, string felixInventoryPrinterTitle, string path)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (felixInventoryPrinterName != null) queryParams.Add("felix.inventory.printer.name", ApiClient.ParameterToString(felixInventoryPrinterName)); // query parameter
 if (felixInventoryPrinterTitle != null) queryParams.Add("felix.inventory.printer.title", ApiClient.ParameterToString(felixInventoryPrinterTitle)); // query parameter
 if (path != null) queryParams.Add("path", ApiClient.ParameterToString(path)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mergeRoot"></param> 
        /// <param name="mergeReadOnly"></param> 
        /// <returns>OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo</returns>            
        public OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo OrgApacheSlingResourcemergerImplMergedResourceProviderFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mergeRoot != null) queryParams.Add("merge.root", ApiClient.ParameterToString(mergeRoot)); // query parameter
 if (mergeReadOnly != null) queryParams.Add("merge.readOnly", ApiClient.ParameterToString(mergeReadOnly)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourcemergerImplMergedResourceProviderFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourcemergerImplMergedResourceProviderFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="mergeRoot"></param> 
        /// <param name="mergeReadOnly"></param> 
        /// <returns>OrgApacheSlingResourcemergerPickerOverridingInfo</returns>            
        public OrgApacheSlingResourcemergerPickerOverridingInfo OrgApacheSlingResourcemergerPickerOverriding (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string mergeRoot, bool? mergeReadOnly)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (mergeRoot != null) queryParams.Add("merge.root", ApiClient.ParameterToString(mergeRoot)); // query parameter
 if (mergeReadOnly != null) queryParams.Add("merge.readOnly", ApiClient.ParameterToString(mergeReadOnly)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourcemergerPickerOverriding: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingResourcemergerPickerOverriding: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingResourcemergerPickerOverridingInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingResourcemergerPickerOverridingInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingScriptingCacheSize"></param> 
        /// <param name="orgApacheSlingScriptingCacheAdditionalExtensions"></param> 
        /// <returns>OrgApacheSlingScriptingCoreImplScriptCacheImplInfo</returns>            
        public OrgApacheSlingScriptingCoreImplScriptCacheImplInfo OrgApacheSlingScriptingCoreImplScriptCacheImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingCacheSize, List<string> orgApacheSlingScriptingCacheAdditionalExtensions)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingScriptingCacheSize != null) queryParams.Add("org.apache.sling.scripting.cache.size", ApiClient.ParameterToString(orgApacheSlingScriptingCacheSize)); // query parameter
 if (orgApacheSlingScriptingCacheAdditionalExtensions != null) queryParams.Add("org.apache.sling.scripting.cache.additional_extensions", ApiClient.ParameterToString(orgApacheSlingScriptingCacheAdditionalExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingCoreImplScriptCacheImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingCoreImplScriptCacheImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingCoreImplScriptCacheImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingCoreImplScriptCacheImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="logStacktraceOnclose"></param> 
        /// <returns>OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo</returns>            
        public OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? logStacktraceOnclose)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (logStacktraceOnclose != null) queryParams.Add("log.stacktrace.onclose", ApiClient.ParameterToString(logStacktraceOnclose)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="javaClassdebuginfo"></param> 
        /// <param name="javaJavaEncoding"></param> 
        /// <param name="javaCompilerSourceVM"></param> 
        /// <param name="javaCompilerTargetVM"></param> 
        /// <returns>OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo</returns>            
        public OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? javaClassdebuginfo, string javaJavaEncoding, string javaCompilerSourceVM, string javaCompilerTargetVM)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (javaClassdebuginfo != null) queryParams.Add("java.classdebuginfo", ApiClient.ParameterToString(javaClassdebuginfo)); // query parameter
 if (javaJavaEncoding != null) queryParams.Add("java.javaEncoding", ApiClient.ParameterToString(javaJavaEncoding)); // query parameter
 if (javaCompilerSourceVM != null) queryParams.Add("java.compilerSourceVM", ApiClient.ParameterToString(javaCompilerSourceVM)); // query parameter
 if (javaCompilerTargetVM != null) queryParams.Add("java.compilerTargetVM", ApiClient.ParameterToString(javaCompilerTargetVM)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingScriptingJavascriptRhinoOptLevel"></param> 
        /// <returns>OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo</returns>            
        public OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? orgApacheSlingScriptingJavascriptRhinoOptLevel)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingScriptingJavascriptRhinoOptLevel != null) queryParams.Add("org.apache.sling.scripting.javascript.rhino.optLevel", ApiClient.ParameterToString(orgApacheSlingScriptingJavascriptRhinoOptLevel)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="jasperCompilerTargetVM"></param> 
        /// <param name="jasperCompilerSourceVM"></param> 
        /// <param name="jasperClassdebuginfo"></param> 
        /// <param name="jasperEnablePooling"></param> 
        /// <param name="jasperIeClassId"></param> 
        /// <param name="jasperGenStringAsCharArray"></param> 
        /// <param name="jasperKeepgenerated"></param> 
        /// <param name="jasperMappedfile"></param> 
        /// <param name="jasperTrimSpaces"></param> 
        /// <param name="jasperDisplaySourceFragments"></param> 
        /// <param name="defaultIsSession"></param> 
        /// <returns>OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo</returns>            
        public OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo OrgApacheSlingScriptingJspJspScriptEngineFactory (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string jasperCompilerTargetVM, string jasperCompilerSourceVM, bool? jasperClassdebuginfo, bool? jasperEnablePooling, string jasperIeClassId, bool? jasperGenStringAsCharArray, bool? jasperKeepgenerated, bool? jasperMappedfile, bool? jasperTrimSpaces, bool? jasperDisplaySourceFragments, bool? defaultIsSession)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (jasperCompilerTargetVM != null) queryParams.Add("jasper.compilerTargetVM", ApiClient.ParameterToString(jasperCompilerTargetVM)); // query parameter
 if (jasperCompilerSourceVM != null) queryParams.Add("jasper.compilerSourceVM", ApiClient.ParameterToString(jasperCompilerSourceVM)); // query parameter
 if (jasperClassdebuginfo != null) queryParams.Add("jasper.classdebuginfo", ApiClient.ParameterToString(jasperClassdebuginfo)); // query parameter
 if (jasperEnablePooling != null) queryParams.Add("jasper.enablePooling", ApiClient.ParameterToString(jasperEnablePooling)); // query parameter
 if (jasperIeClassId != null) queryParams.Add("jasper.ieClassId", ApiClient.ParameterToString(jasperIeClassId)); // query parameter
 if (jasperGenStringAsCharArray != null) queryParams.Add("jasper.genStringAsCharArray", ApiClient.ParameterToString(jasperGenStringAsCharArray)); // query parameter
 if (jasperKeepgenerated != null) queryParams.Add("jasper.keepgenerated", ApiClient.ParameterToString(jasperKeepgenerated)); // query parameter
 if (jasperMappedfile != null) queryParams.Add("jasper.mappedfile", ApiClient.ParameterToString(jasperMappedfile)); // query parameter
 if (jasperTrimSpaces != null) queryParams.Add("jasper.trimSpaces", ApiClient.ParameterToString(jasperTrimSpaces)); // query parameter
 if (jasperDisplaySourceFragments != null) queryParams.Add("jasper.displaySourceFragments", ApiClient.ParameterToString(jasperDisplaySourceFragments)); // query parameter
 if (defaultIsSession != null) queryParams.Add("default.is.session", ApiClient.ParameterToString(defaultIsSession)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJspJspScriptEngineFactory: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingJspJspScriptEngineFactory: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="orgApacheSlingScriptingSightlyJsBindings"></param> 
        /// <returns>OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo</returns>            
        public OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> orgApacheSlingScriptingSightlyJsBindings)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (orgApacheSlingScriptingSightlyJsBindings != null) queryParams.Add("org.apache.sling.scripting.sightly.js.bindings", ApiClient.ParameterToString(orgApacheSlingScriptingSightlyJsBindings)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingContentDispositionPaths"></param> 
        /// <param name="slingContentDispositionExcludedPaths"></param> 
        /// <param name="slingContentDispositionAllPaths"></param> 
        /// <returns>OrgApacheSlingSecurityImplContentDispositionFilterInfo</returns>            
        public OrgApacheSlingSecurityImplContentDispositionFilterInfo OrgApacheSlingSecurityImplContentDispositionFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingContentDispositionPaths, List<string> slingContentDispositionExcludedPaths, bool? slingContentDispositionAllPaths)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingContentDispositionPaths != null) queryParams.Add("sling.content.disposition.paths", ApiClient.ParameterToString(slingContentDispositionPaths)); // query parameter
 if (slingContentDispositionExcludedPaths != null) queryParams.Add("sling.content.disposition.excluded.paths", ApiClient.ParameterToString(slingContentDispositionExcludedPaths)); // query parameter
 if (slingContentDispositionAllPaths != null) queryParams.Add("sling.content.disposition.all.paths", ApiClient.ParameterToString(slingContentDispositionAllPaths)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSecurityImplContentDispositionFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSecurityImplContentDispositionFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingSecurityImplContentDispositionFilterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingSecurityImplContentDispositionFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="allowEmpty"></param> 
        /// <param name="allowHosts"></param> 
        /// <param name="allowHostsRegexp"></param> 
        /// <param name="filterMethods"></param> 
        /// <param name="excludeAgentsRegexp"></param> 
        /// <returns>OrgApacheSlingSecurityImplReferrerFilterInfo</returns>            
        public OrgApacheSlingSecurityImplReferrerFilterInfo OrgApacheSlingSecurityImplReferrerFilter (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? allowEmpty, List<string> allowHosts, List<string> allowHostsRegexp, List<string> filterMethods, List<string> excludeAgentsRegexp)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (allowEmpty != null) queryParams.Add("allow.empty", ApiClient.ParameterToString(allowEmpty)); // query parameter
 if (allowHosts != null) queryParams.Add("allow.hosts", ApiClient.ParameterToString(allowHosts)); // query parameter
 if (allowHostsRegexp != null) queryParams.Add("allow.hosts.regexp", ApiClient.ParameterToString(allowHostsRegexp)); // query parameter
 if (filterMethods != null) queryParams.Add("filter.methods", ApiClient.ParameterToString(filterMethods)); // query parameter
 if (excludeAgentsRegexp != null) queryParams.Add("exclude.agents.regexp", ApiClient.ParameterToString(excludeAgentsRegexp)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSecurityImplReferrerFilter: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSecurityImplReferrerFilter: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingSecurityImplReferrerFilterInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingSecurityImplReferrerFilterInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="userMapping"></param> 
        /// <param name="userDefault"></param> 
        /// <param name="userEnableDefaultMapping"></param> 
        /// <param name="requireValidation"></param> 
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo</returns>            
        public OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> userMapping, string userDefault, bool? userEnableDefaultMapping, bool? requireValidation)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (userMapping != null) queryParams.Add("user.mapping", ApiClient.ParameterToString(userMapping)); // query parameter
 if (userDefault != null) queryParams.Add("user.default", ApiClient.ParameterToString(userDefault)); // query parameter
 if (userEnableDefaultMapping != null) queryParams.Add("user.enable.default.mapping", ApiClient.ParameterToString(userEnableDefaultMapping)); // query parameter
 if (requireValidation != null) queryParams.Add("require.validation", ApiClient.ParameterToString(requireValidation)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServiceusermappingImplServiceUserMapperImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServiceusermappingImplServiceUserMapperImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="serviceRanking"></param> 
        /// <param name="userMapping"></param> 
        /// <returns>OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo</returns>            
        public OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, int? serviceRanking, List<string> userMapping)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (serviceRanking != null) queryParams.Add("service.ranking", ApiClient.ParameterToString(serviceRanking)); // query parameter
 if (userMapping != null) queryParams.Add("user.mapping", ApiClient.ParameterToString(userMapping)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="aliases"></param> 
        /// <param name="index"></param> 
        /// <param name="indexFiles"></param> 
        /// <param name="enableHtml"></param> 
        /// <param name="enableJson"></param> 
        /// <param name="enableTxt"></param> 
        /// <param name="enableXml"></param> 
        /// <param name="jsonMaximumresults"></param> 
        /// <param name="ecmaSuport"></param> 
        /// <returns>OrgApacheSlingServletsGetDefaultGetServletInfo</returns>            
        public OrgApacheSlingServletsGetDefaultGetServletInfo OrgApacheSlingServletsGetDefaultGetServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> aliases, bool? index, List<string> indexFiles, bool? enableHtml, bool? enableJson, bool? enableTxt, bool? enableXml, int? jsonMaximumresults, bool? ecmaSuport)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (aliases != null) queryParams.Add("aliases", ApiClient.ParameterToString(aliases)); // query parameter
 if (index != null) queryParams.Add("index", ApiClient.ParameterToString(index)); // query parameter
 if (indexFiles != null) queryParams.Add("index.files", ApiClient.ParameterToString(indexFiles)); // query parameter
 if (enableHtml != null) queryParams.Add("enable.html", ApiClient.ParameterToString(enableHtml)); // query parameter
 if (enableJson != null) queryParams.Add("enable.json", ApiClient.ParameterToString(enableJson)); // query parameter
 if (enableTxt != null) queryParams.Add("enable.txt", ApiClient.ParameterToString(enableTxt)); // query parameter
 if (enableXml != null) queryParams.Add("enable.xml", ApiClient.ParameterToString(enableXml)); // query parameter
 if (jsonMaximumresults != null) queryParams.Add("json.maximumresults", ApiClient.ParameterToString(jsonMaximumresults)); // query parameter
 if (ecmaSuport != null) queryParams.Add("ecmaSuport", ApiClient.ParameterToString(ecmaSuport)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsGetDefaultGetServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsGetDefaultGetServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServletsGetDefaultGetServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServletsGetDefaultGetServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingServletSelectors"></param> 
        /// <param name="ecmaSuport"></param> 
        /// <returns>OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo</returns>            
        public OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo OrgApacheSlingServletsGetImplVersionVersionInfoServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> slingServletSelectors, bool? ecmaSuport)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingServletSelectors != null) queryParams.Add("sling.servlet.selectors", ApiClient.ParameterToString(slingServletSelectors)); // query parameter
 if (ecmaSuport != null) queryParams.Add("ecmaSuport", ApiClient.ParameterToString(ecmaSuport)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsGetImplVersionVersionInfoServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsGetImplVersionVersionInfoServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="schedulerExpression"></param> 
        /// <param name="schedulerConcurrent"></param> 
        /// <param name="chunkCleanupAge"></param> 
        /// <returns>OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo</returns>            
        public OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo OrgApacheSlingServletsPostImplHelperChunkCleanUpTask (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string schedulerExpression, bool? schedulerConcurrent, int? chunkCleanupAge)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (schedulerExpression != null) queryParams.Add("scheduler.expression", ApiClient.ParameterToString(schedulerExpression)); // query parameter
 if (schedulerConcurrent != null) queryParams.Add("scheduler.concurrent", ApiClient.ParameterToString(schedulerConcurrent)); // query parameter
 if (chunkCleanupAge != null) queryParams.Add("chunk.cleanup.age", ApiClient.ParameterToString(chunkCleanupAge)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsPostImplHelperChunkCleanUpTask: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsPostImplHelperChunkCleanUpTask: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="servletPostDateFormats"></param> 
        /// <param name="servletPostNodeNameHints"></param> 
        /// <param name="servletPostNodeNameMaxLength"></param> 
        /// <param name="servletPostCheckinNewVersionableNodes"></param> 
        /// <param name="servletPostAutoCheckout"></param> 
        /// <param name="servletPostAutoCheckin"></param> 
        /// <param name="servletPostIgnorePattern"></param> 
        /// <returns>OrgApacheSlingServletsPostImplSlingPostServletInfo</returns>            
        public OrgApacheSlingServletsPostImplSlingPostServletInfo OrgApacheSlingServletsPostImplSlingPostServlet (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> servletPostDateFormats, List<string> servletPostNodeNameHints, int? servletPostNodeNameMaxLength, bool? servletPostCheckinNewVersionableNodes, bool? servletPostAutoCheckout, bool? servletPostAutoCheckin, string servletPostIgnorePattern)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (servletPostDateFormats != null) queryParams.Add("servlet.post.dateFormats", ApiClient.ParameterToString(servletPostDateFormats)); // query parameter
 if (servletPostNodeNameHints != null) queryParams.Add("servlet.post.nodeNameHints", ApiClient.ParameterToString(servletPostNodeNameHints)); // query parameter
 if (servletPostNodeNameMaxLength != null) queryParams.Add("servlet.post.nodeNameMaxLength", ApiClient.ParameterToString(servletPostNodeNameMaxLength)); // query parameter
 if (servletPostCheckinNewVersionableNodes != null) queryParams.Add("servlet.post.checkinNewVersionableNodes", ApiClient.ParameterToString(servletPostCheckinNewVersionableNodes)); // query parameter
 if (servletPostAutoCheckout != null) queryParams.Add("servlet.post.autoCheckout", ApiClient.ParameterToString(servletPostAutoCheckout)); // query parameter
 if (servletPostAutoCheckin != null) queryParams.Add("servlet.post.autoCheckin", ApiClient.ParameterToString(servletPostAutoCheckin)); // query parameter
 if (servletPostIgnorePattern != null) queryParams.Add("servlet.post.ignorePattern", ApiClient.ParameterToString(servletPostIgnorePattern)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsPostImplSlingPostServlet: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsPostImplSlingPostServlet: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServletsPostImplSlingPostServletInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServletsPostImplSlingPostServletInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="servletresolverServletRoot"></param> 
        /// <param name="servletresolverCacheSize"></param> 
        /// <param name="servletresolverPaths"></param> 
        /// <param name="servletresolverDefaultExtensions"></param> 
        /// <returns>OrgApacheSlingServletsResolverSlingServletResolverInfo</returns>            
        public OrgApacheSlingServletsResolverSlingServletResolverInfo OrgApacheSlingServletsResolverSlingServletResolver (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string servletresolverServletRoot, int? servletresolverCacheSize, List<string> servletresolverPaths, List<string> servletresolverDefaultExtensions)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (servletresolverServletRoot != null) queryParams.Add("servletresolver.servletRoot", ApiClient.ParameterToString(servletresolverServletRoot)); // query parameter
 if (servletresolverCacheSize != null) queryParams.Add("servletresolver.cacheSize", ApiClient.ParameterToString(servletresolverCacheSize)); // query parameter
 if (servletresolverPaths != null) queryParams.Add("servletresolver.paths", ApiClient.ParameterToString(servletresolverPaths)); // query parameter
 if (servletresolverDefaultExtensions != null) queryParams.Add("servletresolver.defaultExtensions", ApiClient.ParameterToString(servletresolverDefaultExtensions)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsResolverSlingServletResolver: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingServletsResolverSlingServletResolver: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingServletsResolverSlingServletResolverInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingServletsResolverSlingServletResolverInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="slingName"></param> 
        /// <param name="slingDescription"></param> 
        /// <returns>OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo</returns>            
        public OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo OrgApacheSlingSettingsImplSlingSettingsServiceImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string slingName, string slingDescription)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (slingName != null) queryParams.Add("sling.name", ApiClient.ParameterToString(slingName)); // query parameter
 if (slingDescription != null) queryParams.Add("sling.description", ApiClient.ParameterToString(slingDescription)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSettingsImplSlingSettingsServiceImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingSettingsImplSlingSettingsServiceImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="activeByDefault"></param> 
        /// <param name="defaultMessage"></param> 
        /// <returns>OrgApacheSlingStartupfilterImplStartupFilterImplInfo</returns>            
        public OrgApacheSlingStartupfilterImplStartupFilterImplInfo OrgApacheSlingStartupfilterImplStartupFilterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, bool? activeByDefault, string defaultMessage)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (activeByDefault != null) queryParams.Add("active.by.default", ApiClient.ParameterToString(activeByDefault)); // query parameter
 if (defaultMessage != null) queryParams.Add("default.message", ApiClient.ParameterToString(defaultMessage)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingStartupfilterImplStartupFilterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingStartupfilterImplStartupFilterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingStartupfilterImplStartupFilterImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingStartupfilterImplStartupFilterImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="tenantRoot"></param> 
        /// <param name="tenantPathMatcher"></param> 
        /// <returns>OrgApacheSlingTenantInternalTenantProviderImplInfo</returns>            
        public OrgApacheSlingTenantInternalTenantProviderImplInfo OrgApacheSlingTenantInternalTenantProviderImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string tenantRoot, List<string> tenantPathMatcher)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (tenantRoot != null) queryParams.Add("tenant.root", ApiClient.ParameterToString(tenantRoot)); // query parameter
 if (tenantPathMatcher != null) queryParams.Add("tenant.path.matcher", ApiClient.ParameterToString(tenantPathMatcher)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingTenantInternalTenantProviderImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingTenantInternalTenantProviderImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingTenantInternalTenantProviderImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingTenantInternalTenantProviderImplInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="tracerSets"></param> 
        /// <param name="enabled"></param> 
        /// <param name="servletEnabled"></param> 
        /// <param name="recordingCacheSizeInMB"></param> 
        /// <param name="recordingCacheDurationInSecs"></param> 
        /// <param name="recordingCompressionEnabled"></param> 
        /// <param name="gzipResponse"></param> 
        /// <returns>OrgApacheSlingTracerInternalLogTracerInfo</returns>            
        public OrgApacheSlingTracerInternalLogTracerInfo OrgApacheSlingTracerInternalLogTracer (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, List<string> tracerSets, bool? enabled, bool? servletEnabled, int? recordingCacheSizeInMB, int? recordingCacheDurationInSecs, bool? recordingCompressionEnabled, bool? gzipResponse)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (tracerSets != null) queryParams.Add("tracerSets", ApiClient.ParameterToString(tracerSets)); // query parameter
 if (enabled != null) queryParams.Add("enabled", ApiClient.ParameterToString(enabled)); // query parameter
 if (servletEnabled != null) queryParams.Add("servletEnabled", ApiClient.ParameterToString(servletEnabled)); // query parameter
 if (recordingCacheSizeInMB != null) queryParams.Add("recordingCacheSizeInMB", ApiClient.ParameterToString(recordingCacheSizeInMB)); // query parameter
 if (recordingCacheDurationInSecs != null) queryParams.Add("recordingCacheDurationInSecs", ApiClient.ParameterToString(recordingCacheDurationInSecs)); // query parameter
 if (recordingCompressionEnabled != null) queryParams.Add("recordingCompressionEnabled", ApiClient.ParameterToString(recordingCompressionEnabled)); // query parameter
 if (gzipResponse != null) queryParams.Add("gzipResponse", ApiClient.ParameterToString(gzipResponse)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingTracerInternalLogTracer: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingTracerInternalLogTracer: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingTracerInternalLogTracerInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingTracerInternalLogTracerInfo), response.Headers);
        }
    
        /// <summary>
        ///  
        /// </summary>
        /// <param name="post"></param> 
        /// <param name="apply"></param> 
        /// <param name="delete"></param> 
        /// <param name="action"></param> 
        /// <param name="location"></param> 
        /// <param name="propertylist"></param> 
        /// <param name="policyPath"></param> 
        /// <returns>OrgApacheSlingXssImplXSSFilterImplInfo</returns>            
        public OrgApacheSlingXssImplXSSFilterImplInfo OrgApacheSlingXssImplXSSFilterImpl (bool? post, bool? apply, bool? delete, string action, string location, List<string> propertylist, string policyPath)
        {
            
    
            var path = "/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl";
            path = path.Replace("{format}", "json");
                
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>();
            var formParams = new Dictionary<String, String>();
            var fileParams = new Dictionary<String, FileParameter>();
            String postBody = null;
    
             if (post != null) queryParams.Add("post", ApiClient.ParameterToString(post)); // query parameter
 if (apply != null) queryParams.Add("apply", ApiClient.ParameterToString(apply)); // query parameter
 if (delete != null) queryParams.Add("delete", ApiClient.ParameterToString(delete)); // query parameter
 if (action != null) queryParams.Add("action", ApiClient.ParameterToString(action)); // query parameter
 if (location != null) queryParams.Add("$location", ApiClient.ParameterToString(location)); // query parameter
 if (propertylist != null) queryParams.Add("propertylist", ApiClient.ParameterToString(propertylist)); // query parameter
 if (policyPath != null) queryParams.Add("policyPath", ApiClient.ParameterToString(policyPath)); // query parameter
                                        
            // authentication setting, if any
            String[] authSettings = new String[] { "aemAuth" };
    
            // make the HTTP request
            IRestResponse response = (IRestResponse) ApiClient.CallApi(path, Method.POST, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
    
            if (((int)response.StatusCode) >= 400)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingXssImplXSSFilterImpl: " + response.Content, response.Content);
            else if (((int)response.StatusCode) == 0)
                throw new ApiException ((int)response.StatusCode, "Error calling OrgApacheSlingXssImplXSSFilterImpl: " + response.ErrorMessage, response.ErrorMessage);
    
            return (OrgApacheSlingXssImplXSSFilterImplInfo) ApiClient.Deserialize(response.Content, typeof(OrgApacheSlingXssImplXSSFilterImplInfo), response.Headers);
        }
    
    }
}
