<?php
/**
 * ComDayCqWcmCoreImplVersionManagerImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqWcmCoreImplVersionManagerImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqWcmCoreImplVersionManagerImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqWcmCoreImplVersionManagerImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'versionmanager_create_version_on_activation' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'versionmanager_purging_enabled' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'versionmanager_purge_paths' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'versionmanager_iv_paths' => '\OpenAPI\Client\Model\ConfigNodePropertyArray',
        'versionmanager_max_age_days' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'versionmanager_max_number_versions' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'versionmanager_min_number_versions' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'versionmanager_create_version_on_activation' => null,
        'versionmanager_purging_enabled' => null,
        'versionmanager_purge_paths' => null,
        'versionmanager_iv_paths' => null,
        'versionmanager_max_age_days' => null,
        'versionmanager_max_number_versions' => null,
        'versionmanager_min_number_versions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'versionmanager_create_version_on_activation' => 'versionmanager.createVersionOnActivation',
        'versionmanager_purging_enabled' => 'versionmanager.purgingEnabled',
        'versionmanager_purge_paths' => 'versionmanager.purgePaths',
        'versionmanager_iv_paths' => 'versionmanager.ivPaths',
        'versionmanager_max_age_days' => 'versionmanager.maxAgeDays',
        'versionmanager_max_number_versions' => 'versionmanager.maxNumberVersions',
        'versionmanager_min_number_versions' => 'versionmanager.minNumberVersions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'versionmanager_create_version_on_activation' => 'setVersionmanagerCreateVersionOnActivation',
        'versionmanager_purging_enabled' => 'setVersionmanagerPurgingEnabled',
        'versionmanager_purge_paths' => 'setVersionmanagerPurgePaths',
        'versionmanager_iv_paths' => 'setVersionmanagerIvPaths',
        'versionmanager_max_age_days' => 'setVersionmanagerMaxAgeDays',
        'versionmanager_max_number_versions' => 'setVersionmanagerMaxNumberVersions',
        'versionmanager_min_number_versions' => 'setVersionmanagerMinNumberVersions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'versionmanager_create_version_on_activation' => 'getVersionmanagerCreateVersionOnActivation',
        'versionmanager_purging_enabled' => 'getVersionmanagerPurgingEnabled',
        'versionmanager_purge_paths' => 'getVersionmanagerPurgePaths',
        'versionmanager_iv_paths' => 'getVersionmanagerIvPaths',
        'versionmanager_max_age_days' => 'getVersionmanagerMaxAgeDays',
        'versionmanager_max_number_versions' => 'getVersionmanagerMaxNumberVersions',
        'versionmanager_min_number_versions' => 'getVersionmanagerMinNumberVersions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['versionmanager_create_version_on_activation'] = isset($data['versionmanager_create_version_on_activation']) ? $data['versionmanager_create_version_on_activation'] : null;
        $this->container['versionmanager_purging_enabled'] = isset($data['versionmanager_purging_enabled']) ? $data['versionmanager_purging_enabled'] : null;
        $this->container['versionmanager_purge_paths'] = isset($data['versionmanager_purge_paths']) ? $data['versionmanager_purge_paths'] : null;
        $this->container['versionmanager_iv_paths'] = isset($data['versionmanager_iv_paths']) ? $data['versionmanager_iv_paths'] : null;
        $this->container['versionmanager_max_age_days'] = isset($data['versionmanager_max_age_days']) ? $data['versionmanager_max_age_days'] : null;
        $this->container['versionmanager_max_number_versions'] = isset($data['versionmanager_max_number_versions']) ? $data['versionmanager_max_number_versions'] : null;
        $this->container['versionmanager_min_number_versions'] = isset($data['versionmanager_min_number_versions']) ? $data['versionmanager_min_number_versions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets versionmanager_create_version_on_activation
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getVersionmanagerCreateVersionOnActivation()
    {
        return $this->container['versionmanager_create_version_on_activation'];
    }

    /**
     * Sets versionmanager_create_version_on_activation
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $versionmanager_create_version_on_activation versionmanager_create_version_on_activation
     *
     * @return $this
     */
    public function setVersionmanagerCreateVersionOnActivation($versionmanager_create_version_on_activation)
    {
        $this->container['versionmanager_create_version_on_activation'] = $versionmanager_create_version_on_activation;

        return $this;
    }

    /**
     * Gets versionmanager_purging_enabled
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getVersionmanagerPurgingEnabled()
    {
        return $this->container['versionmanager_purging_enabled'];
    }

    /**
     * Sets versionmanager_purging_enabled
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $versionmanager_purging_enabled versionmanager_purging_enabled
     *
     * @return $this
     */
    public function setVersionmanagerPurgingEnabled($versionmanager_purging_enabled)
    {
        $this->container['versionmanager_purging_enabled'] = $versionmanager_purging_enabled;

        return $this;
    }

    /**
     * Gets versionmanager_purge_paths
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getVersionmanagerPurgePaths()
    {
        return $this->container['versionmanager_purge_paths'];
    }

    /**
     * Sets versionmanager_purge_paths
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $versionmanager_purge_paths versionmanager_purge_paths
     *
     * @return $this
     */
    public function setVersionmanagerPurgePaths($versionmanager_purge_paths)
    {
        $this->container['versionmanager_purge_paths'] = $versionmanager_purge_paths;

        return $this;
    }

    /**
     * Gets versionmanager_iv_paths
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyArray|null
     */
    public function getVersionmanagerIvPaths()
    {
        return $this->container['versionmanager_iv_paths'];
    }

    /**
     * Sets versionmanager_iv_paths
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyArray|null $versionmanager_iv_paths versionmanager_iv_paths
     *
     * @return $this
     */
    public function setVersionmanagerIvPaths($versionmanager_iv_paths)
    {
        $this->container['versionmanager_iv_paths'] = $versionmanager_iv_paths;

        return $this;
    }

    /**
     * Gets versionmanager_max_age_days
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMaxAgeDays()
    {
        return $this->container['versionmanager_max_age_days'];
    }

    /**
     * Sets versionmanager_max_age_days
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $versionmanager_max_age_days versionmanager_max_age_days
     *
     * @return $this
     */
    public function setVersionmanagerMaxAgeDays($versionmanager_max_age_days)
    {
        $this->container['versionmanager_max_age_days'] = $versionmanager_max_age_days;

        return $this;
    }

    /**
     * Gets versionmanager_max_number_versions
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMaxNumberVersions()
    {
        return $this->container['versionmanager_max_number_versions'];
    }

    /**
     * Sets versionmanager_max_number_versions
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $versionmanager_max_number_versions versionmanager_max_number_versions
     *
     * @return $this
     */
    public function setVersionmanagerMaxNumberVersions($versionmanager_max_number_versions)
    {
        $this->container['versionmanager_max_number_versions'] = $versionmanager_max_number_versions;

        return $this;
    }

    /**
     * Gets versionmanager_min_number_versions
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getVersionmanagerMinNumberVersions()
    {
        return $this->container['versionmanager_min_number_versions'];
    }

    /**
     * Sets versionmanager_min_number_versions
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $versionmanager_min_number_versions versionmanager_min_number_versions
     *
     * @return $this
     */
    public function setVersionmanagerMinNumberVersions($versionmanager_min_number_versions)
    {
        $this->container['versionmanager_min_number_versions'] = $versionmanager_min_number_versions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


