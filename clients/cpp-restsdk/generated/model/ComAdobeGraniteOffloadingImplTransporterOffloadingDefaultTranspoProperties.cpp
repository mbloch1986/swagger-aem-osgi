/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties()
{
    m_Default_transport_agent_to_worker_prefixIsSet = false;
    m_Default_transport_agent_to_master_prefixIsSet = false;
    m_Default_transport_input_packageIsSet = false;
    m_Default_transport_output_packageIsSet = false;
    m_Default_transport_replication_synchronousIsSet = false;
    m_Default_transport_contentpackageIsSet = false;
    m_Offloading_transporter_default_enabledIsSet = false;
}

ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::~ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties()
{
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Default_transport_agent_to_worker_prefixIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")] = ModelBase::toJson(m_Default_transport_agent_to_worker_prefix);
    }
    if(m_Default_transport_agent_to_master_prefixIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.agent-to-master.prefix")] = ModelBase::toJson(m_Default_transport_agent_to_master_prefix);
    }
    if(m_Default_transport_input_packageIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.input.package")] = ModelBase::toJson(m_Default_transport_input_package);
    }
    if(m_Default_transport_output_packageIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.output.package")] = ModelBase::toJson(m_Default_transport_output_package);
    }
    if(m_Default_transport_replication_synchronousIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.replication.synchronous")] = ModelBase::toJson(m_Default_transport_replication_synchronous);
    }
    if(m_Default_transport_contentpackageIsSet)
    {
        val[utility::conversions::to_string_t("default.transport.contentpackage")] = ModelBase::toJson(m_Default_transport_contentpackage);
    }
    if(m_Offloading_transporter_default_enabledIsSet)
    {
        val[utility::conversions::to_string_t("offloading.transporter.default.enabled")] = ModelBase::toJson(m_Offloading_transporter_default_enabled);
    }

    return val;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")]);
            setDefaultTransportAgentToWorkerPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.transport.agent-to-master.prefix")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.agent-to-master.prefix")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.agent-to-master.prefix")]);
            setDefaultTransportAgentToMasterPrefix( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.transport.input.package")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.input.package")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.input.package")]);
            setDefaultTransportInputPackage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.transport.output.package")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.output.package")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.output.package")]);
            setDefaultTransportOutputPackage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.transport.replication.synchronous")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.replication.synchronous")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.replication.synchronous")]);
            setDefaultTransportReplicationSynchronous( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.transport.contentpackage")))
    {
        if(!val[utility::conversions::to_string_t("default.transport.contentpackage")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("default.transport.contentpackage")]);
            setDefaultTransportContentpackage( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("offloading.transporter.default.enabled")))
    {
        if(!val[utility::conversions::to_string_t("offloading.transporter.default.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("offloading.transporter.default.enabled")]);
            setOffloadingTransporterDefaultEnabled( newItem );
        }
    }
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Default_transport_agent_to_worker_prefixIsSet)
    {
        if (m_Default_transport_agent_to_worker_prefix.get())
        {
            m_Default_transport_agent_to_worker_prefix->toMultipart(multipart, utility::conversions::to_string_t("default.transport.agent-to-worker.prefix."));
        }
    }
    if(m_Default_transport_agent_to_master_prefixIsSet)
    {
        if (m_Default_transport_agent_to_master_prefix.get())
        {
            m_Default_transport_agent_to_master_prefix->toMultipart(multipart, utility::conversions::to_string_t("default.transport.agent-to-master.prefix."));
        }
    }
    if(m_Default_transport_input_packageIsSet)
    {
        if (m_Default_transport_input_package.get())
        {
            m_Default_transport_input_package->toMultipart(multipart, utility::conversions::to_string_t("default.transport.input.package."));
        }
    }
    if(m_Default_transport_output_packageIsSet)
    {
        if (m_Default_transport_output_package.get())
        {
            m_Default_transport_output_package->toMultipart(multipart, utility::conversions::to_string_t("default.transport.output.package."));
        }
    }
    if(m_Default_transport_replication_synchronousIsSet)
    {
        if (m_Default_transport_replication_synchronous.get())
        {
            m_Default_transport_replication_synchronous->toMultipart(multipart, utility::conversions::to_string_t("default.transport.replication.synchronous."));
        }
    }
    if(m_Default_transport_contentpackageIsSet)
    {
        if (m_Default_transport_contentpackage.get())
        {
            m_Default_transport_contentpackage->toMultipart(multipart, utility::conversions::to_string_t("default.transport.contentpackage."));
        }
    }
    if(m_Offloading_transporter_default_enabledIsSet)
    {
        if (m_Offloading_transporter_default_enabled.get())
        {
            m_Offloading_transporter_default_enabled->toMultipart(multipart, utility::conversions::to_string_t("offloading.transporter.default.enabled."));
        }
    }
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.agent-to-worker.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.agent-to-worker.prefix."));
            setDefaultTransportAgentToWorkerPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.agent-to-master.prefix")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.agent-to-master.prefix")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.agent-to-master.prefix."));
            setDefaultTransportAgentToMasterPrefix( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.input.package")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.input.package")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.input.package."));
            setDefaultTransportInputPackage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.output.package")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.output.package")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.output.package."));
            setDefaultTransportOutputPackage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.replication.synchronous")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.replication.synchronous")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.replication.synchronous."));
            setDefaultTransportReplicationSynchronous( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.transport.contentpackage")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.transport.contentpackage")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.transport.contentpackage."));
            setDefaultTransportContentpackage( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("offloading.transporter.default.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("offloading.transporter.default.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("offloading.transporter.default.enabled."));
            setOffloadingTransporterDefaultEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToWorkerPrefix() const
{
    return m_Default_transport_agent_to_worker_prefix;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToWorkerPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_transport_agent_to_worker_prefix = value;
    m_Default_transport_agent_to_worker_prefixIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportAgentToWorkerPrefixIsSet() const
{
    return m_Default_transport_agent_to_worker_prefixIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_agent_to_worker_prefix()
{
    m_Default_transport_agent_to_worker_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportAgentToMasterPrefix() const
{
    return m_Default_transport_agent_to_master_prefix;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportAgentToMasterPrefix(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_transport_agent_to_master_prefix = value;
    m_Default_transport_agent_to_master_prefixIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportAgentToMasterPrefixIsSet() const
{
    return m_Default_transport_agent_to_master_prefixIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_agent_to_master_prefix()
{
    m_Default_transport_agent_to_master_prefixIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportInputPackage() const
{
    return m_Default_transport_input_package;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportInputPackage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_transport_input_package = value;
    m_Default_transport_input_packageIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportInputPackageIsSet() const
{
    return m_Default_transport_input_packageIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_input_package()
{
    m_Default_transport_input_packageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportOutputPackage() const
{
    return m_Default_transport_output_package;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportOutputPackage(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_transport_output_package = value;
    m_Default_transport_output_packageIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportOutputPackageIsSet() const
{
    return m_Default_transport_output_packageIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_output_package()
{
    m_Default_transport_output_packageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportReplicationSynchronous() const
{
    return m_Default_transport_replication_synchronous;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportReplicationSynchronous(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Default_transport_replication_synchronous = value;
    m_Default_transport_replication_synchronousIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportReplicationSynchronousIsSet() const
{
    return m_Default_transport_replication_synchronousIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_replication_synchronous()
{
    m_Default_transport_replication_synchronousIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getDefaultTransportContentpackage() const
{
    return m_Default_transport_contentpackage;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setDefaultTransportContentpackage(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Default_transport_contentpackage = value;
    m_Default_transport_contentpackageIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::defaultTransportContentpackageIsSet() const
{
    return m_Default_transport_contentpackageIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetDefault_transport_contentpackage()
{
    m_Default_transport_contentpackageIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::getOffloadingTransporterDefaultEnabled() const
{
    return m_Offloading_transporter_default_enabled;
}


void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::setOffloadingTransporterDefaultEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Offloading_transporter_default_enabled = value;
    m_Offloading_transporter_default_enabledIsSet = true;
}
bool ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::offloadingTransporterDefaultEnabledIsSet() const
{
    return m_Offloading_transporter_default_enabledIsSet;
}

void ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoProperties::unsetOffloading_transporter_default_enabled()
{
    m_Offloading_transporter_default_enabledIsSet = false;
}

}
}
}
}

