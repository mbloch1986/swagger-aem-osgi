/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqAuthImplLoginSelectorHandlerProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqAuthImplLoginSelectorHandlerProperties::ComDayCqAuthImplLoginSelectorHandlerProperties()
{
    m_PathIsSet = false;
    m_Service_rankingIsSet = false;
    m_Auth_loginselector_mappingsIsSet = false;
    m_Auth_loginselector_changepw_mappingsIsSet = false;
    m_Auth_loginselector_defaultloginpageIsSet = false;
    m_Auth_loginselector_defaultchangepwpageIsSet = false;
    m_Auth_loginselector_handleIsSet = false;
    m_Auth_loginselector_handle_all_extensionsIsSet = false;
    
}

ComDayCqAuthImplLoginSelectorHandlerProperties::~ComDayCqAuthImplLoginSelectorHandlerProperties()
{
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqAuthImplLoginSelectorHandlerProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_PathIsSet)
    {
        val["path"] = ModelBase::toJson(m_Path);
    }
    if(m_Service_rankingIsSet)
    {
        val["service.ranking"] = ModelBase::toJson(m_Service_ranking);
    }
    if(m_Auth_loginselector_mappingsIsSet)
    {
        val["auth.loginselector.mappings"] = ModelBase::toJson(m_Auth_loginselector_mappings);
    }
    if(m_Auth_loginselector_changepw_mappingsIsSet)
    {
        val["auth.loginselector.changepw.mappings"] = ModelBase::toJson(m_Auth_loginselector_changepw_mappings);
    }
    if(m_Auth_loginselector_defaultloginpageIsSet)
    {
        val["auth.loginselector.defaultloginpage"] = ModelBase::toJson(m_Auth_loginselector_defaultloginpage);
    }
    if(m_Auth_loginselector_defaultchangepwpageIsSet)
    {
        val["auth.loginselector.defaultchangepwpage"] = ModelBase::toJson(m_Auth_loginselector_defaultchangepwpage);
    }
    if(m_Auth_loginselector_handleIsSet)
    {
        val["auth.loginselector.handle"] = ModelBase::toJson(m_Auth_loginselector_handle);
    }
    if(m_Auth_loginselector_handle_all_extensionsIsSet)
    {
        val["auth.loginselector.handle.all.extensions"] = ModelBase::toJson(m_Auth_loginselector_handle_all_extensions);
    }
    

    return val;
}

void ComDayCqAuthImplLoginSelectorHandlerProperties::fromJson(nlohmann::json& val)
{
    if(val.find("path") != val.end())
    {
        if(!val["path"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["path"]);
            setPath( newItem );
        }
        
    }
    if(val.find("service.ranking") != val.end())
    {
        if(!val["service.ranking"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["service.ranking"]);
            setServiceRanking( newItem );
        }
        
    }
    if(val.find("auth.loginselector.mappings") != val.end())
    {
        if(!val["auth.loginselector.mappings"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.loginselector.mappings"]);
            setAuthLoginselectorMappings( newItem );
        }
        
    }
    if(val.find("auth.loginselector.changepw.mappings") != val.end())
    {
        if(!val["auth.loginselector.changepw.mappings"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.loginselector.changepw.mappings"]);
            setAuthLoginselectorChangepwMappings( newItem );
        }
        
    }
    if(val.find("auth.loginselector.defaultloginpage") != val.end())
    {
        if(!val["auth.loginselector.defaultloginpage"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.loginselector.defaultloginpage"]);
            setAuthLoginselectorDefaultloginpage( newItem );
        }
        
    }
    if(val.find("auth.loginselector.defaultchangepwpage") != val.end())
    {
        if(!val["auth.loginselector.defaultchangepwpage"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["auth.loginselector.defaultchangepwpage"]);
            setAuthLoginselectorDefaultchangepwpage( newItem );
        }
        
    }
    if(val.find("auth.loginselector.handle") != val.end())
    {
        if(!val["auth.loginselector.handle"].is_null())
        {
            ConfigNodePropertyArray newItem;
            newItem.fromJson(val["auth.loginselector.handle"]);
            setAuthLoginselectorHandle( newItem );
        }
        
    }
    if(val.find("auth.loginselector.handle.all.extensions") != val.end())
    {
        if(!val["auth.loginselector.handle.all.extensions"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["auth.loginselector.handle.all.extensions"]);
            setAuthLoginselectorHandleAllExtensions( newItem );
        }
        
    }
    
}


ConfigNodePropertyString ComDayCqAuthImplLoginSelectorHandlerProperties::getPath() const
{
    return m_Path;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setPath(ConfigNodePropertyString const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::pathIsSet() const
{
    return m_PathIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetPath()
{
    m_PathIsSet = false;
}
ConfigNodePropertyInteger ComDayCqAuthImplLoginSelectorHandlerProperties::getServiceRanking() const
{
    return m_Service_ranking;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setServiceRanking(ConfigNodePropertyInteger const& value)
{
    m_Service_ranking = value;
    m_Service_rankingIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::serviceRankingIsSet() const
{
    return m_Service_rankingIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetService_ranking()
{
    m_Service_rankingIsSet = false;
}
ConfigNodePropertyArray ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorMappings() const
{
    return m_Auth_loginselector_mappings;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorMappings(ConfigNodePropertyArray const& value)
{
    m_Auth_loginselector_mappings = value;
    m_Auth_loginselector_mappingsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorMappingsIsSet() const
{
    return m_Auth_loginselector_mappingsIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_mappings()
{
    m_Auth_loginselector_mappingsIsSet = false;
}
ConfigNodePropertyArray ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorChangepwMappings() const
{
    return m_Auth_loginselector_changepw_mappings;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorChangepwMappings(ConfigNodePropertyArray const& value)
{
    m_Auth_loginselector_changepw_mappings = value;
    m_Auth_loginselector_changepw_mappingsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorChangepwMappingsIsSet() const
{
    return m_Auth_loginselector_changepw_mappingsIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_changepw_mappings()
{
    m_Auth_loginselector_changepw_mappingsIsSet = false;
}
ConfigNodePropertyString ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultloginpage() const
{
    return m_Auth_loginselector_defaultloginpage;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultloginpage(ConfigNodePropertyString const& value)
{
    m_Auth_loginselector_defaultloginpage = value;
    m_Auth_loginselector_defaultloginpageIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorDefaultloginpageIsSet() const
{
    return m_Auth_loginselector_defaultloginpageIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_defaultloginpage()
{
    m_Auth_loginselector_defaultloginpageIsSet = false;
}
ConfigNodePropertyString ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorDefaultchangepwpage() const
{
    return m_Auth_loginselector_defaultchangepwpage;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorDefaultchangepwpage(ConfigNodePropertyString const& value)
{
    m_Auth_loginselector_defaultchangepwpage = value;
    m_Auth_loginselector_defaultchangepwpageIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorDefaultchangepwpageIsSet() const
{
    return m_Auth_loginselector_defaultchangepwpageIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_defaultchangepwpage()
{
    m_Auth_loginselector_defaultchangepwpageIsSet = false;
}
ConfigNodePropertyArray ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandle() const
{
    return m_Auth_loginselector_handle;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandle(ConfigNodePropertyArray const& value)
{
    m_Auth_loginselector_handle = value;
    m_Auth_loginselector_handleIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorHandleIsSet() const
{
    return m_Auth_loginselector_handleIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_handle()
{
    m_Auth_loginselector_handleIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqAuthImplLoginSelectorHandlerProperties::getAuthLoginselectorHandleAllExtensions() const
{
    return m_Auth_loginselector_handle_all_extensions;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::setAuthLoginselectorHandleAllExtensions(ConfigNodePropertyBoolean const& value)
{
    m_Auth_loginselector_handle_all_extensions = value;
    m_Auth_loginselector_handle_all_extensionsIsSet = true;
}
bool ComDayCqAuthImplLoginSelectorHandlerProperties::authLoginselectorHandleAllExtensionsIsSet() const
{
    return m_Auth_loginselector_handle_all_extensionsIsSet;
}
void ComDayCqAuthImplLoginSelectorHandlerProperties::unsetAuth_loginselector_handle_all_extensions()
{
    m_Auth_loginselector_handle_all_extensionsIsSet = false;
}

}
}
}
}

