/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthProviderProperties::OAIComAdobeGraniteAuthOauthProviderProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthProviderProperties::OAIComAdobeGraniteAuthOauthProviderProperties() {
    this->init();
}

OAIComAdobeGraniteAuthOauthProviderProperties::~OAIComAdobeGraniteAuthOauthProviderProperties() {
    
}

void
OAIComAdobeGraniteAuthOauthProviderProperties::init() {
    m_oauth_config_id_isSet = false;
    m_oauth_client_id_isSet = false;
    m_oauth_client_secret_isSet = false;
    m_oauth_scope_isSet = false;
    m_oauth_config_provider_id_isSet = false;
    m_oauth_create_users_isSet = false;
    m_oauth_userid_property_isSet = false;
    m_force_strict_username_matching_isSet = false;
    m_oauth_encode_userids_isSet = false;
    m_oauth_hash_userids_isSet = false;
    m_oauth_call_back_url_isSet = false;
    m_oauth_access_token_persist_isSet = false;
    m_oauth_access_token_persist_cookie_isSet = false;
    m_oauth_csrf_state_protection_isSet = false;
    m_oauth_redirect_request_params_isSet = false;
    m_oauth_config_siblings_allow_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthOauthProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(oauth_config_id, json[QString("oauth.config.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_client_id, json[QString("oauth.client.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_client_secret, json[QString("oauth.client.secret")]);
    
    ::OpenAPI::fromJsonValue(oauth_scope, json[QString("oauth.scope")]);
    
    ::OpenAPI::fromJsonValue(oauth_config_provider_id, json[QString("oauth.config.provider.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_create_users, json[QString("oauth.create.users")]);
    
    ::OpenAPI::fromJsonValue(oauth_userid_property, json[QString("oauth.userid.property")]);
    
    ::OpenAPI::fromJsonValue(force_strict_username_matching, json[QString("force.strict.username.matching")]);
    
    ::OpenAPI::fromJsonValue(oauth_encode_userids, json[QString("oauth.encode.userids")]);
    
    ::OpenAPI::fromJsonValue(oauth_hash_userids, json[QString("oauth.hash.userids")]);
    
    ::OpenAPI::fromJsonValue(oauth_call_back_url, json[QString("oauth.callBackUrl")]);
    
    ::OpenAPI::fromJsonValue(oauth_access_token_persist, json[QString("oauth.access.token.persist")]);
    
    ::OpenAPI::fromJsonValue(oauth_access_token_persist_cookie, json[QString("oauth.access.token.persist.cookie")]);
    
    ::OpenAPI::fromJsonValue(oauth_csrf_state_protection, json[QString("oauth.csrf.state.protection")]);
    
    ::OpenAPI::fromJsonValue(oauth_redirect_request_params, json[QString("oauth.redirect.request.params")]);
    
    ::OpenAPI::fromJsonValue(oauth_config_siblings_allow, json[QString("oauth.config.siblings.allow")]);
    
}

QString
OAIComAdobeGraniteAuthOauthProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(oauth_config_id.isSet()){
        obj.insert(QString("oauth.config.id"), ::OpenAPI::toJsonValue(oauth_config_id));
    }
	if(oauth_client_id.isSet()){
        obj.insert(QString("oauth.client.id"), ::OpenAPI::toJsonValue(oauth_client_id));
    }
	if(oauth_client_secret.isSet()){
        obj.insert(QString("oauth.client.secret"), ::OpenAPI::toJsonValue(oauth_client_secret));
    }
	if(oauth_scope.isSet()){
        obj.insert(QString("oauth.scope"), ::OpenAPI::toJsonValue(oauth_scope));
    }
	if(oauth_config_provider_id.isSet()){
        obj.insert(QString("oauth.config.provider.id"), ::OpenAPI::toJsonValue(oauth_config_provider_id));
    }
	if(oauth_create_users.isSet()){
        obj.insert(QString("oauth.create.users"), ::OpenAPI::toJsonValue(oauth_create_users));
    }
	if(oauth_userid_property.isSet()){
        obj.insert(QString("oauth.userid.property"), ::OpenAPI::toJsonValue(oauth_userid_property));
    }
	if(force_strict_username_matching.isSet()){
        obj.insert(QString("force.strict.username.matching"), ::OpenAPI::toJsonValue(force_strict_username_matching));
    }
	if(oauth_encode_userids.isSet()){
        obj.insert(QString("oauth.encode.userids"), ::OpenAPI::toJsonValue(oauth_encode_userids));
    }
	if(oauth_hash_userids.isSet()){
        obj.insert(QString("oauth.hash.userids"), ::OpenAPI::toJsonValue(oauth_hash_userids));
    }
	if(oauth_call_back_url.isSet()){
        obj.insert(QString("oauth.callBackUrl"), ::OpenAPI::toJsonValue(oauth_call_back_url));
    }
	if(oauth_access_token_persist.isSet()){
        obj.insert(QString("oauth.access.token.persist"), ::OpenAPI::toJsonValue(oauth_access_token_persist));
    }
	if(oauth_access_token_persist_cookie.isSet()){
        obj.insert(QString("oauth.access.token.persist.cookie"), ::OpenAPI::toJsonValue(oauth_access_token_persist_cookie));
    }
	if(oauth_csrf_state_protection.isSet()){
        obj.insert(QString("oauth.csrf.state.protection"), ::OpenAPI::toJsonValue(oauth_csrf_state_protection));
    }
	if(oauth_redirect_request_params.isSet()){
        obj.insert(QString("oauth.redirect.request.params"), ::OpenAPI::toJsonValue(oauth_redirect_request_params));
    }
	if(oauth_config_siblings_allow.isSet()){
        obj.insert(QString("oauth.config.siblings.allow"), ::OpenAPI::toJsonValue(oauth_config_siblings_allow));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthConfigId() const {
    return oauth_config_id;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthConfigId(const OAIConfigNodePropertyString &oauth_config_id) {
    this->oauth_config_id = oauth_config_id;
    this->m_oauth_config_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthClientId() const {
    return oauth_client_id;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthClientId(const OAIConfigNodePropertyString &oauth_client_id) {
    this->oauth_client_id = oauth_client_id;
    this->m_oauth_client_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthClientSecret() const {
    return oauth_client_secret;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthClientSecret(const OAIConfigNodePropertyString &oauth_client_secret) {
    this->oauth_client_secret = oauth_client_secret;
    this->m_oauth_client_secret_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthScope() const {
    return oauth_scope;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthScope(const OAIConfigNodePropertyArray &oauth_scope) {
    this->oauth_scope = oauth_scope;
    this->m_oauth_scope_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthConfigProviderId() const {
    return oauth_config_provider_id;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthConfigProviderId(const OAIConfigNodePropertyString &oauth_config_provider_id) {
    this->oauth_config_provider_id = oauth_config_provider_id;
    this->m_oauth_config_provider_id_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthCreateUsers() const {
    return oauth_create_users;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthCreateUsers(const OAIConfigNodePropertyBoolean &oauth_create_users) {
    this->oauth_create_users = oauth_create_users;
    this->m_oauth_create_users_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthUseridProperty() const {
    return oauth_userid_property;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthUseridProperty(const OAIConfigNodePropertyString &oauth_userid_property) {
    this->oauth_userid_property = oauth_userid_property;
    this->m_oauth_userid_property_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getForceStrictUsernameMatching() const {
    return force_strict_username_matching;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setForceStrictUsernameMatching(const OAIConfigNodePropertyBoolean &force_strict_username_matching) {
    this->force_strict_username_matching = force_strict_username_matching;
    this->m_force_strict_username_matching_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthEncodeUserids() const {
    return oauth_encode_userids;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthEncodeUserids(const OAIConfigNodePropertyBoolean &oauth_encode_userids) {
    this->oauth_encode_userids = oauth_encode_userids;
    this->m_oauth_encode_userids_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthHashUserids() const {
    return oauth_hash_userids;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthHashUserids(const OAIConfigNodePropertyBoolean &oauth_hash_userids) {
    this->oauth_hash_userids = oauth_hash_userids;
    this->m_oauth_hash_userids_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthCallBackUrl() const {
    return oauth_call_back_url;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthCallBackUrl(const OAIConfigNodePropertyString &oauth_call_back_url) {
    this->oauth_call_back_url = oauth_call_back_url;
    this->m_oauth_call_back_url_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersist() const {
    return oauth_access_token_persist;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersist(const OAIConfigNodePropertyBoolean &oauth_access_token_persist) {
    this->oauth_access_token_persist = oauth_access_token_persist;
    this->m_oauth_access_token_persist_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthAccessTokenPersistCookie() const {
    return oauth_access_token_persist_cookie;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthAccessTokenPersistCookie(const OAIConfigNodePropertyBoolean &oauth_access_token_persist_cookie) {
    this->oauth_access_token_persist_cookie = oauth_access_token_persist_cookie;
    this->m_oauth_access_token_persist_cookie_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthCsrfStateProtection() const {
    return oauth_csrf_state_protection;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthCsrfStateProtection(const OAIConfigNodePropertyBoolean &oauth_csrf_state_protection) {
    this->oauth_csrf_state_protection = oauth_csrf_state_protection;
    this->m_oauth_csrf_state_protection_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthRedirectRequestParams() const {
    return oauth_redirect_request_params;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthRedirectRequestParams(const OAIConfigNodePropertyBoolean &oauth_redirect_request_params) {
    this->oauth_redirect_request_params = oauth_redirect_request_params;
    this->m_oauth_redirect_request_params_isSet = true;
}

OAIConfigNodePropertyBoolean
OAIComAdobeGraniteAuthOauthProviderProperties::getOauthConfigSiblingsAllow() const {
    return oauth_config_siblings_allow;
}
void
OAIComAdobeGraniteAuthOauthProviderProperties::setOauthConfigSiblingsAllow(const OAIConfigNodePropertyBoolean &oauth_config_siblings_allow) {
    this->oauth_config_siblings_allow = oauth_config_siblings_allow;
    this->m_oauth_config_siblings_allow_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(oauth_config_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_client_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_client_secret.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_scope.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_config_provider_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_create_users.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_userid_property.isSet()){ isObjectUpdated = true; break;}
    
        if(force_strict_username_matching.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_encode_userids.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_hash_userids.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_call_back_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_access_token_persist.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_access_token_persist_cookie.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_csrf_state_protection.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_redirect_request_params.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_config_siblings_allow.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

