/**
* Adobe Experience Manager OSGI config (AEM) API
* Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
*
* OpenAPI spec version: 1.0.0-pre.0
* Contact: opensource@shinesolutions.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties()
{
    m_CreatePreviewEnabledIsSet = false;
    m_UpdatePreviewEnabledIsSet = false;
    m_QueueSizeIsSet = false;
    m_FolderPreviewRenditionRegexIsSet = false;
    
}

ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::~ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties()
{
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_CreatePreviewEnabledIsSet)
    {
        val["createPreviewEnabled"] = ModelBase::toJson(m_CreatePreviewEnabled);
    }
    if(m_UpdatePreviewEnabledIsSet)
    {
        val["updatePreviewEnabled"] = ModelBase::toJson(m_UpdatePreviewEnabled);
    }
    if(m_QueueSizeIsSet)
    {
        val["queueSize"] = ModelBase::toJson(m_QueueSize);
    }
    if(m_FolderPreviewRenditionRegexIsSet)
    {
        val["folderPreviewRenditionRegex"] = ModelBase::toJson(m_FolderPreviewRenditionRegex);
    }
    

    return val;
}

void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::fromJson(nlohmann::json& val)
{
    if(val.find("createPreviewEnabled") != val.end())
    {
        if(!val["createPreviewEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["createPreviewEnabled"]);
            setCreatePreviewEnabled( newItem );
        }
        
    }
    if(val.find("updatePreviewEnabled") != val.end())
    {
        if(!val["updatePreviewEnabled"].is_null())
        {
            ConfigNodePropertyBoolean newItem;
            newItem.fromJson(val["updatePreviewEnabled"]);
            setUpdatePreviewEnabled( newItem );
        }
        
    }
    if(val.find("queueSize") != val.end())
    {
        if(!val["queueSize"].is_null())
        {
            ConfigNodePropertyInteger newItem;
            newItem.fromJson(val["queueSize"]);
            setQueueSize( newItem );
        }
        
    }
    if(val.find("folderPreviewRenditionRegex") != val.end())
    {
        if(!val["folderPreviewRenditionRegex"].is_null())
        {
            ConfigNodePropertyString newItem;
            newItem.fromJson(val["folderPreviewRenditionRegex"]);
            setFolderPreviewRenditionRegex( newItem );
        }
        
    }
    
}


ConfigNodePropertyBoolean ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getCreatePreviewEnabled() const
{
    return m_CreatePreviewEnabled;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setCreatePreviewEnabled(ConfigNodePropertyBoolean const& value)
{
    m_CreatePreviewEnabled = value;
    m_CreatePreviewEnabledIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::createPreviewEnabledIsSet() const
{
    return m_CreatePreviewEnabledIsSet;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetCreatePreviewEnabled()
{
    m_CreatePreviewEnabledIsSet = false;
}
ConfigNodePropertyBoolean ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getUpdatePreviewEnabled() const
{
    return m_UpdatePreviewEnabled;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setUpdatePreviewEnabled(ConfigNodePropertyBoolean const& value)
{
    m_UpdatePreviewEnabled = value;
    m_UpdatePreviewEnabledIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::updatePreviewEnabledIsSet() const
{
    return m_UpdatePreviewEnabledIsSet;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetUpdatePreviewEnabled()
{
    m_UpdatePreviewEnabledIsSet = false;
}
ConfigNodePropertyInteger ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getQueueSize() const
{
    return m_QueueSize;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setQueueSize(ConfigNodePropertyInteger const& value)
{
    m_QueueSize = value;
    m_QueueSizeIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::queueSizeIsSet() const
{
    return m_QueueSizeIsSet;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetQueueSize()
{
    m_QueueSizeIsSet = false;
}
ConfigNodePropertyString ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::getFolderPreviewRenditionRegex() const
{
    return m_FolderPreviewRenditionRegex;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::setFolderPreviewRenditionRegex(ConfigNodePropertyString const& value)
{
    m_FolderPreviewRenditionRegex = value;
    m_FolderPreviewRenditionRegexIsSet = true;
}
bool ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::folderPreviewRenditionRegexIsSet() const
{
    return m_FolderPreviewRenditionRegexIsSet;
}
void ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplProperties::unsetFolderPreviewRenditionRegex()
{
    m_FolderPreviewRenditionRegexIsSet = false;
}

}
}
}
}

