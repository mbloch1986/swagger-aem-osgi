/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCoreWorkflowConfigProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::ComAdobeGraniteWorkflowCoreWorkflowConfigProperties()
{
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = false;
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = false;
    m_Cq_workflow_config_allow_lockingIsSet = false;
}

ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::~ComAdobeGraniteWorkflowCoreWorkflowConfigProperties()
{
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Cq_workflow_config_workflow_packages_root_pathIsSet)
    {
        val[utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")] = ModelBase::toJson(m_Cq_workflow_config_workflow_packages_root_path);
    }
    if(m_Cq_workflow_config_workflow_process_legacy_modeIsSet)
    {
        val[utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")] = ModelBase::toJson(m_Cq_workflow_config_workflow_process_legacy_mode);
    }
    if(m_Cq_workflow_config_allow_lockingIsSet)
    {
        val[utility::conversions::to_string_t("cq.workflow.config.allow.locking")] = ModelBase::toJson(m_Cq_workflow_config_allow_locking);
    }

    return val;
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")))
    {
        if(!val[utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")]);
            setCqWorkflowConfigWorkflowPackagesRootPath( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")))
    {
        if(!val[utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")]);
            setCqWorkflowConfigWorkflowProcessLegacyMode( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.workflow.config.allow.locking")))
    {
        if(!val[utility::conversions::to_string_t("cq.workflow.config.allow.locking")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.workflow.config.allow.locking")]);
            setCqWorkflowConfigAllowLocking( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Cq_workflow_config_workflow_packages_root_pathIsSet)
    {
        if (m_Cq_workflow_config_workflow_packages_root_path.get())
        {
            m_Cq_workflow_config_workflow_packages_root_path->toMultipart(multipart, utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path."));
        }
    }
    if(m_Cq_workflow_config_workflow_process_legacy_modeIsSet)
    {
        if (m_Cq_workflow_config_workflow_process_legacy_mode.get())
        {
            m_Cq_workflow_config_workflow_process_legacy_mode->toMultipart(multipart, utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode."));
        }
    }
    if(m_Cq_workflow_config_allow_lockingIsSet)
    {
        if (m_Cq_workflow_config_allow_locking.get())
        {
            m_Cq_workflow_config_allow_locking->toMultipart(multipart, utility::conversions::to_string_t("cq.workflow.config.allow.locking."));
        }
    }
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.workflow.config.workflow.packages.root.path."));
            setCqWorkflowConfigWorkflowPackagesRootPath( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.workflow.config.workflow.process.legacy.mode."));
            setCqWorkflowConfigWorkflowProcessLegacyMode( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.allow.locking")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.config.allow.locking")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.workflow.config.allow.locking."));
            setCqWorkflowConfigAllowLocking( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowPackagesRootPath() const
{
    return m_Cq_workflow_config_workflow_packages_root_path;
}


void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowPackagesRootPath(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_workflow_config_workflow_packages_root_path = value;
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigWorkflowPackagesRootPathIsSet() const
{
    return m_Cq_workflow_config_workflow_packages_root_pathIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_workflow_packages_root_path()
{
    m_Cq_workflow_config_workflow_packages_root_pathIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigWorkflowProcessLegacyMode() const
{
    return m_Cq_workflow_config_workflow_process_legacy_mode;
}


void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigWorkflowProcessLegacyMode(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_workflow_config_workflow_process_legacy_mode = value;
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigWorkflowProcessLegacyModeIsSet() const
{
    return m_Cq_workflow_config_workflow_process_legacy_modeIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_workflow_process_legacy_mode()
{
    m_Cq_workflow_config_workflow_process_legacy_modeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::getCqWorkflowConfigAllowLocking() const
{
    return m_Cq_workflow_config_allow_locking;
}


void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::setCqWorkflowConfigAllowLocking(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Cq_workflow_config_allow_locking = value;
    m_Cq_workflow_config_allow_lockingIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::cqWorkflowConfigAllowLockingIsSet() const
{
    return m_Cq_workflow_config_allow_lockingIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowConfigProperties::unsetCq_workflow_config_allow_locking()
{
    m_Cq_workflow_config_allow_lockingIsSet = false;
}

}
}
}
}

