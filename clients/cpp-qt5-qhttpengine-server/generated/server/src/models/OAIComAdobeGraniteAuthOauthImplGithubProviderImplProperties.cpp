/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties() {
    this->init();
}

OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::~OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties() {
    
}

void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::init() {
    m_oauth_provider_id_isSet = false;
    m_oauth_provider_github_authorization_url_isSet = false;
    m_oauth_provider_github_token_url_isSet = false;
    m_oauth_provider_github_profile_url_isSet = false;
}

void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(oauth_provider_id, json[QString("oauth.provider.id")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_github_authorization_url, json[QString("oauth.provider.github.authorization.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_github_token_url, json[QString("oauth.provider.github.token.url")]);
    
    ::OpenAPI::fromJsonValue(oauth_provider_github_profile_url, json[QString("oauth.provider.github.profile.url")]);
    
}

QString
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::asJsonObject() const {
    QJsonObject obj;
	if(oauth_provider_id.isSet()){
        obj.insert(QString("oauth.provider.id"), ::OpenAPI::toJsonValue(oauth_provider_id));
    }
	if(oauth_provider_github_authorization_url.isSet()){
        obj.insert(QString("oauth.provider.github.authorization.url"), ::OpenAPI::toJsonValue(oauth_provider_github_authorization_url));
    }
	if(oauth_provider_github_token_url.isSet()){
        obj.insert(QString("oauth.provider.github.token.url"), ::OpenAPI::toJsonValue(oauth_provider_github_token_url));
    }
	if(oauth_provider_github_profile_url.isSet()){
        obj.insert(QString("oauth.provider.github.profile.url"), ::OpenAPI::toJsonValue(oauth_provider_github_profile_url));
    }
    return obj;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderId() const {
    return oauth_provider_id;
}
void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderId(const OAIConfigNodePropertyString &oauth_provider_id) {
    this->oauth_provider_id = oauth_provider_id;
    this->m_oauth_provider_id_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubAuthorizationUrl() const {
    return oauth_provider_github_authorization_url;
}
void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubAuthorizationUrl(const OAIConfigNodePropertyString &oauth_provider_github_authorization_url) {
    this->oauth_provider_github_authorization_url = oauth_provider_github_authorization_url;
    this->m_oauth_provider_github_authorization_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubTokenUrl() const {
    return oauth_provider_github_token_url;
}
void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubTokenUrl(const OAIConfigNodePropertyString &oauth_provider_github_token_url) {
    this->oauth_provider_github_token_url = oauth_provider_github_token_url;
    this->m_oauth_provider_github_token_url_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::getOauthProviderGithubProfileUrl() const {
    return oauth_provider_github_profile_url;
}
void
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::setOauthProviderGithubProfileUrl(const OAIConfigNodePropertyString &oauth_provider_github_profile_url) {
    this->oauth_provider_github_profile_url = oauth_provider_github_profile_url;
    this->m_oauth_provider_github_profile_url_isSet = true;
}


bool
OAIComAdobeGraniteAuthOauthImplGithubProviderImplProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(oauth_provider_id.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_github_authorization_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_github_token_url.isSet()){ isObjectUpdated = true; break;}
    
        if(oauth_provider_github_profile_url.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

