/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties()
{
    m_Mime_allowEmptyIsSet = false;
    m_Mime_allowedIsSet = false;
}

ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::~ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties()
{
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Mime_allowEmptyIsSet)
    {
        val[utility::conversions::to_string_t("mime.allowEmpty")] = ModelBase::toJson(m_Mime_allowEmpty);
    }
    if(m_Mime_allowedIsSet)
    {
        val[utility::conversions::to_string_t("mime.allowed")] = ModelBase::toJson(m_Mime_allowed);
    }

    return val;
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("mime.allowEmpty")))
    {
        if(!val[utility::conversions::to_string_t("mime.allowEmpty")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("mime.allowEmpty")]);
            setMimeAllowEmpty( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mime.allowed")))
    {
        if(!val[utility::conversions::to_string_t("mime.allowed")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("mime.allowed")]);
            setMimeAllowed( newItem );
        }
    }
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Mime_allowEmptyIsSet)
    {
        if (m_Mime_allowEmpty.get())
        {
            m_Mime_allowEmpty->toMultipart(multipart, utility::conversions::to_string_t("mime.allowEmpty."));
        }
    }
    if(m_Mime_allowedIsSet)
    {
        if (m_Mime_allowed.get())
        {
            m_Mime_allowed->toMultipart(multipart, utility::conversions::to_string_t("mime.allowed."));
        }
    }
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mime.allowEmpty")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("mime.allowEmpty")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("mime.allowEmpty."));
            setMimeAllowEmpty( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mime.allowed")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("mime.allowed")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("mime.allowed."));
            setMimeAllowed( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowEmpty() const
{
    return m_Mime_allowEmpty;
}


void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowEmpty(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Mime_allowEmpty = value;
    m_Mime_allowEmptyIsSet = true;
}
bool ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::mimeAllowEmptyIsSet() const
{
    return m_Mime_allowEmptyIsSet;
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::unsetMime_allowEmpty()
{
    m_Mime_allowEmptyIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::getMimeAllowed() const
{
    return m_Mime_allowed;
}


void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::setMimeAllowed(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Mime_allowed = value;
    m_Mime_allowedIsSet = true;
}
bool ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::mimeAllowedIsSet() const
{
    return m_Mime_allowedIsSet;
}

void ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterProperties::unsetMime_allowed()
{
    m_Mime_allowedIsSet = false;
}

}
}
}
}

