/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
  #[serde(rename = "event.filter")]
  event_filter: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "fontmgr.system.font.dir")]
  fontmgr_system_font_dir: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "fontmgr.adobe.font.dir")]
  fontmgr_adobe_font_dir: Option<::models::ConfigNodePropertyString>,
  #[serde(rename = "fontmgr.customer.font.dir")]
  fontmgr_customer_font_dir: Option<::models::ConfigNodePropertyString>
}

impl ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
  pub fn new() -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
      event_filter: None,
      fontmgr_system_font_dir: None,
      fontmgr_adobe_font_dir: None,
      fontmgr_customer_font_dir: None
    }
  }

  pub fn set_event_filter(&mut self, event_filter: ::models::ConfigNodePropertyString) {
    self.event_filter = Some(event_filter);
  }

  pub fn with_event_filter(mut self, event_filter: ::models::ConfigNodePropertyString) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    self.event_filter = Some(event_filter);
    self
  }

  pub fn event_filter(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.event_filter.as_ref()
  }

  pub fn reset_event_filter(&mut self) {
    self.event_filter = None;
  }

  pub fn set_fontmgr_system_font_dir(&mut self, fontmgr_system_font_dir: ::models::ConfigNodePropertyArray) {
    self.fontmgr_system_font_dir = Some(fontmgr_system_font_dir);
  }

  pub fn with_fontmgr_system_font_dir(mut self, fontmgr_system_font_dir: ::models::ConfigNodePropertyArray) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    self.fontmgr_system_font_dir = Some(fontmgr_system_font_dir);
    self
  }

  pub fn fontmgr_system_font_dir(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.fontmgr_system_font_dir.as_ref()
  }

  pub fn reset_fontmgr_system_font_dir(&mut self) {
    self.fontmgr_system_font_dir = None;
  }

  pub fn set_fontmgr_adobe_font_dir(&mut self, fontmgr_adobe_font_dir: ::models::ConfigNodePropertyString) {
    self.fontmgr_adobe_font_dir = Some(fontmgr_adobe_font_dir);
  }

  pub fn with_fontmgr_adobe_font_dir(mut self, fontmgr_adobe_font_dir: ::models::ConfigNodePropertyString) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    self.fontmgr_adobe_font_dir = Some(fontmgr_adobe_font_dir);
    self
  }

  pub fn fontmgr_adobe_font_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.fontmgr_adobe_font_dir.as_ref()
  }

  pub fn reset_fontmgr_adobe_font_dir(&mut self) {
    self.fontmgr_adobe_font_dir = None;
  }

  pub fn set_fontmgr_customer_font_dir(&mut self, fontmgr_customer_font_dir: ::models::ConfigNodePropertyString) {
    self.fontmgr_customer_font_dir = Some(fontmgr_customer_font_dir);
  }

  pub fn with_fontmgr_customer_font_dir(mut self, fontmgr_customer_font_dir: ::models::ConfigNodePropertyString) -> ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplProperties {
    self.fontmgr_customer_font_dir = Some(fontmgr_customer_font_dir);
    self
  }

  pub fn fontmgr_customer_font_dir(&self) -> Option<&::models::ConfigNodePropertyString> {
    self.fontmgr_customer_font_dir.as_ref()
  }

  pub fn reset_fontmgr_customer_font_dir(&mut self) {
    self.fontmgr_customer_font_dir = None;
  }

}



