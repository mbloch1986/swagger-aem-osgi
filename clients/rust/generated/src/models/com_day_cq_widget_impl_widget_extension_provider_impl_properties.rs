/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
  #[serde(rename = "extendable.widgets")]
  extendable_widgets: Option<::models::ConfigNodePropertyArray>,
  #[serde(rename = "widgetextensionprovider.debug")]
  widgetextensionprovider_debug: Option<::models::ConfigNodePropertyBoolean>
}

impl ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
  pub fn new() -> ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
    ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
      extendable_widgets: None,
      widgetextensionprovider_debug: None
    }
  }

  pub fn set_extendable_widgets(&mut self, extendable_widgets: ::models::ConfigNodePropertyArray) {
    self.extendable_widgets = Some(extendable_widgets);
  }

  pub fn with_extendable_widgets(mut self, extendable_widgets: ::models::ConfigNodePropertyArray) -> ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
    self.extendable_widgets = Some(extendable_widgets);
    self
  }

  pub fn extendable_widgets(&self) -> Option<&::models::ConfigNodePropertyArray> {
    self.extendable_widgets.as_ref()
  }

  pub fn reset_extendable_widgets(&mut self) {
    self.extendable_widgets = None;
  }

  pub fn set_widgetextensionprovider_debug(&mut self, widgetextensionprovider_debug: ::models::ConfigNodePropertyBoolean) {
    self.widgetextensionprovider_debug = Some(widgetextensionprovider_debug);
  }

  pub fn with_widgetextensionprovider_debug(mut self, widgetextensionprovider_debug: ::models::ConfigNodePropertyBoolean) -> ComDayCqWidgetImplWidgetExtensionProviderImplProperties {
    self.widgetextensionprovider_debug = Some(widgetextensionprovider_debug);
    self
  }

  pub fn widgetextensionprovider_debug(&self) -> Option<&::models::ConfigNodePropertyBoolean> {
    self.widgetextensionprovider_debug.as_ref()
  }

  pub fn reset_widgetextensionprovider_debug(&mut self) {
    self.widgetextensionprovider_debug = None;
  }

}



