/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties()
{
    m_Granite_workflowinbox_sort_propertyNameIsSet = false;
    m_Granite_workflowinbox_sort_orderIsSet = false;
    m_Cq_workflow_job_retryIsSet = false;
    m_Cq_workflow_superuserIsSet = false;
    m_Granite_workflow_inboxQuerySizeIsSet = false;
    m_Granite_workflow_adminUserGroupFilterIsSet = false;
    m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet = false;
    m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet = false;
    m_Granite_workflow_injectTenantIdInJobTopicsIsSet = false;
    m_Granite_workflow_maxPurgeSaveThresholdIsSet = false;
    m_Granite_workflow_maxPurgeQueryCountIsSet = false;
}

ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::~ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties()
{
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Granite_workflowinbox_sort_propertyNameIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")] = ModelBase::toJson(m_Granite_workflowinbox_sort_propertyName);
    }
    if(m_Granite_workflowinbox_sort_orderIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflowinbox.sort.order")] = ModelBase::toJson(m_Granite_workflowinbox_sort_order);
    }
    if(m_Cq_workflow_job_retryIsSet)
    {
        val[utility::conversions::to_string_t("cq.workflow.job.retry")] = ModelBase::toJson(m_Cq_workflow_job_retry);
    }
    if(m_Cq_workflow_superuserIsSet)
    {
        val[utility::conversions::to_string_t("cq.workflow.superuser")] = ModelBase::toJson(m_Cq_workflow_superuser);
    }
    if(m_Granite_workflow_inboxQuerySizeIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.inboxQuerySize")] = ModelBase::toJson(m_Granite_workflow_inboxQuerySize);
    }
    if(m_Granite_workflow_adminUserGroupFilterIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")] = ModelBase::toJson(m_Granite_workflow_adminUserGroupFilter);
    }
    if(m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")] = ModelBase::toJson(m_Granite_workflow_enforceWorkitemAssigneePermissions);
    }
    if(m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")] = ModelBase::toJson(m_Granite_workflow_enforceWorkflowInitiatorPermissions);
    }
    if(m_Granite_workflow_injectTenantIdInJobTopicsIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")] = ModelBase::toJson(m_Granite_workflow_injectTenantIdInJobTopics);
    }
    if(m_Granite_workflow_maxPurgeSaveThresholdIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")] = ModelBase::toJson(m_Granite_workflow_maxPurgeSaveThreshold);
    }
    if(m_Granite_workflow_maxPurgeQueryCountIsSet)
    {
        val[utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")] = ModelBase::toJson(m_Granite_workflow_maxPurgeQueryCount);
    }

    return val;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")]);
            setGraniteWorkflowinboxSortPropertyName( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflowinbox.sort.order")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflowinbox.sort.order")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflowinbox.sort.order")]);
            setGraniteWorkflowinboxSortOrder( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.workflow.job.retry")))
    {
        if(!val[utility::conversions::to_string_t("cq.workflow.job.retry")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.workflow.job.retry")]);
            setCqWorkflowJobRetry( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cq.workflow.superuser")))
    {
        if(!val[utility::conversions::to_string_t("cq.workflow.superuser")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromJson(val[utility::conversions::to_string_t("cq.workflow.superuser")]);
            setCqWorkflowSuperuser( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.inboxQuerySize")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.inboxQuerySize")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.inboxQuerySize")]);
            setGraniteWorkflowInboxQuerySize( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")]);
            setGraniteWorkflowAdminUserGroupFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")]);
            setGraniteWorkflowEnforceWorkitemAssigneePermissions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")]);
            setGraniteWorkflowEnforceWorkflowInitiatorPermissions( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")]);
            setGraniteWorkflowInjectTenantIdInJobTopics( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")]);
            setGraniteWorkflowMaxPurgeSaveThreshold( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")))
    {
        if(!val[utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromJson(val[utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")]);
            setGraniteWorkflowMaxPurgeQueryCount( newItem );
        }
    }
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Granite_workflowinbox_sort_propertyNameIsSet)
    {
        if (m_Granite_workflowinbox_sort_propertyName.get())
        {
            m_Granite_workflowinbox_sort_propertyName->toMultipart(multipart, utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName."));
        }
    }
    if(m_Granite_workflowinbox_sort_orderIsSet)
    {
        if (m_Granite_workflowinbox_sort_order.get())
        {
            m_Granite_workflowinbox_sort_order->toMultipart(multipart, utility::conversions::to_string_t("granite.workflowinbox.sort.order."));
        }
    }
    if(m_Cq_workflow_job_retryIsSet)
    {
        if (m_Cq_workflow_job_retry.get())
        {
            m_Cq_workflow_job_retry->toMultipart(multipart, utility::conversions::to_string_t("cq.workflow.job.retry."));
        }
    }
    if(m_Cq_workflow_superuserIsSet)
    {
        if (m_Cq_workflow_superuser.get())
        {
            m_Cq_workflow_superuser->toMultipart(multipart, utility::conversions::to_string_t("cq.workflow.superuser."));
        }
    }
    if(m_Granite_workflow_inboxQuerySizeIsSet)
    {
        if (m_Granite_workflow_inboxQuerySize.get())
        {
            m_Granite_workflow_inboxQuerySize->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.inboxQuerySize."));
        }
    }
    if(m_Granite_workflow_adminUserGroupFilterIsSet)
    {
        if (m_Granite_workflow_adminUserGroupFilter.get())
        {
            m_Granite_workflow_adminUserGroupFilter->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter."));
        }
    }
    if(m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet)
    {
        if (m_Granite_workflow_enforceWorkitemAssigneePermissions.get())
        {
            m_Granite_workflow_enforceWorkitemAssigneePermissions->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions."));
        }
    }
    if(m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet)
    {
        if (m_Granite_workflow_enforceWorkflowInitiatorPermissions.get())
        {
            m_Granite_workflow_enforceWorkflowInitiatorPermissions->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions."));
        }
    }
    if(m_Granite_workflow_injectTenantIdInJobTopicsIsSet)
    {
        if (m_Granite_workflow_injectTenantIdInJobTopics.get())
        {
            m_Granite_workflow_injectTenantIdInJobTopics->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics."));
        }
    }
    if(m_Granite_workflow_maxPurgeSaveThresholdIsSet)
    {
        if (m_Granite_workflow_maxPurgeSaveThreshold.get())
        {
            m_Granite_workflow_maxPurgeSaveThreshold->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold."));
        }
    }
    if(m_Granite_workflow_maxPurgeQueryCountIsSet)
    {
        if (m_Granite_workflow_maxPurgeQueryCount.get())
        {
            m_Granite_workflow_maxPurgeQueryCount->toMultipart(multipart, utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount."));
        }
    }
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflowinbox.sort.propertyName."));
            setGraniteWorkflowinboxSortPropertyName( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflowinbox.sort.order")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflowinbox.sort.order")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflowinbox.sort.order."));
            setGraniteWorkflowinboxSortOrder( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.job.retry")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.job.retry")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.workflow.job.retry."));
            setCqWorkflowJobRetry( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.superuser")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("cq.workflow.superuser")))
        {
            std::shared_ptr<ConfigNodePropertyArray> newItem(new ConfigNodePropertyArray());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("cq.workflow.superuser."));
            setCqWorkflowSuperuser( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.inboxQuerySize")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.inboxQuerySize")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.inboxQuerySize."));
            setGraniteWorkflowInboxQuerySize( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.adminUserGroupFilter."));
            setGraniteWorkflowAdminUserGroupFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.enforceWorkitemAssigneePermissions."));
            setGraniteWorkflowEnforceWorkitemAssigneePermissions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.enforceWorkflowInitiatorPermissions."));
            setGraniteWorkflowEnforceWorkflowInitiatorPermissions( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.injectTenantIdInJobTopics."));
            setGraniteWorkflowInjectTenantIdInJobTopics( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.maxPurgeSaveThreshold."));
            setGraniteWorkflowMaxPurgeSaveThreshold( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount")))
        {
            std::shared_ptr<ConfigNodePropertyInteger> newItem(new ConfigNodePropertyInteger());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("granite.workflow.maxPurgeQueryCount."));
            setGraniteWorkflowMaxPurgeQueryCount( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowinboxSortPropertyName() const
{
    return m_Granite_workflowinbox_sort_propertyName;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowinboxSortPropertyName(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Granite_workflowinbox_sort_propertyName = value;
    m_Granite_workflowinbox_sort_propertyNameIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowinboxSortPropertyNameIsSet() const
{
    return m_Granite_workflowinbox_sort_propertyNameIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflowinbox_sort_propertyName()
{
    m_Granite_workflowinbox_sort_propertyNameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowinboxSortOrder() const
{
    return m_Granite_workflowinbox_sort_order;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowinboxSortOrder(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Granite_workflowinbox_sort_order = value;
    m_Granite_workflowinbox_sort_orderIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowinboxSortOrderIsSet() const
{
    return m_Granite_workflowinbox_sort_orderIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflowinbox_sort_order()
{
    m_Granite_workflowinbox_sort_orderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getCqWorkflowJobRetry() const
{
    return m_Cq_workflow_job_retry;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setCqWorkflowJobRetry(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Cq_workflow_job_retry = value;
    m_Cq_workflow_job_retryIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::cqWorkflowJobRetryIsSet() const
{
    return m_Cq_workflow_job_retryIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetCq_workflow_job_retry()
{
    m_Cq_workflow_job_retryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyArray> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getCqWorkflowSuperuser() const
{
    return m_Cq_workflow_superuser;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setCqWorkflowSuperuser(std::shared_ptr<ConfigNodePropertyArray> value)
{
    m_Cq_workflow_superuser = value;
    m_Cq_workflow_superuserIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::cqWorkflowSuperuserIsSet() const
{
    return m_Cq_workflow_superuserIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetCq_workflow_superuser()
{
    m_Cq_workflow_superuserIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowInboxQuerySize() const
{
    return m_Granite_workflow_inboxQuerySize;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowInboxQuerySize(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_workflow_inboxQuerySize = value;
    m_Granite_workflow_inboxQuerySizeIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowInboxQuerySizeIsSet() const
{
    return m_Granite_workflow_inboxQuerySizeIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_inboxQuerySize()
{
    m_Granite_workflow_inboxQuerySizeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowAdminUserGroupFilter() const
{
    return m_Granite_workflow_adminUserGroupFilter;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowAdminUserGroupFilter(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_workflow_adminUserGroupFilter = value;
    m_Granite_workflow_adminUserGroupFilterIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowAdminUserGroupFilterIsSet() const
{
    return m_Granite_workflow_adminUserGroupFilterIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_adminUserGroupFilter()
{
    m_Granite_workflow_adminUserGroupFilterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowEnforceWorkitemAssigneePermissions() const
{
    return m_Granite_workflow_enforceWorkitemAssigneePermissions;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowEnforceWorkitemAssigneePermissions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_workflow_enforceWorkitemAssigneePermissions = value;
    m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowEnforceWorkitemAssigneePermissionsIsSet() const
{
    return m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_enforceWorkitemAssigneePermissions()
{
    m_Granite_workflow_enforceWorkitemAssigneePermissionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowEnforceWorkflowInitiatorPermissions() const
{
    return m_Granite_workflow_enforceWorkflowInitiatorPermissions;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowEnforceWorkflowInitiatorPermissions(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_workflow_enforceWorkflowInitiatorPermissions = value;
    m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowEnforceWorkflowInitiatorPermissionsIsSet() const
{
    return m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_enforceWorkflowInitiatorPermissions()
{
    m_Granite_workflow_enforceWorkflowInitiatorPermissionsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowInjectTenantIdInJobTopics() const
{
    return m_Granite_workflow_injectTenantIdInJobTopics;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowInjectTenantIdInJobTopics(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Granite_workflow_injectTenantIdInJobTopics = value;
    m_Granite_workflow_injectTenantIdInJobTopicsIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowInjectTenantIdInJobTopicsIsSet() const
{
    return m_Granite_workflow_injectTenantIdInJobTopicsIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_injectTenantIdInJobTopics()
{
    m_Granite_workflow_injectTenantIdInJobTopicsIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowMaxPurgeSaveThreshold() const
{
    return m_Granite_workflow_maxPurgeSaveThreshold;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowMaxPurgeSaveThreshold(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_workflow_maxPurgeSaveThreshold = value;
    m_Granite_workflow_maxPurgeSaveThresholdIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowMaxPurgeSaveThresholdIsSet() const
{
    return m_Granite_workflow_maxPurgeSaveThresholdIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_maxPurgeSaveThreshold()
{
    m_Granite_workflow_maxPurgeSaveThresholdIsSet = false;
}

std::shared_ptr<ConfigNodePropertyInteger> ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::getGraniteWorkflowMaxPurgeQueryCount() const
{
    return m_Granite_workflow_maxPurgeQueryCount;
}


void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::setGraniteWorkflowMaxPurgeQueryCount(std::shared_ptr<ConfigNodePropertyInteger> value)
{
    m_Granite_workflow_maxPurgeQueryCount = value;
    m_Granite_workflow_maxPurgeQueryCountIsSet = true;
}
bool ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::graniteWorkflowMaxPurgeQueryCountIsSet() const
{
    return m_Granite_workflow_maxPurgeQueryCountIsSet;
}

void ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryProperties::unsetGranite_workflow_maxPurgeQueryCount()
{
    m_Granite_workflow_maxPurgeQueryCountIsSet = false;
}

}
}
}
}

