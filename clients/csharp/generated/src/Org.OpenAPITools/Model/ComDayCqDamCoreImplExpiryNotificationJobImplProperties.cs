/* 
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComDayCqDamCoreImplExpiryNotificationJobImplProperties
    /// </summary>
    [DataContract]
    public partial class ComDayCqDamCoreImplExpiryNotificationJobImplProperties :  IEquatable<ComDayCqDamCoreImplExpiryNotificationJobImplProperties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComDayCqDamCoreImplExpiryNotificationJobImplProperties" /> class.
        /// </summary>
        /// <param name="cqDamExpiryNotificationSchedulerIstimebased">cqDamExpiryNotificationSchedulerIstimebased.</param>
        /// <param name="cqDamExpiryNotificationSchedulerTimebasedRule">cqDamExpiryNotificationSchedulerTimebasedRule.</param>
        /// <param name="cqDamExpiryNotificationSchedulerPeriodRule">cqDamExpiryNotificationSchedulerPeriodRule.</param>
        /// <param name="sendEmail">sendEmail.</param>
        /// <param name="assetExpiredLimit">assetExpiredLimit.</param>
        /// <param name="priorNotificationSeconds">priorNotificationSeconds.</param>
        /// <param name="cqDamExpiryNotificationUrlProtocol">cqDamExpiryNotificationUrlProtocol.</param>
        public ComDayCqDamCoreImplExpiryNotificationJobImplProperties(ConfigNodePropertyBoolean cqDamExpiryNotificationSchedulerIstimebased = default(ConfigNodePropertyBoolean), ConfigNodePropertyString cqDamExpiryNotificationSchedulerTimebasedRule = default(ConfigNodePropertyString), ConfigNodePropertyInteger cqDamExpiryNotificationSchedulerPeriodRule = default(ConfigNodePropertyInteger), ConfigNodePropertyBoolean sendEmail = default(ConfigNodePropertyBoolean), ConfigNodePropertyInteger assetExpiredLimit = default(ConfigNodePropertyInteger), ConfigNodePropertyInteger priorNotificationSeconds = default(ConfigNodePropertyInteger), ConfigNodePropertyString cqDamExpiryNotificationUrlProtocol = default(ConfigNodePropertyString))
        {
            this.CqDamExpiryNotificationSchedulerIstimebased = cqDamExpiryNotificationSchedulerIstimebased;
            this.CqDamExpiryNotificationSchedulerTimebasedRule = cqDamExpiryNotificationSchedulerTimebasedRule;
            this.CqDamExpiryNotificationSchedulerPeriodRule = cqDamExpiryNotificationSchedulerPeriodRule;
            this.SendEmail = sendEmail;
            this.AssetExpiredLimit = assetExpiredLimit;
            this.PriorNotificationSeconds = priorNotificationSeconds;
            this.CqDamExpiryNotificationUrlProtocol = cqDamExpiryNotificationUrlProtocol;
        }
        
        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerIstimebased
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.istimebased", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean CqDamExpiryNotificationSchedulerIstimebased { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerTimebasedRule
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.timebased.rule", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamExpiryNotificationSchedulerTimebasedRule { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationSchedulerPeriodRule
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.scheduler.period.rule", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger CqDamExpiryNotificationSchedulerPeriodRule { get; set; }

        /// <summary>
        /// Gets or Sets SendEmail
        /// </summary>
        [DataMember(Name="send_email", EmitDefaultValue=false)]
        public ConfigNodePropertyBoolean SendEmail { get; set; }

        /// <summary>
        /// Gets or Sets AssetExpiredLimit
        /// </summary>
        [DataMember(Name="asset_expired_limit", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger AssetExpiredLimit { get; set; }

        /// <summary>
        /// Gets or Sets PriorNotificationSeconds
        /// </summary>
        [DataMember(Name="prior_notification_seconds", EmitDefaultValue=false)]
        public ConfigNodePropertyInteger PriorNotificationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets CqDamExpiryNotificationUrlProtocol
        /// </summary>
        [DataMember(Name="cq.dam.expiry.notification.url.protocol", EmitDefaultValue=false)]
        public ConfigNodePropertyString CqDamExpiryNotificationUrlProtocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComDayCqDamCoreImplExpiryNotificationJobImplProperties {\n");
            sb.Append("  CqDamExpiryNotificationSchedulerIstimebased: ").Append(CqDamExpiryNotificationSchedulerIstimebased).Append("\n");
            sb.Append("  CqDamExpiryNotificationSchedulerTimebasedRule: ").Append(CqDamExpiryNotificationSchedulerTimebasedRule).Append("\n");
            sb.Append("  CqDamExpiryNotificationSchedulerPeriodRule: ").Append(CqDamExpiryNotificationSchedulerPeriodRule).Append("\n");
            sb.Append("  SendEmail: ").Append(SendEmail).Append("\n");
            sb.Append("  AssetExpiredLimit: ").Append(AssetExpiredLimit).Append("\n");
            sb.Append("  PriorNotificationSeconds: ").Append(PriorNotificationSeconds).Append("\n");
            sb.Append("  CqDamExpiryNotificationUrlProtocol: ").Append(CqDamExpiryNotificationUrlProtocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComDayCqDamCoreImplExpiryNotificationJobImplProperties);
        }

        /// <summary>
        /// Returns true if ComDayCqDamCoreImplExpiryNotificationJobImplProperties instances are equal
        /// </summary>
        /// <param name="input">Instance of ComDayCqDamCoreImplExpiryNotificationJobImplProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComDayCqDamCoreImplExpiryNotificationJobImplProperties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CqDamExpiryNotificationSchedulerIstimebased == input.CqDamExpiryNotificationSchedulerIstimebased ||
                    (this.CqDamExpiryNotificationSchedulerIstimebased != null &&
                    this.CqDamExpiryNotificationSchedulerIstimebased.Equals(input.CqDamExpiryNotificationSchedulerIstimebased))
                ) && 
                (
                    this.CqDamExpiryNotificationSchedulerTimebasedRule == input.CqDamExpiryNotificationSchedulerTimebasedRule ||
                    (this.CqDamExpiryNotificationSchedulerTimebasedRule != null &&
                    this.CqDamExpiryNotificationSchedulerTimebasedRule.Equals(input.CqDamExpiryNotificationSchedulerTimebasedRule))
                ) && 
                (
                    this.CqDamExpiryNotificationSchedulerPeriodRule == input.CqDamExpiryNotificationSchedulerPeriodRule ||
                    (this.CqDamExpiryNotificationSchedulerPeriodRule != null &&
                    this.CqDamExpiryNotificationSchedulerPeriodRule.Equals(input.CqDamExpiryNotificationSchedulerPeriodRule))
                ) && 
                (
                    this.SendEmail == input.SendEmail ||
                    (this.SendEmail != null &&
                    this.SendEmail.Equals(input.SendEmail))
                ) && 
                (
                    this.AssetExpiredLimit == input.AssetExpiredLimit ||
                    (this.AssetExpiredLimit != null &&
                    this.AssetExpiredLimit.Equals(input.AssetExpiredLimit))
                ) && 
                (
                    this.PriorNotificationSeconds == input.PriorNotificationSeconds ||
                    (this.PriorNotificationSeconds != null &&
                    this.PriorNotificationSeconds.Equals(input.PriorNotificationSeconds))
                ) && 
                (
                    this.CqDamExpiryNotificationUrlProtocol == input.CqDamExpiryNotificationUrlProtocol ||
                    (this.CqDamExpiryNotificationUrlProtocol != null &&
                    this.CqDamExpiryNotificationUrlProtocol.Equals(input.CqDamExpiryNotificationUrlProtocol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CqDamExpiryNotificationSchedulerIstimebased != null)
                    hashCode = hashCode * 59 + this.CqDamExpiryNotificationSchedulerIstimebased.GetHashCode();
                if (this.CqDamExpiryNotificationSchedulerTimebasedRule != null)
                    hashCode = hashCode * 59 + this.CqDamExpiryNotificationSchedulerTimebasedRule.GetHashCode();
                if (this.CqDamExpiryNotificationSchedulerPeriodRule != null)
                    hashCode = hashCode * 59 + this.CqDamExpiryNotificationSchedulerPeriodRule.GetHashCode();
                if (this.SendEmail != null)
                    hashCode = hashCode * 59 + this.SendEmail.GetHashCode();
                if (this.AssetExpiredLimit != null)
                    hashCode = hashCode * 59 + this.AssetExpiredLimit.GetHashCode();
                if (this.PriorNotificationSeconds != null)
                    hashCode = hashCode * 59 + this.PriorNotificationSeconds.GetHashCode();
                if (this.CqDamExpiryNotificationUrlProtocol != null)
                    hashCode = hashCode * 59 + this.CqDamExpiryNotificationUrlProtocol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
