<?php
/**
 * ComDayCqStatisticsImplStatisticsServiceImplProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Adobe Experience Manager OSGI config (AEM) API
 *
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ComDayCqStatisticsImplStatisticsServiceImplProperties Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ComDayCqStatisticsImplStatisticsServiceImplProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'comDayCqStatisticsImplStatisticsServiceImplProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scheduler_period' => '\OpenAPI\Client\Model\ConfigNodePropertyInteger',
        'scheduler_concurrent' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean',
        'path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'workspace' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'keywords_path' => '\OpenAPI\Client\Model\ConfigNodePropertyString',
        'async_entries' => '\OpenAPI\Client\Model\ConfigNodePropertyBoolean'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'scheduler_period' => null,
        'scheduler_concurrent' => null,
        'path' => null,
        'workspace' => null,
        'keywords_path' => null,
        'async_entries' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scheduler_period' => 'scheduler.period',
        'scheduler_concurrent' => 'scheduler.concurrent',
        'path' => 'path',
        'workspace' => 'workspace',
        'keywords_path' => 'keywordsPath',
        'async_entries' => 'asyncEntries'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scheduler_period' => 'setSchedulerPeriod',
        'scheduler_concurrent' => 'setSchedulerConcurrent',
        'path' => 'setPath',
        'workspace' => 'setWorkspace',
        'keywords_path' => 'setKeywordsPath',
        'async_entries' => 'setAsyncEntries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scheduler_period' => 'getSchedulerPeriod',
        'scheduler_concurrent' => 'getSchedulerConcurrent',
        'path' => 'getPath',
        'workspace' => 'getWorkspace',
        'keywords_path' => 'getKeywordsPath',
        'async_entries' => 'getAsyncEntries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scheduler_period'] = isset($data['scheduler_period']) ? $data['scheduler_period'] : null;
        $this->container['scheduler_concurrent'] = isset($data['scheduler_concurrent']) ? $data['scheduler_concurrent'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['workspace'] = isset($data['workspace']) ? $data['workspace'] : null;
        $this->container['keywords_path'] = isset($data['keywords_path']) ? $data['keywords_path'] : null;
        $this->container['async_entries'] = isset($data['async_entries']) ? $data['async_entries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scheduler_period
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyInteger|null
     */
    public function getSchedulerPeriod()
    {
        return $this->container['scheduler_period'];
    }

    /**
     * Sets scheduler_period
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyInteger|null $scheduler_period scheduler_period
     *
     * @return $this
     */
    public function setSchedulerPeriod($scheduler_period)
    {
        $this->container['scheduler_period'] = $scheduler_period;

        return $this;
    }

    /**
     * Gets scheduler_concurrent
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getSchedulerConcurrent()
    {
        return $this->container['scheduler_concurrent'];
    }

    /**
     * Sets scheduler_concurrent
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $scheduler_concurrent scheduler_concurrent
     *
     * @return $this
     */
    public function setSchedulerConcurrent($scheduler_concurrent)
    {
        $this->container['scheduler_concurrent'] = $scheduler_concurrent;

        return $this;
    }

    /**
     * Gets path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets workspace
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getWorkspace()
    {
        return $this->container['workspace'];
    }

    /**
     * Sets workspace
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $workspace workspace
     *
     * @return $this
     */
    public function setWorkspace($workspace)
    {
        $this->container['workspace'] = $workspace;

        return $this;
    }

    /**
     * Gets keywords_path
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyString|null
     */
    public function getKeywordsPath()
    {
        return $this->container['keywords_path'];
    }

    /**
     * Sets keywords_path
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyString|null $keywords_path keywords_path
     *
     * @return $this
     */
    public function setKeywordsPath($keywords_path)
    {
        $this->container['keywords_path'] = $keywords_path;

        return $this;
    }

    /**
     * Gets async_entries
     *
     * @return \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null
     */
    public function getAsyncEntries()
    {
        return $this->container['async_entries'];
    }

    /**
     * Sets async_entries
     *
     * @param \OpenAPI\Client\Model\ConfigNodePropertyBoolean|null $async_entries async_entries
     *
     * @return $this
     */
    public function setAsyncEntries($async_entries)
    {
        $this->container['async_entries'] = $async_entries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


