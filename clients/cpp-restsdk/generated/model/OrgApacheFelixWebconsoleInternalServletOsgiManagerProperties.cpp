/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties()
{
    m_Manager_rootIsSet = false;
    m_Http_service_filterIsSet = false;
    m_Default_renderIsSet = false;
    m_RealmIsSet = false;
    m_UsernameIsSet = false;
    m_PasswordIsSet = false;
    m_CategoryIsSet = false;
    m_LocaleIsSet = false;
    m_LoglevelIsSet = false;
    m_PluginsIsSet = false;
}

OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::~OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties()
{
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Manager_rootIsSet)
    {
        val[utility::conversions::to_string_t("manager.root")] = ModelBase::toJson(m_Manager_root);
    }
    if(m_Http_service_filterIsSet)
    {
        val[utility::conversions::to_string_t("http.service.filter")] = ModelBase::toJson(m_Http_service_filter);
    }
    if(m_Default_renderIsSet)
    {
        val[utility::conversions::to_string_t("default.render")] = ModelBase::toJson(m_Default_render);
    }
    if(m_RealmIsSet)
    {
        val[utility::conversions::to_string_t("realm")] = ModelBase::toJson(m_Realm);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t("category")] = ModelBase::toJson(m_Category);
    }
    if(m_LocaleIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_Locale);
    }
    if(m_LoglevelIsSet)
    {
        val[utility::conversions::to_string_t("loglevel")] = ModelBase::toJson(m_Loglevel);
    }
    if(m_PluginsIsSet)
    {
        val[utility::conversions::to_string_t("plugins")] = ModelBase::toJson(m_Plugins);
    }

    return val;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("manager.root")))
    {
        if(!val[utility::conversions::to_string_t("manager.root")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("manager.root")]);
            setManagerRoot( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("http.service.filter")))
    {
        if(!val[utility::conversions::to_string_t("http.service.filter")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("http.service.filter")]);
            setHttpServiceFilter( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default.render")))
    {
        if(!val[utility::conversions::to_string_t("default.render")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("default.render")]);
            setDefaultRender( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("realm")))
    {
        if(!val[utility::conversions::to_string_t("realm")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("realm")]);
            setRealm( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        if(!val[utility::conversions::to_string_t("username")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("username")]);
            setUsername( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        if(!val[utility::conversions::to_string_t("password")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("password")]);
            setPassword( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("category")))
    {
        if(!val[utility::conversions::to_string_t("category")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("category")]);
            setCategory( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        if(!val[utility::conversions::to_string_t("locale")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("locale")]);
            setLocale( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("loglevel")))
    {
        if(!val[utility::conversions::to_string_t("loglevel")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("loglevel")]);
            setLoglevel( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("plugins")))
    {
        if(!val[utility::conversions::to_string_t("plugins")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("plugins")]);
            setPlugins( newItem );
        }
    }
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Manager_rootIsSet)
    {
        if (m_Manager_root.get())
        {
            m_Manager_root->toMultipart(multipart, utility::conversions::to_string_t("manager.root."));
        }
    }
    if(m_Http_service_filterIsSet)
    {
        if (m_Http_service_filter.get())
        {
            m_Http_service_filter->toMultipart(multipart, utility::conversions::to_string_t("http.service.filter."));
        }
    }
    if(m_Default_renderIsSet)
    {
        if (m_Default_render.get())
        {
            m_Default_render->toMultipart(multipart, utility::conversions::to_string_t("default.render."));
        }
    }
    if(m_RealmIsSet)
    {
        if (m_Realm.get())
        {
            m_Realm->toMultipart(multipart, utility::conversions::to_string_t("realm."));
        }
    }
    if(m_UsernameIsSet)
    {
        if (m_Username.get())
        {
            m_Username->toMultipart(multipart, utility::conversions::to_string_t("username."));
        }
    }
    if(m_PasswordIsSet)
    {
        if (m_Password.get())
        {
            m_Password->toMultipart(multipart, utility::conversions::to_string_t("password."));
        }
    }
    if(m_CategoryIsSet)
    {
        if (m_Category.get())
        {
            m_Category->toMultipart(multipart, utility::conversions::to_string_t("category."));
        }
    }
    if(m_LocaleIsSet)
    {
        if (m_Locale.get())
        {
            m_Locale->toMultipart(multipart, utility::conversions::to_string_t("locale."));
        }
    }
    if(m_LoglevelIsSet)
    {
        if (m_Loglevel.get())
        {
            m_Loglevel->toMultipart(multipart, utility::conversions::to_string_t("loglevel."));
        }
    }
    if(m_PluginsIsSet)
    {
        if (m_Plugins.get())
        {
            m_Plugins->toMultipart(multipart, utility::conversions::to_string_t("plugins."));
        }
    }
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("manager.root")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("manager.root")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("manager.root."));
            setManagerRoot( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("http.service.filter")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("http.service.filter")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("http.service.filter."));
            setHttpServiceFilter( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default.render")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("default.render")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("default.render."));
            setDefaultRender( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("realm")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("realm")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("realm."));
            setRealm( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("username")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("username."));
            setUsername( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("password")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("password."));
            setPassword( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("category")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("category")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("category."));
            setCategory( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("locale")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("locale."));
            setLocale( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("loglevel")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("loglevel")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("loglevel."));
            setLoglevel( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("plugins")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("plugins")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("plugins."));
            setPlugins( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getManagerRoot() const
{
    return m_Manager_root;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setManagerRoot(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Manager_root = value;
    m_Manager_rootIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::managerRootIsSet() const
{
    return m_Manager_rootIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetManager_root()
{
    m_Manager_rootIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getHttpServiceFilter() const
{
    return m_Http_service_filter;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setHttpServiceFilter(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Http_service_filter = value;
    m_Http_service_filterIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::httpServiceFilterIsSet() const
{
    return m_Http_service_filterIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetHttp_service_filter()
{
    m_Http_service_filterIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getDefaultRender() const
{
    return m_Default_render;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setDefaultRender(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Default_render = value;
    m_Default_renderIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::defaultRenderIsSet() const
{
    return m_Default_renderIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetDefault_render()
{
    m_Default_renderIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getRealm() const
{
    return m_Realm;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setRealm(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Realm = value;
    m_RealmIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::realmIsSet() const
{
    return m_RealmIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetRealm()
{
    m_RealmIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getUsername() const
{
    return m_Username;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setUsername(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetUsername()
{
    m_UsernameIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPassword() const
{
    return m_Password;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPassword(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetPassword()
{
    m_PasswordIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getCategory() const
{
    return m_Category;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setCategory(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetCategory()
{
    m_CategoryIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLocale() const
{
    return m_Locale;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLocale(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Locale = value;
    m_LocaleIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::localeIsSet() const
{
    return m_LocaleIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetLocale()
{
    m_LocaleIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getLoglevel() const
{
    return m_Loglevel;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setLoglevel(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Loglevel = value;
    m_LoglevelIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::loglevelIsSet() const
{
    return m_LoglevelIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetLoglevel()
{
    m_LoglevelIsSet = false;
}

std::shared_ptr<ConfigNodePropertyDropDown> OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::getPlugins() const
{
    return m_Plugins;
}


void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::setPlugins(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Plugins = value;
    m_PluginsIsSet = true;
}
bool OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::pluginsIsSet() const
{
    return m_PluginsIsSet;
}

void OrgApacheFelixWebconsoleInternalServletOsgiManagerProperties::unsetPlugins()
{
    m_PluginsIsSet = false;
}

}
}
}
}

