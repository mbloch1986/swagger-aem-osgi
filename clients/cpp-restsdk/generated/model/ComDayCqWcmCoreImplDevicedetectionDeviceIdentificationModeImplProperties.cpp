/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties()
{
    m_Dim_default_modeIsSet = false;
    m_Dim_appcache_enabledIsSet = false;
}

ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::~ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties()
{
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::validate()
{
    // TODO: implement validation
}

web::json::value ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Dim_default_modeIsSet)
    {
        val[utility::conversions::to_string_t("dim.default.mode")] = ModelBase::toJson(m_Dim_default_mode);
    }
    if(m_Dim_appcache_enabledIsSet)
    {
        val[utility::conversions::to_string_t("dim.appcache.enabled")] = ModelBase::toJson(m_Dim_appcache_enabled);
    }

    return val;
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("dim.default.mode")))
    {
        if(!val[utility::conversions::to_string_t("dim.default.mode")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromJson(val[utility::conversions::to_string_t("dim.default.mode")]);
            setDimDefaultMode( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dim.appcache.enabled")))
    {
        if(!val[utility::conversions::to_string_t("dim.appcache.enabled")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("dim.appcache.enabled")]);
            setDimAppcacheEnabled( newItem );
        }
    }
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Dim_default_modeIsSet)
    {
        if (m_Dim_default_mode.get())
        {
            m_Dim_default_mode->toMultipart(multipart, utility::conversions::to_string_t("dim.default.mode."));
        }
    }
    if(m_Dim_appcache_enabledIsSet)
    {
        if (m_Dim_appcache_enabled.get())
        {
            m_Dim_appcache_enabled->toMultipart(multipart, utility::conversions::to_string_t("dim.appcache.enabled."));
        }
    }
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dim.default.mode")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dim.default.mode")))
        {
            std::shared_ptr<ConfigNodePropertyDropDown> newItem(new ConfigNodePropertyDropDown());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dim.default.mode."));
            setDimDefaultMode( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dim.appcache.enabled")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("dim.appcache.enabled")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("dim.appcache.enabled."));
            setDimAppcacheEnabled( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyDropDown> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::getDimDefaultMode() const
{
    return m_Dim_default_mode;
}


void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::setDimDefaultMode(std::shared_ptr<ConfigNodePropertyDropDown> value)
{
    m_Dim_default_mode = value;
    m_Dim_default_modeIsSet = true;
}
bool ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::dimDefaultModeIsSet() const
{
    return m_Dim_default_modeIsSet;
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::unsetDim_default_mode()
{
    m_Dim_default_modeIsSet = false;
}

std::shared_ptr<ConfigNodePropertyBoolean> ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::getDimAppcacheEnabled() const
{
    return m_Dim_appcache_enabled;
}


void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::setDimAppcacheEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Dim_appcache_enabled = value;
    m_Dim_appcache_enabledIsSet = true;
}
bool ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::dimAppcacheEnabledIsSet() const
{
    return m_Dim_appcache_enabledIsSet;
}

void ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplProperties::unsetDim_appcache_enabled()
{
    m_Dim_appcache_enabledIsSet = false;
}

}
}
}
}

