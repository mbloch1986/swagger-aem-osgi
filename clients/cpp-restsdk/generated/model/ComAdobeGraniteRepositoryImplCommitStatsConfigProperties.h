/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ComAdobeGraniteRepositoryImplCommitStatsConfigProperties.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_


#include "../ModelBase.h"

#include "ConfigNodePropertyBoolean.h"
#include "ConfigNodePropertyInteger.h"
#include "ConfigNodePropertyArray.h"
#include "ConfigNodePropertyString.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ComAdobeGraniteRepositoryImplCommitStatsConfigProperties
    : public ModelBase
{
public:
    ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();
    virtual ~ComAdobeGraniteRepositoryImplCommitStatsConfigProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ComAdobeGraniteRepositoryImplCommitStatsConfigProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyBoolean> getEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();
    void setEnabled(std::shared_ptr<ConfigNodePropertyBoolean> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getIntervalSeconds() const;
    bool intervalSecondsIsSet() const;
    void unsetIntervalSeconds();
    void setIntervalSeconds(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getCommitsPerIntervalThreshold() const;
    bool commitsPerIntervalThresholdIsSet() const;
    void unsetCommitsPerIntervalThreshold();
    void setCommitsPerIntervalThreshold(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxLocationLength() const;
    bool maxLocationLengthIsSet() const;
    void unsetMaxLocationLength();
    void setMaxLocationLength(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxDetailsShown() const;
    bool maxDetailsShownIsSet() const;
    void unsetMaxDetailsShown();
    void setMaxDetailsShown(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMinDetailsPercentage() const;
    bool minDetailsPercentageIsSet() const;
    void unsetMinDetailsPercentage();
    void setMinDetailsPercentage(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getThreadMatchers() const;
    bool threadMatchersIsSet() const;
    void unsetThreadMatchers();
    void setThreadMatchers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyInteger> getMaxGreedyDepth() const;
    bool maxGreedyDepthIsSet() const;
    void unsetMaxGreedyDepth();
    void setMaxGreedyDepth(std::shared_ptr<ConfigNodePropertyInteger> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyString> getGreedyStackMatchers() const;
    bool greedyStackMatchersIsSet() const;
    void unsetGreedyStackMatchers();
    void setGreedyStackMatchers(std::shared_ptr<ConfigNodePropertyString> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackFilters() const;
    bool stackFiltersIsSet() const;
    void unsetStackFilters();
    void setStackFilters(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackMatchers() const;
    bool stackMatchersIsSet() const;
    void unsetStackMatchers();
    void setStackMatchers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackCategorizers() const;
    bool stackCategorizersIsSet() const;
    void unsetStackCategorizers();
    void setStackCategorizers(std::shared_ptr<ConfigNodePropertyArray> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConfigNodePropertyArray> getStackShorteners() const;
    bool stackShortenersIsSet() const;
    void unsetStackShorteners();
    void setStackShorteners(std::shared_ptr<ConfigNodePropertyArray> value);

protected:
    std::shared_ptr<ConfigNodePropertyBoolean> m_Enabled;
    bool m_EnabledIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_IntervalSeconds;
    bool m_IntervalSecondsIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_CommitsPerIntervalThreshold;
    bool m_CommitsPerIntervalThresholdIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxLocationLength;
    bool m_MaxLocationLengthIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxDetailsShown;
    bool m_MaxDetailsShownIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MinDetailsPercentage;
    bool m_MinDetailsPercentageIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_ThreadMatchers;
    bool m_ThreadMatchersIsSet;
    std::shared_ptr<ConfigNodePropertyInteger> m_MaxGreedyDepth;
    bool m_MaxGreedyDepthIsSet;
    std::shared_ptr<ConfigNodePropertyString> m_GreedyStackMatchers;
    bool m_GreedyStackMatchersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_StackFilters;
    bool m_StackFiltersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_StackMatchers;
    bool m_StackMatchersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_StackCategorizers;
    bool m_StackCategorizersIsSet;
    std::shared_ptr<ConfigNodePropertyArray> m_StackShorteners;
    bool m_StackShortenersIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ComAdobeGraniteRepositoryImplCommitStatsConfigProperties_H_ */
