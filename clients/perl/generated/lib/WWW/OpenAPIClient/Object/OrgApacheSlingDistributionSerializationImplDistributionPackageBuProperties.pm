=begin comment

Adobe Experience Manager OSGI config (AEM) API

Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

OpenAPI spec version: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::ConfigNodePropertyArray;
use WWW::OpenAPIClient::Object::ConfigNodePropertyBoolean;
use WWW::OpenAPIClient::Object::ConfigNodePropertyDropDown;
use WWW::OpenAPIClient::Object::ConfigNodePropertyInteger;
use WWW::OpenAPIClient::Object::ConfigNodePropertyString;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Adobe Experience Manager OSGI config (AEM) API

Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

OpenAPI spec version: 1.0.0-pre.0
Contact: opensource@shinesolutions.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'OrgApacheSlingDistributionSerializationImplDistributionPackageBuProperties',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'name' => {
    	datatype => 'ConfigNodePropertyString',
    	base_name => 'name',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'type' => {
    	datatype => 'ConfigNodePropertyDropDown',
    	base_name => 'type',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'format/target' => {
    	datatype => 'ConfigNodePropertyString',
    	base_name => 'format.target',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'temp_fs_folder' => {
    	datatype => 'ConfigNodePropertyString',
    	base_name => 'tempFsFolder',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'file_threshold' => {
    	datatype => 'ConfigNodePropertyInteger',
    	base_name => 'fileThreshold',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'memory_unit' => {
    	datatype => 'ConfigNodePropertyDropDown',
    	base_name => 'memoryUnit',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'use_off_heap_memory' => {
    	datatype => 'ConfigNodePropertyBoolean',
    	base_name => 'useOffHeapMemory',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'digest_algorithm' => {
    	datatype => 'ConfigNodePropertyDropDown',
    	base_name => 'digestAlgorithm',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'monitoring_queue_size' => {
    	datatype => 'ConfigNodePropertyInteger',
    	base_name => 'monitoringQueueSize',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'cleanup_delay' => {
    	datatype => 'ConfigNodePropertyInteger',
    	base_name => 'cleanupDelay',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'package/filters' => {
    	datatype => 'ConfigNodePropertyArray',
    	base_name => 'package.filters',
    	description => '',
    	format => '',
    	read_only => '',
    		},
    'property/filters' => {
    	datatype => 'ConfigNodePropertyArray',
    	base_name => 'property.filters',
    	description => '',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->openapi_types( {
    'name' => 'ConfigNodePropertyString',
    'type' => 'ConfigNodePropertyDropDown',
    'format/target' => 'ConfigNodePropertyString',
    'temp_fs_folder' => 'ConfigNodePropertyString',
    'file_threshold' => 'ConfigNodePropertyInteger',
    'memory_unit' => 'ConfigNodePropertyDropDown',
    'use_off_heap_memory' => 'ConfigNodePropertyBoolean',
    'digest_algorithm' => 'ConfigNodePropertyDropDown',
    'monitoring_queue_size' => 'ConfigNodePropertyInteger',
    'cleanup_delay' => 'ConfigNodePropertyInteger',
    'package/filters' => 'ConfigNodePropertyArray',
    'property/filters' => 'ConfigNodePropertyArray'
} );

__PACKAGE__->attribute_map( {
    'name' => 'name',
    'type' => 'type',
    'format/target' => 'format.target',
    'temp_fs_folder' => 'tempFsFolder',
    'file_threshold' => 'fileThreshold',
    'memory_unit' => 'memoryUnit',
    'use_off_heap_memory' => 'useOffHeapMemory',
    'digest_algorithm' => 'digestAlgorithm',
    'monitoring_queue_size' => 'monitoringQueueSize',
    'cleanup_delay' => 'cleanupDelay',
    'package/filters' => 'package.filters',
    'property/filters' => 'property.filters'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
