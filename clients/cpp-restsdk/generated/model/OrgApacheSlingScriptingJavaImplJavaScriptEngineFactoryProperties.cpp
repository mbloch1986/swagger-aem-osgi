/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.2.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties()
{
    m_Java_classdebuginfoIsSet = false;
    m_Java_javaEncodingIsSet = false;
    m_Java_compilerSourceVMIsSet = false;
    m_Java_compilerTargetVMIsSet = false;
}

OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::~OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties()
{
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::validate()
{
    // TODO: implement validation
}

web::json::value OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Java_classdebuginfoIsSet)
    {
        val[utility::conversions::to_string_t("java.classdebuginfo")] = ModelBase::toJson(m_Java_classdebuginfo);
    }
    if(m_Java_javaEncodingIsSet)
    {
        val[utility::conversions::to_string_t("java.javaEncoding")] = ModelBase::toJson(m_Java_javaEncoding);
    }
    if(m_Java_compilerSourceVMIsSet)
    {
        val[utility::conversions::to_string_t("java.compilerSourceVM")] = ModelBase::toJson(m_Java_compilerSourceVM);
    }
    if(m_Java_compilerTargetVMIsSet)
    {
        val[utility::conversions::to_string_t("java.compilerTargetVM")] = ModelBase::toJson(m_Java_compilerTargetVM);
    }

    return val;
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("java.classdebuginfo")))
    {
        if(!val[utility::conversions::to_string_t("java.classdebuginfo")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromJson(val[utility::conversions::to_string_t("java.classdebuginfo")]);
            setJavaClassdebuginfo( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("java.javaEncoding")))
    {
        if(!val[utility::conversions::to_string_t("java.javaEncoding")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("java.javaEncoding")]);
            setJavaJavaEncoding( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("java.compilerSourceVM")))
    {
        if(!val[utility::conversions::to_string_t("java.compilerSourceVM")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("java.compilerSourceVM")]);
            setJavaCompilerSourceVM( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("java.compilerTargetVM")))
    {
        if(!val[utility::conversions::to_string_t("java.compilerTargetVM")].is_null())
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromJson(val[utility::conversions::to_string_t("java.compilerTargetVM")]);
            setJavaCompilerTargetVM( newItem );
        }
    }
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Java_classdebuginfoIsSet)
    {
        if (m_Java_classdebuginfo.get())
        {
            m_Java_classdebuginfo->toMultipart(multipart, utility::conversions::to_string_t("java.classdebuginfo."));
        }
    }
    if(m_Java_javaEncodingIsSet)
    {
        if (m_Java_javaEncoding.get())
        {
            m_Java_javaEncoding->toMultipart(multipart, utility::conversions::to_string_t("java.javaEncoding."));
        }
    }
    if(m_Java_compilerSourceVMIsSet)
    {
        if (m_Java_compilerSourceVM.get())
        {
            m_Java_compilerSourceVM->toMultipart(multipart, utility::conversions::to_string_t("java.compilerSourceVM."));
        }
    }
    if(m_Java_compilerTargetVMIsSet)
    {
        if (m_Java_compilerTargetVM.get())
        {
            m_Java_compilerTargetVM->toMultipart(multipart, utility::conversions::to_string_t("java.compilerTargetVM."));
        }
    }
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("java.classdebuginfo")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("java.classdebuginfo")))
        {
            std::shared_ptr<ConfigNodePropertyBoolean> newItem(new ConfigNodePropertyBoolean());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("java.classdebuginfo."));
            setJavaClassdebuginfo( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("java.javaEncoding")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("java.javaEncoding")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("java.javaEncoding."));
            setJavaJavaEncoding( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("java.compilerSourceVM")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("java.compilerSourceVM")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("java.compilerSourceVM."));
            setJavaCompilerSourceVM( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("java.compilerTargetVM")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("java.compilerTargetVM")))
        {
            std::shared_ptr<ConfigNodePropertyString> newItem(new ConfigNodePropertyString());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("java.compilerTargetVM."));
            setJavaCompilerTargetVM( newItem );
        }
    }
}

std::shared_ptr<ConfigNodePropertyBoolean> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaClassdebuginfo() const
{
    return m_Java_classdebuginfo;
}


void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaClassdebuginfo(std::shared_ptr<ConfigNodePropertyBoolean> value)
{
    m_Java_classdebuginfo = value;
    m_Java_classdebuginfoIsSet = true;
}
bool OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::javaClassdebuginfoIsSet() const
{
    return m_Java_classdebuginfoIsSet;
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::unsetJava_classdebuginfo()
{
    m_Java_classdebuginfoIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaJavaEncoding() const
{
    return m_Java_javaEncoding;
}


void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaJavaEncoding(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Java_javaEncoding = value;
    m_Java_javaEncodingIsSet = true;
}
bool OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::javaJavaEncodingIsSet() const
{
    return m_Java_javaEncodingIsSet;
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::unsetJava_javaEncoding()
{
    m_Java_javaEncodingIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaCompilerSourceVM() const
{
    return m_Java_compilerSourceVM;
}


void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaCompilerSourceVM(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Java_compilerSourceVM = value;
    m_Java_compilerSourceVMIsSet = true;
}
bool OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::javaCompilerSourceVMIsSet() const
{
    return m_Java_compilerSourceVMIsSet;
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::unsetJava_compilerSourceVM()
{
    m_Java_compilerSourceVMIsSet = false;
}

std::shared_ptr<ConfigNodePropertyString> OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::getJavaCompilerTargetVM() const
{
    return m_Java_compilerTargetVM;
}


void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::setJavaCompilerTargetVM(std::shared_ptr<ConfigNodePropertyString> value)
{
    m_Java_compilerTargetVM = value;
    m_Java_compilerTargetVMIsSet = true;
}
bool OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::javaCompilerTargetVMIsSet() const
{
    return m_Java_compilerTargetVMIsSet;
}

void OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryProperties::unsetJava_compilerTargetVM()
{
    m_Java_compilerTargetVMIsSet = false;
}

}
}
}
}

