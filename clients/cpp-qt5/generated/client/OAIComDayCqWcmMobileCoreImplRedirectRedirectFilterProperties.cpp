/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties() {
    init();
}

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::~OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties() {
    this->cleanup();
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::init() {
    redirect_enabled = new OAIConfigNodePropertyBoolean();
    m_redirect_enabled_isSet = false;
    redirect_stats_enabled = new OAIConfigNodePropertyBoolean();
    m_redirect_stats_enabled_isSet = false;
    redirect_extensions = new OAIConfigNodePropertyArray();
    m_redirect_extensions_isSet = false;
    redirect_paths = new OAIConfigNodePropertyArray();
    m_redirect_paths_isSet = false;
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::cleanup() {
    if(redirect_enabled != nullptr) { 
        delete redirect_enabled;
    }
    if(redirect_stats_enabled != nullptr) { 
        delete redirect_stats_enabled;
    }
    if(redirect_extensions != nullptr) { 
        delete redirect_extensions;
    }
    if(redirect_paths != nullptr) { 
        delete redirect_paths;
    }
}

OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties*
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&redirect_enabled, pJson["redirect.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&redirect_stats_enabled, pJson["redirect.stats.enabled"], "OAIConfigNodePropertyBoolean", "OAIConfigNodePropertyBoolean");
    
    ::OpenAPI::setValue(&redirect_extensions, pJson["redirect.extensions"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
    ::OpenAPI::setValue(&redirect_paths, pJson["redirect.paths"], "OAIConfigNodePropertyArray", "OAIConfigNodePropertyArray");
    
}

QString
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::asJsonObject() {
    QJsonObject obj;
    if((redirect_enabled != nullptr) && (redirect_enabled->isSet())){
        toJsonValue(QString("redirect.enabled"), redirect_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((redirect_stats_enabled != nullptr) && (redirect_stats_enabled->isSet())){
        toJsonValue(QString("redirect.stats.enabled"), redirect_stats_enabled, obj, QString("OAIConfigNodePropertyBoolean"));
    }
    if((redirect_extensions != nullptr) && (redirect_extensions->isSet())){
        toJsonValue(QString("redirect.extensions"), redirect_extensions, obj, QString("OAIConfigNodePropertyArray"));
    }
    if((redirect_paths != nullptr) && (redirect_paths->isSet())){
        toJsonValue(QString("redirect.paths"), redirect_paths, obj, QString("OAIConfigNodePropertyArray"));
    }

    return obj;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectEnabled() {
    return redirect_enabled;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectEnabled(OAIConfigNodePropertyBoolean* redirect_enabled) {
    this->redirect_enabled = redirect_enabled;
    this->m_redirect_enabled_isSet = true;
}

OAIConfigNodePropertyBoolean*
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectStatsEnabled() {
    return redirect_stats_enabled;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectStatsEnabled(OAIConfigNodePropertyBoolean* redirect_stats_enabled) {
    this->redirect_stats_enabled = redirect_stats_enabled;
    this->m_redirect_stats_enabled_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectExtensions() {
    return redirect_extensions;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectExtensions(OAIConfigNodePropertyArray* redirect_extensions) {
    this->redirect_extensions = redirect_extensions;
    this->m_redirect_extensions_isSet = true;
}

OAIConfigNodePropertyArray*
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::getRedirectPaths() {
    return redirect_paths;
}
void
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::setRedirectPaths(OAIConfigNodePropertyArray* redirect_paths) {
    this->redirect_paths = redirect_paths;
    this->m_redirect_paths_isSet = true;
}


bool
OAIComDayCqWcmMobileCoreImplRedirectRedirectFilterProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(redirect_enabled != nullptr && redirect_enabled->isSet()){ isObjectUpdated = true; break;}
        if(redirect_stats_enabled != nullptr && redirect_stats_enabled->isSet()){ isObjectUpdated = true; break;}
        if(redirect_extensions != nullptr && redirect_extensions->isSet()){ isObjectUpdated = true; break;}
        if(redirect_paths != nullptr && redirect_paths->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

