{-
   Adobe Experience Manager OSGI config (AEM) API

   Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API

   OpenAPI Version: 3.0.0
   Adobe Experience Manager OSGI config (AEM) API API version: 1.0.0-pre.0
   Contact: opensource@shinesolutions.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : AdobeExperienceManagerOSGIConfig(AEM).API.Configmgr
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module AdobeExperienceManagerOSGIConfig(AEM).API.Configmgr where

import AdobeExperienceManagerOSGIConfig(AEM).Core
import AdobeExperienceManagerOSGIConfig(AEM).MimeTypes
import AdobeExperienceManagerOSGIConfig(AEM).Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Configmgr

-- *** adaptiveFormAndInteractiveCommunicationWebChannelConfiguration

-- | @POST \/system\/console\/configMgr\/Adaptive Form and Interactive Communication Web Channel Configuration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
adaptiveFormAndInteractiveCommunicationWebChannelConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration MimeNoContent AdaptiveFormAndInteractiveCommunicationWebChannelConfigurationInfo accept
adaptiveFormAndInteractiveCommunicationWebChannelConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Configuration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration  
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration ShowPlaceholder where
  applyOptionalParam req (ShowPlaceholder xs) =
    req `setQuery` toQuery ("showPlaceholder", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration MaximumCacheEntries where
  applyOptionalParam req (MaximumCacheEntries xs) =
    req `setQuery` toQuery ("maximumCacheEntries", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration AfScriptingCompatversion where
  applyOptionalParam req (AfScriptingCompatversion xs) =
    req `setQuery` toQuery ("af.scripting.compatversion", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration MakeFileNameUnique where
  applyOptionalParam req (MakeFileNameUnique xs) =
    req `setQuery` toQuery ("makeFileNameUnique", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration GeneratingCompliantData where
  applyOptionalParam req (GeneratingCompliantData xs) =
    req `setQuery` toQuery ("generatingCompliantData", Just xs)

-- | @application/json@
instance Produces AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration MimeJSON
-- | @text/plain@
instance Produces AdaptiveFormAndInteractiveCommunicationWebChannelConfiguration MimePlainText


-- *** adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur

-- | @POST \/system\/console\/configMgr\/Adaptive Form and Interactive Communication Web Channel Theme Configuration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur MimeNoContent AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigurInfo accept
adaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur  _ =
  _mkRequest "POST" ["/system/console/configMgr/Adaptive Form and Interactive Communication Web Channel Theme Configuration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur  
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur FontList where
  applyOptionalParam req (FontList xs) =
    req `setQuery` toQueryColl MultiParamArray ("fontList", Just xs)

-- | @application/json@
instance Produces AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur MimeJSON
-- | @text/plain@
instance Produces AdaptiveFormAndInteractiveCommunicationWebChannelThemeConfigur MimePlainText


-- *** analyticsComponentQueryCacheService

-- | @POST \/system\/console\/configMgr\/Analytics Component Query Cache Service@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
analyticsComponentQueryCacheService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request AnalyticsComponentQueryCacheService MimeNoContent AnalyticsComponentQueryCacheServiceInfo accept
analyticsComponentQueryCacheService  _ =
  _mkRequest "POST" ["/system/console/configMgr/Analytics Component Query Cache Service"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data AnalyticsComponentQueryCacheService  
instance HasOptionalParam AnalyticsComponentQueryCacheService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam AnalyticsComponentQueryCacheService CqAnalyticsComponentQueryCacheSize where
  applyOptionalParam req (CqAnalyticsComponentQueryCacheSize xs) =
    req `setQuery` toQuery ("cq.analytics.component.query.cache.size", Just xs)

-- | @application/json@
instance Produces AnalyticsComponentQueryCacheService MimeJSON
-- | @text/plain@
instance Produces AnalyticsComponentQueryCacheService MimePlainText


-- *** apacheSlingHealthCheckResultHTMLSerializer

-- | @POST \/system\/console\/configMgr\/Apache Sling Health Check Result HTML Serializer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
apacheSlingHealthCheckResultHTMLSerializer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ApacheSlingHealthCheckResultHTMLSerializer MimeNoContent ApacheSlingHealthCheckResultHTMLSerializerInfo accept
apacheSlingHealthCheckResultHTMLSerializer  _ =
  _mkRequest "POST" ["/system/console/configMgr/Apache Sling Health Check Result HTML Serializer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ApacheSlingHealthCheckResultHTMLSerializer  
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ApacheSlingHealthCheckResultHTMLSerializer StyleString where
  applyOptionalParam req (StyleString xs) =
    req `setQuery` toQuery ("styleString", Just xs)

-- | @application/json@
instance Produces ApacheSlingHealthCheckResultHTMLSerializer MimeJSON
-- | @text/plain@
instance Produces ApacheSlingHealthCheckResultHTMLSerializer MimePlainText


-- *** comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration MimeNoContent ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfigurationInfo accept
comAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.formsndocuments.config.AEMFormsManagerConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration  
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration FormsManagerConfigIncludeOotbTemplates where
  applyOptionalParam req (FormsManagerConfigIncludeOotbTemplates xs) =
    req `setQuery` toQuery ("formsManagerConfig.includeOOTBTemplates", Just xs)
instance HasOptionalParam ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration FormsManagerConfigIncludeDeprecatedTemplates where
  applyOptionalParam req (FormsManagerConfigIncludeDeprecatedTemplates xs) =
    req `setQuery` toQuery ("formsManagerConfig.includeDeprecatedTemplates", Just xs)

-- | @application/json@
instance Produces ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemFormsndocumentsConfigAEMFormsManagerConfiguration MimePlainText


-- *** comAdobeAemTransactionCoreImplTransactionRecorder

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.transaction.core.impl.TransactionRecorder@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemTransactionCoreImplTransactionRecorder 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemTransactionCoreImplTransactionRecorder MimeNoContent ComAdobeAemTransactionCoreImplTransactionRecorderInfo accept
comAdobeAemTransactionCoreImplTransactionRecorder  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.transaction.core.impl.TransactionRecorder"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemTransactionCoreImplTransactionRecorder  
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemTransactionCoreImplTransactionRecorder IsTransactionRecordingEnabled where
  applyOptionalParam req (IsTransactionRecordingEnabled xs) =
    req `setQuery` toQuery ("isTransactionRecordingEnabled", Just xs)

-- | @application/json@
instance Produces ComAdobeAemTransactionCoreImplTransactionRecorder MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemTransactionCoreImplTransactionRecorder MimePlainText


-- *** comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC MimeNoContent ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHCInfo accept
comAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.DeprecateIndexesHC"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC  
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)

-- | @application/json@
instance Produces ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemUpgradePrechecksHcImplDeprecateIndexesHC MimePlainText


-- *** comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC MimeNoContent ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHCInfo accept
comAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.hc.impl.ReplicationAgentsDisabledHC"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC  
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)

-- | @application/json@
instance Produces ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemUpgradePrechecksHcImplReplicationAgentsDisabledHC MimePlainText


-- *** comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl MimeNoContent ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImplInfo accept
comAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.mbean.impl.PreUpgradeTasksMBeanImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl  
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl PreUpgradeMaintenanceTasks where
  applyOptionalParam req (PreUpgradeMaintenanceTasks xs) =
    req `setQuery` toQueryColl MultiParamArray ("pre-upgrade.maintenance.tasks", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl PreUpgradeHcTags where
  applyOptionalParam req (PreUpgradeHcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("pre-upgrade.hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemUpgradePrechecksMbeanImplPreUpgradeTasksMBeanImpl MimePlainText


-- *** comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl MimeNoContent ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImplInfo accept
comAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.aem.upgrade.prechecks.tasks.impl.ConsistencyCheckTaskImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl  
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl RootPath where
  applyOptionalParam req (RootPath xs) =
    req `setQuery` toQuery ("root.path", Just xs)
instance HasOptionalParam ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl FixInconsistencies where
  applyOptionalParam req (FixInconsistencies xs) =
    req `setQuery` toQuery ("fix.inconsistencies", Just xs)

-- | @application/json@
instance Produces ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeAemUpgradePrechecksTasksImplConsistencyCheckTaskImpl MimePlainText


-- *** comAdobeCqAccountApiAccountManagementService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.account.api.AccountManagementService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAccountApiAccountManagementService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAccountApiAccountManagementService MimeNoContent ComAdobeCqAccountApiAccountManagementServiceInfo accept
comAdobeCqAccountApiAccountManagementService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.account.api.AccountManagementService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAccountApiAccountManagementService  
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService CqAccountmanagerTokenValidityPeriod where
  applyOptionalParam req (CqAccountmanagerTokenValidityPeriod xs) =
    req `setQuery` toQuery ("cq.accountmanager.token.validity.period", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService CqAccountmanagerConfigRequestnewaccountMail where
  applyOptionalParam req (CqAccountmanagerConfigRequestnewaccountMail xs) =
    req `setQuery` toQuery ("cq.accountmanager.config.requestnewaccount.mail", Just xs)
instance HasOptionalParam ComAdobeCqAccountApiAccountManagementService CqAccountmanagerConfigRequestnewpwdMail where
  applyOptionalParam req (CqAccountmanagerConfigRequestnewpwdMail xs) =
    req `setQuery` toQuery ("cq.accountmanager.config.requestnewpwd.mail", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAccountApiAccountManagementService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAccountApiAccountManagementService MimePlainText


-- *** comAdobeCqAccountImplAccountManagementServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.account.impl.AccountManagementServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAccountImplAccountManagementServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAccountImplAccountManagementServlet MimeNoContent ComAdobeCqAccountImplAccountManagementServletInfo accept
comAdobeCqAccountImplAccountManagementServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.account.impl.AccountManagementServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAccountImplAccountManagementServlet  
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet CqAccountmanagerConfigInformnewaccountMail where
  applyOptionalParam req (CqAccountmanagerConfigInformnewaccountMail xs) =
    req `setQuery` toQuery ("cq.accountmanager.config.informnewaccount.mail", Just xs)
instance HasOptionalParam ComAdobeCqAccountImplAccountManagementServlet CqAccountmanagerConfigInformnewpwdMail where
  applyOptionalParam req (CqAccountmanagerConfigInformnewpwdMail xs) =
    req `setQuery` toQuery ("cq.accountmanager.config.informnewpwd.mail", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAccountImplAccountManagementServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAccountImplAccountManagementServlet MimePlainText


-- *** comAdobeCqAddressImplLocationLocationListServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.address.impl.location.LocationListServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAddressImplLocationLocationListServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAddressImplLocationLocationListServlet MimeNoContent ComAdobeCqAddressImplLocationLocationListServletInfo accept
comAdobeCqAddressImplLocationLocationListServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.address.impl.location.LocationListServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAddressImplLocationLocationListServlet  
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAddressImplLocationLocationListServlet CqAddressLocationDefaultMaxResults where
  applyOptionalParam req (CqAddressLocationDefaultMaxResults xs) =
    req `setQuery` toQuery ("cq.address.location.default.maxResults", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAddressImplLocationLocationListServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAddressImplLocationLocationListServlet MimePlainText


-- *** comAdobeCqAuditPurgeDam

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.audit.purge.Dam@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAuditPurgeDam 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAuditPurgeDam MimeNoContent ComAdobeCqAuditPurgeDamInfo accept
comAdobeCqAuditPurgeDam  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.audit.purge.Dam"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAuditPurgeDam  
instance HasOptionalParam ComAdobeCqAuditPurgeDam Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam AuditlogRuleName where
  applyOptionalParam req (AuditlogRuleName xs) =
    req `setQuery` toQuery ("auditlog.rule.name", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam AuditlogRuleContentpath where
  applyOptionalParam req (AuditlogRuleContentpath xs) =
    req `setQuery` toQuery ("auditlog.rule.contentpath", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam AuditlogRuleMinimumage where
  applyOptionalParam req (AuditlogRuleMinimumage xs) =
    req `setQuery` toQuery ("auditlog.rule.minimumage", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeDam AuditlogRuleTypes where
  applyOptionalParam req (AuditlogRuleTypes xs) =
    req `setQuery` toQuery ("auditlog.rule.types", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAuditPurgeDam MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAuditPurgeDam MimePlainText


-- *** comAdobeCqAuditPurgePages

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.audit.purge.Pages@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAuditPurgePages 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAuditPurgePages MimeNoContent ComAdobeCqAuditPurgePagesInfo accept
comAdobeCqAuditPurgePages  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.audit.purge.Pages"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAuditPurgePages  
instance HasOptionalParam ComAdobeCqAuditPurgePages Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages AuditlogRuleName where
  applyOptionalParam req (AuditlogRuleName xs) =
    req `setQuery` toQuery ("auditlog.rule.name", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages AuditlogRuleContentpath where
  applyOptionalParam req (AuditlogRuleContentpath xs) =
    req `setQuery` toQuery ("auditlog.rule.contentpath", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages AuditlogRuleMinimumage where
  applyOptionalParam req (AuditlogRuleMinimumage xs) =
    req `setQuery` toQuery ("auditlog.rule.minimumage", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgePages AuditlogRuleTypes where
  applyOptionalParam req (AuditlogRuleTypes xs) =
    req `setQuery` toQuery ("auditlog.rule.types", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAuditPurgePages MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAuditPurgePages MimePlainText


-- *** comAdobeCqAuditPurgeReplication

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.audit.purge.Replication@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqAuditPurgeReplication 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqAuditPurgeReplication MimeNoContent ComAdobeCqAuditPurgeReplicationInfo accept
comAdobeCqAuditPurgeReplication  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.audit.purge.Replication"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqAuditPurgeReplication  
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication AuditlogRuleName where
  applyOptionalParam req (AuditlogRuleName xs) =
    req `setQuery` toQuery ("auditlog.rule.name", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication AuditlogRuleContentpath where
  applyOptionalParam req (AuditlogRuleContentpath xs) =
    req `setQuery` toQuery ("auditlog.rule.contentpath", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication AuditlogRuleMinimumage where
  applyOptionalParam req (AuditlogRuleMinimumage xs) =
    req `setQuery` toQuery ("auditlog.rule.minimumage", Just xs)
instance HasOptionalParam ComAdobeCqAuditPurgeReplication AuditlogRuleTypes where
  applyOptionalParam req (AuditlogRuleTypes xs) =
    req `setQuery` toQuery ("auditlog.rule.types", Just xs)

-- | @application/json@
instance Produces ComAdobeCqAuditPurgeReplication MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqAuditPurgeReplication MimePlainText


-- *** comAdobeCqCdnRewriterImplAWSCloudFrontRewriter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCdnRewriterImplAWSCloudFrontRewriter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter MimeNoContent ComAdobeCqCdnRewriterImplAWSCloudFrontRewriterInfo accept
comAdobeCqCdnRewriterImplAWSCloudFrontRewriter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.AWSCloudFrontRewriter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter  
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter KeypairId where
  applyOptionalParam req (KeypairId xs) =
    req `setQuery` toQuery ("keypair.id", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter KeypairAlias where
  applyOptionalParam req (KeypairAlias xs) =
    req `setQuery` toQuery ("keypair.alias", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter CdnrewriterAttributes where
  applyOptionalParam req (CdnrewriterAttributes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cdnrewriter.attributes", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter CdnRewriterDistributionDomain where
  applyOptionalParam req (CdnRewriterDistributionDomain xs) =
    req `setQuery` toQuery ("cdn.rewriter.distribution.domain", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCdnRewriterImplAWSCloudFrontRewriter MimePlainText


-- *** comAdobeCqCdnRewriterImplCDNConfigServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCdnRewriterImplCDNConfigServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCdnRewriterImplCDNConfigServiceImpl MimeNoContent ComAdobeCqCdnRewriterImplCDNConfigServiceImplInfo accept
comAdobeCqCdnRewriterImplCDNConfigServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNConfigServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCdnRewriterImplCDNConfigServiceImpl  
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl CdnConfigDistributionDomain where
  applyOptionalParam req (CdnConfigDistributionDomain xs) =
    req `setQuery` toQuery ("cdn.config.distribution.domain", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl CdnConfigEnableRewriting where
  applyOptionalParam req (CdnConfigEnableRewriting xs) =
    req `setQuery` toQuery ("cdn.config.enable.rewriting", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl CdnConfigPathPrefixes where
  applyOptionalParam req (CdnConfigPathPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cdn.config.path.prefixes", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl CdnConfigCdnttl where
  applyOptionalParam req (CdnConfigCdnttl xs) =
    req `setQuery` toQuery ("cdn.config.cdnttl", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNConfigServiceImpl CdnConfigApplicationProtocol where
  applyOptionalParam req (CdnConfigApplicationProtocol xs) =
    req `setQuery` toQuery ("cdn.config.application.protocol", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCdnRewriterImplCDNConfigServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCdnRewriterImplCDNConfigServiceImpl MimePlainText


-- *** comAdobeCqCdnRewriterImplCDNRewriter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.cdn.rewriter.impl.CDNRewriter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCdnRewriterImplCDNRewriter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCdnRewriterImplCDNRewriter MimeNoContent ComAdobeCqCdnRewriterImplCDNRewriterInfo accept
comAdobeCqCdnRewriterImplCDNRewriter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.cdn.rewriter.impl.CDNRewriter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCdnRewriterImplCDNRewriter  
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter CdnrewriterAttributes where
  applyOptionalParam req (CdnrewriterAttributes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cdnrewriter.attributes", Just xs)
instance HasOptionalParam ComAdobeCqCdnRewriterImplCDNRewriter CdnRewriterDistributionDomain where
  applyOptionalParam req (CdnRewriterDistributionDomain xs) =
    req `setQuery` toQuery ("cdn.rewriter.distribution.domain", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCdnRewriterImplCDNRewriter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCdnRewriterImplCDNRewriter MimePlainText


-- *** comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle MimeNoContent ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandleInfo accept
comAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.cloudconfig.core.impl.ConfigurationReplicationEventHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle  
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle FlushAgents where
  applyOptionalParam req (FlushAgents xs) =
    req `setQuery` toQueryColl MultiParamArray ("flush.agents", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCloudconfigCoreImplConfigurationReplicationEventHandle MimePlainText


-- *** comAdobeCqCommerceImplAssetDynamicImageHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.impl.asset.DynamicImageHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommerceImplAssetDynamicImageHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommerceImplAssetDynamicImageHandler MimeNoContent ComAdobeCqCommerceImplAssetDynamicImageHandlerInfo accept
comAdobeCqCommerceImplAssetDynamicImageHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.DynamicImageHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommerceImplAssetDynamicImageHandler  
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler CqCommerceAssetHandlerActive where
  applyOptionalParam req (CqCommerceAssetHandlerActive xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.active", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetDynamicImageHandler CqCommerceAssetHandlerName where
  applyOptionalParam req (CqCommerceAssetHandlerName xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.name", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommerceImplAssetDynamicImageHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommerceImplAssetDynamicImageHandler MimePlainText


-- *** comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl MimeNoContent ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImplInfo accept
comAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.ProductAssetHandlerProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl  
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl CqCommerceAssetHandlerFallback where
  applyOptionalParam req (CqCommerceAssetHandlerFallback xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.fallback", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommerceImplAssetProductAssetHandlerProviderImpl MimePlainText


-- *** comAdobeCqCommerceImplAssetStaticImageHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.impl.asset.StaticImageHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommerceImplAssetStaticImageHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommerceImplAssetStaticImageHandler MimeNoContent ComAdobeCqCommerceImplAssetStaticImageHandlerInfo accept
comAdobeCqCommerceImplAssetStaticImageHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.StaticImageHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommerceImplAssetStaticImageHandler  
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler CqCommerceAssetHandlerActive where
  applyOptionalParam req (CqCommerceAssetHandlerActive xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.active", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetStaticImageHandler CqCommerceAssetHandlerName where
  applyOptionalParam req (CqCommerceAssetHandlerName xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.name", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommerceImplAssetStaticImageHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommerceImplAssetStaticImageHandler MimePlainText


-- *** comAdobeCqCommerceImplAssetVideoHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.impl.asset.VideoHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommerceImplAssetVideoHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommerceImplAssetVideoHandler MimeNoContent ComAdobeCqCommerceImplAssetVideoHandlerInfo accept
comAdobeCqCommerceImplAssetVideoHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.impl.asset.VideoHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommerceImplAssetVideoHandler  
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler CqCommerceAssetHandlerActive where
  applyOptionalParam req (CqCommerceAssetHandlerActive xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.active", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplAssetVideoHandler CqCommerceAssetHandlerName where
  applyOptionalParam req (CqCommerceAssetHandlerName xs) =
    req `setQuery` toQuery ("cq.commerce.asset.handler.name", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommerceImplAssetVideoHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommerceImplAssetVideoHandler MimePlainText


-- *** comAdobeCqCommerceImplPromotionPromotionManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommerceImplPromotionPromotionManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommerceImplPromotionPromotionManagerImpl MimeNoContent ComAdobeCqCommerceImplPromotionPromotionManagerImplInfo accept
comAdobeCqCommerceImplPromotionPromotionManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.impl.promotion.PromotionManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommerceImplPromotionPromotionManagerImpl  
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommerceImplPromotionPromotionManagerImpl CqCommercePromotionRoot where
  applyOptionalParam req (CqCommercePromotionRoot xs) =
    req `setQuery` toQuery ("cq.commerce.promotion.root", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommerceImplPromotionPromotionManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommerceImplPromotionPromotionManagerImpl MimePlainText


-- *** comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl MimeNoContent ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImplInfo accept
comAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.cataloggenerator.CatalogGeneratorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl  
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl CqCommerceCataloggeneratorBucketsize where
  applyOptionalParam req (CqCommerceCataloggeneratorBucketsize xs) =
    req `setQuery` toQuery ("cq.commerce.cataloggenerator.bucketsize", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl CqCommerceCataloggeneratorBucketname where
  applyOptionalParam req (CqCommerceCataloggeneratorBucketname xs) =
    req `setQuery` toQuery ("cq.commerce.cataloggenerator.bucketname", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl CqCommerceCataloggeneratorExcludedtemplateproperties where
  applyOptionalParam req (CqCommerceCataloggeneratorExcludedtemplateproperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.commerce.cataloggenerator.excludedtemplateproperties", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommercePimImplCataloggeneratorCatalogGeneratorImpl MimePlainText


-- *** comAdobeCqCommercePimImplPageEventListener

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.pim.impl.PageEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommercePimImplPageEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommercePimImplPageEventListener MimeNoContent ComAdobeCqCommercePimImplPageEventListenerInfo accept
comAdobeCqCommercePimImplPageEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.PageEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommercePimImplPageEventListener  
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplPageEventListener CqCommercePageeventlistenerEnabled where
  applyOptionalParam req (CqCommercePageeventlistenerEnabled xs) =
    req `setQuery` toQuery ("cq.commerce.pageeventlistener.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommercePimImplPageEventListener MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommercePimImplPageEventListener MimePlainText


-- *** comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl MimeNoContent ComAdobeCqCommercePimImplProductfeedProductFeedServiceImplInfo accept
comAdobeCqCommercePimImplProductfeedProductFeedServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.commerce.pim.impl.productfeed.ProductFeedServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl  
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl FeedGeneratorAlgorithm where
  applyOptionalParam req (FeedGeneratorAlgorithm xs) =
    req `setQuery` toQuery ("Feed generator algorithm", Just xs)

-- | @application/json@
instance Produces ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqCommercePimImplProductfeedProductFeedServiceImpl MimePlainText


-- *** comAdobeCqContentinsightImplReportingServicesSettingsProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqContentinsightImplReportingServicesSettingsProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqContentinsightImplReportingServicesSettingsProvider MimeNoContent ComAdobeCqContentinsightImplReportingServicesSettingsProviderInfo accept
comAdobeCqContentinsightImplReportingServicesSettingsProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.ReportingServicesSettingsProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqContentinsightImplReportingServicesSettingsProvider  
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplReportingServicesSettingsProvider ReportingservicesUrl where
  applyOptionalParam req (ReportingservicesUrl xs) =
    req `setQuery` toQuery ("reportingservices.url", Just xs)

-- | @application/json@
instance Produces ComAdobeCqContentinsightImplReportingServicesSettingsProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqContentinsightImplReportingServicesSettingsProvider MimePlainText


-- *** comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet MimeNoContent ComAdobeCqContentinsightImplServletsBrightEdgeProxyServletInfo accept
comAdobeCqContentinsightImplServletsBrightEdgeProxyServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.BrightEdgeProxyServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet  
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet BrightedgeUrl where
  applyOptionalParam req (BrightedgeUrl xs) =
    req `setQuery` toQuery ("brightedge.url", Just xs)

-- | @application/json@
instance Produces ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqContentinsightImplServletsBrightEdgeProxyServlet MimePlainText


-- *** comAdobeCqContentinsightImplServletsReportingServicesProxyServle

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqContentinsightImplServletsReportingServicesProxyServle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqContentinsightImplServletsReportingServicesProxyServle MimeNoContent ComAdobeCqContentinsightImplServletsReportingServicesProxyServleInfo accept
comAdobeCqContentinsightImplServletsReportingServicesProxyServle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.contentinsight.impl.servlets.ReportingServicesProxyServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqContentinsightImplServletsReportingServicesProxyServle  
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqContentinsightImplServletsReportingServicesProxyServle ReportingservicesProxyWhitelist where
  applyOptionalParam req (ReportingservicesProxyWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("reportingservices.proxy.whitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqContentinsightImplServletsReportingServicesProxyServle MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqContentinsightImplServletsReportingServicesProxyServle MimePlainText


-- *** comAdobeCqDamCfmImplComponentComponentConfigImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamCfmImplComponentComponentConfigImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamCfmImplComponentComponentConfigImpl MimeNoContent ComAdobeCqDamCfmImplComponentComponentConfigImplInfo accept
comAdobeCqDamCfmImplComponentComponentConfigImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.component.ComponentConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamCfmImplComponentComponentConfigImpl  
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl DamCfmComponentResourceType where
  applyOptionalParam req (DamCfmComponentResourceType xs) =
    req `setQuery` toQuery ("dam.cfm.component.resourceType", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl DamCfmComponentFileReferenceProp where
  applyOptionalParam req (DamCfmComponentFileReferenceProp xs) =
    req `setQuery` toQuery ("dam.cfm.component.fileReferenceProp", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl DamCfmComponentElementsProp where
  applyOptionalParam req (DamCfmComponentElementsProp xs) =
    req `setQuery` toQuery ("dam.cfm.component.elementsProp", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplComponentComponentConfigImpl DamCfmComponentVariationProp where
  applyOptionalParam req (DamCfmComponentVariationProp xs) =
    req `setQuery` toQuery ("dam.cfm.component.variationProp", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamCfmImplComponentComponentConfigImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamCfmImplComponentComponentConfigImpl MimePlainText


-- *** comAdobeCqDamCfmImplConfFeatureConfigImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamCfmImplConfFeatureConfigImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamCfmImplConfFeatureConfigImpl MimeNoContent ComAdobeCqDamCfmImplConfFeatureConfigImplInfo accept
comAdobeCqDamCfmImplConfFeatureConfigImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.conf.FeatureConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamCfmImplConfFeatureConfigImpl  
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl DamCfmResourceTypes where
  applyOptionalParam req (DamCfmResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("dam.cfm.resourceTypes", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplConfFeatureConfigImpl DamCfmReferenceProperties where
  applyOptionalParam req (DamCfmReferenceProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("dam.cfm.referenceProperties", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamCfmImplConfFeatureConfigImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamCfmImplConfFeatureConfigImpl MimePlainText


-- *** comAdobeCqDamCfmImplContentRewriterAssetProcessor

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamCfmImplContentRewriterAssetProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamCfmImplContentRewriterAssetProcessor MimeNoContent ComAdobeCqDamCfmImplContentRewriterAssetProcessorInfo accept
comAdobeCqDamCfmImplContentRewriterAssetProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.AssetProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamCfmImplContentRewriterAssetProcessor  
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterAssetProcessor PipelineType where
  applyOptionalParam req (PipelineType xs) =
    req `setQuery` toQuery ("pipeline.type", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamCfmImplContentRewriterAssetProcessor MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamCfmImplContentRewriterAssetProcessor MimePlainText


-- *** comAdobeCqDamCfmImplContentRewriterParRangeFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamCfmImplContentRewriterParRangeFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamCfmImplContentRewriterParRangeFilter MimeNoContent ComAdobeCqDamCfmImplContentRewriterParRangeFilterInfo accept
comAdobeCqDamCfmImplContentRewriterParRangeFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.ParRangeFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamCfmImplContentRewriterParRangeFilter  
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterParRangeFilter PipelineType where
  applyOptionalParam req (PipelineType xs) =
    req `setQuery` toQuery ("pipeline.type", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamCfmImplContentRewriterParRangeFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamCfmImplContentRewriterParRangeFilter MimePlainText


-- *** comAdobeCqDamCfmImplContentRewriterPayloadFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamCfmImplContentRewriterPayloadFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamCfmImplContentRewriterPayloadFilter MimeNoContent ComAdobeCqDamCfmImplContentRewriterPayloadFilterInfo accept
comAdobeCqDamCfmImplContentRewriterPayloadFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.cfm.impl.content.rewriter.PayloadFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamCfmImplContentRewriterPayloadFilter  
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamCfmImplContentRewriterPayloadFilter PipelineType where
  applyOptionalParam req (PipelineType xs) =
    req `setQuery` toQuery ("pipeline.type", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamCfmImplContentRewriterPayloadFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamCfmImplContentRewriterPayloadFilter MimePlainText


-- *** comAdobeCqDamDmProcessImagePTiffManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamDmProcessImagePTiffManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamDmProcessImagePTiffManagerImpl MimeNoContent ComAdobeCqDamDmProcessImagePTiffManagerImplInfo accept
comAdobeCqDamDmProcessImagePTiffManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.dm.process.image.PTiffManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamDmProcessImagePTiffManagerImpl  
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamDmProcessImagePTiffManagerImpl MaxMemory where
  applyOptionalParam req (MaxMemory xs) =
    req `setQuery` toQuery ("maxMemory", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamDmProcessImagePTiffManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamDmProcessImagePTiffManagerImpl MimePlainText


-- *** comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker MimeNoContent ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorkerInfo accept
comAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.ips.impl.replication.trigger.ReplicateOnModifyWorker"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker  
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker DmreplicateonmodifyEnabled where
  applyOptionalParam req (DmreplicateonmodifyEnabled xs) =
    req `setQuery` toQuery ("dmreplicateonmodify.enabled", Just xs)
instance HasOptionalParam ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker DmreplicateonmodifyForcesyncdeletes where
  applyOptionalParam req (DmreplicateonmodifyForcesyncdeletes xs) =
    req `setQuery` toQuery ("dmreplicateonmodify.forcesyncdeletes", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamIpsImplReplicationTriggerReplicateOnModifyWorker MimePlainText


-- *** comAdobeCqDamMacSyncHelperImplMACSyncClientImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamMacSyncHelperImplMACSyncClientImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl MimeNoContent ComAdobeCqDamMacSyncHelperImplMACSyncClientImplInfo accept
comAdobeCqDamMacSyncHelperImplMACSyncClientImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.mac.sync.helper.impl.MACSyncClientImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl  
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl ComAdobeDamMacSyncClientSoTimeout where
  applyOptionalParam req (ComAdobeDamMacSyncClientSoTimeout xs) =
    req `setQuery` toQuery ("com.adobe.dam.mac.sync.client.so.timeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamMacSyncHelperImplMACSyncClientImpl MimePlainText


-- *** comAdobeCqDamMacSyncImplDAMSyncServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamMacSyncImplDAMSyncServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamMacSyncImplDAMSyncServiceImpl MimeNoContent ComAdobeCqDamMacSyncImplDAMSyncServiceImplInfo accept
comAdobeCqDamMacSyncImplDAMSyncServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.mac.sync.impl.DAMSyncServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamMacSyncImplDAMSyncServiceImpl  
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl ComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths where
  applyOptionalParam req (ComAdobeCqDamMacSyncDamsyncserviceRegisteredPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.cq.dam.mac.sync.damsyncservice.registered_paths", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl ComAdobeCqDamMacSyncDamsyncserviceSyncRenditions where
  applyOptionalParam req (ComAdobeCqDamMacSyncDamsyncserviceSyncRenditions xs) =
    req `setQuery` toQuery ("com.adobe.cq.dam.mac.sync.damsyncservice.sync.renditions", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl ComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs where
  applyOptionalParam req (ComAdobeCqDamMacSyncDamsyncserviceReplicateThreadWaitMs xs) =
    req `setQuery` toQuery ("com.adobe.cq.dam.mac.sync.damsyncservice.replicate.thread.wait.ms", Just xs)
instance HasOptionalParam ComAdobeCqDamMacSyncImplDAMSyncServiceImpl ComAdobeCqDamMacSyncDamsyncservicePlatform where
  applyOptionalParam req (ComAdobeCqDamMacSyncDamsyncservicePlatform xs) =
    req `setQuery` toQuery ("com.adobe.cq.dam.mac.sync.damsyncservice.platform", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamMacSyncImplDAMSyncServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamMacSyncImplDAMSyncServiceImpl MimePlainText


-- *** comAdobeCqDamProcessorNuiImplNuiAssetProcessor

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamProcessorNuiImplNuiAssetProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamProcessorNuiImplNuiAssetProcessor MimeNoContent ComAdobeCqDamProcessorNuiImplNuiAssetProcessorInfo accept
comAdobeCqDamProcessorNuiImplNuiAssetProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.processor.nui.impl.NuiAssetProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamProcessorNuiImplNuiAssetProcessor  
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor NuiEnabled where
  applyOptionalParam req (NuiEnabled xs) =
    req `setQuery` toQuery ("nuiEnabled", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor NuiServiceUrl where
  applyOptionalParam req (NuiServiceUrl xs) =
    req `setQuery` toQuery ("nuiServiceUrl", Just xs)
instance HasOptionalParam ComAdobeCqDamProcessorNuiImplNuiAssetProcessor NuiApiKey where
  applyOptionalParam req (NuiApiKey xs) =
    req `setQuery` toQuery ("nuiApiKey", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamProcessorNuiImplNuiAssetProcessor MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamProcessorNuiImplNuiAssetProcessor MimePlainText


-- *** comAdobeCqDamS7imagingImplIsImageServerComponent

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamS7imagingImplIsImageServerComponent 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamS7imagingImplIsImageServerComponent MimeNoContent ComAdobeCqDamS7imagingImplIsImageServerComponentInfo accept
comAdobeCqDamS7imagingImplIsImageServerComponent  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.is.ImageServerComponent"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamS7imagingImplIsImageServerComponent  
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent TcpPort where
  applyOptionalParam req (TcpPort xs) =
    req `setQuery` toQuery ("TcpPort", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent AllowRemoteAccess where
  applyOptionalParam req (AllowRemoteAccess xs) =
    req `setQuery` toQuery ("AllowRemoteAccess", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent MaxRenderRgnPixels where
  applyOptionalParam req (MaxRenderRgnPixels xs) =
    req `setQuery` toQuery ("MaxRenderRgnPixels", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent MaxMessageSize where
  applyOptionalParam req (MaxMessageSize xs) =
    req `setQuery` toQuery ("MaxMessageSize", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent RandomAccessUrlTimeout where
  applyOptionalParam req (RandomAccessUrlTimeout xs) =
    req `setQuery` toQuery ("RandomAccessUrlTimeout", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplIsImageServerComponent WorkerThreads where
  applyOptionalParam req (WorkerThreads xs) =
    req `setQuery` toQuery ("WorkerThreads", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamS7imagingImplIsImageServerComponent MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamS7imagingImplIsImageServerComponent MimePlainText


-- *** comAdobeCqDamS7imagingImplPsPlatformServerServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamS7imagingImplPsPlatformServerServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamS7imagingImplPsPlatformServerServlet MimeNoContent ComAdobeCqDamS7imagingImplPsPlatformServerServletInfo accept
comAdobeCqDamS7imagingImplPsPlatformServerServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.s7imaging.impl.ps.PlatformServerServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamS7imagingImplPsPlatformServerServlet  
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet CacheEnable where
  applyOptionalParam req (CacheEnable xs) =
    req `setQuery` toQuery ("cache.enable", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet CacheRootPaths where
  applyOptionalParam req (CacheRootPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("cache.rootPaths", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet CacheMaxSize where
  applyOptionalParam req (CacheMaxSize xs) =
    req `setQuery` toQuery ("cache.maxSize", Just xs)
instance HasOptionalParam ComAdobeCqDamS7imagingImplPsPlatformServerServlet CacheMaxEntries where
  applyOptionalParam req (CacheMaxEntries xs) =
    req `setQuery` toQuery ("cache.maxEntries", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamS7imagingImplPsPlatformServerServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamS7imagingImplPsPlatformServerServlet MimePlainText


-- *** comAdobeCqDamWebdavImplIoAssetIOHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamWebdavImplIoAssetIOHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamWebdavImplIoAssetIOHandler MimeNoContent ComAdobeCqDamWebdavImplIoAssetIOHandlerInfo accept
comAdobeCqDamWebdavImplIoAssetIOHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.AssetIOHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamWebdavImplIoAssetIOHandler  
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler PathPrefix where
  applyOptionalParam req (PathPrefix xs) =
    req `setQuery` toQuery ("pathPrefix", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoAssetIOHandler CreateVersion where
  applyOptionalParam req (CreateVersion xs) =
    req `setQuery` toQuery ("createVersion", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamWebdavImplIoAssetIOHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamWebdavImplIoAssetIOHandler MimePlainText


-- *** comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob MimeNoContent ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJobInfo accept
comAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.DamWebdavVersionLinkingJob"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob  
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob CqDamWebdavVersionLinkingEnable where
  applyOptionalParam req (CqDamWebdavVersionLinkingEnable xs) =
    req `setQuery` toQuery ("cq.dam.webdav.version.linking.enable", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob CqDamWebdavVersionLinkingSchedulerPeriod where
  applyOptionalParam req (CqDamWebdavVersionLinkingSchedulerPeriod xs) =
    req `setQuery` toQuery ("cq.dam.webdav.version.linking.scheduler.period", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob CqDamWebdavVersionLinkingStagingTimeout where
  applyOptionalParam req (CqDamWebdavVersionLinkingStagingTimeout xs) =
    req `setQuery` toQuery ("cq.dam.webdav.version.linking.staging.timeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamWebdavImplIoDamWebdavVersionLinkingJob MimePlainText


-- *** comAdobeCqDamWebdavImplIoSpecialFilesHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDamWebdavImplIoSpecialFilesHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDamWebdavImplIoSpecialFilesHandler MimeNoContent ComAdobeCqDamWebdavImplIoSpecialFilesHandlerInfo accept
comAdobeCqDamWebdavImplIoSpecialFilesHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dam.webdav.impl.io.SpecialFilesHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDamWebdavImplIoSpecialFilesHandler  
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDamWebdavImplIoSpecialFilesHandler ComDayCqDamCoreImplIoSpecialFilesHandlerFilepatters where
  applyOptionalParam req (ComDayCqDamCoreImplIoSpecialFilesHandlerFilepatters xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.day.cq.dam.core.impl.io.SpecialFilesHandler.filepatters", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDamWebdavImplIoSpecialFilesHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDamWebdavImplIoSpecialFilesHandler MimePlainText


-- *** comAdobeCqDeserfwImplDeserializationFirewallImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDeserfwImplDeserializationFirewallImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDeserfwImplDeserializationFirewallImpl MimeNoContent ComAdobeCqDeserfwImplDeserializationFirewallImplInfo accept
comAdobeCqDeserfwImplDeserializationFirewallImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.deserfw.impl.DeserializationFirewallImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDeserfwImplDeserializationFirewallImpl  
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl FirewallDeserializationWhitelist where
  applyOptionalParam req (FirewallDeserializationWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("firewall.deserialization.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl FirewallDeserializationBlacklist where
  applyOptionalParam req (FirewallDeserializationBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("firewall.deserialization.blacklist", Just xs)
instance HasOptionalParam ComAdobeCqDeserfwImplDeserializationFirewallImpl FirewallDeserializationDiagnostics where
  applyOptionalParam req (FirewallDeserializationDiagnostics xs) =
    req `setQuery` toQuery ("firewall.deserialization.diagnostics", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDeserfwImplDeserializationFirewallImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDeserfwImplDeserializationFirewallImpl MimePlainText


-- *** comAdobeCqDtmImplServiceDTMWebServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDtmImplServiceDTMWebServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDtmImplServiceDTMWebServiceImpl MimeNoContent ComAdobeCqDtmImplServiceDTMWebServiceImplInfo accept
comAdobeCqDtmImplServiceDTMWebServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dtm.impl.service.DTMWebServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDtmImplServiceDTMWebServiceImpl  
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connection.timeout", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServiceDTMWebServiceImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socket.timeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDtmImplServiceDTMWebServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDtmImplServiceDTMWebServiceImpl MimePlainText


-- *** comAdobeCqDtmImplServletsDTMDeployHookServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDtmImplServletsDTMDeployHookServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDtmImplServletsDTMDeployHookServlet MimeNoContent ComAdobeCqDtmImplServletsDTMDeployHookServletInfo accept
comAdobeCqDtmImplServletsDTMDeployHookServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dtm.impl.servlets.DTMDeployHookServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDtmImplServletsDTMDeployHookServlet  
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet DtmStagingIpWhitelist where
  applyOptionalParam req (DtmStagingIpWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("dtm.staging.ip.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqDtmImplServletsDTMDeployHookServlet DtmProductionIpWhitelist where
  applyOptionalParam req (DtmProductionIpWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("dtm.production.ip.whitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDtmImplServletsDTMDeployHookServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDtmImplServletsDTMDeployHookServlet MimePlainText


-- *** comAdobeCqDtmReactorImplServiceWebServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqDtmReactorImplServiceWebServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqDtmReactorImplServiceWebServiceImpl MimeNoContent ComAdobeCqDtmReactorImplServiceWebServiceImplInfo accept
comAdobeCqDtmReactorImplServiceWebServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.dtm.reactor.impl.service.WebServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqDtmReactorImplServiceWebServiceImpl  
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl EndpointUri where
  applyOptionalParam req (EndpointUri xs) =
    req `setQuery` toQuery ("endpointUri", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connectionTimeout", Just xs)
instance HasOptionalParam ComAdobeCqDtmReactorImplServiceWebServiceImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socketTimeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqDtmReactorImplServiceWebServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqDtmReactorImplServiceWebServiceImpl MimePlainText


-- *** comAdobeCqExperiencelogImplExperienceLogConfigServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqExperiencelogImplExperienceLogConfigServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqExperiencelogImplExperienceLogConfigServlet MimeNoContent ComAdobeCqExperiencelogImplExperienceLogConfigServletInfo accept
comAdobeCqExperiencelogImplExperienceLogConfigServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.experiencelog.impl.ExperienceLogConfigServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqExperiencelogImplExperienceLogConfigServlet  
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeCqExperiencelogImplExperienceLogConfigServlet DisabledForGroups where
  applyOptionalParam req (DisabledForGroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("disabledForGroups", Just xs)

-- | @application/json@
instance Produces ComAdobeCqExperiencelogImplExperienceLogConfigServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqExperiencelogImplExperienceLogConfigServlet MimePlainText


-- *** comAdobeCqHcContentPackagesHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.hc.ContentPackagesHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqHcContentPackagesHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqHcContentPackagesHealthCheck MimeNoContent ComAdobeCqHcContentPackagesHealthCheckInfo accept
comAdobeCqHcContentPackagesHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.hc.ContentPackagesHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqHcContentPackagesHealthCheck  
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)
instance HasOptionalParam ComAdobeCqHcContentPackagesHealthCheck PackageNames where
  applyOptionalParam req (PackageNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("package.names", Just xs)

-- | @application/json@
instance Produces ComAdobeCqHcContentPackagesHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqHcContentPackagesHealthCheck MimePlainText


-- *** comAdobeCqHistoryImplHistoryRequestFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.history.impl.HistoryRequestFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqHistoryImplHistoryRequestFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqHistoryImplHistoryRequestFilter MimeNoContent ComAdobeCqHistoryImplHistoryRequestFilterInfo accept
comAdobeCqHistoryImplHistoryRequestFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.history.impl.HistoryRequestFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqHistoryImplHistoryRequestFilter  
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter HistoryRequestFilterExcludedSelectors where
  applyOptionalParam req (HistoryRequestFilterExcludedSelectors xs) =
    req `setQuery` toQueryColl MultiParamArray ("history.requestFilter.excludedSelectors", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryRequestFilter HistoryRequestFilterExcludedExtensions where
  applyOptionalParam req (HistoryRequestFilterExcludedExtensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("history.requestFilter.excludedExtensions", Just xs)

-- | @application/json@
instance Produces ComAdobeCqHistoryImplHistoryRequestFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqHistoryImplHistoryRequestFilter MimePlainText


-- *** comAdobeCqHistoryImplHistoryServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.history.impl.HistoryServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqHistoryImplHistoryServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqHistoryImplHistoryServiceImpl MimeNoContent ComAdobeCqHistoryImplHistoryServiceImplInfo accept
comAdobeCqHistoryImplHistoryServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.history.impl.HistoryServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqHistoryImplHistoryServiceImpl  
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl HistoryServiceResourceTypes where
  applyOptionalParam req (HistoryServiceResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("history.service.resourceTypes", Just xs)
instance HasOptionalParam ComAdobeCqHistoryImplHistoryServiceImpl HistoryServicePathFilter where
  applyOptionalParam req (HistoryServicePathFilter xs) =
    req `setQuery` toQueryColl MultiParamArray ("history.service.pathFilter", Just xs)

-- | @application/json@
instance Produces ComAdobeCqHistoryImplHistoryServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqHistoryImplHistoryServiceImpl MimePlainText


-- *** comAdobeCqInboxImplTypeproviderItemTypeProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqInboxImplTypeproviderItemTypeProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqInboxImplTypeproviderItemTypeProvider MimeNoContent ComAdobeCqInboxImplTypeproviderItemTypeProviderInfo accept
comAdobeCqInboxImplTypeproviderItemTypeProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.inbox.impl.typeprovider.ItemTypeProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqInboxImplTypeproviderItemTypeProvider  
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider InboxImplTypeproviderRegistrypaths where
  applyOptionalParam req (InboxImplTypeproviderRegistrypaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("inbox.impl.typeprovider.registrypaths", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider InboxImplTypeproviderLegacypaths where
  applyOptionalParam req (InboxImplTypeproviderLegacypaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("inbox.impl.typeprovider.legacypaths", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider InboxImplTypeproviderDefaulturlFailureitem where
  applyOptionalParam req (InboxImplTypeproviderDefaulturlFailureitem xs) =
    req `setQuery` toQuery ("inbox.impl.typeprovider.defaulturl.failureitem", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider InboxImplTypeproviderDefaulturlWorkitem where
  applyOptionalParam req (InboxImplTypeproviderDefaulturlWorkitem xs) =
    req `setQuery` toQuery ("inbox.impl.typeprovider.defaulturl.workitem", Just xs)
instance HasOptionalParam ComAdobeCqInboxImplTypeproviderItemTypeProvider InboxImplTypeproviderDefaulturlTask where
  applyOptionalParam req (InboxImplTypeproviderDefaulturlTask xs) =
    req `setQuery` toQuery ("inbox.impl.typeprovider.defaulturl.task", Just xs)

-- | @application/json@
instance Produces ComAdobeCqInboxImplTypeproviderItemTypeProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqInboxImplTypeproviderItemTypeProvider MimePlainText


-- *** comAdobeCqProjectsImplServletProjectImageServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.projects.impl.servlet.ProjectImageServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqProjectsImplServletProjectImageServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqProjectsImplServletProjectImageServlet MimeNoContent ComAdobeCqProjectsImplServletProjectImageServletInfo accept
comAdobeCqProjectsImplServletProjectImageServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.projects.impl.servlet.ProjectImageServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqProjectsImplServletProjectImageServlet  
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet ImageQuality where
  applyOptionalParam req (ImageQuality xs) =
    req `setQuery` toQuery ("image.quality", Just xs)
instance HasOptionalParam ComAdobeCqProjectsImplServletProjectImageServlet ImageSupportedResolutions where
  applyOptionalParam req (ImageSupportedResolutions xs) =
    req `setQuery` toQuery ("image.supported.resolutions", Just xs)

-- | @application/json@
instance Produces ComAdobeCqProjectsImplServletProjectImageServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqProjectsImplServletProjectImageServlet MimePlainText


-- *** comAdobeCqProjectsPurgeScheduler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.projects.purge.Scheduler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqProjectsPurgeScheduler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqProjectsPurgeScheduler MimeNoContent ComAdobeCqProjectsPurgeSchedulerInfo accept
comAdobeCqProjectsPurgeScheduler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.projects.purge.Scheduler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqProjectsPurgeScheduler  
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgeName where
  applyOptionalParam req (ScheduledpurgeName xs) =
    req `setQuery` toQuery ("scheduledpurge.name", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgePurgeActive where
  applyOptionalParam req (ScheduledpurgePurgeActive xs) =
    req `setQuery` toQuery ("scheduledpurge.purgeActive", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgeTemplates where
  applyOptionalParam req (ScheduledpurgeTemplates xs) =
    req `setQuery` toQueryColl MultiParamArray ("scheduledpurge.templates", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgePurgeGroups where
  applyOptionalParam req (ScheduledpurgePurgeGroups xs) =
    req `setQuery` toQuery ("scheduledpurge.purgeGroups", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgePurgeAssets where
  applyOptionalParam req (ScheduledpurgePurgeAssets xs) =
    req `setQuery` toQuery ("scheduledpurge.purgeAssets", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgeTerminateRunningWorkflows where
  applyOptionalParam req (ScheduledpurgeTerminateRunningWorkflows xs) =
    req `setQuery` toQuery ("scheduledpurge.terminateRunningWorkflows", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgeDaysold where
  applyOptionalParam req (ScheduledpurgeDaysold xs) =
    req `setQuery` toQuery ("scheduledpurge.daysold", Just xs)
instance HasOptionalParam ComAdobeCqProjectsPurgeScheduler ScheduledpurgeSaveThreshold where
  applyOptionalParam req (ScheduledpurgeSaveThreshold xs) =
    req `setQuery` toQuery ("scheduledpurge.saveThreshold", Just xs)

-- | @application/json@
instance Produces ComAdobeCqProjectsPurgeScheduler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqProjectsPurgeScheduler MimePlainText


-- *** comAdobeCqScheduledExporterImplScheduledExporterImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScheduledExporterImplScheduledExporterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScheduledExporterImplScheduledExporterImpl MimeNoContent ComAdobeCqScheduledExporterImplScheduledExporterImplInfo accept
comAdobeCqScheduledExporterImplScheduledExporterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.scheduled.exporter.impl.ScheduledExporterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScheduledExporterImplScheduledExporterImpl  
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl IncludePaths where
  applyOptionalParam req (IncludePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("include.paths", Just xs)
instance HasOptionalParam ComAdobeCqScheduledExporterImplScheduledExporterImpl ExporterUser where
  applyOptionalParam req (ExporterUser xs) =
    req `setQuery` toQuery ("exporter.user", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScheduledExporterImplScheduledExporterImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScheduledExporterImplScheduledExporterImpl MimePlainText


-- *** comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl MimeNoContent ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImplInfo accept
comAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.analytics.impl.ScreensAnalyticsServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl  
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ComAdobeCqScreensAnalyticsImplUrl where
  applyOptionalParam req (ComAdobeCqScreensAnalyticsImplUrl xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.analytics.impl.url", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ComAdobeCqScreensAnalyticsImplApikey where
  applyOptionalParam req (ComAdobeCqScreensAnalyticsImplApikey xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.analytics.impl.apikey", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ComAdobeCqScreensAnalyticsImplProject where
  applyOptionalParam req (ComAdobeCqScreensAnalyticsImplProject xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.analytics.impl.project", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ComAdobeCqScreensAnalyticsImplEnvironment where
  applyOptionalParam req (ComAdobeCqScreensAnalyticsImplEnvironment xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.analytics.impl.environment", Just xs)
instance HasOptionalParam ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl ComAdobeCqScreensAnalyticsImplSendFrequency where
  applyOptionalParam req (ComAdobeCqScreensAnalyticsImplSendFrequency xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.analytics.impl.sendFrequency", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensAnalyticsImplScreensAnalyticsServiceImpl MimePlainText


-- *** comAdobeCqScreensDeviceImplDeviceService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.device.impl.DeviceService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensDeviceImplDeviceService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensDeviceImplDeviceService MimeNoContent ComAdobeCqScreensDeviceImplDeviceServiceInfo accept
comAdobeCqScreensDeviceImplDeviceService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.device.impl.DeviceService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensDeviceImplDeviceService  
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensPlayerPingfrequency where
  applyOptionalParam req (ComAdobeAemScreensPlayerPingfrequency xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.player.pingfrequency", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordSpecialchars where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordSpecialchars xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.specialchars", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordMinlowercasechars where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordMinlowercasechars xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.minlowercasechars", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordMinuppercasechars where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordMinuppercasechars xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.minuppercasechars", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordMinnumberchars where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordMinnumberchars xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.minnumberchars", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordMinspecialchars where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordMinspecialchars xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.minspecialchars", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceImplDeviceService ComAdobeAemScreensDevicePaswordMinlength where
  applyOptionalParam req (ComAdobeAemScreensDevicePaswordMinlength xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.device.pasword.minlength", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensDeviceImplDeviceService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensDeviceImplDeviceService MimePlainText


-- *** comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl MimeNoContent ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImplInfo accept
comAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.device.registration.impl.RegistrationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl  
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl DeviceRegistrationTimeout where
  applyOptionalParam req (DeviceRegistrationTimeout xs) =
    req `setQuery` toQuery ("deviceRegistrationTimeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensDeviceRegistrationImplRegistrationServiceImpl MimePlainText


-- *** comAdobeCqScreensImplHandlerChannelsUpdateHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensImplHandlerChannelsUpdateHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensImplHandlerChannelsUpdateHandler MimeNoContent ComAdobeCqScreensImplHandlerChannelsUpdateHandlerInfo accept
comAdobeCqScreensImplHandlerChannelsUpdateHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.impl.handler.ChannelsUpdateHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensImplHandlerChannelsUpdateHandler  
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler CqPagesupdatehandlerImageresourcetypes where
  applyOptionalParam req (CqPagesupdatehandlerImageresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.imageresourcetypes", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler CqPagesupdatehandlerProductresourcetypes where
  applyOptionalParam req (CqPagesupdatehandlerProductresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.productresourcetypes", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler CqPagesupdatehandlerVideoresourcetypes where
  applyOptionalParam req (CqPagesupdatehandlerVideoresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.videoresourcetypes", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler CqPagesupdatehandlerDynamicsequenceresourcetypes where
  applyOptionalParam req (CqPagesupdatehandlerDynamicsequenceresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.dynamicsequenceresourcetypes", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplHandlerChannelsUpdateHandler CqPagesupdatehandlerPreviewmodepaths where
  applyOptionalParam req (CqPagesupdatehandlerPreviewmodepaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.previewmodepaths", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensImplHandlerChannelsUpdateHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensImplHandlerChannelsUpdateHandler MimePlainText


-- *** comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob MimeNoContent ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJobInfo accept
comAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.impl.jobs.DistributedDevicesStatiUpdateJob"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob  
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensImplJobsDistributedDevicesStatiUpdateJob MimePlainText


-- *** comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl MimeNoContent ComAdobeCqScreensImplRemoteImplDistributedHttpClientImplInfo accept
comAdobeCqScreensImplRemoteImplDistributedHttpClientImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.impl.remote.impl.DistributedHttpClientImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl  
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl ComAdobeAemScreensImplRemoteRequestTimeout where
  applyOptionalParam req (ComAdobeAemScreensImplRemoteRequestTimeout xs) =
    req `setQuery` toQuery ("com.adobe.aem.screens.impl.remote.request_timeout", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensImplRemoteImplDistributedHttpClientImpl MimePlainText


-- *** comAdobeCqScreensImplScreensChannelPostProcessor

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.impl.ScreensChannelPostProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensImplScreensChannelPostProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensImplScreensChannelPostProcessor MimeNoContent ComAdobeCqScreensImplScreensChannelPostProcessorInfo accept
comAdobeCqScreensImplScreensChannelPostProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.impl.ScreensChannelPostProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensImplScreensChannelPostProcessor  
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensImplScreensChannelPostProcessor ScreensChannelsPropertiesToRemove where
  applyOptionalParam req (ScreensChannelsPropertiesToRemove xs) =
    req `setQuery` toQueryColl MultiParamArray ("screens.channels.properties.to.remove", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensImplScreensChannelPostProcessor MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensImplScreensChannelPostProcessor MimePlainText


-- *** comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl MimeNoContent ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplInfo accept
comAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl  
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplProjectPath xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.projectPath", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplScheduleFrequency xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.scheduleFrequency", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPingTimeout xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.pingTimeout", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplRecipients xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.recipients", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpserver xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpserver", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplSmtpport xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.smtpport", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsetls xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.usetls", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplUsername xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.username", Just xs)
instance HasOptionalParam ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword where
  applyOptionalParam req (ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImplPassword xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.monitoring.impl.ScreensMonitoringServiceImpl.password", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensMonitoringImplScreensMonitoringServiceImpl MimePlainText


-- *** comAdobeCqScreensMqActivemqImplArtemisJMSProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensMqActivemqImplArtemisJMSProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensMqActivemqImplArtemisJMSProvider MimeNoContent ComAdobeCqScreensMqActivemqImplArtemisJMSProviderInfo accept
comAdobeCqScreensMqActivemqImplArtemisJMSProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.mq.activemq.impl.ArtemisJMSProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensMqActivemqImplArtemisJMSProvider  
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider GlobalSize where
  applyOptionalParam req (GlobalSize xs) =
    req `setQuery` toQuery ("global.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider MaxDiskUsage where
  applyOptionalParam req (MaxDiskUsage xs) =
    req `setQuery` toQuery ("max.disk.usage", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider PersistenceEnabled where
  applyOptionalParam req (PersistenceEnabled xs) =
    req `setQuery` toQuery ("persistence.enabled", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ThreadPoolMaxSize where
  applyOptionalParam req (ThreadPoolMaxSize xs) =
    req `setQuery` toQuery ("thread.pool.max.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ScheduledThreadPoolMaxSize where
  applyOptionalParam req (ScheduledThreadPoolMaxSize xs) =
    req `setQuery` toQuery ("scheduled.thread.pool.max.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider GracefulShutdownTimeout where
  applyOptionalParam req (GracefulShutdownTimeout xs) =
    req `setQuery` toQuery ("graceful.shutdown.timeout", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Queues where
  applyOptionalParam req (Queues xs) =
    req `setQuery` toQueryColl MultiParamArray ("queues", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider Topics where
  applyOptionalParam req (Topics xs) =
    req `setQuery` toQueryColl MultiParamArray ("topics", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesMaxDeliveryAttempts where
  applyOptionalParam req (AddressesMaxDeliveryAttempts xs) =
    req `setQuery` toQuery ("addresses.max.delivery.attempts", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesExpiryDelay where
  applyOptionalParam req (AddressesExpiryDelay xs) =
    req `setQuery` toQuery ("addresses.expiry.delay", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesAddressFullMessagePolicy where
  applyOptionalParam req (AddressesAddressFullMessagePolicy xs) =
    req `setQuery` toQuery ("addresses.address.full.message.policy", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesMaxSizeBytes where
  applyOptionalParam req (AddressesMaxSizeBytes xs) =
    req `setQuery` toQuery ("addresses.max.size.bytes", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesPageSizeBytes where
  applyOptionalParam req (AddressesPageSizeBytes xs) =
    req `setQuery` toQuery ("addresses.page.size.bytes", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider AddressesPageCacheMaxSize where
  applyOptionalParam req (AddressesPageCacheMaxSize xs) =
    req `setQuery` toQuery ("addresses.page.cache.max.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterUser where
  applyOptionalParam req (ClusterUser xs) =
    req `setQuery` toQuery ("cluster.user", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterPassword where
  applyOptionalParam req (ClusterPassword xs) =
    req `setQuery` toQuery ("cluster.password", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterCallTimeout where
  applyOptionalParam req (ClusterCallTimeout xs) =
    req `setQuery` toQuery ("cluster.call.timeout", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterCallFailoverTimeout where
  applyOptionalParam req (ClusterCallFailoverTimeout xs) =
    req `setQuery` toQuery ("cluster.call.failover.timeout", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterClientFailureCheckPeriod where
  applyOptionalParam req (ClusterClientFailureCheckPeriod xs) =
    req `setQuery` toQuery ("cluster.client.failure.check.period", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterNotificationAttempts where
  applyOptionalParam req (ClusterNotificationAttempts xs) =
    req `setQuery` toQuery ("cluster.notification.attempts", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterNotificationInterval where
  applyOptionalParam req (ClusterNotificationInterval xs) =
    req `setQuery` toQuery ("cluster.notification.interval", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider IdCacheSize where
  applyOptionalParam req (IdCacheSize xs) =
    req `setQuery` toQuery ("id.cache.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterConfirmationWindowSize where
  applyOptionalParam req (ClusterConfirmationWindowSize xs) =
    req `setQuery` toQuery ("cluster.confirmation.window.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterConnectionTtl where
  applyOptionalParam req (ClusterConnectionTtl xs) =
    req `setQuery` toQuery ("cluster.connection.ttl", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterDuplicateDetection where
  applyOptionalParam req (ClusterDuplicateDetection xs) =
    req `setQuery` toQuery ("cluster.duplicate.detection", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterInitialConnectAttempts where
  applyOptionalParam req (ClusterInitialConnectAttempts xs) =
    req `setQuery` toQuery ("cluster.initial.connect.attempts", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterMaxRetryInterval where
  applyOptionalParam req (ClusterMaxRetryInterval xs) =
    req `setQuery` toQuery ("cluster.max.retry.interval", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterMinLargeMessageSize where
  applyOptionalParam req (ClusterMinLargeMessageSize xs) =
    req `setQuery` toQuery ("cluster.min.large.message.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterProducerWindowSize where
  applyOptionalParam req (ClusterProducerWindowSize xs) =
    req `setQuery` toQuery ("cluster.producer.window.size", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterReconnectAttempts where
  applyOptionalParam req (ClusterReconnectAttempts xs) =
    req `setQuery` toQuery ("cluster.reconnect.attempts", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterRetryInterval where
  applyOptionalParam req (ClusterRetryInterval xs) =
    req `setQuery` toQuery ("cluster.retry.interval", Just xs)
instance HasOptionalParam ComAdobeCqScreensMqActivemqImplArtemisJMSProvider ClusterRetryIntervalMultiplier where
  applyOptionalParam req (ClusterRetryIntervalMultiplier xs) =
    req `setQuery` toQuery ("cluster.retry.interval.multiplier", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensMqActivemqImplArtemisJMSProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensMqActivemqImplArtemisJMSProvider MimePlainText


-- *** comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl MimeNoContent ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplInfo accept
comAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl  
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath where
  applyOptionalParam req (ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplProjectPath xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.projectPath", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency where
  applyOptionalParam req (ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImplScheduleFrequency xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.offlinecontent.impl.BulkOfflineUpdateServiceImpl.scheduleFrequency", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensOfflinecontentImplBulkOfflineUpdateServiceImpl MimePlainText


-- *** comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl MimeNoContent ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImplInfo accept
comAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.offlinecontent.impl.OfflineContentServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl  
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl DisableSmartSync where
  applyOptionalParam req (DisableSmartSync xs) =
    req `setQuery` toQuery ("disableSmartSync", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensOfflinecontentImplOfflineContentServiceImpl MimePlainText


-- *** comAdobeCqScreensSegmentationImplSegmentationFeatureFlag

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqScreensSegmentationImplSegmentationFeatureFlag 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag MimeNoContent ComAdobeCqScreensSegmentationImplSegmentationFeatureFlagInfo accept
comAdobeCqScreensSegmentationImplSegmentationFeatureFlag  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.screens.segmentation.impl.SegmentationFeatureFlag"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag  
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag EnableDataTriggeredContent where
  applyOptionalParam req (EnableDataTriggeredContent xs) =
    req `setQuery` toQuery ("enableDataTriggeredContent", Just xs)

-- | @application/json@
instance Produces ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqScreensSegmentationImplSegmentationFeatureFlag MimePlainText


-- *** comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh MimeNoContent ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthChInfo accept
comAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.HtmlLibraryManagerConfigHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh  
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSecurityHcBundlesImplHtmlLibraryManagerConfigHealthCh MimePlainText


-- *** comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck MimeNoContent ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheckInfo accept
comAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.security.hc.bundles.impl.WcmFilterHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck  
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSecurityHcBundlesImplWcmFilterHealthCheck MimePlainText


-- *** comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck MimeNoContent ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheckInfo accept
comAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.security.hc.dispatcher.impl.DispatcherAccessHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck  
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck DispatcherAddress where
  applyOptionalParam req (DispatcherAddress xs) =
    req `setQuery` toQuery ("dispatcher.address", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck DispatcherFilterAllowed where
  applyOptionalParam req (DispatcherFilterAllowed xs) =
    req `setQuery` toQueryColl MultiParamArray ("dispatcher.filter.allowed", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck DispatcherFilterBlocked where
  applyOptionalParam req (DispatcherFilterBlocked xs) =
    req `setQuery` toQueryColl MultiParamArray ("dispatcher.filter.blocked", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSecurityHcDispatcherImplDispatcherAccessHealthCheck MimePlainText


-- *** comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck MimeNoContent ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheckInfo accept
comAdobeCqSecurityHcPackagesImplExampleContentHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.security.hc.packages.impl.ExampleContentHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck  
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSecurityHcPackagesImplExampleContentHealthCheck MimePlainText


-- *** comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck MimeNoContent ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheckInfo accept
comAdobeCqSecurityHcWebserverImplClickjackingHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.security.hc.webserver.impl.ClickjackingHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck  
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck WebserverAddress where
  applyOptionalParam req (WebserverAddress xs) =
    req `setQuery` toQuery ("webserver.address", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSecurityHcWebserverImplClickjackingHealthCheck MimePlainText


-- *** comAdobeCqSocialAccountverificationImplAccountManagementConfigIm

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialAccountverificationImplAccountManagementConfigIm 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm MimeNoContent ComAdobeCqSocialAccountverificationImplAccountManagementConfigImInfo accept
comAdobeCqSocialAccountverificationImplAccountManagementConfigIm  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.accountverification.impl.AccountManagementConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm  
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Enable where
  applyOptionalParam req (Enable xs) =
    req `setQuery` toQuery ("enable", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Ttl1 where
  applyOptionalParam req (Ttl1 xs) =
    req `setQuery` toQuery ("ttl1", Just xs)
instance HasOptionalParam ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm Ttl2 where
  applyOptionalParam req (Ttl2 xs) =
    req `setQuery` toQuery ("ttl2", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialAccountverificationImplAccountManagementConfigIm MimePlainText


-- *** comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen MimeNoContent ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponenInfo accept
comAdobeCqSocialActivitystreamsClientImplSocialActivityComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityComponentFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsClientImplSocialActivityComponen MimePlainText


-- *** comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo MimeNoContent ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCoInfo accept
comAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.client.impl.SocialActivityStreamComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsClientImplSocialActivityStreamCo MimePlainText


-- *** comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler MimeNoContent ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandlerInfo accept
comAdobeCqSocialActivitystreamsListenerImplEventListenerHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.EventListenerHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplEventListenerHandler MimePlainText


-- *** comAdobeCqSocialActivitystreamsListenerImplModerationEventExten

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsListenerImplModerationEventExten 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten MimeNoContent ComAdobeCqSocialActivitystreamsListenerImplModerationEventExtenInfo accept
comAdobeCqSocialActivitystreamsListenerImplModerationEventExten  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ModerationEventExtension"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Accepted where
  applyOptionalParam req (Accepted xs) =
    req `setQuery` toQuery ("accepted", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten Ranked where
  applyOptionalParam req (Ranked xs) =
    req `setQuery` toQuery ("ranked", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplModerationEventExten MimePlainText


-- *** comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS MimeNoContent ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivitySInfo accept
comAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.RatingEventActivitySuppressor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Ranking where
  applyOptionalParam req (Ranking xs) =
    req `setQuery` toQuery ("ranking", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS Enable where
  applyOptionalParam req (Enable xs) =
    req `setQuery` toQuery ("enable", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplRatingEventActivityS MimePlainText


-- *** comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre MimeNoContent ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStreInfo accept
comAdobeCqSocialActivitystreamsListenerImplResourceActivityStre  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.activitystreams.listener.impl.ResourceActivityStreamProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre  
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre StreamPath where
  applyOptionalParam req (StreamPath xs) =
    req `setQuery` toQuery ("streamPath", Just xs)
instance HasOptionalParam ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre StreamName where
  applyOptionalParam req (StreamName xs) =
    req `setQuery` toQuery ("streamName", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialActivitystreamsListenerImplResourceActivityStre MimePlainText


-- *** comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI MimeNoContent ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsIInfo accept
comAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.calendar.client.endpoints.impl.CalendarOperationsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI  
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI MaxRetry where
  applyOptionalParam req (MaxRetry xs) =
    req `setQuery` toQuery ("MaxRetry", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCalendarClientEndpointsImplCalendarOperationsI MimePlainText


-- *** comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen MimeNoContent ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmenInfo accept
comAdobeCqSocialCalendarClientOperationextensionsEventAttachmen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.calendar.client.operationextensions.EventAttachment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen  
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen AttachmentTypeBlacklistText where
  applyOptionalParam req (AttachmentTypeBlacklistText xs) =
    req `setQuery` toQuery ("attachmentTypeBlacklist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen ExtensionOrder where
  applyOptionalParam req (ExtensionOrder xs) =
    req `setQuery` toQuery ("extension.order", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCalendarClientOperationextensionsEventAttachmen MimePlainText


-- *** comAdobeCqSocialCalendarServletsTimeZoneServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.calendar.servlets.TimeZoneServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCalendarServletsTimeZoneServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCalendarServletsTimeZoneServlet MimeNoContent ComAdobeCqSocialCalendarServletsTimeZoneServletInfo accept
comAdobeCqSocialCalendarServletsTimeZoneServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.calendar.servlets.TimeZoneServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCalendarServletsTimeZoneServlet  
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCalendarServletsTimeZoneServlet TimezonesExpirytime where
  applyOptionalParam req (TimezonesExpirytime xs) =
    req `setQuery` toQuery ("timezones.expirytime", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCalendarServletsTimeZoneServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCalendarServletsTimeZoneServlet MimePlainText


-- *** comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent MimeNoContent ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEventInfo accept
comAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentDeleteEventActivitySuppressor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent  
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent Ranking where
  applyOptionalParam req (Ranking xs) =
    req `setQuery` toQuery ("ranking", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplCommentDeleteEvent MimePlainText


-- *** comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe MimeNoContent ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSeInfo accept
comAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.CommentOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe  
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplCommentOperationSe MimePlainText


-- *** comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati MimeNoContent ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperatiInfo accept
comAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.comments.endpoints.impl.TranslationOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati  
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCommentsEndpointsImplTranslationOperati MimePlainText


-- *** comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC MimeNoContent ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialCInfo accept
comAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.comments.listing.impl.SearchCommentSocialComponentListProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC  
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC NumUserLimit where
  applyOptionalParam req (NumUserLimit xs) =
    req `setQuery` toQuery ("numUserLimit", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCommentsListingImplSearchCommentSocialC MimePlainText


-- *** comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos MimeNoContent ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPosInfo accept
comAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.comments.scheduler.impl.SearchScheduledPosts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos  
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos EnableScheduledPostsSearch where
  applyOptionalParam req (EnableScheduledPostsSearch xs) =
    req `setQuery` toQuery ("enableScheduledPostsSearch", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos NumberOfMinutes where
  applyOptionalParam req (NumberOfMinutes xs) =
    req `setQuery` toQuery ("numberOfMinutes", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos MaxSearchLimit where
  applyOptionalParam req (MaxSearchLimit xs) =
    req `setQuery` toQuery ("maxSearchLimit", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCommentsSchedulerImplSearchScheduledPos MimePlainText


-- *** comAdobeCqSocialCommonsCorsCORSAuthenticationFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsCorsCORSAuthenticationFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter MimeNoContent ComAdobeCqSocialCommonsCorsCORSAuthenticationFilterInfo accept
comAdobeCqSocialCommonsCorsCORSAuthenticationFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.cors.CORSAuthenticationFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter  
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter CorsEnabling where
  applyOptionalParam req (CorsEnabling xs) =
    req `setQuery` toQuery ("cors.enabling", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsCorsCORSAuthenticationFilter MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.AndroidEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplAndroidEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImplInfo accept
comAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailBuilderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl ContextPath where
  applyOptionalParam req (ContextPath xs) =
    req `setQuery` toQuery ("context.path", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCommentEmailBuilderImpl MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListenerInfo accept
comAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CommentEmailEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCommentEmailEventListener MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.CustomEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplCustomEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImpInfo accept
comAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailQuotedTextPatternsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternTime where
  applyOptionalParam req (PatternTime xs) =
    req `setQuery` toQuery ("pattern.time", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternNewline where
  applyOptionalParam req (PatternNewline xs) =
    req `setQuery` toQuery ("pattern.newline", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternDayOfMonth where
  applyOptionalParam req (PatternDayOfMonth xs) =
    req `setQuery` toQuery ("pattern.dayOfMonth", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternMonth where
  applyOptionalParam req (PatternMonth xs) =
    req `setQuery` toQuery ("pattern.month", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternYear where
  applyOptionalParam req (PatternYear xs) =
    req `setQuery` toQuery ("pattern.year", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternDate where
  applyOptionalParam req (PatternDate xs) =
    req `setQuery` toQuery ("pattern.date", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternDateTime where
  applyOptionalParam req (PatternDateTime xs) =
    req `setQuery` toQuery ("pattern.dateTime", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp PatternEmail where
  applyOptionalParam req (PatternEmail xs) =
    req `setQuery` toQuery ("pattern.email", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailQuotedTextPatternsImp MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImpInfo accept
comAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailName where
  applyOptionalParam req (EmailName xs) =
    req `setQuery` toQuery ("email.name", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailCreatePostFromReply where
  applyOptionalParam req (EmailCreatePostFromReply xs) =
    req `setQuery` toQuery ("email.createPostFromReply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailAddCommentIdTo where
  applyOptionalParam req (EmailAddCommentIdTo xs) =
    req `setQuery` toQuery ("email.addCommentIdTo", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailSubjectMaximumLength where
  applyOptionalParam req (EmailSubjectMaximumLength xs) =
    req `setQuery` toQuery ("email.subjectMaximumLength", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailReplyToAddress where
  applyOptionalParam req (EmailReplyToAddress xs) =
    req `setQuery` toQuery ("email.replyToAddress", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailReplyToDelimiter where
  applyOptionalParam req (EmailReplyToDelimiter xs) =
    req `setQuery` toQuery ("email.replyToDelimiter", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailTrackerIdPrefixInSubject where
  applyOptionalParam req (EmailTrackerIdPrefixInSubject xs) =
    req `setQuery` toQuery ("email.trackerIdPrefixInSubject", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailTrackerIdPrefixInBody where
  applyOptionalParam req (EmailTrackerIdPrefixInBody xs) =
    req `setQuery` toQuery ("email.trackerIdPrefixInBody", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailAsHtml where
  applyOptionalParam req (EmailAsHtml xs) =
    req `setQuery` toQuery ("email.asHTML", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailDefaultUserName where
  applyOptionalParam req (EmailDefaultUserName xs) =
    req `setQuery` toQuery ("email.defaultUserName", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp EmailTemplatesRootPath where
  applyOptionalParam req (EmailTemplatesRootPath xs) =
    req `setQuery` toQuery ("email.templates.rootPath", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailReplyConfigurationImp MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporterInfo accept
comAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.EmailReplyImporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter ConnectProtocol where
  applyOptionalParam req (ConnectProtocol xs) =
    req `setQuery` toQuery ("connectProtocol", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplEmailReplyImporter MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.GmailEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplGmailEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.IOSEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplIOSEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.MacmailEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplMacmailEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.OutLookEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplOutLookEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.UnknownEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplUnknownEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider MimeNoContent ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProviderInfo accept
comAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.emailreply.impl.YahooEmailClientProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider  
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider PriorityOrder where
  applyOptionalParam req (PriorityOrder xs) =
    req `setQuery` toQuery ("priorityOrder", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider ReplyEmailPatterns where
  applyOptionalParam req (ReplyEmailPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("replyEmailPatterns", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsEmailreplyImplYahooEmailClientProvider MimePlainText


-- *** comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload MimeNoContent ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUploadInfo accept
comAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.maintainance.impl.DeleteTempUGCImageUploads"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload  
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload NumberOfDays where
  applyOptionalParam req (NumberOfDays xs) =
    req `setQuery` toQuery ("numberOfDays", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload AgeOfFile where
  applyOptionalParam req (AgeOfFile xs) =
    req `setQuery` toQuery ("ageOfFile", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsMaintainanceImplDeleteTempUGCImageUpload MimePlainText


-- *** comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl MimeNoContent ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImplInfo accept
comAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.ugclimiter.impl.UGCLimiterServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl  
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl Verbs where
  applyOptionalParam req (Verbs xs) =
    req `setQuery` toQueryColl MultiParamArray ("verbs", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsUgclimiterImplUGCLimiterServiceImpl MimePlainText


-- *** comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit MimeNoContent ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimitInfo accept
comAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.commons.ugclimitsconfig.impl.CommunityUserUGCLimitsConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit  
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Enable where
  applyOptionalParam req (Enable xs) =
    req `setQuery` toQuery ("enable", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit UgcLimit where
  applyOptionalParam req (UgcLimit xs) =
    req `setQuery` toQuery ("UGCLimit", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit UgcLimitDuration where
  applyOptionalParam req (UgcLimitDuration xs) =
    req `setQuery` toQuery ("ugcLimitDuration", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit Domains where
  applyOptionalParam req (Domains xs) =
    req `setQuery` toQueryColl MultiParamArray ("domains", Just xs)
instance HasOptionalParam ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit ToList where
  applyOptionalParam req (ToList xs) =
    req `setQuery` toQueryColl MultiParamArray ("toList", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialCommonsUgclimitsconfigImplCommunityUserUGCLimit MimePlainText


-- *** comAdobeCqSocialConnectOauthImplFacebookProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialConnectOauthImplFacebookProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialConnectOauthImplFacebookProviderImpl MimeNoContent ComAdobeCqSocialConnectOauthImplFacebookProviderImplInfo accept
comAdobeCqSocialConnectOauthImplFacebookProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.FacebookProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialConnectOauthImplFacebookProviderImpl  
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl OauthCloudConfigRoot where
  applyOptionalParam req (OauthCloudConfigRoot xs) =
    req `setQuery` toQuery ("oauth.cloud.config.root", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigRoot where
  applyOptionalParam req (ProviderConfigRoot xs) =
    req `setQuery` toQuery ("provider.config.root", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigCreateTagsEnabled where
  applyOptionalParam req (ProviderConfigCreateTagsEnabled xs) =
    req `setQuery` toQuery ("provider.config.create.tags.enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigUserFolder where
  applyOptionalParam req (ProviderConfigUserFolder xs) =
    req `setQuery` toQuery ("provider.config.user.folder", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigFacebookFetchFields where
  applyOptionalParam req (ProviderConfigFacebookFetchFields xs) =
    req `setQuery` toQuery ("provider.config.facebook.fetch.fields", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigFacebookFields where
  applyOptionalParam req (ProviderConfigFacebookFields xs) =
    req `setQuery` toQueryColl MultiParamArray ("provider.config.facebook.fields", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplFacebookProviderImpl ProviderConfigRefreshUserdataEnabled where
  applyOptionalParam req (ProviderConfigRefreshUserdataEnabled xs) =
    req `setQuery` toQuery ("provider.config.refresh.userdata.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialConnectOauthImplFacebookProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialConnectOauthImplFacebookProviderImpl MimePlainText


-- *** comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle MimeNoContent ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandleInfo accept
comAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle  
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle Path where
  applyOptionalParam req (Path xs) =
    req `setQuery` toQueryColl MultiParamArray ("path", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialConnectOauthImplSocialOAuthAuthenticationHandle MimePlainText


-- *** comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper MimeNoContent ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapperInfo accept
comAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.SocialOAuthUserProfileMapper"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper  
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Facebook where
  applyOptionalParam req (Facebook xs) =
    req `setQuery` toQueryColl MultiParamArray ("facebook", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper Twitter where
  applyOptionalParam req (Twitter xs) =
    req `setQuery` toQueryColl MultiParamArray ("twitter", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper ProviderConfigUserFolder where
  applyOptionalParam req (ProviderConfigUserFolder xs) =
    req `setQuery` toQuery ("provider.config.user.folder", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialConnectOauthImplSocialOAuthUserProfileMapper MimePlainText


-- *** comAdobeCqSocialConnectOauthImplTwitterProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialConnectOauthImplTwitterProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialConnectOauthImplTwitterProviderImpl MimeNoContent ComAdobeCqSocialConnectOauthImplTwitterProviderImplInfo accept
comAdobeCqSocialConnectOauthImplTwitterProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.connect.oauth.impl.TwitterProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialConnectOauthImplTwitterProviderImpl  
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl OauthCloudConfigRoot where
  applyOptionalParam req (OauthCloudConfigRoot xs) =
    req `setQuery` toQuery ("oauth.cloud.config.root", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl ProviderConfigRoot where
  applyOptionalParam req (ProviderConfigRoot xs) =
    req `setQuery` toQuery ("provider.config.root", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl ProviderConfigUserFolder where
  applyOptionalParam req (ProviderConfigUserFolder xs) =
    req `setQuery` toQuery ("provider.config.user.folder", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl ProviderConfigTwitterEnableParams where
  applyOptionalParam req (ProviderConfigTwitterEnableParams xs) =
    req `setQuery` toQuery ("provider.config.twitter.enable.params", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl ProviderConfigTwitterParams where
  applyOptionalParam req (ProviderConfigTwitterParams xs) =
    req `setQuery` toQueryColl MultiParamArray ("provider.config.twitter.params", Just xs)
instance HasOptionalParam ComAdobeCqSocialConnectOauthImplTwitterProviderImpl ProviderConfigRefreshUserdataEnabled where
  applyOptionalParam req (ProviderConfigRefreshUserdataEnabled xs) =
    req `setQuery` toQuery ("provider.config.refresh.userdata.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialConnectOauthImplTwitterProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialConnectOauthImplTwitterProviderImpl MimePlainText


-- *** comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen MimeNoContent ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmenInfo accept
comAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.content.fragments.services.impl.CommunitiesFragmentCreationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen  
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen CqSocialContentFragmentsServicesEnabled where
  applyOptionalParam req (CqSocialContentFragmentsServicesEnabled xs) =
    req `setQuery` toQuery ("cq.social.content.fragments.services.enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen CqSocialContentFragmentsServicesWaitTimeSeconds where
  applyOptionalParam req (CqSocialContentFragmentsServicesWaitTimeSeconds xs) =
    req `setQuery` toQuery ("cq.social.content.fragments.services.waitTimeSeconds", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialContentFragmentsServicesImplCommunitiesFragmen MimePlainText


-- *** comAdobeCqSocialDatastoreAsImplASResourceProviderFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialDatastoreAsImplASResourceProviderFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory MimeNoContent ComAdobeCqSocialDatastoreAsImplASResourceProviderFactoryInfo accept
comAdobeCqSocialDatastoreAsImplASResourceProviderFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.datastore.as.impl.ASResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory  
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory VersionId where
  applyOptionalParam req (VersionId xs) =
    req `setQuery` toQuery ("version.id", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory CacheOn where
  applyOptionalParam req (CacheOn xs) =
    req `setQuery` toQuery ("cache.on", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory ConcurrencyLevel where
  applyOptionalParam req (ConcurrencyLevel xs) =
    req `setQuery` toQuery ("concurrency.level", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory CacheStartSize where
  applyOptionalParam req (CacheStartSize xs) =
    req `setQuery` toQuery ("cache.start.size", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory CacheTtl where
  applyOptionalParam req (CacheTtl xs) =
    req `setQuery` toQuery ("cache.ttl", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory CacheSize where
  applyOptionalParam req (CacheSize xs) =
    req `setQuery` toQuery ("cache.size", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory TimeLimit where
  applyOptionalParam req (TimeLimit xs) =
    req `setQuery` toQuery ("time.limit", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialDatastoreAsImplASResourceProviderFactory MimePlainText


-- *** comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory MimeNoContent ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactoryInfo accept
comAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.datastore.op.impl.SocialMSResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory  
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory SolrZkTimeout where
  applyOptionalParam req (SolrZkTimeout xs) =
    req `setQuery` toQuery ("solr.zk.timeout", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory SolrCommit where
  applyOptionalParam req (SolrCommit xs) =
    req `setQuery` toQuery ("solr.commit", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory CacheOn where
  applyOptionalParam req (CacheOn xs) =
    req `setQuery` toQuery ("cache.on", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory ConcurrencyLevel where
  applyOptionalParam req (ConcurrencyLevel xs) =
    req `setQuery` toQuery ("concurrency.level", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory CacheStartSize where
  applyOptionalParam req (CacheStartSize xs) =
    req `setQuery` toQuery ("cache.start.size", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory CacheTtl where
  applyOptionalParam req (CacheTtl xs) =
    req `setQuery` toQuery ("cache.ttl", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory CacheSize where
  applyOptionalParam req (CacheSize xs) =
    req `setQuery` toQuery ("cache.size", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialDatastoreOpImplSocialMSResourceProviderFactory MimePlainText


-- *** comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor MimeNoContent ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactorInfo accept
comAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.datastore.rdb.impl.SocialRDBResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor  
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor SolrZkTimeout where
  applyOptionalParam req (SolrZkTimeout xs) =
    req `setQuery` toQuery ("solr.zk.timeout", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor SolrCommit where
  applyOptionalParam req (SolrCommit xs) =
    req `setQuery` toQuery ("solr.commit", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor CacheOn where
  applyOptionalParam req (CacheOn xs) =
    req `setQuery` toQuery ("cache.on", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor ConcurrencyLevel where
  applyOptionalParam req (ConcurrencyLevel xs) =
    req `setQuery` toQuery ("concurrency.level", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor CacheStartSize where
  applyOptionalParam req (CacheStartSize xs) =
    req `setQuery` toQuery ("cache.start.size", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor CacheTtl where
  applyOptionalParam req (CacheTtl xs) =
    req `setQuery` toQuery ("cache.ttl", Just xs)
instance HasOptionalParam ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor CacheSize where
  applyOptionalParam req (CacheSize xs) =
    req `setQuery` toQuery ("cache.size", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialDatastoreRdbImplSocialRDBResourceProviderFactor MimePlainText


-- *** comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF MimeNoContent ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorFInfo accept
comAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementLearningPathAdaptorFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF  
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF IsMemberCheck where
  applyOptionalParam req (IsMemberCheck xs) =
    req `setQuery` toQuery ("isMemberCheck", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialEnablementAdaptorsEnablementLearningPathAdaptorF MimePlainText


-- *** comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto MimeNoContent ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFactoInfo accept
comAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.enablement.adaptors.EnablementResourceAdaptorFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto  
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto IsMemberCheck where
  applyOptionalParam req (IsMemberCheck xs) =
    req `setQuery` toQuery ("isMemberCheck", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialEnablementAdaptorsEnablementResourceAdaptorFacto MimePlainText


-- *** comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL MimeNoContent ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementLInfo accept
comAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.enablement.learningpath.endpoints.impl.EnablementLearningPathModelOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL  
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialEnablementLearningpathEndpointsImplEnablementL MimePlainText


-- *** comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou MimeNoContent ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResouInfo accept
comAdobeCqSocialEnablementResourceEndpointsImplEnablementResou  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.enablement.resource.endpoints.impl.EnablementResourceModelOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou  
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialEnablementResourceEndpointsImplEnablementResou MimePlainText


-- *** comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl MimeNoContent ComAdobeCqSocialEnablementServicesImplAuthorMarkerImplInfo accept
comAdobeCqSocialEnablementServicesImplAuthorMarkerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.enablement.services.impl.AuthorMarkerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl  
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialEnablementServicesImplAuthorMarkerImpl MimePlainText


-- *** comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe MimeNoContent ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGeInfo accept
comAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.FilelibraryDownloadGetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe  
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe SlingServletExtensions where
  applyOptionalParam req (SlingServletExtensions xs) =
    req `setQuery` toQuery ("sling.servlet.extensions", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialFilelibraryClientEndpointsFilelibraryDownloadGe MimePlainText


-- *** comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera MimeNoContent ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOperaInfo accept
comAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.filelibrary.client.endpoints.impl.FileLibraryOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera  
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialFilelibraryClientEndpointsImplFileLibraryOpera MimePlainText


-- *** comAdobeCqSocialForumClientEndpointsImplForumOperationsService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialForumClientEndpointsImplForumOperationsService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialForumClientEndpointsImplForumOperationsService MimeNoContent ComAdobeCqSocialForumClientEndpointsImplForumOperationsServiceInfo accept
comAdobeCqSocialForumClientEndpointsImplForumOperationsService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.forum.client.endpoints.impl.ForumOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialForumClientEndpointsImplForumOperationsService  
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumClientEndpointsImplForumOperationsService AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialForumClientEndpointsImplForumOperationsService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialForumClientEndpointsImplForumOperationsService MimePlainText


-- *** comAdobeCqSocialForumDispatcherImplFlushOperations

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialForumDispatcherImplFlushOperations 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialForumDispatcherImplFlushOperations MimeNoContent ComAdobeCqSocialForumDispatcherImplFlushOperationsInfo accept
comAdobeCqSocialForumDispatcherImplFlushOperations  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.forum.dispatcher.impl.FlushOperations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialForumDispatcherImplFlushOperations  
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations ExtensionOrder where
  applyOptionalParam req (ExtensionOrder xs) =
    req `setQuery` toQuery ("extension.order", Just xs)
instance HasOptionalParam ComAdobeCqSocialForumDispatcherImplFlushOperations FlushForumontopic where
  applyOptionalParam req (FlushForumontopic xs) =
    req `setQuery` toQuery ("flush.forumontopic", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialForumDispatcherImplFlushOperations MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialForumDispatcherImplFlushOperations MimePlainText


-- *** comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen MimeNoContent ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponenInfo accept
comAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.group.client.impl.CommunityGroupCollectionComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen  
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen GroupListingPaginationEnable where
  applyOptionalParam req (GroupListingPaginationEnable xs) =
    req `setQuery` toQuery ("group.listing.pagination.enable", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen GroupListingLazyloadingEnable where
  applyOptionalParam req (GroupListingLazyloadingEnable xs) =
    req `setQuery` toQuery ("group.listing.lazyloading.enable", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen PageSize where
  applyOptionalParam req (PageSize xs) =
    req `setQuery` toQuery ("page.size", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialGroupClientImplCommunityGroupCollectionComponen MimePlainText


-- *** comAdobeCqSocialGroupImplGroupServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.group.impl.GroupServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialGroupImplGroupServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialGroupImplGroupServiceImpl MimeNoContent ComAdobeCqSocialGroupImplGroupServiceImplInfo accept
comAdobeCqSocialGroupImplGroupServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.group.impl.GroupServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialGroupImplGroupServiceImpl  
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl MaxWaitTime where
  applyOptionalParam req (MaxWaitTime xs) =
    req `setQuery` toQuery ("maxWaitTime", Just xs)
instance HasOptionalParam ComAdobeCqSocialGroupImplGroupServiceImpl MinWaitBetweenRetries where
  applyOptionalParam req (MinWaitBetweenRetries xs) =
    req `setQuery` toQuery ("minWaitBetweenRetries", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialGroupImplGroupServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialGroupImplGroupServiceImpl MimePlainText


-- *** comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl MimeNoContent ComAdobeCqSocialHandlebarsGuavaTemplateCacheImplInfo accept
comAdobeCqSocialHandlebarsGuavaTemplateCacheImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.handlebars.GuavaTemplateCacheImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl  
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl ParameterGuavaCacheEnabled where
  applyOptionalParam req (ParameterGuavaCacheEnabled xs) =
    req `setQuery` toQuery ("parameter.guava.cache.enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl ParameterGuavaCacheParams where
  applyOptionalParam req (ParameterGuavaCacheParams xs) =
    req `setQuery` toQuery ("parameter.guava.cache.params", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl ParameterGuavaCacheReload where
  applyOptionalParam req (ParameterGuavaCacheReload xs) =
    req `setQuery` toQuery ("parameter.guava.cache.reload", Just xs)
instance HasOptionalParam ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialHandlebarsGuavaTemplateCacheImpl MimePlainText


-- *** comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS MimeNoContent ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsSInfo accept
comAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ideation.client.endpoints.impl.IdeationOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS  
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialIdeationClientEndpointsImplIdeationOperationsS MimePlainText


-- *** comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer MimeNoContent ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSerInfo accept
comAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.journal.client.endpoints.impl.JournalOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer  
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialJournalClientEndpointsImplJournalOperationsSer MimePlainText


-- *** comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile MimeNoContent ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfileInfo accept
comAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberGroupProfileOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile  
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialMembersEndpointsImplCommunityMemberGroupProfile MimePlainText


-- *** comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO MimeNoContent ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileOInfo accept
comAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.members.endpoints.impl.CommunityMemberUserProfileOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO  
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialMembersEndpointsImplCommunityMemberUserProfileO MimePlainText


-- *** comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF MimeNoContent ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentFInfo accept
comAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.members.impl.CommunityMemberGroupProfileComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF  
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF EveryoneLimit where
  applyOptionalParam req (EveryoneLimit xs) =
    req `setQuery` toQuery ("everyoneLimit", Just xs)
instance HasOptionalParam ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialMembersImplCommunityMemberGroupProfileComponentF MimePlainText


-- *** comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MimeNoContent ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperationInfo accept
comAdobeCqSocialMessagingClientEndpointsImplMessagingOperation  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.messaging.client.endpoints.impl.MessagingOperationsServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation  
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MessageProperties where
  applyOptionalParam req (MessageProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("message.properties", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MessageBoxSizeLimit where
  applyOptionalParam req (MessageBoxSizeLimit xs) =
    req `setQuery` toQuery ("messageBoxSizeLimit", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MessageCountLimit where
  applyOptionalParam req (MessageCountLimit xs) =
    req `setQuery` toQuery ("messageCountLimit", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation NotifyFailure where
  applyOptionalParam req (NotifyFailure xs) =
    req `setQuery` toQuery ("notifyFailure", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation FailureMessageFrom where
  applyOptionalParam req (FailureMessageFrom xs) =
    req `setQuery` toQuery ("failureMessageFrom", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation FailureTemplatePath where
  applyOptionalParam req (FailureTemplatePath xs) =
    req `setQuery` toQuery ("failureTemplatePath", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MaxRetries where
  applyOptionalParam req (MaxRetries xs) =
    req `setQuery` toQuery ("maxRetries", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MinWaitBetweenRetries where
  applyOptionalParam req (MinWaitBetweenRetries xs) =
    req `setQuery` toQuery ("minWaitBetweenRetries", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation CountUpdatePoolSize where
  applyOptionalParam req (CountUpdatePoolSize xs) =
    req `setQuery` toQuery ("countUpdatePoolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation InboxPath where
  applyOptionalParam req (InboxPath xs) =
    req `setQuery` toQuery ("inbox.path", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation SentitemsPath where
  applyOptionalParam req (SentitemsPath xs) =
    req `setQuery` toQuery ("sentitems.path", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation SupportAttachments where
  applyOptionalParam req (SupportAttachments xs) =
    req `setQuery` toQuery ("supportAttachments", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation SupportGroupMessaging where
  applyOptionalParam req (SupportGroupMessaging xs) =
    req `setQuery` toQuery ("supportGroupMessaging", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MaxTotalRecipients where
  applyOptionalParam req (MaxTotalRecipients xs) =
    req `setQuery` toQuery ("maxTotalRecipients", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation BatchSize where
  applyOptionalParam req (BatchSize xs) =
    req `setQuery` toQuery ("batchSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MaxTotalAttachmentSize where
  applyOptionalParam req (MaxTotalAttachmentSize xs) =
    req `setQuery` toQuery ("maxTotalAttachmentSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation AllowedAttachmentTypes where
  applyOptionalParam req (AllowedAttachmentTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowedAttachmentTypes", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation ServiceSelector where
  applyOptionalParam req (ServiceSelector xs) =
    req `setQuery` toQuery ("serviceSelector", Just xs)
instance HasOptionalParam ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialMessagingClientEndpointsImplMessagingOperation MimePlainText


-- *** comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen MimeNoContent ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponenInfo accept
comAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.FilterGroupSocialComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen  
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen ResourceTypeFilters where
  applyOptionalParam req (ResourceTypeFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("resourceType.filters", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialModerationDashboardApiFilterGroupSocialComponen MimePlainText


-- *** comAdobeCqSocialModerationDashboardApiModerationDashboardSocial

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialModerationDashboardApiModerationDashboardSocial 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial MimeNoContent ComAdobeCqSocialModerationDashboardApiModerationDashboardSocialInfo accept
comAdobeCqSocialModerationDashboardApiModerationDashboardSocial  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.ModerationDashboardSocialComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial  
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialModerationDashboardApiModerationDashboardSocial MimePlainText


-- *** comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen MimeNoContent ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponenInfo accept
comAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.api.UserDetailsSocialComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen  
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialModerationDashboardApiUserDetailsSocialComponen MimePlainText


-- *** comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci MimeNoContent ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSociInfo accept
comAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.moderation.dashboard.internal.impl.FilterGroupSocialComponentFactoryV2"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci  
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci ResourceTypeFilters where
  applyOptionalParam req (ResourceTypeFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("resourceType.filters", Just xs)
instance HasOptionalParam ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialModerationDashboardInternalImplFilterGroupSoci MimePlainText


-- *** comAdobeCqSocialNotificationsImplMentionsRouter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.notifications.impl.MentionsRouter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialNotificationsImplMentionsRouter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialNotificationsImplMentionsRouter MimeNoContent ComAdobeCqSocialNotificationsImplMentionsRouterInfo accept
comAdobeCqSocialNotificationsImplMentionsRouter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.MentionsRouter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialNotificationsImplMentionsRouter  
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplMentionsRouter EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialNotificationsImplMentionsRouter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialNotificationsImplMentionsRouter MimePlainText


-- *** comAdobeCqSocialNotificationsImplNotificationManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.notifications.impl.NotificationManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialNotificationsImplNotificationManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialNotificationsImplNotificationManagerImpl MimeNoContent ComAdobeCqSocialNotificationsImplNotificationManagerImplInfo accept
comAdobeCqSocialNotificationsImplNotificationManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialNotificationsImplNotificationManagerImpl  
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationManagerImpl MaxUnreadNotificationCount where
  applyOptionalParam req (MaxUnreadNotificationCount xs) =
    req `setQuery` toQuery ("max.unread.notification.count", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialNotificationsImplNotificationManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialNotificationsImplNotificationManagerImpl MimePlainText


-- *** comAdobeCqSocialNotificationsImplNotificationsRouter

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.notifications.impl.NotificationsRouter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialNotificationsImplNotificationsRouter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialNotificationsImplNotificationsRouter MimeNoContent ComAdobeCqSocialNotificationsImplNotificationsRouterInfo accept
comAdobeCqSocialNotificationsImplNotificationsRouter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.notifications.impl.NotificationsRouter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialNotificationsImplNotificationsRouter  
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialNotificationsImplNotificationsRouter EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialNotificationsImplNotificationsRouter MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialNotificationsImplNotificationsRouter MimePlainText


-- *** comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic MimeNoContent ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServicInfo accept
comAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.qna.client.endpoints.impl.QnaForumOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic  
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialQnaClientEndpointsImplQnaForumOperationsServic MimePlainText


-- *** comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI MimeNoContent ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportIInfo accept
comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportImporterServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI  
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI CqSocialReportingAnalyticsPollingImporterInterval where
  applyOptionalParam req (CqSocialReportingAnalyticsPollingImporterInterval xs) =
    req `setQuery` toQuery ("cq.social.reporting.analytics.polling.importer.interval", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI CqSocialReportingAnalyticsPollingImporterPageSize where
  applyOptionalParam req (CqSocialReportingAnalyticsPollingImporterPageSize xs) =
    req `setQuery` toQuery ("cq.social.reporting.analytics.polling.importer.pageSize", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportI MimePlainText


-- *** comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM MimeNoContent ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportMInfo accept
comAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.AnalyticsReportManagementServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM  
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM ReportFetchDelay where
  applyOptionalParam req (ReportFetchDelay xs) =
    req `setQuery` toQuery ("report.fetch.delay", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplAnalyticsReportM MimePlainText


-- *** comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS MimeNoContent ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportSInfo accept
comAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.reporting.analytics.services.impl.SiteTrendReportSocialComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS  
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS CqSocialConsoleAnalyticsSitesMapping where
  applyOptionalParam req (CqSocialConsoleAnalyticsSitesMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.social.console.analytics.sites.mapping", Just xs)
instance HasOptionalParam ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialReportingAnalyticsServicesImplSiteTrendReportS MimePlainText


-- *** comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi MimeNoContent ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServiInfo accept
comAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.review.client.endpoints.impl.ReviewOperationsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi  
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi AttachmentTypeBlacklist where
  applyOptionalParam req (AttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("attachmentTypeBlacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialReviewClientEndpointsImplReviewOperationsServi MimePlainText


-- *** comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet MimeNoContent ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServletInfo accept
comAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.scf.core.operations.impl.SocialOperationsServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet  
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet SlingServletExtensions where
  applyOptionalParam req (SlingServletExtensions xs) =
    req `setQuery` toQuery ("sling.servlet.extensions", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialScfCoreOperationsImplSocialOperationsServlet MimePlainText


-- *** comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet MimeNoContent ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServletInfo accept
comAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.scf.endpoints.impl.DefaultSocialGetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet  
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet SlingServletSelectors[Text] where
  applyOptionalParam req (SlingServletSelectors[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet SlingServletExtensions where
  applyOptionalParam req (SlingServletExtensions xs) =
    req `setQuery` toQuery ("sling.servlet.extensions", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialScfEndpointsImplDefaultSocialGetServlet MimePlainText


-- *** comAdobeCqSocialScoringImplScoringEventListener

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.scoring.impl.ScoringEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialScoringImplScoringEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialScoringImplScoringEventListener MimeNoContent ComAdobeCqSocialScoringImplScoringEventListenerInfo accept
comAdobeCqSocialScoringImplScoringEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.scoring.impl.ScoringEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialScoringImplScoringEventListener  
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialScoringImplScoringEventListener EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialScoringImplScoringEventListener MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialScoringImplScoringEventListener MimePlainText


-- *** comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl MimeNoContent ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImplInfo accept
comAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.serviceusers.internal.impl.ServiceUserWrapperImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl  
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl EnableFallback where
  applyOptionalParam req (EnableFallback xs) =
    req `setQuery` toQuery ("enableFallback", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialServiceusersInternalImplServiceUserWrapperImpl MimePlainText


-- *** comAdobeCqSocialSiteEndpointsImplSiteOperationService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.site.endpoints.impl.SiteOperationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSiteEndpointsImplSiteOperationService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSiteEndpointsImplSiteOperationService MimeNoContent ComAdobeCqSocialSiteEndpointsImplSiteOperationServiceInfo accept
comAdobeCqSocialSiteEndpointsImplSiteOperationService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.site.endpoints.impl.SiteOperationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSiteEndpointsImplSiteOperationService  
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService FieldWhitelist where
  applyOptionalParam req (FieldWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("fieldWhitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService SitePathFilters where
  applyOptionalParam req (SitePathFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("sitePathFilters", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteEndpointsImplSiteOperationService SitePackageGroup where
  applyOptionalParam req (SitePackageGroup xs) =
    req `setQuery` toQuery ("sitePackageGroup", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSiteEndpointsImplSiteOperationService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSiteEndpointsImplSiteOperationService MimePlainText


-- *** comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm MimeNoContent ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceImInfo accept
comAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.site.impl.AnalyticsComponentConfigurationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm  
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm CqSocialConsoleAnalyticsComponents where
  applyOptionalParam req (CqSocialConsoleAnalyticsComponents xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.social.console.analytics.components", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSiteImplAnalyticsComponentConfigurationServiceIm MimePlainText


-- *** comAdobeCqSocialSiteImplSiteConfiguratorImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.site.impl.SiteConfiguratorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSiteImplSiteConfiguratorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSiteImplSiteConfiguratorImpl MimeNoContent ComAdobeCqSocialSiteImplSiteConfiguratorImplInfo accept
comAdobeCqSocialSiteImplSiteConfiguratorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.site.impl.SiteConfiguratorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSiteImplSiteConfiguratorImpl  
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSiteImplSiteConfiguratorImpl ComponentsUsingTags where
  applyOptionalParam req (ComponentsUsingTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("componentsUsingTags", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSiteImplSiteConfiguratorImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSiteImplSiteConfiguratorImpl MimePlainText


-- *** comAdobeCqSocialSrpImplSocialSolrConnector

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.srp.impl.SocialSolrConnector@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSrpImplSocialSolrConnector 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSrpImplSocialSolrConnector MimeNoContent ComAdobeCqSocialSrpImplSocialSolrConnectorInfo accept
comAdobeCqSocialSrpImplSocialSolrConnector  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.srp.impl.SocialSolrConnector"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSrpImplSocialSolrConnector  
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSrpImplSocialSolrConnector SrpType where
  applyOptionalParam req (SrpType xs) =
    req `setQuery` toQuery ("srp.type", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSrpImplSocialSolrConnector MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSrpImplSocialSolrConnector MimePlainText


-- *** comAdobeCqSocialSyncImplDiffChangesObserver

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.sync.impl.DiffChangesObserver@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSyncImplDiffChangesObserver 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSyncImplDiffChangesObserver MimeNoContent ComAdobeCqSocialSyncImplDiffChangesObserverInfo accept
comAdobeCqSocialSyncImplDiffChangesObserver  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.sync.impl.DiffChangesObserver"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSyncImplDiffChangesObserver  
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver AgentName where
  applyOptionalParam req (AgentName xs) =
    req `setQuery` toQuery ("agentName", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver DiffPath where
  applyOptionalParam req (DiffPath xs) =
    req `setQuery` toQuery ("diffPath", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplDiffChangesObserver PropertyNames where
  applyOptionalParam req (PropertyNames xs) =
    req `setQuery` toQuery ("propertyNames", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSyncImplDiffChangesObserver MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSyncImplDiffChangesObserver MimePlainText


-- *** comAdobeCqSocialSyncImplGroupSyncListenerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSyncImplGroupSyncListenerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSyncImplGroupSyncListenerImpl MimeNoContent ComAdobeCqSocialSyncImplGroupSyncListenerImplInfo accept
comAdobeCqSocialSyncImplGroupSyncListenerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.sync.impl.GroupSyncListenerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSyncImplGroupSyncListenerImpl  
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Nodetypes where
  applyOptionalParam req (Nodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("nodetypes", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Ignorableprops where
  applyOptionalParam req (Ignorableprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignorableprops", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Ignorablenodes where
  applyOptionalParam req (Ignorablenodes xs) =
    req `setQuery` toQuery ("ignorablenodes", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplGroupSyncListenerImpl Distfolders where
  applyOptionalParam req (Distfolders xs) =
    req `setQuery` toQuery ("distfolders", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSyncImplGroupSyncListenerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSyncImplGroupSyncListenerImpl MimePlainText


-- *** comAdobeCqSocialSyncImplPublisherSyncServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSyncImplPublisherSyncServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSyncImplPublisherSyncServiceImpl MimeNoContent ComAdobeCqSocialSyncImplPublisherSyncServiceImplInfo accept
comAdobeCqSocialSyncImplPublisherSyncServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.sync.impl.PublisherSyncServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSyncImplPublisherSyncServiceImpl  
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplPublisherSyncServiceImpl ActiveRunModes where
  applyOptionalParam req (ActiveRunModes xs) =
    req `setQuery` toQueryColl MultiParamArray ("activeRunModes", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSyncImplPublisherSyncServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSyncImplPublisherSyncServiceImpl MimePlainText


-- *** comAdobeCqSocialSyncImplUserSyncListenerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.sync.impl.UserSyncListenerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialSyncImplUserSyncListenerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialSyncImplUserSyncListenerImpl MimeNoContent ComAdobeCqSocialSyncImplUserSyncListenerImplInfo accept
comAdobeCqSocialSyncImplUserSyncListenerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.sync.impl.UserSyncListenerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialSyncImplUserSyncListenerImpl  
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Nodetypes where
  applyOptionalParam req (Nodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("nodetypes", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Ignorableprops where
  applyOptionalParam req (Ignorableprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignorableprops", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Ignorablenodes[Text] where
  applyOptionalParam req (Ignorablenodes[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignorablenodes", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeCqSocialSyncImplUserSyncListenerImpl Distfolders[Text] where
  applyOptionalParam req (Distfolders[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("distfolders", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialSyncImplUserSyncListenerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialSyncImplUserSyncListenerImpl MimePlainText


-- *** comAdobeCqSocialTranslationImplTranslationServiceConfigManager

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialTranslationImplTranslationServiceConfigManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialTranslationImplTranslationServiceConfigManager MimeNoContent ComAdobeCqSocialTranslationImplTranslationServiceConfigManagerInfo accept
comAdobeCqSocialTranslationImplTranslationServiceConfigManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.translation.impl.TranslationServiceConfigManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialTranslationImplTranslationServiceConfigManager  
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateLanguage where
  applyOptionalParam req (TranslateLanguage xs) =
    req `setQuery` toQuery ("translate.language", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateDisplay where
  applyOptionalParam req (TranslateDisplay xs) =
    req `setQuery` toQuery ("translate.display", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateAttribution where
  applyOptionalParam req (TranslateAttribution xs) =
    req `setQuery` toQuery ("translate.attribution", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateCaching where
  applyOptionalParam req (TranslateCaching xs) =
    req `setQuery` toQuery ("translate.caching", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateSmartRendering where
  applyOptionalParam req (TranslateSmartRendering xs) =
    req `setQuery` toQuery ("translate.smart.rendering", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateCachingDuration where
  applyOptionalParam req (TranslateCachingDuration xs) =
    req `setQuery` toQuery ("translate.caching.duration", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateSessionSaveInterval where
  applyOptionalParam req (TranslateSessionSaveInterval xs) =
    req `setQuery` toQuery ("translate.session.save.interval", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplTranslationServiceConfigManager TranslateSessionSaveBatchLimit where
  applyOptionalParam req (TranslateSessionSaveBatchLimit xs) =
    req `setQuery` toQuery ("translate.session.save.batchLimit", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialTranslationImplTranslationServiceConfigManager MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialTranslationImplTranslationServiceConfigManager MimePlainText


-- *** comAdobeCqSocialTranslationImplUGCLanguageDetector

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.translation.impl.UGCLanguageDetector@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialTranslationImplUGCLanguageDetector 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialTranslationImplUGCLanguageDetector MimeNoContent ComAdobeCqSocialTranslationImplUGCLanguageDetectorInfo accept
comAdobeCqSocialTranslationImplUGCLanguageDetector  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.translation.impl.UGCLanguageDetector"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialTranslationImplUGCLanguageDetector  
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector EventTopics where
  applyOptionalParam req (EventTopics xs) =
    req `setQuery` toQuery ("event.topics", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector TranslateListenerType where
  applyOptionalParam req (TranslateListenerType xs) =
    req `setQuery` toQueryColl MultiParamArray ("translate.listener.type", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector TranslatePropertyList where
  applyOptionalParam req (TranslatePropertyList xs) =
    req `setQuery` toQueryColl MultiParamArray ("translate.property.list", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector PoolSize where
  applyOptionalParam req (PoolSize xs) =
    req `setQuery` toQuery ("poolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector MaxPoolSize where
  applyOptionalParam req (MaxPoolSize xs) =
    req `setQuery` toQuery ("maxPoolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector QueueSize where
  applyOptionalParam req (QueueSize xs) =
    req `setQuery` toQuery ("queueSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialTranslationImplUGCLanguageDetector KeepAliveTime where
  applyOptionalParam req (KeepAliveTime xs) =
    req `setQuery` toQuery ("keepAliveTime", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialTranslationImplUGCLanguageDetector MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialTranslationImplUGCLanguageDetector MimePlainText


-- *** comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl MimeNoContent ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImplInfo accept
comAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.dispatcher.impl.FlushServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl ThreadPoolSize where
  applyOptionalParam req (ThreadPoolSize xs) =
    req `setQuery` toQuery ("threadPoolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl DelayTime where
  applyOptionalParam req (DelayTime xs) =
    req `setQuery` toQuery ("delayTime", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl WorkerSleepTime where
  applyOptionalParam req (WorkerSleepTime xs) =
    req `setQuery` toQuery ("workerSleepTime", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseDispatcherImplFlushServiceImpl MimePlainText


-- *** comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl MimeNoContent ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImplInfo accept
comAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.AysncReverseReplicatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl PoolSize where
  applyOptionalParam req (PoolSize xs) =
    req `setQuery` toQuery ("poolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl MaxPoolSize where
  applyOptionalParam req (MaxPoolSize xs) =
    req `setQuery` toQuery ("maxPoolSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl QueueSize where
  applyOptionalParam req (QueueSize xs) =
    req `setQuery` toQuery ("queueSize", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl KeepAliveTime where
  applyOptionalParam req (KeepAliveTime xs) =
    req `setQuery` toQuery ("keepAliveTime", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseImplAysncReverseReplicatorImpl MimePlainText


-- *** comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl MimeNoContent ComAdobeCqSocialUgcbaseImplPublisherConfigurationImplInfo accept
comAdobeCqSocialUgcbaseImplPublisherConfigurationImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.PublisherConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl IsPrimaryPublisher where
  applyOptionalParam req (IsPrimaryPublisher xs) =
    req `setQuery` toQuery ("isPrimaryPublisher", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseImplPublisherConfigurationImpl MimePlainText


-- *** comAdobeCqSocialUgcbaseImplSocialUtilsImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseImplSocialUtilsImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseImplSocialUtilsImpl MimeNoContent ComAdobeCqSocialUgcbaseImplSocialUtilsImplInfo accept
comAdobeCqSocialUgcbaseImplSocialUtilsImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.impl.SocialUtilsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseImplSocialUtilsImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseImplSocialUtilsImpl LegacyCloudUgcPathMapping where
  applyOptionalParam req (LegacyCloudUgcPathMapping xs) =
    req `setQuery` toQuery ("legacyCloudUGCPathMapping", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseImplSocialUtilsImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseImplSocialUtilsImpl MimePlainText


-- *** comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl MimeNoContent ComAdobeCqSocialUgcbaseModerationImplAutoModerationImplInfo accept
comAdobeCqSocialUgcbaseModerationImplAutoModerationImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.AutoModerationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl AutomoderationSequence where
  applyOptionalParam req (AutomoderationSequence xs) =
    req `setQuery` toQueryColl MultiParamArray ("automoderation.sequence", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl AutomoderationOnfailurestop where
  applyOptionalParam req (AutomoderationOnfailurestop xs) =
    req `setQuery` toQuery ("automoderation.onfailurestop", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseModerationImplAutoModerationImpl MimePlainText


-- *** comAdobeCqSocialUgcbaseModerationImplSentimentProcess

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseModerationImplSentimentProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseModerationImplSentimentProcess MimeNoContent ComAdobeCqSocialUgcbaseModerationImplSentimentProcessInfo accept
comAdobeCqSocialUgcbaseModerationImplSentimentProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.moderation.impl.SentimentProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseModerationImplSentimentProcess  
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess WatchwordsPositive where
  applyOptionalParam req (WatchwordsPositive xs) =
    req `setQuery` toQueryColl MultiParamArray ("watchwords.positive", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess WatchwordsNegative where
  applyOptionalParam req (WatchwordsNegative xs) =
    req `setQuery` toQueryColl MultiParamArray ("watchwords.negative", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess WatchwordsPath where
  applyOptionalParam req (WatchwordsPath xs) =
    req `setQuery` toQuery ("watchwords.path", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseModerationImplSentimentProcess SentimentPath where
  applyOptionalParam req (SentimentPath xs) =
    req `setQuery` toQuery ("sentiment.path", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseModerationImplSentimentProcess MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseModerationImplSentimentProcess MimePlainText


-- *** comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli MimeNoContent ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackliInfo accept
comAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.DefaultAttachmentTypeBlacklistService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli  
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli DefaultAttachmentTypeBlacklist where
  applyOptionalParam req (DefaultAttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("default.attachment.type.blacklist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli BaselineAttachmentTypeBlacklist where
  applyOptionalParam req (BaselineAttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("baseline.attachment.type.blacklist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseSecurityImplDefaultAttachmentTypeBlackli MimePlainText


-- *** comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl MimeNoContent ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImplInfo accept
comAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.ugcbase.security.impl.SaferSlingPostValidatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl  
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl ParameterWhitelist where
  applyOptionalParam req (ParameterWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("parameter.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl ParameterWhitelistPrefixes where
  applyOptionalParam req (ParameterWhitelistPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("parameter.whitelist.prefixes", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl BinaryParameterWhitelist where
  applyOptionalParam req (BinaryParameterWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("binary.parameter.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl ModifierWhitelist where
  applyOptionalParam req (ModifierWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("modifier.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl OperationWhitelist where
  applyOptionalParam req (OperationWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("operation.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl OperationWhitelistPrefixes where
  applyOptionalParam req (OperationWhitelistPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("operation.whitelist.prefixes", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl TypehintWhitelist where
  applyOptionalParam req (TypehintWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("typehint.whitelist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl ResourcetypeWhitelist where
  applyOptionalParam req (ResourcetypeWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("resourcetype.whitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUgcbaseSecurityImplSaferSlingPostValidatorImpl MimePlainText


-- *** comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet MimeNoContent ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServletInfo accept
comAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.user.endpoints.impl.UsersGroupFromPublishServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet  
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet SlingServletExtensions where
  applyOptionalParam req (SlingServletExtensions xs) =
    req `setQuery` toQuery ("sling.servlet.extensions", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet SlingServletPaths where
  applyOptionalParam req (SlingServletPaths xs) =
    req `setQuery` toQuery ("sling.servlet.paths", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUserEndpointsImplUsersGroupFromPublishServlet MimePlainText


-- *** comAdobeCqSocialUserImplTransportHttpToPublisher

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.social.user.impl.transport.HttpToPublisher@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqSocialUserImplTransportHttpToPublisher 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqSocialUserImplTransportHttpToPublisher MimeNoContent ComAdobeCqSocialUserImplTransportHttpToPublisherInfo accept
comAdobeCqSocialUserImplTransportHttpToPublisher  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.social.user.impl.transport.HttpToPublisher"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqSocialUserImplTransportHttpToPublisher  
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher Enable where
  applyOptionalParam req (Enable xs) =
    req `setQuery` toQuery ("enable", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher AgentConfiguration where
  applyOptionalParam req (AgentConfiguration xs) =
    req `setQuery` toQueryColl MultiParamArray ("agent.configuration", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher ContextPath where
  applyOptionalParam req (ContextPath xs) =
    req `setQuery` toQuery ("context.path", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher DisabledCipherSuites where
  applyOptionalParam req (DisabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("disabled.cipher.suites", Just xs)
instance HasOptionalParam ComAdobeCqSocialUserImplTransportHttpToPublisher EnabledCipherSuites where
  applyOptionalParam req (EnabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("enabled.cipher.suites", Just xs)

-- | @application/json@
instance Produces ComAdobeCqSocialUserImplTransportHttpToPublisher MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqSocialUserImplTransportHttpToPublisher MimePlainText


-- *** comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact MimeNoContent ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFactInfo accept
comAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.ui.wcm.commons.internal.servlets.rte.RTEFilterServletFactory.amended"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact  
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact ResourceTypes where
  applyOptionalParam req (ResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.types", Just xs)

-- | @application/json@
instance Produces ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqUiWcmCommonsInternalServletsRteRTEFilterServletFact MimePlainText


-- *** comAdobeCqUpgradesCleanupImplUpgradeContentCleanup

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqUpgradesCleanupImplUpgradeContentCleanup 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup MimeNoContent ComAdobeCqUpgradesCleanupImplUpgradeContentCleanupInfo accept
comAdobeCqUpgradesCleanupImplUpgradeContentCleanup  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeContentCleanup"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup  
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup DeletePathRegexps where
  applyOptionalParam req (DeletePathRegexps xs) =
    req `setQuery` toQueryColl MultiParamArray ("delete.path.regexps", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup DeleteSql2Query where
  applyOptionalParam req (DeleteSql2Query xs) =
    req `setQuery` toQuery ("delete.sql2.query", Just xs)

-- | @application/json@
instance Produces ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqUpgradesCleanupImplUpgradeContentCleanup MimePlainText


-- *** comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup MimeNoContent ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanupInfo accept
comAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.upgrades.cleanup.impl.UpgradeInstallFolderCleanup"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup  
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup DeleteNameRegexps where
  applyOptionalParam req (DeleteNameRegexps xs) =
    req `setQuery` toQueryColl MultiParamArray ("delete.name.regexps", Just xs)

-- | @application/json@
instance Produces ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqUpgradesCleanupImplUpgradeInstallFolderCleanup MimePlainText


-- *** comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService MimeNoContent ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderServiceInfo accept
comAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncDeleteConfigProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService  
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService Threshold where
  applyOptionalParam req (Threshold xs) =
    req `setQuery` toQuery ("threshold", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService JobTopicName where
  applyOptionalParam req (JobTopicName xs) =
    req `setQuery` toQuery ("jobTopicName", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService EmailEnabled where
  applyOptionalParam req (EmailEnabled xs) =
    req `setQuery` toQuery ("emailEnabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncDeleteConfigProviderService MimePlainText


-- *** comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask MimeNoContent ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTaskInfo accept
comAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncJobCleanUpTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask  
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask JobPurgeThreshold where
  applyOptionalParam req (JobPurgeThreshold xs) =
    req `setQuery` toQuery ("job.purge.threshold", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask JobPurgeMaxJobs where
  applyOptionalParam req (JobPurgeMaxJobs xs) =
    req `setQuery` toQuery ("job.purge.max.jobs", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncJobCleanUpTask MimePlainText


-- *** comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService MimeNoContent ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderServiceInfo accept
comAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncMoveConfigProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService  
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService Threshold where
  applyOptionalParam req (Threshold xs) =
    req `setQuery` toQuery ("threshold", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService JobTopicName where
  applyOptionalParam req (JobTopicName xs) =
    req `setQuery` toQuery ("jobTopicName", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService EmailEnabled where
  applyOptionalParam req (EmailEnabled xs) =
    req `setQuery` toQuery ("emailEnabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncMoveConfigProviderService MimePlainText


-- *** comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService MimeNoContent ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderServiceInfo accept
comAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.jobs.async.impl.AsyncPageMoveConfigProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService  
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService Threshold where
  applyOptionalParam req (Threshold xs) =
    req `setQuery` toQuery ("threshold", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService JobTopicName where
  applyOptionalParam req (JobTopicName xs) =
    req `setQuery` toQuery ("jobTopicName", Just xs)
instance HasOptionalParam ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService EmailEnabled where
  applyOptionalParam req (EmailEnabled xs) =
    req `setQuery` toQuery ("emailEnabled", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmJobsAsyncImplAsyncPageMoveConfigProviderService MimePlainText


-- *** comAdobeCqWcmLaunchesImplLaunchesEventHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmLaunchesImplLaunchesEventHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmLaunchesImplLaunchesEventHandler MimeNoContent ComAdobeCqWcmLaunchesImplLaunchesEventHandlerInfo accept
comAdobeCqWcmLaunchesImplLaunchesEventHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.launches.impl.LaunchesEventHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmLaunchesImplLaunchesEventHandler  
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler LaunchesEventhandlerThreadpoolMaxsize where
  applyOptionalParam req (LaunchesEventhandlerThreadpoolMaxsize xs) =
    req `setQuery` toQuery ("launches.eventhandler.threadpool.maxsize", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler LaunchesEventhandlerThreadpoolPriority where
  applyOptionalParam req (LaunchesEventhandlerThreadpoolPriority xs) =
    req `setQuery` toQuery ("launches.eventhandler.threadpool.priority", Just xs)
instance HasOptionalParam ComAdobeCqWcmLaunchesImplLaunchesEventHandler LaunchesEventhandlerUpdatelastmodification where
  applyOptionalParam req (LaunchesEventhandlerUpdatelastmodification xs) =
    req `setQuery` toQuery ("launches.eventhandler.updatelastmodification", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmLaunchesImplLaunchesEventHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmLaunchesImplLaunchesEventHandler MimePlainText


-- *** comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator MimeNoContent ComAdobeCqWcmMobileQrcodeServletQRCodeImageGeneratorInfo accept
comAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.mobile.qrcode.servlet.QRCodeImageGenerator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator  
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator CqWcmQrcodeServletWhitelist where
  applyOptionalParam req (CqWcmQrcodeServletWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.qrcode.servlet.whitelist", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmMobileQrcodeServletQRCodeImageGenerator MimePlainText


-- *** comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl MimeNoContent ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImplInfo accept
comAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.style.internal.ComponentStyleInfoCacheImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl  
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl Size where
  applyOptionalParam req (Size xs) =
    req `setQuery` toQuery ("size", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmStyleInternalComponentStyleInfoCacheImpl MimePlainText


-- *** comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl MimeNoContent ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImplInfo accept
comAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.cq.wcm.translation.impl.TranslationPlatformConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl  
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl SyncTranslationStateSchedulingFormat where
  applyOptionalParam req (SyncTranslationStateSchedulingFormat xs) =
    req `setQuery` toQuery ("syncTranslationState.schedulingFormat", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl SchedulingRepeatTranslationSchedulingFormat where
  applyOptionalParam req (SchedulingRepeatTranslationSchedulingFormat xs) =
    req `setQuery` toQuery ("schedulingRepeatTranslation.schedulingFormat", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl SyncTranslationStateLockTimeoutInMinutes where
  applyOptionalParam req (SyncTranslationStateLockTimeoutInMinutes xs) =
    req `setQuery` toQuery ("syncTranslationState.lockTimeoutInMinutes", Just xs)
instance HasOptionalParam ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl ExportFormat where
  applyOptionalParam req (ExportFormat xs) =
    req `setQuery` toQuery ("export.format", Just xs)

-- | @application/json@
instance Produces ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeCqWcmTranslationImplTranslationPlatformConfigurationImpl MimePlainText


-- *** comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService

-- | @POST \/system\/console\/configMgr\/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService MimeNoContent ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigServiceInfo accept
comAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalDraftsandSubmissionConfigService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService  
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService PortalOutboxes where
  applyOptionalParam req (PortalOutboxes xs) =
    req `setQuery` toQueryColl MultiParamArray ("portal.outboxes", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService DraftDataService where
  applyOptionalParam req (DraftDataService xs) =
    req `setQuery` toQuery ("draft.data.service", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService DraftMetadataService where
  applyOptionalParam req (DraftMetadataService xs) =
    req `setQuery` toQuery ("draft.metadata.service", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService SubmitDataService where
  applyOptionalParam req (SubmitDataService xs) =
    req `setQuery` toQuery ("submit.data.service", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService SubmitMetadataService where
  applyOptionalParam req (SubmitMetadataService xs) =
    req `setQuery` toQuery ("submit.metadata.service", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService PendingSignDataService where
  applyOptionalParam req (PendingSignDataService xs) =
    req `setQuery` toQuery ("pendingSign.data.service", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService PendingSignMetadataService where
  applyOptionalParam req (PendingSignMetadataService xs) =
    req `setQuery` toQuery ("pendingSign.metadata.service", Just xs)

-- | @application/json@
instance Produces ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService MimeJSON
-- | @text/plain@
instance Produces ComAdobeFdFpConfigFormsPortalDraftsandSubmissionConfigService MimePlainText


-- *** comAdobeFdFpConfigFormsPortalSchedulerService

-- | @POST \/system\/console\/configMgr\/com.adobe.fd.fp.config.FormsPortalSchedulerService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeFdFpConfigFormsPortalSchedulerService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeFdFpConfigFormsPortalSchedulerService MimeNoContent ComAdobeFdFpConfigFormsPortalSchedulerServiceInfo accept
comAdobeFdFpConfigFormsPortalSchedulerService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.fd.fp.config.FormsPortalSchedulerService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeFdFpConfigFormsPortalSchedulerService  
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeFdFpConfigFormsPortalSchedulerService FormportalInterval where
  applyOptionalParam req (FormportalInterval xs) =
    req `setQuery` toQuery ("formportal.interval", Just xs)

-- | @application/json@
instance Produces ComAdobeFdFpConfigFormsPortalSchedulerService MimeJSON
-- | @text/plain@
instance Produces ComAdobeFdFpConfigFormsPortalSchedulerService MimePlainText


-- *** comAdobeFormsCommonServiceImplDefaultDataProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.forms.common.service.impl.DefaultDataProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeFormsCommonServiceImplDefaultDataProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeFormsCommonServiceImplDefaultDataProvider MimeNoContent ComAdobeFormsCommonServiceImplDefaultDataProviderInfo accept
comAdobeFormsCommonServiceImplDefaultDataProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.forms.common.service.impl.DefaultDataProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeFormsCommonServiceImplDefaultDataProvider  
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplDefaultDataProvider AlloweddataFileLocations where
  applyOptionalParam req (AlloweddataFileLocations xs) =
    req `setQuery` toQueryColl MultiParamArray ("alloweddataFileLocations", Just xs)

-- | @application/json@
instance Produces ComAdobeFormsCommonServiceImplDefaultDataProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeFormsCommonServiceImplDefaultDataProvider MimePlainText


-- *** comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp

-- | @POST \/system\/console\/configMgr\/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp MimeNoContent ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImpInfo accept
comAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.forms.common.service.impl.FormsCommonConfigurationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp  
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp TempStorageConfig where
  applyOptionalParam req (TempStorageConfig xs) =
    req `setQuery` toQuery ("tempStorageConfig", Just xs)

-- | @application/json@
instance Produces ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp MimeJSON
-- | @text/plain@
instance Produces ComAdobeFormsCommonServiceImplFormsCommonConfigurationServiceImp MimePlainText


-- *** comAdobeFormsCommonServletTempCleanUpTask

-- | @POST \/system\/console\/configMgr\/com.adobe.forms.common.servlet.TempCleanUpTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeFormsCommonServletTempCleanUpTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeFormsCommonServletTempCleanUpTask MimeNoContent ComAdobeFormsCommonServletTempCleanUpTaskInfo accept
comAdobeFormsCommonServletTempCleanUpTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.forms.common.servlet.TempCleanUpTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeFormsCommonServletTempCleanUpTask  
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask DurationForTemporaryStorage where
  applyOptionalParam req (DurationForTemporaryStorage xs) =
    req `setQuery` toQuery ("Duration for Temporary Storage", Just xs)
instance HasOptionalParam ComAdobeFormsCommonServletTempCleanUpTask DurationForAnonymousStorage where
  applyOptionalParam req (DurationForAnonymousStorage xs) =
    req `setQuery` toQuery ("Duration for Anonymous Storage", Just xs)

-- | @application/json@
instance Produces ComAdobeFormsCommonServletTempCleanUpTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeFormsCommonServletTempCleanUpTask MimePlainText


-- *** comAdobeGraniteAcpPlatformPlatformServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.acp.platform.PlatformServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAcpPlatformPlatformServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAcpPlatformPlatformServlet MimeNoContent ComAdobeGraniteAcpPlatformPlatformServletInfo accept
comAdobeGraniteAcpPlatformPlatformServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.acp.platform.PlatformServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAcpPlatformPlatformServlet  
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet QueryLimit where
  applyOptionalParam req (QueryLimit xs) =
    req `setQuery` toQuery ("query.limit", Just xs)
instance HasOptionalParam ComAdobeGraniteAcpPlatformPlatformServlet FileTypeExtensionMap where
  applyOptionalParam req (FileTypeExtensionMap xs) =
    req `setQuery` toQueryColl MultiParamArray ("file.type.extension.map", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAcpPlatformPlatformServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAcpPlatformPlatformServlet MimePlainText


-- *** comAdobeGraniteActivitystreamsImplActivityManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.activitystreams.impl.ActivityManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteActivitystreamsImplActivityManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteActivitystreamsImplActivityManagerImpl MimeNoContent ComAdobeGraniteActivitystreamsImplActivityManagerImplInfo accept
comAdobeGraniteActivitystreamsImplActivityManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.activitystreams.impl.ActivityManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteActivitystreamsImplActivityManagerImpl  
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl AggregateRelationships where
  applyOptionalParam req (AggregateRelationships xs) =
    req `setQuery` toQueryColl MultiParamArray ("aggregate.relationships", Just xs)
instance HasOptionalParam ComAdobeGraniteActivitystreamsImplActivityManagerImpl AggregateDescendVirtual where
  applyOptionalParam req (AggregateDescendVirtual xs) =
    req `setQuery` toQuery ("aggregate.descend.virtual", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteActivitystreamsImplActivityManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteActivitystreamsImplActivityManagerImpl MimePlainText


-- *** comAdobeGraniteAnalyzerBaseSystemStatusServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.analyzer.base.SystemStatusServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAnalyzerBaseSystemStatusServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAnalyzerBaseSystemStatusServlet MimeNoContent ComAdobeGraniteAnalyzerBaseSystemStatusServletInfo accept
comAdobeGraniteAnalyzerBaseSystemStatusServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.analyzer.base.SystemStatusServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAnalyzerBaseSystemStatusServlet  
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerBaseSystemStatusServlet Disabled where
  applyOptionalParam req (Disabled xs) =
    req `setQuery` toQuery ("disabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAnalyzerBaseSystemStatusServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAnalyzerBaseSystemStatusServlet MimePlainText


-- *** comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet MimeNoContent ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServletInfo accept
comAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.analyzer.scripts.compile.AllScriptsCompilerServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet  
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet Disabled where
  applyOptionalParam req (Disabled xs) =
    req `setQuery` toQuery ("disabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAnalyzerScriptsCompileAllScriptsCompilerServlet MimePlainText


-- *** comAdobeGraniteApicontrollerFilterResolverHookFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.apicontroller.FilterResolverHookFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteApicontrollerFilterResolverHookFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteApicontrollerFilterResolverHookFactory MimeNoContent ComAdobeGraniteApicontrollerFilterResolverHookFactoryInfo accept
comAdobeGraniteApicontrollerFilterResolverHookFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.apicontroller.FilterResolverHookFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteApicontrollerFilterResolverHookFactory  
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCdnCdnRewriter where
  applyOptionalParam req (ComAdobeCqCdnCdnRewriter xs) =
    req `setQuery` toQuery ("com.adobe.cq.cdn.cdn-rewriter", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCloudConfigComponents where
  applyOptionalParam req (ComAdobeCqCloudConfigComponents xs) =
    req `setQuery` toQuery ("com.adobe.cq.cloud-config.components", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCloudConfigCore where
  applyOptionalParam req (ComAdobeCqCloudConfigCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.cloud-config.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCloudConfigUi where
  applyOptionalParam req (ComAdobeCqCloudConfigUi xs) =
    req `setQuery` toQuery ("com.adobe.cq.cloud-config.ui", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqComAdobeCqEditor where
  applyOptionalParam req (ComAdobeCqComAdobeCqEditor xs) =
    req `setQuery` toQuery ("com.adobe.cq.com.adobe.cq.editor", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqComAdobeCqProjectsCore where
  applyOptionalParam req (ComAdobeCqComAdobeCqProjectsCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.com.adobe.cq.projects.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqComAdobeCqProjectsWcmCore where
  applyOptionalParam req (ComAdobeCqComAdobeCqProjectsWcmCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.com.adobe.cq.projects.wcm.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqComAdobeCqUiCommons where
  applyOptionalParam req (ComAdobeCqComAdobeCqUiCommons xs) =
    req `setQuery` toQuery ("com.adobe.cq.com.adobe.cq.ui.commons", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqComAdobeCqWcmStyle where
  applyOptionalParam req (ComAdobeCqComAdobeCqWcmStyle xs) =
    req `setQuery` toQuery ("com.adobe.cq.com.adobe.cq.wcm.style", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqActivitymapIntegration where
  applyOptionalParam req (ComAdobeCqCqActivitymapIntegration xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-activitymap-integration", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqContexthubCommons where
  applyOptionalParam req (ComAdobeCqCqContexthubCommons xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-contexthub-commons", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqDtm where
  applyOptionalParam req (ComAdobeCqCqDtm xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-dtm", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqHealthcheck where
  applyOptionalParam req (ComAdobeCqCqHealthcheck xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-healthcheck", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqMultisiteTargeting where
  applyOptionalParam req (ComAdobeCqCqMultisiteTargeting xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-multisite-targeting", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqPreUpgradeCleanup where
  applyOptionalParam req (ComAdobeCqCqPreUpgradeCleanup xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-pre-upgrade-cleanup", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqProductInfoProvider where
  applyOptionalParam req (ComAdobeCqCqProductInfoProvider xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-product-info-provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqRestSites where
  applyOptionalParam req (ComAdobeCqCqRestSites xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-rest-sites", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqCqSecurityHc where
  applyOptionalParam req (ComAdobeCqCqSecurityHc xs) =
    req `setQuery` toQuery ("com.adobe.cq.cq-security-hc", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqDamCqDamSvgHandler where
  applyOptionalParam req (ComAdobeCqDamCqDamSvgHandler xs) =
    req `setQuery` toQuery ("com.adobe.cq.dam.cq-dam-svg-handler", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqDamCqScene7Imaging where
  applyOptionalParam req (ComAdobeCqDamCqScene7Imaging xs) =
    req `setQuery` toQuery ("com.adobe.cq.dam.cq-scene7-imaging", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqDtmReactorCore where
  applyOptionalParam req (ComAdobeCqDtmReactorCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.dtm-reactor.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqDtmReactorUi where
  applyOptionalParam req (ComAdobeCqDtmReactorUi xs) =
    req `setQuery` toQuery ("com.adobe.cq.dtm-reactor.ui", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqExpJspelResolver where
  applyOptionalParam req (ComAdobeCqExpJspelResolver xs) =
    req `setQuery` toQuery ("com.adobe.cq.exp-jspel-resolver", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqInboxCqInbox where
  applyOptionalParam req (ComAdobeCqInboxCqInbox xs) =
    req `setQuery` toQuery ("com.adobe.cq.inbox.cq-inbox", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqJsonSchemaParser where
  applyOptionalParam req (ComAdobeCqJsonSchemaParser xs) =
    req `setQuery` toQuery ("com.adobe.cq.json-schema-parser", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqMediaCqMediaPublishingDpsFpCore where
  applyOptionalParam req (ComAdobeCqMediaCqMediaPublishingDpsFpCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.media.cq-media-publishing-dps-fp-core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqMobileCqMobileCaas where
  applyOptionalParam req (ComAdobeCqMobileCqMobileCaas xs) =
    req `setQuery` toQuery ("com.adobe.cq.mobile.cq-mobile-caas", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqMobileCqMobileIndexBuilder where
  applyOptionalParam req (ComAdobeCqMobileCqMobileIndexBuilder xs) =
    req `setQuery` toQuery ("com.adobe.cq.mobile.cq-mobile-index-builder", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqMobileCqMobilePhonegapBuild where
  applyOptionalParam req (ComAdobeCqMobileCqMobilePhonegapBuild xs) =
    req `setQuery` toQuery ("com.adobe.cq.mobile.cq-mobile-phonegap-build", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqMyspell where
  applyOptionalParam req (ComAdobeCqMyspell xs) =
    req `setQuery` toQuery ("com.adobe.cq.myspell", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSampleWeRetailCore where
  applyOptionalParam req (ComAdobeCqSampleWeRetailCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.sample.we.retail.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqScreensComAdobeCqScreensDcc where
  applyOptionalParam req (ComAdobeCqScreensComAdobeCqScreensDcc xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.com.adobe.cq.screens.dcc", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqScreensComAdobeCqScreensMqCore where
  applyOptionalParam req (ComAdobeCqScreensComAdobeCqScreensMqCore xs) =
    req `setQuery` toQuery ("com.adobe.cq.screens.com.adobe.cq.screens.mq.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialAsProvider where
  applyOptionalParam req (ComAdobeCqSocialCqSocialAsProvider xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-as-provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialBadgingBasicImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialBadgingBasicImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-badging-basic-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialBadgingImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialBadgingImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-badging-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialCalendarImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialCalendarImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-calendar-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialContentFragmentsImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialContentFragmentsImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-content-fragments-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialEnablementImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialEnablementImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-enablement-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialGraphImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialGraphImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-graph-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialIdeationImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialIdeationImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-ideation-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialJcrProvider where
  applyOptionalParam req (ComAdobeCqSocialCqSocialJcrProvider xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-jcr-provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialMembersImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialMembersImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-members-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialMsProvider where
  applyOptionalParam req (ComAdobeCqSocialCqSocialMsProvider xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-ms-provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialNotificationsChannelsWeb where
  applyOptionalParam req (ComAdobeCqSocialCqSocialNotificationsChannelsWeb xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-notifications-channels-web", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialNotificationsImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialNotificationsImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-notifications-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialRdbProvider where
  applyOptionalParam req (ComAdobeCqSocialCqSocialRdbProvider xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-rdb-provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialScfImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialScfImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-scf-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialScoringBasicImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialScoringBasicImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-scoring-basic-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialScoringImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialScoringImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-scoring-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialServiceusersImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialServiceusersImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-serviceusers-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialSrpImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialSrpImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-srp-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeCqSocialCqSocialUgcbaseImpl where
  applyOptionalParam req (ComAdobeCqSocialCqSocialUgcbaseImpl xs) =
    req `setQuery` toQuery ("com.adobe.cq.social.cq-social-ugcbase-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeDamCqDamCfmImpl where
  applyOptionalParam req (ComAdobeDamCqDamCfmImpl xs) =
    req `setQuery` toQuery ("com.adobe.dam.cq-dam-cfm-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeFormsFoundationFormsFoundationBase where
  applyOptionalParam req (ComAdobeFormsFoundationFormsFoundationBase xs) =
    req `setQuery` toQuery ("com.adobe.forms.foundation-forms-foundation-base", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteApicontroller where
  applyOptionalParam req (ComAdobeGraniteApicontroller xs) =
    req `setQuery` toQuery ("com.adobe.granite.apicontroller", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteAssetCore where
  applyOptionalParam req (ComAdobeGraniteAssetCore xs) =
    req `setQuery` toQuery ("com.adobe.granite.asset.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteAuthSso where
  applyOptionalParam req (ComAdobeGraniteAuthSso xs) =
    req `setQuery` toQuery ("com.adobe.granite.auth.sso", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteBundlesHcImpl where
  applyOptionalParam req (ComAdobeGraniteBundlesHcImpl xs) =
    req `setQuery` toQuery ("com.adobe.granite.bundles.hc.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCompatRouter where
  applyOptionalParam req (ComAdobeGraniteCompatRouter xs) =
    req `setQuery` toQuery ("com.adobe.granite.compat-router", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteConf where
  applyOptionalParam req (ComAdobeGraniteConf xs) =
    req `setQuery` toQuery ("com.adobe.granite.conf", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteConfUiCore where
  applyOptionalParam req (ComAdobeGraniteConfUiCore xs) =
    req `setQuery` toQuery ("com.adobe.granite.conf.ui.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCors where
  applyOptionalParam req (ComAdobeGraniteCors xs) =
    req `setQuery` toQuery ("com.adobe.granite.cors", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCrxExplorer where
  applyOptionalParam req (ComAdobeGraniteCrxExplorer xs) =
    req `setQuery` toQuery ("com.adobe.granite.crx-explorer", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCrxdeLite where
  applyOptionalParam req (ComAdobeGraniteCrxdeLite xs) =
    req `setQuery` toQuery ("com.adobe.granite.crxde-lite", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCryptoConfig where
  applyOptionalParam req (ComAdobeGraniteCryptoConfig xs) =
    req `setQuery` toQuery ("com.adobe.granite.crypto.config", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCryptoExtension where
  applyOptionalParam req (ComAdobeGraniteCryptoExtension xs) =
    req `setQuery` toQuery ("com.adobe.granite.crypto.extension", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCryptoFile where
  applyOptionalParam req (ComAdobeGraniteCryptoFile xs) =
    req `setQuery` toQuery ("com.adobe.granite.crypto.file", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCryptoJcr where
  applyOptionalParam req (ComAdobeGraniteCryptoJcr xs) =
    req `setQuery` toQuery ("com.adobe.granite.crypto.jcr", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteCsrf where
  applyOptionalParam req (ComAdobeGraniteCsrf xs) =
    req `setQuery` toQuery ("com.adobe.granite.csrf", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteDistributionCore where
  applyOptionalParam req (ComAdobeGraniteDistributionCore xs) =
    req `setQuery` toQuery ("com.adobe.granite.distribution.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteDropwizardMetrics where
  applyOptionalParam req (ComAdobeGraniteDropwizardMetrics xs) =
    req `setQuery` toQuery ("com.adobe.granite.dropwizard.metrics", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteFragsImpl where
  applyOptionalParam req (ComAdobeGraniteFragsImpl xs) =
    req `setQuery` toQuery ("com.adobe.granite.frags.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteGibson where
  applyOptionalParam req (ComAdobeGraniteGibson xs) =
    req `setQuery` toQuery ("com.adobe.granite.gibson", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteInfocollector where
  applyOptionalParam req (ComAdobeGraniteInfocollector xs) =
    req `setQuery` toQuery ("com.adobe.granite.infocollector", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteInstallerFactoryPackages where
  applyOptionalParam req (ComAdobeGraniteInstallerFactoryPackages xs) =
    req `setQuery` toQuery ("com.adobe.granite.installer.factory.packages", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteJettySsl where
  applyOptionalParam req (ComAdobeGraniteJettySsl xs) =
    req `setQuery` toQuery ("com.adobe.granite.jetty.ssl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteJobsAsync where
  applyOptionalParam req (ComAdobeGraniteJobsAsync xs) =
    req `setQuery` toQuery ("com.adobe.granite.jobs.async", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteMaintenanceOak where
  applyOptionalParam req (ComAdobeGraniteMaintenanceOak xs) =
    req `setQuery` toQuery ("com.adobe.granite.maintenance.oak", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteMonitoringCore where
  applyOptionalParam req (ComAdobeGraniteMonitoringCore xs) =
    req `setQuery` toQuery ("com.adobe.granite.monitoring.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteQueries where
  applyOptionalParam req (ComAdobeGraniteQueries xs) =
    req `setQuery` toQuery ("com.adobe.granite.queries", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteReplicationHcImpl where
  applyOptionalParam req (ComAdobeGraniteReplicationHcImpl xs) =
    req `setQuery` toQuery ("com.adobe.granite.replication.hc.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteRepositoryChecker where
  applyOptionalParam req (ComAdobeGraniteRepositoryChecker xs) =
    req `setQuery` toQuery ("com.adobe.granite.repository.checker", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteRepositoryHcImpl where
  applyOptionalParam req (ComAdobeGraniteRepositoryHcImpl xs) =
    req `setQuery` toQuery ("com.adobe.granite.repository.hc.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteRestAssets where
  applyOptionalParam req (ComAdobeGraniteRestAssets xs) =
    req `setQuery` toQuery ("com.adobe.granite.rest.assets", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteSecurityUi where
  applyOptionalParam req (ComAdobeGraniteSecurityUi xs) =
    req `setQuery` toQuery ("com.adobe.granite.security.ui", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteStartup where
  applyOptionalParam req (ComAdobeGraniteStartup xs) =
    req `setQuery` toQuery ("com.adobe.granite.startup", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteTagsoup where
  applyOptionalParam req (ComAdobeGraniteTagsoup xs) =
    req `setQuery` toQuery ("com.adobe.granite.tagsoup", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteTaskmanagementCore where
  applyOptionalParam req (ComAdobeGraniteTaskmanagementCore xs) =
    req `setQuery` toQuery ("com.adobe.granite.taskmanagement.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteTaskmanagementWorkflow where
  applyOptionalParam req (ComAdobeGraniteTaskmanagementWorkflow xs) =
    req `setQuery` toQuery ("com.adobe.granite.taskmanagement.workflow", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteUiClientlibsCompilerLess where
  applyOptionalParam req (ComAdobeGraniteUiClientlibsCompilerLess xs) =
    req `setQuery` toQuery ("com.adobe.granite.ui.clientlibs.compiler.less", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteUiClientlibsProcessorGcc where
  applyOptionalParam req (ComAdobeGraniteUiClientlibsProcessorGcc xs) =
    req `setQuery` toQuery ("com.adobe.granite.ui.clientlibs.processor.gcc", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteWebconsolePlugins where
  applyOptionalParam req (ComAdobeGraniteWebconsolePlugins xs) =
    req `setQuery` toQuery ("com.adobe.granite.webconsole.plugins", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeGraniteWorkflowConsole where
  applyOptionalParam req (ComAdobeGraniteWorkflowConsole xs) =
    req `setQuery` toQuery ("com.adobe.granite.workflow.console", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeXmpWorkerFilesNativeFragmentLinux where
  applyOptionalParam req (ComAdobeXmpWorkerFilesNativeFragmentLinux xs) =
    req `setQuery` toQuery ("com.adobe.xmp.worker.files.native.fragment.linux", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeXmpWorkerFilesNativeFragmentMacosx where
  applyOptionalParam req (ComAdobeXmpWorkerFilesNativeFragmentMacosx xs) =
    req `setQuery` toQuery ("com.adobe.xmp.worker.files.native.fragment.macosx", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComAdobeXmpWorkerFilesNativeFragmentWin where
  applyOptionalParam req (ComAdobeXmpWorkerFilesNativeFragmentWin xs) =
    req `setQuery` toQuery ("com.adobe.xmp.worker.files.native.fragment.win", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCommonsOsgiWrapperSimpleJndi where
  applyOptionalParam req (ComDayCommonsOsgiWrapperSimpleJndi xs) =
    req `setQuery` toQuery ("com.day.commons.osgi.wrapper.simple-jndi", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqAuthhandler where
  applyOptionalParam req (ComDayCqCqAuthhandler xs) =
    req `setQuery` toQuery ("com.day.cq.cq-authhandler", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqCompatConfigupdate where
  applyOptionalParam req (ComDayCqCqCompatConfigupdate xs) =
    req `setQuery` toQuery ("com.day.cq.cq-compat-configupdate", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqLicensebranding where
  applyOptionalParam req (ComDayCqCqLicensebranding xs) =
    req `setQuery` toQuery ("com.day.cq.cq-licensebranding", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqNotifcationImpl where
  applyOptionalParam req (ComDayCqCqNotifcationImpl xs) =
    req `setQuery` toQuery ("com.day.cq.cq-notifcation-impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqReplicationAudit where
  applyOptionalParam req (ComDayCqCqReplicationAudit xs) =
    req `setQuery` toQuery ("com.day.cq.cq-replication-audit", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqCqSearchExt where
  applyOptionalParam req (ComDayCqCqSearchExt xs) =
    req `setQuery` toQuery ("com.day.cq.cq-search-ext", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqDamCqDamAnnotationPrint where
  applyOptionalParam req (ComDayCqDamCqDamAnnotationPrint xs) =
    req `setQuery` toQuery ("com.day.cq.dam.cq-dam-annotation-print", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqDamCqDamAssetUsage where
  applyOptionalParam req (ComDayCqDamCqDamAssetUsage xs) =
    req `setQuery` toQuery ("com.day.cq.dam.cq-dam-asset-usage", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqDamCqDamS7dam where
  applyOptionalParam req (ComDayCqDamCqDamS7dam xs) =
    req `setQuery` toQuery ("com.day.cq.dam.cq-dam-s7dam", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqDamCqDamSimilaritysearch where
  applyOptionalParam req (ComDayCqDamCqDamSimilaritysearch xs) =
    req `setQuery` toQuery ("com.day.cq.dam.cq-dam-similaritysearch", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqDamDamWebdavSupport where
  applyOptionalParam req (ComDayCqDamDamWebdavSupport xs) =
    req `setQuery` toQuery ("com.day.cq.dam.dam-webdav-support", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqPreUpgradeTasks where
  applyOptionalParam req (ComDayCqPreUpgradeTasks xs) =
    req `setQuery` toQuery ("com.day.cq.pre-upgrade-tasks", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqReplicationExtensions where
  applyOptionalParam req (ComDayCqReplicationExtensions xs) =
    req `setQuery` toQuery ("com.day.cq.replication.extensions", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqWcmCqMsmCore where
  applyOptionalParam req (ComDayCqWcmCqMsmCore xs) =
    req `setQuery` toQuery ("com.day.cq.wcm.cq-msm-core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory ComDayCqWcmCqWcmTranslation where
  applyOptionalParam req (ComDayCqWcmCqWcmTranslation xs) =
    req `setQuery` toQuery ("com.day.cq.wcm.cq-wcm-translation", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory DayCommonsJrawio where
  applyOptionalParam req (DayCommonsJrawio xs) =
    req `setQuery` toQuery ("day-commons-jrawio", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheAriesJmxWhiteboard where
  applyOptionalParam req (OrgApacheAriesJmxWhiteboard xs) =
    req `setQuery` toQuery ("org.apache.aries.jmx.whiteboard", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixHttpSslfilter where
  applyOptionalParam req (OrgApacheFelixHttpSslfilter xs) =
    req `setQuery` toQuery ("org.apache.felix.http.sslfilter", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixOrgApacheFelixThreaddump where
  applyOptionalParam req (OrgApacheFelixOrgApacheFelixThreaddump xs) =
    req `setQuery` toQuery ("org.apache.felix.org.apache.felix.threaddump", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixWebconsolePluginsDs where
  applyOptionalParam req (OrgApacheFelixWebconsolePluginsDs xs) =
    req `setQuery` toQuery ("org.apache.felix.webconsole.plugins.ds", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixWebconsolePluginsEvent where
  applyOptionalParam req (OrgApacheFelixWebconsolePluginsEvent xs) =
    req `setQuery` toQuery ("org.apache.felix.webconsole.plugins.event", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixWebconsolePluginsMemoryusage where
  applyOptionalParam req (OrgApacheFelixWebconsolePluginsMemoryusage xs) =
    req `setQuery` toQuery ("org.apache.felix.webconsole.plugins.memoryusage", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheFelixWebconsolePluginsPackageadmin where
  applyOptionalParam req (OrgApacheFelixWebconsolePluginsPackageadmin xs) =
    req `setQuery` toQuery ("org.apache.felix.webconsole.plugins.packageadmin", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheJackrabbitOakAuthLdap where
  applyOptionalParam req (OrgApacheJackrabbitOakAuthLdap xs) =
    req `setQuery` toQuery ("org.apache.jackrabbit.oak-auth-ldap", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheJackrabbitOakSegmentTar where
  applyOptionalParam req (OrgApacheJackrabbitOakSegmentTar xs) =
    req `setQuery` toQuery ("org.apache.jackrabbit.oak-segment-tar", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheJackrabbitOakSolrOsgi where
  applyOptionalParam req (OrgApacheJackrabbitOakSolrOsgi xs) =
    req `setQuery` toQuery ("org.apache.jackrabbit.oak-solr-osgi", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingBundleresourceImpl where
  applyOptionalParam req (OrgApacheSlingBundleresourceImpl xs) =
    req `setQuery` toQuery ("org.apache.sling.bundleresource.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingCommonsFsclassloader where
  applyOptionalParam req (OrgApacheSlingCommonsFsclassloader xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.fsclassloader", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingCommonsLogWebconsole where
  applyOptionalParam req (OrgApacheSlingCommonsLogWebconsole xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.webconsole", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDatasource where
  applyOptionalParam req (OrgApacheSlingDatasource xs) =
    req `setQuery` toQuery ("org.apache.sling.datasource", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDiscoveryBase where
  applyOptionalParam req (OrgApacheSlingDiscoveryBase xs) =
    req `setQuery` toQuery ("org.apache.sling.discovery.base", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDiscoveryOak where
  applyOptionalParam req (OrgApacheSlingDiscoveryOak xs) =
    req `setQuery` toQuery ("org.apache.sling.discovery.oak", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDiscoverySupport where
  applyOptionalParam req (OrgApacheSlingDiscoverySupport xs) =
    req `setQuery` toQuery ("org.apache.sling.discovery.support", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDistributionApi where
  applyOptionalParam req (OrgApacheSlingDistributionApi xs) =
    req `setQuery` toQuery ("org.apache.sling.distribution.api", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingDistributionCore where
  applyOptionalParam req (OrgApacheSlingDistributionCore xs) =
    req `setQuery` toQuery ("org.apache.sling.distribution.core", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingExtensionsWebconsolesecurityprovider where
  applyOptionalParam req (OrgApacheSlingExtensionsWebconsolesecurityprovider xs) =
    req `setQuery` toQuery ("org.apache.sling.extensions.webconsolesecurityprovider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingHcWebconsole where
  applyOptionalParam req (OrgApacheSlingHcWebconsole xs) =
    req `setQuery` toQuery ("org.apache.sling.hc.webconsole", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingInstallerConsole where
  applyOptionalParam req (OrgApacheSlingInstallerConsole xs) =
    req `setQuery` toQuery ("org.apache.sling.installer.console", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingInstallerProviderFile where
  applyOptionalParam req (OrgApacheSlingInstallerProviderFile xs) =
    req `setQuery` toQuery ("org.apache.sling.installer.provider.file", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingInstallerProviderJcr where
  applyOptionalParam req (OrgApacheSlingInstallerProviderJcr xs) =
    req `setQuery` toQuery ("org.apache.sling.installer.provider.jcr", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingJcrDavex where
  applyOptionalParam req (OrgApacheSlingJcrDavex xs) =
    req `setQuery` toQuery ("org.apache.sling.jcr.davex", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingJcrResourcesecurity where
  applyOptionalParam req (OrgApacheSlingJcrResourcesecurity xs) =
    req `setQuery` toQuery ("org.apache.sling.jcr.resourcesecurity", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingJmxProvider where
  applyOptionalParam req (OrgApacheSlingJmxProvider xs) =
    req `setQuery` toQuery ("org.apache.sling.jmx.provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingLaunchpadInstaller where
  applyOptionalParam req (OrgApacheSlingLaunchpadInstaller xs) =
    req `setQuery` toQuery ("org.apache.sling.launchpad.installer", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingModelsImpl where
  applyOptionalParam req (OrgApacheSlingModelsImpl xs) =
    req `setQuery` toQuery ("org.apache.sling.models.impl", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingRepoinitParser where
  applyOptionalParam req (OrgApacheSlingRepoinitParser xs) =
    req `setQuery` toQuery ("org.apache.sling.repoinit.parser", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingResourceInventory where
  applyOptionalParam req (OrgApacheSlingResourceInventory xs) =
    req `setQuery` toQuery ("org.apache.sling.resource.inventory", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingResourceresolver where
  applyOptionalParam req (OrgApacheSlingResourceresolver xs) =
    req `setQuery` toQuery ("org.apache.sling.resourceresolver", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingScriptingJavascript where
  applyOptionalParam req (OrgApacheSlingScriptingJavascript xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.javascript", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingScriptingJst where
  applyOptionalParam req (OrgApacheSlingScriptingJst xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.jst", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingScriptingSightlyJsProvider where
  applyOptionalParam req (OrgApacheSlingScriptingSightlyJsProvider xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.sightly.js.provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingScriptingSightlyModelsProvider where
  applyOptionalParam req (OrgApacheSlingScriptingSightlyModelsProvider xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.sightly.models.provider", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingSecurity where
  applyOptionalParam req (OrgApacheSlingSecurity xs) =
    req `setQuery` toQuery ("org.apache.sling.security", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingServletsCompat where
  applyOptionalParam req (OrgApacheSlingServletsCompat xs) =
    req `setQuery` toQuery ("org.apache.sling.servlets.compat", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingServletsGet where
  applyOptionalParam req (OrgApacheSlingServletsGet xs) =
    req `setQuery` toQuery ("org.apache.sling.servlets.get", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingStartupfilterDisabler where
  applyOptionalParam req (OrgApacheSlingStartupfilterDisabler xs) =
    req `setQuery` toQuery ("org.apache.sling.startupfilter.disabler", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory OrgApacheSlingTracer where
  applyOptionalParam req (OrgApacheSlingTracer xs) =
    req `setQuery` toQuery ("org.apache.sling.tracer", Just xs)
instance HasOptionalParam ComAdobeGraniteApicontrollerFilterResolverHookFactory WeRetailClientAppCore where
  applyOptionalParam req (WeRetailClientAppCore xs) =
    req `setQuery` toQuery ("we.retail.client.app.core", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteApicontrollerFilterResolverHookFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteApicontrollerFilterResolverHookFactory MimePlainText


-- *** comAdobeGraniteAuthCertImplClientCertAuthHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthCertImplClientCertAuthHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthCertImplClientCertAuthHandler MimeNoContent ComAdobeGraniteAuthCertImplClientCertAuthHandlerInfo accept
comAdobeGraniteAuthCertImplClientCertAuthHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.cert.impl.ClientCertAuthHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthCertImplClientCertAuthHandler  
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthCertImplClientCertAuthHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthCertImplClientCertAuthHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthCertImplClientCertAuthHandler MimePlainText


-- *** comAdobeGraniteAuthIms

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthIms 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthIms MimeNoContent ComAdobeGraniteAuthImsInfo accept
comAdobeGraniteAuthIms  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthIms  
instance HasOptionalParam ComAdobeGraniteAuthIms Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Configid where
  applyOptionalParam req (Configid xs) =
    req `setQuery` toQuery ("configid", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthIms Scope where
  applyOptionalParam req (Scope xs) =
    req `setQuery` toQuery ("scope", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthIms MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthIms MimePlainText


-- *** comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension MimeNoContent ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtensionInfo accept
comAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ExternalUserIdMappingProviderExtension"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension  
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthImsImplExternalUserIdMappingProviderExtension MimePlainText


-- *** comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl MimeNoContent ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImplInfo accept
comAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSAccessTokenRequestCustomizerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl  
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl AuthImsClientSecret where
  applyOptionalParam req (AuthImsClientSecret xs) =
    req `setQuery` toQuery ("auth.ims.client.secret", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl CustomizerType where
  applyOptionalParam req (CustomizerType xs) =
    req `setQuery` toQuery ("customizer.type", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthImsImplIMSAccessTokenRequestCustomizerImpl MimePlainText


-- *** comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator MimeNoContent ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidatorInfo accept
comAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSInstanceCredentialsValidator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator  
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthImsImplIMSInstanceCredentialsValidator MimePlainText


-- *** comAdobeGraniteAuthImsImplIMSProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims.impl.IMSProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthImsImplIMSProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthImsImplIMSProviderImpl MimeNoContent ComAdobeGraniteAuthImsImplIMSProviderImplInfo accept
comAdobeGraniteAuthImsImplIMSProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.IMSProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthImsImplIMSProviderImpl  
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsAuthorizationUrl where
  applyOptionalParam req (OauthProviderImsAuthorizationUrl xs) =
    req `setQuery` toQuery ("oauth.provider.ims.authorization.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsTokenUrl where
  applyOptionalParam req (OauthProviderImsTokenUrl xs) =
    req `setQuery` toQuery ("oauth.provider.ims.token.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsProfileUrl where
  applyOptionalParam req (OauthProviderImsProfileUrl xs) =
    req `setQuery` toQuery ("oauth.provider.ims.profile.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsExtendedDetailsUrls where
  applyOptionalParam req (OauthProviderImsExtendedDetailsUrls xs) =
    req `setQuery` toQueryColl MultiParamArray ("oauth.provider.ims.extended.details.urls", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsValidateTokenUrl where
  applyOptionalParam req (OauthProviderImsValidateTokenUrl xs) =
    req `setQuery` toQuery ("oauth.provider.ims.validate.token.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsSessionProperty where
  applyOptionalParam req (OauthProviderImsSessionProperty xs) =
    req `setQuery` toQuery ("oauth.provider.ims.session.property", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsServiceTokenClientId where
  applyOptionalParam req (OauthProviderImsServiceTokenClientId xs) =
    req `setQuery` toQuery ("oauth.provider.ims.service.token.client.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsServiceTokenClientSecret where
  applyOptionalParam req (OauthProviderImsServiceTokenClientSecret xs) =
    req `setQuery` toQuery ("oauth.provider.ims.service.token.client.secret", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsServiceToken where
  applyOptionalParam req (OauthProviderImsServiceToken xs) =
    req `setQuery` toQuery ("oauth.provider.ims.service.token", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl ImsOrgRef where
  applyOptionalParam req (ImsOrgRef xs) =
    req `setQuery` toQuery ("ims.org.ref", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl ImsGroupMapping where
  applyOptionalParam req (ImsGroupMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("ims.group.mapping", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplIMSProviderImpl OauthProviderImsOnlyLicenseGroup where
  applyOptionalParam req (OauthProviderImsOnlyLicenseGroup xs) =
    req `setQuery` toQuery ("oauth.provider.ims.only.license.group", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthImsImplIMSProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthImsImplIMSProviderImpl MimePlainText


-- *** comAdobeGraniteAuthImsImplImsConfigProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthImsImplImsConfigProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthImsImplImsConfigProviderImpl MimeNoContent ComAdobeGraniteAuthImsImplImsConfigProviderImplInfo accept
comAdobeGraniteAuthImsImplImsConfigProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.ims.impl.ImsConfigProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthImsImplImsConfigProviderImpl  
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl OauthConfigmanagerImsConfigid where
  applyOptionalParam req (OauthConfigmanagerImsConfigid xs) =
    req `setQuery` toQuery ("oauth.configmanager.ims.configid", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl ImsOwningEntity where
  applyOptionalParam req (ImsOwningEntity xs) =
    req `setQuery` toQuery ("ims.owningEntity", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl AemInstanceId where
  applyOptionalParam req (AemInstanceId xs) =
    req `setQuery` toQuery ("aem.instanceId", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthImsImplImsConfigProviderImpl ImsServiceCode where
  applyOptionalParam req (ImsServiceCode xs) =
    req `setQuery` toQuery ("ims.serviceCode", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthImsImplImsConfigProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthImsImplImsConfigProviderImpl MimePlainText


-- *** comAdobeGraniteAuthOauthAccesstokenProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.accesstoken.provider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthAccesstokenProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthAccesstokenProvider MimeNoContent ComAdobeGraniteAuthOauthAccesstokenProviderInfo accept
comAdobeGraniteAuthOauthAccesstokenProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.accesstoken.provider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthAccesstokenProvider  
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderTitle where
  applyOptionalParam req (AuthTokenProviderTitle xs) =
    req `setQuery` toQuery ("auth.token.provider.title", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderDefaultClaims where
  applyOptionalParam req (AuthTokenProviderDefaultClaims xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.token.provider.default.claims", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderEndpoint where
  applyOptionalParam req (AuthTokenProviderEndpoint xs) =
    req `setQuery` toQuery ("auth.token.provider.endpoint", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthAccessTokenRequest where
  applyOptionalParam req (AuthAccessTokenRequest xs) =
    req `setQuery` toQuery ("auth.access.token.request", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderKeypairAlias where
  applyOptionalParam req (AuthTokenProviderKeypairAlias xs) =
    req `setQuery` toQuery ("auth.token.provider.keypair.alias", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderConnTimeout where
  applyOptionalParam req (AuthTokenProviderConnTimeout xs) =
    req `setQuery` toQuery ("auth.token.provider.conn.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderSoTimeout where
  applyOptionalParam req (AuthTokenProviderSoTimeout xs) =
    req `setQuery` toQuery ("auth.token.provider.so.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderClientId where
  applyOptionalParam req (AuthTokenProviderClientId xs) =
    req `setQuery` toQuery ("auth.token.provider.client.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderScope where
  applyOptionalParam req (AuthTokenProviderScope xs) =
    req `setQuery` toQuery ("auth.token.provider.scope", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderReuseAccessToken where
  applyOptionalParam req (AuthTokenProviderReuseAccessToken xs) =
    req `setQuery` toQuery ("auth.token.provider.reuse.access.token", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenProviderRelaxedSsl where
  applyOptionalParam req (AuthTokenProviderRelaxedSsl xs) =
    req `setQuery` toQuery ("auth.token.provider.relaxed.ssl", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider TokenRequestCustomizerType where
  applyOptionalParam req (TokenRequestCustomizerType xs) =
    req `setQuery` toQuery ("token.request.customizer.type", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthAccesstokenProvider AuthTokenValidatorType where
  applyOptionalParam req (AuthTokenValidatorType xs) =
    req `setQuery` toQuery ("auth.token.validator.type", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthAccesstokenProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthAccesstokenProvider MimePlainText


-- *** comAdobeGraniteAuthOauthImplBearerAuthenticationHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplBearerAuthenticationHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler MimeNoContent ComAdobeGraniteAuthOauthImplBearerAuthenticationHandlerInfo accept
comAdobeGraniteAuthOauthImplBearerAuthenticationHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.BearerAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler OauthClientIdsAllowed where
  applyOptionalParam req (OauthClientIdsAllowed xs) =
    req `setQuery` toQueryColl MultiParamArray ("oauth.clientIds.allowed", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler AuthBearerSyncIms where
  applyOptionalParam req (AuthBearerSyncIms xs) =
    req `setQuery` toQuery ("auth.bearer.sync.ims", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler AuthTokenRequestParameter where
  applyOptionalParam req (AuthTokenRequestParameter xs) =
    req `setQuery` toQuery ("auth.tokenRequestParameter", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler OauthBearerConfigid where
  applyOptionalParam req (OauthBearerConfigid xs) =
    req `setQuery` toQuery ("oauth.bearer.configid", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler OauthJwtSupport where
  applyOptionalParam req (OauthJwtSupport xs) =
    req `setQuery` toQuery ("oauth.jwt.support", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplBearerAuthenticationHandler MimePlainText


-- *** comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl MimeNoContent ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImplInfo accept
comAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.DefaultTokenValidatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl AuthTokenValidatorType where
  applyOptionalParam req (AuthTokenValidatorType xs) =
    req `setQuery` toQuery ("auth.token.validator.type", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplDefaultTokenValidatorImpl MimePlainText


-- *** comAdobeGraniteAuthOauthImplFacebookProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplFacebookProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplFacebookProviderImpl MimeNoContent ComAdobeGraniteAuthOauthImplFacebookProviderImplInfo accept
comAdobeGraniteAuthOauthImplFacebookProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.FacebookProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplFacebookProviderImpl  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplFacebookProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplFacebookProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplFacebookProviderImpl MimePlainText


-- *** comAdobeGraniteAuthOauthImplGithubProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.GithubProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplGithubProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplGithubProviderImpl MimeNoContent ComAdobeGraniteAuthOauthImplGithubProviderImplInfo accept
comAdobeGraniteAuthOauthImplGithubProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GithubProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplGithubProviderImpl  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl OauthProviderGithubAuthorizationUrl where
  applyOptionalParam req (OauthProviderGithubAuthorizationUrl xs) =
    req `setQuery` toQuery ("oauth.provider.github.authorization.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl OauthProviderGithubTokenUrl where
  applyOptionalParam req (OauthProviderGithubTokenUrl xs) =
    req `setQuery` toQuery ("oauth.provider.github.token.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGithubProviderImpl OauthProviderGithubProfileUrl where
  applyOptionalParam req (OauthProviderGithubProfileUrl xs) =
    req `setQuery` toQuery ("oauth.provider.github.profile.url", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplGithubProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplGithubProviderImpl MimePlainText


-- *** comAdobeGraniteAuthOauthImplGraniteProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.GraniteProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplGraniteProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplGraniteProvider MimeNoContent ComAdobeGraniteAuthOauthImplGraniteProviderInfo accept
comAdobeGraniteAuthOauthImplGraniteProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.GraniteProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplGraniteProvider  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider OauthProviderGraniteAuthorizationUrl where
  applyOptionalParam req (OauthProviderGraniteAuthorizationUrl xs) =
    req `setQuery` toQuery ("oauth.provider.granite.authorization.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider OauthProviderGraniteTokenUrl where
  applyOptionalParam req (OauthProviderGraniteTokenUrl xs) =
    req `setQuery` toQuery ("oauth.provider.granite.token.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider OauthProviderGraniteProfileUrl where
  applyOptionalParam req (OauthProviderGraniteProfileUrl xs) =
    req `setQuery` toQuery ("oauth.provider.granite.profile.url", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplGraniteProvider OauthProviderGraniteExtendedDetailsUrls where
  applyOptionalParam req (OauthProviderGraniteExtendedDetailsUrls xs) =
    req `setQuery` toQuery ("oauth.provider.granite.extended.details.urls", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplGraniteProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplGraniteProvider MimePlainText


-- *** comAdobeGraniteAuthOauthImplHelperProviderConfigManager

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplHelperProviderConfigManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplHelperProviderConfigManager MimeNoContent ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInfo accept
comAdobeGraniteAuthOauthImplHelperProviderConfigManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplHelperProviderConfigManager  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager OauthCookieLoginTimeout where
  applyOptionalParam req (OauthCookieLoginTimeout xs) =
    req `setQuery` toQuery ("oauth.cookie.login.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManager OauthCookieMaxAge where
  applyOptionalParam req (OauthCookieMaxAge xs) =
    req `setQuery` toQuery ("oauth.cookie.max.age", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplHelperProviderConfigManager MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplHelperProviderConfigManager MimePlainText


-- *** comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal MimeNoContent ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternalInfo accept
comAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.helper.ProviderConfigManagerInternal"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal OauthCookieLoginTimeout where
  applyOptionalParam req (OauthCookieLoginTimeout xs) =
    req `setQuery` toQuery ("oauth.cookie.login.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal OauthCookieMaxAge where
  applyOptionalParam req (OauthCookieMaxAge xs) =
    req `setQuery` toQuery ("oauth.cookie.max.age", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplHelperProviderConfigManagerInternal MimePlainText


-- *** comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler MimeNoContent ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandlerInfo accept
comAdobeGraniteAuthOauthImplOAuthAuthenticationHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.OAuthAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplOAuthAuthenticationHandler MimePlainText


-- *** comAdobeGraniteAuthOauthImplTwitterProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthImplTwitterProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthImplTwitterProviderImpl MimeNoContent ComAdobeGraniteAuthOauthImplTwitterProviderImplInfo accept
comAdobeGraniteAuthOauthImplTwitterProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.impl.TwitterProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthImplTwitterProviderImpl  
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthImplTwitterProviderImpl OauthProviderId where
  applyOptionalParam req (OauthProviderId xs) =
    req `setQuery` toQuery ("oauth.provider.id", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthImplTwitterProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthImplTwitterProviderImpl MimePlainText


-- *** comAdobeGraniteAuthOauthProvider

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.oauth.provider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthOauthProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthOauthProvider MimeNoContent ComAdobeGraniteAuthOauthProviderInfo accept
comAdobeGraniteAuthOauthProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.oauth.provider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthOauthProvider  
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthConfigId where
  applyOptionalParam req (OauthConfigId xs) =
    req `setQuery` toQuery ("oauth.config.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthClientId where
  applyOptionalParam req (OauthClientId xs) =
    req `setQuery` toQuery ("oauth.client.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthClientSecret where
  applyOptionalParam req (OauthClientSecret xs) =
    req `setQuery` toQuery ("oauth.client.secret", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthScope where
  applyOptionalParam req (OauthScope xs) =
    req `setQuery` toQueryColl MultiParamArray ("oauth.scope", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthConfigProviderId where
  applyOptionalParam req (OauthConfigProviderId xs) =
    req `setQuery` toQuery ("oauth.config.provider.id", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthCreateUsers where
  applyOptionalParam req (OauthCreateUsers xs) =
    req `setQuery` toQuery ("oauth.create.users", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthUseridProperty where
  applyOptionalParam req (OauthUseridProperty xs) =
    req `setQuery` toQuery ("oauth.userid.property", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider ForceStrictUsernameMatching where
  applyOptionalParam req (ForceStrictUsernameMatching xs) =
    req `setQuery` toQuery ("force.strict.username.matching", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthEncodeUserids where
  applyOptionalParam req (OauthEncodeUserids xs) =
    req `setQuery` toQuery ("oauth.encode.userids", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthHashUserids where
  applyOptionalParam req (OauthHashUserids xs) =
    req `setQuery` toQuery ("oauth.hash.userids", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthCallBackUrl where
  applyOptionalParam req (OauthCallBackUrl xs) =
    req `setQuery` toQuery ("oauth.callBackUrl", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthAccessTokenPersist where
  applyOptionalParam req (OauthAccessTokenPersist xs) =
    req `setQuery` toQuery ("oauth.access.token.persist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthAccessTokenPersistCookie where
  applyOptionalParam req (OauthAccessTokenPersistCookie xs) =
    req `setQuery` toQuery ("oauth.access.token.persist.cookie", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthCsrfStateProtection where
  applyOptionalParam req (OauthCsrfStateProtection xs) =
    req `setQuery` toQuery ("oauth.csrf.state.protection", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthRedirectRequestParams where
  applyOptionalParam req (OauthRedirectRequestParams xs) =
    req `setQuery` toQuery ("oauth.redirect.request.params", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthOauthProvider OauthConfigSiblingsAllow where
  applyOptionalParam req (OauthConfigSiblingsAllow xs) =
    req `setQuery` toQuery ("oauth.config.siblings.allow", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthOauthProvider MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthOauthProvider MimePlainText


-- *** comAdobeGraniteAuthRequirementImplDefaultRequirementHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthRequirementImplDefaultRequirementHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler MimeNoContent ComAdobeGraniteAuthRequirementImplDefaultRequirementHandlerInfo accept
comAdobeGraniteAuthRequirementImplDefaultRequirementHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.requirement.impl.DefaultRequirementHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler  
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler SupportedPaths where
  applyOptionalParam req (SupportedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("supportedPaths", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthRequirementImplDefaultRequirementHandler MimePlainText


-- *** comAdobeGraniteAuthSamlSamlAuthenticationHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.saml.SamlAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthSamlSamlAuthenticationHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthSamlSamlAuthenticationHandler MimeNoContent ComAdobeGraniteAuthSamlSamlAuthenticationHandlerInfo accept
comAdobeGraniteAuthSamlSamlAuthenticationHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthSamlSamlAuthenticationHandler  
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler Path where
  applyOptionalParam req (Path xs) =
    req `setQuery` toQueryColl MultiParamArray ("path", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler IdpUrl where
  applyOptionalParam req (IdpUrl xs) =
    req `setQuery` toQuery ("idpUrl", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler IdpCertAlias where
  applyOptionalParam req (IdpCertAlias xs) =
    req `setQuery` toQuery ("idpCertAlias", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler IdpHttpRedirect where
  applyOptionalParam req (IdpHttpRedirect xs) =
    req `setQuery` toQuery ("idpHttpRedirect", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler ServiceProviderEntityId where
  applyOptionalParam req (ServiceProviderEntityId xs) =
    req `setQuery` toQuery ("serviceProviderEntityId", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler AssertionConsumerServiceUrl where
  applyOptionalParam req (AssertionConsumerServiceUrl xs) =
    req `setQuery` toQuery ("assertionConsumerServiceURL", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler SpPrivateKeyAlias where
  applyOptionalParam req (SpPrivateKeyAlias xs) =
    req `setQuery` toQuery ("spPrivateKeyAlias", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler KeyStorePassword where
  applyOptionalParam req (KeyStorePassword xs) =
    req `setQuery` toQuery ("keyStorePassword", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler DefaultRedirectUrl where
  applyOptionalParam req (DefaultRedirectUrl xs) =
    req `setQuery` toQuery ("defaultRedirectUrl", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler UserIdAttribute where
  applyOptionalParam req (UserIdAttribute xs) =
    req `setQuery` toQuery ("userIDAttribute", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler UseEncryption where
  applyOptionalParam req (UseEncryption xs) =
    req `setQuery` toQuery ("useEncryption", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler CreateUser where
  applyOptionalParam req (CreateUser xs) =
    req `setQuery` toQuery ("createUser", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler UserIntermediatePath where
  applyOptionalParam req (UserIntermediatePath xs) =
    req `setQuery` toQuery ("userIntermediatePath", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler AddGroupMemberships where
  applyOptionalParam req (AddGroupMemberships xs) =
    req `setQuery` toQuery ("addGroupMemberships", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler GroupMembershipAttribute where
  applyOptionalParam req (GroupMembershipAttribute xs) =
    req `setQuery` toQuery ("groupMembershipAttribute", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler DefaultGroups where
  applyOptionalParam req (DefaultGroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("defaultGroups", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler NameIdFormat where
  applyOptionalParam req (NameIdFormat xs) =
    req `setQuery` toQuery ("nameIdFormat", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler SynchronizeAttributes where
  applyOptionalParam req (SynchronizeAttributes xs) =
    req `setQuery` toQueryColl MultiParamArray ("synchronizeAttributes", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler HandleLogout where
  applyOptionalParam req (HandleLogout xs) =
    req `setQuery` toQuery ("handleLogout", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler LogoutUrl where
  applyOptionalParam req (LogoutUrl xs) =
    req `setQuery` toQuery ("logoutUrl", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler ClockTolerance where
  applyOptionalParam req (ClockTolerance xs) =
    req `setQuery` toQuery ("clockTolerance", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler DigestMethod where
  applyOptionalParam req (DigestMethod xs) =
    req `setQuery` toQuery ("digestMethod", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler SignatureMethod where
  applyOptionalParam req (SignatureMethod xs) =
    req `setQuery` toQuery ("signatureMethod", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler IdentitySyncType where
  applyOptionalParam req (IdentitySyncType xs) =
    req `setQuery` toQuery ("identitySyncType", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSamlSamlAuthenticationHandler IdpIdentifier where
  applyOptionalParam req (IdpIdentifier xs) =
    req `setQuery` toQuery ("idpIdentifier", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthSamlSamlAuthenticationHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthSamlSamlAuthenticationHandler MimePlainText


-- *** comAdobeGraniteAuthSsoImplSsoAuthenticationHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteAuthSsoImplSsoAuthenticationHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler MimeNoContent ComAdobeGraniteAuthSsoImplSsoAuthenticationHandlerInfo accept
comAdobeGraniteAuthSsoImplSsoAuthenticationHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.auth.sso.impl.SsoAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler  
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler JaasControlFlag where
  applyOptionalParam req (JaasControlFlag xs) =
    req `setQuery` toQuery ("jaas.controlFlag", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler JaasRealmName where
  applyOptionalParam req (JaasRealmName xs) =
    req `setQuery` toQuery ("jaas.realmName", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler JaasRanking where
  applyOptionalParam req (JaasRanking xs) =
    req `setQuery` toQuery ("jaas.ranking", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Headers where
  applyOptionalParam req (Headers xs) =
    req `setQuery` toQueryColl MultiParamArray ("headers", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Cookies where
  applyOptionalParam req (Cookies xs) =
    req `setQuery` toQueryColl MultiParamArray ("cookies", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Parameters where
  applyOptionalParam req (Parameters xs) =
    req `setQuery` toQueryColl MultiParamArray ("parameters", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Usermap where
  applyOptionalParam req (Usermap xs) =
    req `setQuery` toQueryColl MultiParamArray ("usermap", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler Format where
  applyOptionalParam req (Format xs) =
    req `setQuery` toQuery ("format", Just xs)
instance HasOptionalParam ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler TrustedCredentialsAttribute where
  applyOptionalParam req (TrustedCredentialsAttribute xs) =
    req `setQuery` toQuery ("trustedCredentialsAttribute", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteAuthSsoImplSsoAuthenticationHandler MimePlainText


-- *** comAdobeGraniteBundlesHcImplCodeCacheHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplCodeCacheHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplCodeCacheHealthCheckInfo accept
comAdobeGraniteBundlesHcImplCodeCacheHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CodeCacheHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck MinimumCodeCacheSize where
  applyOptionalParam req (MinimumCodeCacheSize xs) =
    req `setQuery` toQuery ("minimum.code.cache.size", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplCodeCacheHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheckInfo accept
comAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.CrxdeSupportBundleHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplCrxdeSupportBundleHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplDavExBundleHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplDavExBundleHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplDavExBundleHealthCheckInfo accept
comAdobeGraniteBundlesHcImplDavExBundleHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.DavExBundleHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplDavExBundleHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheckInfo accept
comAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.InactiveBundlesHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck IgnoredBundles where
  applyOptionalParam req (IgnoredBundles xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignored.bundles", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplInactiveBundlesHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplJobsHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.JobsHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplJobsHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplJobsHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplJobsHealthCheckInfo accept
comAdobeGraniteBundlesHcImplJobsHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.JobsHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplJobsHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplJobsHealthCheck MaxQueuedJobs where
  applyOptionalParam req (MaxQueuedJobs xs) =
    req `setQuery` toQuery ("max.queued.jobs", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplJobsHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplJobsHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheckInfo accept
comAdobeGraniteBundlesHcImplSlingGetServletHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingGetServletHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplSlingGetServletHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheckInfo accept
comAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJavaScriptHandlerHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplSlingJavaScriptHandlerHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheckInfo accept
comAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingJspScriptHandlerHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplSlingJspScriptHandlerHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheckInfo accept
comAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.SlingReferrerFilterHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplSlingReferrerFilterHealthCheck MimePlainText


-- *** comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck MimeNoContent ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheckInfo accept
comAdobeGraniteBundlesHcImplWebDavBundleHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.bundles.hc.impl.WebDavBundleHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck  
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteBundlesHcImplWebDavBundleHealthCheck MimePlainText


-- *** comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac MimeNoContent ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFacInfo accept
comAdobeGraniteCommentsInternalCommentReplicationContentFilterFac  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.comments.internal.CommentReplicationContentFilterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac  
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac ReplicateCommentResourceTypes where
  applyOptionalParam req (ReplicateCommentResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("replicate.comment.resourceTypes", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCommentsInternalCommentReplicationContentFilterFac MimePlainText


-- *** comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl MimeNoContent ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImplInfo accept
comAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.CompatSwitchingServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl  
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Compatgroups where
  applyOptionalParam req (Compatgroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("compatgroups", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCompatrouterImplCompatSwitchingServiceImpl MimePlainText


-- *** comAdobeGraniteCompatrouterImplRoutingConfig

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.compatrouter.impl.RoutingConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCompatrouterImplRoutingConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCompatrouterImplRoutingConfig MimeNoContent ComAdobeGraniteCompatrouterImplRoutingConfigInfo accept
comAdobeGraniteCompatrouterImplRoutingConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.RoutingConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCompatrouterImplRoutingConfig  
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig Id where
  applyOptionalParam req (Id xs) =
    req `setQuery` toQuery ("id", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig CompatPath where
  applyOptionalParam req (CompatPath xs) =
    req `setQuery` toQuery ("compatPath", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplRoutingConfig NewPath where
  applyOptionalParam req (NewPath xs) =
    req `setQuery` toQuery ("newPath", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCompatrouterImplRoutingConfig MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCompatrouterImplRoutingConfig MimePlainText


-- *** comAdobeGraniteCompatrouterImplSwitchMappingConfig

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.compatrouter.impl.SwitchMappingConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCompatrouterImplSwitchMappingConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCompatrouterImplSwitchMappingConfig MimeNoContent ComAdobeGraniteCompatrouterImplSwitchMappingConfigInfo accept
comAdobeGraniteCompatrouterImplSwitchMappingConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.compatrouter.impl.SwitchMappingConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCompatrouterImplSwitchMappingConfig  
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Group where
  applyOptionalParam req (Group xs) =
    req `setQuery` toQuery ("group", Just xs)
instance HasOptionalParam ComAdobeGraniteCompatrouterImplSwitchMappingConfig Ids where
  applyOptionalParam req (Ids xs) =
    req `setQuery` toQueryColl MultiParamArray ("ids", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCompatrouterImplSwitchMappingConfig MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCompatrouterImplSwitchMappingConfig MimePlainText


-- *** comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving MimeNoContent ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolvingInfo accept
comAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.conf.impl.RuntimeAwareConfigurationResourceResolvingStrategy"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving  
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving FallbackPaths where
  applyOptionalParam req (FallbackPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("fallbackPaths", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteConfImplRuntimeAwareConfigurationResourceResolving MimePlainText


-- *** comAdobeGraniteContexthubImplContextHubImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.contexthub.impl.ContextHubImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteContexthubImplContextHubImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteContexthubImplContextHubImpl MimeNoContent ComAdobeGraniteContexthubImplContextHubImplInfo accept
comAdobeGraniteContexthubImplContextHubImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.contexthub.impl.ContextHubImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteContexthubImplContextHubImpl  
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl ComAdobeGraniteContexthubSilentMode where
  applyOptionalParam req (ComAdobeGraniteContexthubSilentMode xs) =
    req `setQuery` toQuery ("com.adobe.granite.contexthub.silent_mode", Just xs)
instance HasOptionalParam ComAdobeGraniteContexthubImplContextHubImpl ComAdobeGraniteContexthubShowUi where
  applyOptionalParam req (ComAdobeGraniteContexthubShowUi xs) =
    req `setQuery` toQuery ("com.adobe.granite.contexthub.show_ui", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteContexthubImplContextHubImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteContexthubImplContextHubImpl MimePlainText


-- *** comAdobeGraniteCorsImplCORSPolicyImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.cors.impl.CORSPolicyImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCorsImplCORSPolicyImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCorsImplCORSPolicyImpl MimeNoContent ComAdobeGraniteCorsImplCORSPolicyImplInfo accept
comAdobeGraniteCorsImplCORSPolicyImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.cors.impl.CORSPolicyImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCorsImplCORSPolicyImpl  
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Alloworigin where
  applyOptionalParam req (Alloworigin xs) =
    req `setQuery` toQueryColl MultiParamArray ("alloworigin", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Alloworiginregexp where
  applyOptionalParam req (Alloworiginregexp xs) =
    req `setQuery` toQueryColl MultiParamArray ("alloworiginregexp", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Allowedpaths where
  applyOptionalParam req (Allowedpaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowedpaths", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Exposedheaders where
  applyOptionalParam req (Exposedheaders xs) =
    req `setQuery` toQueryColl MultiParamArray ("exposedheaders", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Maxage where
  applyOptionalParam req (Maxage xs) =
    req `setQuery` toQuery ("maxage", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Supportedheaders where
  applyOptionalParam req (Supportedheaders xs) =
    req `setQuery` toQueryColl MultiParamArray ("supportedheaders", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Supportedmethods where
  applyOptionalParam req (Supportedmethods xs) =
    req `setQuery` toQueryColl MultiParamArray ("supportedmethods", Just xs)
instance HasOptionalParam ComAdobeGraniteCorsImplCORSPolicyImpl Supportscredentials where
  applyOptionalParam req (Supportscredentials xs) =
    req `setQuery` toQuery ("supportscredentials", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCorsImplCORSPolicyImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCorsImplCORSPolicyImpl MimePlainText


-- *** comAdobeGraniteCsrfImplCSRFFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.csrf.impl.CSRFFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCsrfImplCSRFFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCsrfImplCSRFFilter MimeNoContent ComAdobeGraniteCsrfImplCSRFFilterInfo accept
comAdobeGraniteCsrfImplCSRFFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCsrfImplCSRFFilter  
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter FilterMethods where
  applyOptionalParam req (FilterMethods xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.methods", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter FilterEnableSafeUserAgents where
  applyOptionalParam req (FilterEnableSafeUserAgents xs) =
    req `setQuery` toQuery ("filter.enable.safe.user.agents", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter FilterSafeUserAgents where
  applyOptionalParam req (FilterSafeUserAgents xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.safe.user.agents", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFFilter FilterExcludedPaths where
  applyOptionalParam req (FilterExcludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.excluded.paths", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCsrfImplCSRFFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCsrfImplCSRFFilter MimePlainText


-- *** comAdobeGraniteCsrfImplCSRFServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.csrf.impl.CSRFServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteCsrfImplCSRFServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteCsrfImplCSRFServlet MimeNoContent ComAdobeGraniteCsrfImplCSRFServletInfo accept
comAdobeGraniteCsrfImplCSRFServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.csrf.impl.CSRFServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteCsrfImplCSRFServlet  
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet CsrfTokenExpiresIn where
  applyOptionalParam req (CsrfTokenExpiresIn xs) =
    req `setQuery` toQuery ("csrf.token.expires.in", Just xs)
instance HasOptionalParam ComAdobeGraniteCsrfImplCSRFServlet SlingAuthRequirements where
  applyOptionalParam req (SlingAuthRequirements xs) =
    req `setQuery` toQuery ("sling.auth.requirements", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteCsrfImplCSRFServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteCsrfImplCSRFServlet MimePlainText


-- *** comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe MimeNoContent ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSeInfo accept
comAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.CryptoDistributionTransportSecretProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe Username where
  applyOptionalParam req (Username xs) =
    req `setQuery` toQuery ("username", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe EncryptedPassword where
  applyOptionalParam req (EncryptedPassword xs) =
    req `setQuery` toQuery ("encryptedPassword", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplCryptoDistributionTransportSe MimePlainText


-- *** comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver MimeNoContent ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserverInfo accept
comAdobeGraniteDistributionCoreImplDiffDiffChangesObserver  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffChangesObserver"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver AgentName where
  applyOptionalParam req (AgentName xs) =
    req `setQuery` toQuery ("agentName", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver DiffPath where
  applyOptionalParam req (DiffPath xs) =
    req `setQuery` toQuery ("diffPath", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver ObservedPath where
  applyOptionalParam req (ObservedPath xs) =
    req `setQuery` toQuery ("observedPath", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver PropertyNames where
  applyOptionalParam req (PropertyNames xs) =
    req `setQuery` toQuery ("propertyNames", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver DistributionDelay where
  applyOptionalParam req (DistributionDelay xs) =
    req `setQuery` toQuery ("distributionDelay", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver ServiceUserTarget where
  applyOptionalParam req (ServiceUserTarget xs) =
    req `setQuery` toQuery ("serviceUser.target", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplDiffDiffChangesObserver MimePlainText


-- *** comAdobeGraniteDistributionCoreImplDiffDiffEventListener

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.diff.DiffEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplDiffDiffEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplDiffDiffEventListener MimeNoContent ComAdobeGraniteDistributionCoreImplDiffDiffEventListenerInfo accept
comAdobeGraniteDistributionCoreImplDiffDiffEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.diff.DiffEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplDiffDiffEventListener  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener DiffPath where
  applyOptionalParam req (DiffPath xs) =
    req `setQuery` toQuery ("diffPath", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDiffDiffEventListener ServiceUserTarget where
  applyOptionalParam req (ServiceUserTarget xs) =
    req `setQuery` toQuery ("serviceUser.target", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplDiffDiffEventListener MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplDiffDiffEventListener MimePlainText


-- *** comAdobeGraniteDistributionCoreImplDistributionToReplicationEven

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplDistributionToReplicationEven 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven MimeNoContent ComAdobeGraniteDistributionCoreImplDistributionToReplicationEvenInfo accept
comAdobeGraniteDistributionCoreImplDistributionToReplicationEven  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.DistributionToReplicationEventTransformer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven ImporterName where
  applyOptionalParam req (ImporterName xs) =
    req `setQuery` toQueryColl MultiParamArray ("importer.name", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplDistributionToReplicationEven MimePlainText


-- *** comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat MimeNoContent ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicatInfo accept
comAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.adapters.ReplicationAgentProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat ProviderName where
  applyOptionalParam req (ProviderName xs) =
    req `setQuery` toQuery ("providerName", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat ForwardRequests where
  applyOptionalParam req (ForwardRequests xs) =
    req `setQuery` toQuery ("forward.requests", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplReplicationAdaptersReplicat MimePlainText


-- *** comAdobeGraniteDistributionCoreImplReplicationDistributionTrans

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplReplicationDistributionTrans 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans MimeNoContent ComAdobeGraniteDistributionCoreImplReplicationDistributionTransInfo accept
comAdobeGraniteDistributionCoreImplReplicationDistributionTrans  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.replication.DistributionTransportHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans ForwardRequests where
  applyOptionalParam req (ForwardRequests xs) =
    req `setQuery` toQuery ("forward.requests", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplReplicationDistributionTrans MimePlainText


-- *** comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu MimeNoContent ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribuInfo accept
comAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.distribution.core.impl.transport.AccessTokenDistributionTransportSecretProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu  
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu UserId where
  applyOptionalParam req (UserId xs) =
    req `setQuery` toQuery ("userId", Just xs)
instance HasOptionalParam ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu AccessTokenProviderTarget where
  applyOptionalParam req (AccessTokenProviderTarget xs) =
    req `setQuery` toQuery ("accessTokenProvider.target", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteDistributionCoreImplTransportAccessTokenDistribu MimePlainText


-- *** comAdobeGraniteFragsImplCheckHttpHeaderFlag

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.frags.impl.CheckHttpHeaderFlag@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteFragsImplCheckHttpHeaderFlag 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteFragsImplCheckHttpHeaderFlag MimeNoContent ComAdobeGraniteFragsImplCheckHttpHeaderFlagInfo accept
comAdobeGraniteFragsImplCheckHttpHeaderFlag  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.frags.impl.CheckHttpHeaderFlag"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteFragsImplCheckHttpHeaderFlag  
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag FeatureName where
  applyOptionalParam req (FeatureName xs) =
    req `setQuery` toQuery ("feature.name", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag FeatureDescription where
  applyOptionalParam req (FeatureDescription xs) =
    req `setQuery` toQuery ("feature.description", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag HttpHeaderName where
  applyOptionalParam req (HttpHeaderName xs) =
    req `setQuery` toQuery ("http.header.name", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplCheckHttpHeaderFlag HttpHeaderValuepattern where
  applyOptionalParam req (HttpHeaderValuepattern xs) =
    req `setQuery` toQuery ("http.header.valuepattern", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteFragsImplCheckHttpHeaderFlag MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteFragsImplCheckHttpHeaderFlag MimePlainText


-- *** comAdobeGraniteFragsImplRandomFeature

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.frags.impl.RandomFeature@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteFragsImplRandomFeature 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteFragsImplRandomFeature MimeNoContent ComAdobeGraniteFragsImplRandomFeatureInfo accept
comAdobeGraniteFragsImplRandomFeature  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.frags.impl.RandomFeature"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteFragsImplRandomFeature  
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature FeatureName where
  applyOptionalParam req (FeatureName xs) =
    req `setQuery` toQuery ("feature.name", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature FeatureDescription where
  applyOptionalParam req (FeatureDescription xs) =
    req `setQuery` toQuery ("feature.description", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature ActivePercentage where
  applyOptionalParam req (ActivePercentage xs) =
    req `setQuery` toQuery ("active.percentage", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature CookieName where
  applyOptionalParam req (CookieName xs) =
    req `setQuery` toQuery ("cookie.name", Just xs)
instance HasOptionalParam ComAdobeGraniteFragsImplRandomFeature CookieMaxAge where
  applyOptionalParam req (CookieMaxAge xs) =
    req `setQuery` toQuery ("cookie.maxAge", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteFragsImplRandomFeature MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteFragsImplRandomFeature MimePlainText


-- *** comAdobeGraniteHttpcacheFileFileCacheStore

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.httpcache.file.FileCacheStore@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteHttpcacheFileFileCacheStore 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteHttpcacheFileFileCacheStore MimeNoContent ComAdobeGraniteHttpcacheFileFileCacheStoreInfo accept
comAdobeGraniteHttpcacheFileFileCacheStore  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.httpcache.file.FileCacheStore"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteHttpcacheFileFileCacheStore  
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore ComAdobeGraniteHttpcacheFileDocumentRoot where
  applyOptionalParam req (ComAdobeGraniteHttpcacheFileDocumentRoot xs) =
    req `setQuery` toQuery ("com.adobe.granite.httpcache.file.documentRoot", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheFileFileCacheStore ComAdobeGraniteHttpcacheFileIncludeHost where
  applyOptionalParam req (ComAdobeGraniteHttpcacheFileIncludeHost xs) =
    req `setQuery` toQuery ("com.adobe.granite.httpcache.file.includeHost", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteHttpcacheFileFileCacheStore MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteHttpcacheFileFileCacheStore MimePlainText


-- *** comAdobeGraniteHttpcacheImplOuterCacheFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.httpcache.impl.OuterCacheFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteHttpcacheImplOuterCacheFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteHttpcacheImplOuterCacheFilter MimeNoContent ComAdobeGraniteHttpcacheImplOuterCacheFilterInfo accept
comAdobeGraniteHttpcacheImplOuterCacheFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.httpcache.impl.OuterCacheFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteHttpcacheImplOuterCacheFilter  
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteHttpcacheImplOuterCacheFilter ComAdobeGraniteHttpcacheUrlPaths where
  applyOptionalParam req (ComAdobeGraniteHttpcacheUrlPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.granite.httpcache.url.paths", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteHttpcacheImplOuterCacheFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteHttpcacheImplOuterCacheFilter MimePlainText


-- *** comAdobeGraniteI18nImplBundlePseudoTranslations

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.i18n.impl.bundle.PseudoTranslations@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteI18nImplBundlePseudoTranslations 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteI18nImplBundlePseudoTranslations MimeNoContent ComAdobeGraniteI18nImplBundlePseudoTranslationsInfo accept
comAdobeGraniteI18nImplBundlePseudoTranslations  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.i18n.impl.bundle.PseudoTranslations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteI18nImplBundlePseudoTranslations  
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplBundlePseudoTranslations PseudoPatterns where
  applyOptionalParam req (PseudoPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("pseudo.patterns", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteI18nImplBundlePseudoTranslations MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteI18nImplBundlePseudoTranslations MimePlainText


-- *** comAdobeGraniteI18nImplPreferencesLocaleResolverService

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteI18nImplPreferencesLocaleResolverService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteI18nImplPreferencesLocaleResolverService MimeNoContent ComAdobeGraniteI18nImplPreferencesLocaleResolverServiceInfo accept
comAdobeGraniteI18nImplPreferencesLocaleResolverService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.i18n.impl.PreferencesLocaleResolverService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteI18nImplPreferencesLocaleResolverService  
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteI18nImplPreferencesLocaleResolverService SecurityPreferencesName where
  applyOptionalParam req (SecurityPreferencesName xs) =
    req `setQuery` toQuery ("security.preferences.name", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteI18nImplPreferencesLocaleResolverService MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteI18nImplPreferencesLocaleResolverService MimePlainText


-- *** comAdobeGraniteInfocollectorInfoCollector

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.infocollector.InfoCollector@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteInfocollectorInfoCollector 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteInfocollectorInfoCollector MimeNoContent ComAdobeGraniteInfocollectorInfoCollectorInfo accept
comAdobeGraniteInfocollectorInfoCollector  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.infocollector.InfoCollector"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteInfocollectorInfoCollector  
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector GraniteInfocollectorIncludeThreadDumps where
  applyOptionalParam req (GraniteInfocollectorIncludeThreadDumps xs) =
    req `setQuery` toQuery ("granite.infocollector.includeThreadDumps", Just xs)
instance HasOptionalParam ComAdobeGraniteInfocollectorInfoCollector GraniteInfocollectorIncludeHeapDump where
  applyOptionalParam req (GraniteInfocollectorIncludeHeapDump xs) =
    req `setQuery` toQuery ("granite.infocollector.includeHeapDump", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteInfocollectorInfoCollector MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteInfocollectorInfoCollector MimePlainText


-- *** comAdobeGraniteJettySslInternalGraniteSslConnectorFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteJettySslInternalGraniteSslConnectorFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory MimeNoContent ComAdobeGraniteJettySslInternalGraniteSslConnectorFactoryInfo accept
comAdobeGraniteJettySslInternalGraniteSslConnectorFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.jetty.ssl.internal.GraniteSslConnectorFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory  
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslPort where
  applyOptionalParam req (ComAdobeGraniteJettySslPort xs) =
    req `setQuery` toQuery ("com.adobe.granite.jetty.ssl.port", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslKeystoreUser where
  applyOptionalParam req (ComAdobeGraniteJettySslKeystoreUser xs) =
    req `setQuery` toQuery ("com.adobe.granite.jetty.ssl.keystore.user", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslKeystorePassword where
  applyOptionalParam req (ComAdobeGraniteJettySslKeystorePassword xs) =
    req `setQuery` toQuery ("com.adobe.granite.jetty.ssl.keystore.password", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslCiphersuitesExcluded where
  applyOptionalParam req (ComAdobeGraniteJettySslCiphersuitesExcluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.granite.jetty.ssl.ciphersuites.excluded", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslCiphersuitesIncluded where
  applyOptionalParam req (ComAdobeGraniteJettySslCiphersuitesIncluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.adobe.granite.jetty.ssl.ciphersuites.included", Just xs)
instance HasOptionalParam ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory ComAdobeGraniteJettySslClientCertificate where
  applyOptionalParam req (ComAdobeGraniteJettySslClientCertificate xs) =
    req `setQuery` toQuery ("com.adobe.granite.jetty.ssl.client.certificate", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteJettySslInternalGraniteSslConnectorFactory MimePlainText


-- *** comAdobeGraniteLicenseImplLicenseCheckFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.license.impl.LicenseCheckFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteLicenseImplLicenseCheckFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteLicenseImplLicenseCheckFilter MimeNoContent ComAdobeGraniteLicenseImplLicenseCheckFilterInfo accept
comAdobeGraniteLicenseImplLicenseCheckFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.license.impl.LicenseCheckFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteLicenseImplLicenseCheckFilter  
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter CheckInternval where
  applyOptionalParam req (CheckInternval xs) =
    req `setQuery` toQuery ("checkInternval", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter ExcludeIds where
  applyOptionalParam req (ExcludeIds xs) =
    req `setQuery` toQueryColl MultiParamArray ("excludeIds", Just xs)
instance HasOptionalParam ComAdobeGraniteLicenseImplLicenseCheckFilter EncryptPing where
  applyOptionalParam req (EncryptPing xs) =
    req `setQuery` toQuery ("encryptPing", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteLicenseImplLicenseCheckFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteLicenseImplLicenseCheckFilter MimePlainText


-- *** comAdobeGraniteLoggingImplLogAnalyserImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.logging.impl.LogAnalyserImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteLoggingImplLogAnalyserImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteLoggingImplLogAnalyserImpl MimeNoContent ComAdobeGraniteLoggingImplLogAnalyserImplInfo accept
comAdobeGraniteLoggingImplLogAnalyserImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.logging.impl.LogAnalyserImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteLoggingImplLogAnalyserImpl  
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl MessagesQueueSize where
  applyOptionalParam req (MessagesQueueSize xs) =
    req `setQuery` toQuery ("messages.queue.size", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl LoggerConfig where
  applyOptionalParam req (LoggerConfig xs) =
    req `setQuery` toQueryColl MultiParamArray ("logger.config", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogAnalyserImpl MessagesSize where
  applyOptionalParam req (MessagesSize xs) =
    req `setQuery` toQuery ("messages.size", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteLoggingImplLogAnalyserImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteLoggingImplLogAnalyserImpl MimePlainText


-- *** comAdobeGraniteLoggingImplLogErrorHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.logging.impl.LogErrorHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteLoggingImplLogErrorHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteLoggingImplLogErrorHealthCheck MimeNoContent ComAdobeGraniteLoggingImplLogErrorHealthCheckInfo accept
comAdobeGraniteLoggingImplLogErrorHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.logging.impl.LogErrorHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteLoggingImplLogErrorHealthCheck  
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteLoggingImplLogErrorHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteLoggingImplLogErrorHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteLoggingImplLogErrorHealthCheck MimePlainText


-- *** comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask MimeNoContent ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTaskInfo accept
comAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.DataStoreGarbageCollectionTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask  
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask GraniteMaintenanceMandatory where
  applyOptionalParam req (GraniteMaintenanceMandatory xs) =
    req `setQuery` toQuery ("granite.maintenance.mandatory", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask JobTopics where
  applyOptionalParam req (JobTopics xs) =
    req `setQuery` toQuery ("job.topics", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteMaintenanceCrxImplDataStoreGarbageCollectionTask MimePlainText


-- *** comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask MimeNoContent ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTaskInfo accept
comAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.LuceneBinariesCleanupTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask  
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask JobTopics where
  applyOptionalParam req (JobTopics xs) =
    req `setQuery` toQuery ("job.topics", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteMaintenanceCrxImplLuceneBinariesCleanupTask MimePlainText


-- *** comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask MimeNoContent ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTaskInfo accept
comAdobeGraniteMaintenanceCrxImplRevisionCleanupTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.maintenance.crx.impl.RevisionCleanupTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask  
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask FullGcDays where
  applyOptionalParam req (FullGcDays xs) =
    req `setQuery` toQueryColl MultiParamArray ("full.gc.days", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteMaintenanceCrxImplRevisionCleanupTask MimePlainText


-- *** comAdobeGraniteMonitoringImplScriptConfigImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.monitoring.impl.ScriptConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteMonitoringImplScriptConfigImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteMonitoringImplScriptConfigImpl MimeNoContent ComAdobeGraniteMonitoringImplScriptConfigImplInfo accept
comAdobeGraniteMonitoringImplScriptConfigImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.monitoring.impl.ScriptConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteMonitoringImplScriptConfigImpl  
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl ScriptFilename where
  applyOptionalParam req (ScriptFilename xs) =
    req `setQuery` toQuery ("script.filename", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl ScriptDisplay where
  applyOptionalParam req (ScriptDisplay xs) =
    req `setQuery` toQuery ("script.display", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl ScriptPath where
  applyOptionalParam req (ScriptPath xs) =
    req `setQuery` toQuery ("script.path", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl ScriptPlatform where
  applyOptionalParam req (ScriptPlatform xs) =
    req `setQuery` toQueryColl MultiParamArray ("script.platform", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Interval where
  applyOptionalParam req (Interval xs) =
    req `setQuery` toQuery ("interval", Just xs)
instance HasOptionalParam ComAdobeGraniteMonitoringImplScriptConfigImpl Jmxdomain where
  applyOptionalParam req (Jmxdomain xs) =
    req `setQuery` toQuery ("jmxdomain", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteMonitoringImplScriptConfigImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteMonitoringImplScriptConfigImpl MimePlainText


-- *** comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan MimeNoContent ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHanInfo accept
comAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.auth.impl.OAuth2ServerAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan  
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan JaasControlFlag where
  applyOptionalParam req (JaasControlFlag xs) =
    req `setQuery` toQuery ("jaas.controlFlag", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan JaasRealmName where
  applyOptionalParam req (JaasRealmName xs) =
    req `setQuery` toQuery ("jaas.realmName", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan JaasRanking where
  applyOptionalParam req (JaasRanking xs) =
    req `setQuery` toQuery ("jaas.ranking", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan OauthOfflineValidation where
  applyOptionalParam req (OauthOfflineValidation xs) =
    req `setQuery` toQuery ("oauth.offline.validation", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerAuthImplOAuth2ServerAuthenticationHan MimePlainText


-- *** comAdobeGraniteOauthServerImplAccessTokenCleanupTask

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerImplAccessTokenCleanupTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerImplAccessTokenCleanupTask MimeNoContent ComAdobeGraniteOauthServerImplAccessTokenCleanupTaskInfo accept
comAdobeGraniteOauthServerImplAccessTokenCleanupTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.AccessTokenCleanupTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerImplAccessTokenCleanupTask  
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplAccessTokenCleanupTask SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerImplAccessTokenCleanupTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerImplAccessTokenCleanupTask MimePlainText


-- *** comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet MimeNoContent ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServletInfo accept
comAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2ClientRevocationServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet  
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet OauthClientRevocationActive where
  applyOptionalParam req (OauthClientRevocationActive xs) =
    req `setQuery` toQuery ("oauth.client.revocation.active", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerImplOAuth2ClientRevocationServlet MimePlainText


-- *** comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet MimeNoContent ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServletInfo accept
comAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2RevocationEndpointServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet  
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet SlingServletPaths where
  applyOptionalParam req (SlingServletPaths xs) =
    req `setQuery` toQuery ("sling.servlet.paths", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet OauthRevocationActive where
  applyOptionalParam req (OauthRevocationActive xs) =
    req `setQuery` toQuery ("oauth.revocation.active", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerImplOAuth2RevocationEndpointServlet MimePlainText


-- *** comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet MimeNoContent ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServletInfo accept
comAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenEndpointServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet  
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet OauthIssuer where
  applyOptionalParam req (OauthIssuer xs) =
    req `setQuery` toQuery ("oauth.issuer", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet OauthAccessTokenExpiresIn where
  applyOptionalParam req (OauthAccessTokenExpiresIn xs) =
    req `setQuery` toQuery ("oauth.access.token.expires.in", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet OsgiHttpWhiteboardServletPattern where
  applyOptionalParam req (OsgiHttpWhiteboardServletPattern xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.servlet.pattern", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet OsgiHttpWhiteboardContextSelect where
  applyOptionalParam req (OsgiHttpWhiteboardContextSelect xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.context.select", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerImplOAuth2TokenEndpointServlet MimePlainText


-- *** comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet MimeNoContent ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServletInfo accept
comAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.oauth.server.impl.OAuth2TokenRevocationServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet  
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet OauthTokenRevocationActive where
  applyOptionalParam req (OauthTokenRevocationActive xs) =
    req `setQuery` toQuery ("oauth.token.revocation.active", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOauthServerImplOAuth2TokenRevocationServlet MimePlainText


-- *** comAdobeGraniteOffloadingImplOffloadingConfigurator

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.offloading.impl.OffloadingConfigurator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOffloadingImplOffloadingConfigurator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOffloadingImplOffloadingConfigurator MimeNoContent ComAdobeGraniteOffloadingImplOffloadingConfiguratorInfo accept
comAdobeGraniteOffloadingImplOffloadingConfigurator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingConfigurator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOffloadingImplOffloadingConfigurator  
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator OffloadingTransporter where
  applyOptionalParam req (OffloadingTransporter xs) =
    req `setQuery` toQuery ("offloading.transporter", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingConfigurator OffloadingCleanupPayload where
  applyOptionalParam req (OffloadingCleanupPayload xs) =
    req `setQuery` toQuery ("offloading.cleanup.payload", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOffloadingImplOffloadingConfigurator MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOffloadingImplOffloadingConfigurator MimePlainText


-- *** comAdobeGraniteOffloadingImplOffloadingJobCloner

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.offloading.impl.OffloadingJobCloner@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOffloadingImplOffloadingJobCloner 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOffloadingImplOffloadingJobCloner MimeNoContent ComAdobeGraniteOffloadingImplOffloadingJobClonerInfo accept
comAdobeGraniteOffloadingImplOffloadingJobCloner  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobCloner"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOffloadingImplOffloadingJobCloner  
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobCloner OffloadingJobclonerEnabled where
  applyOptionalParam req (OffloadingJobclonerEnabled xs) =
    req `setQuery` toQuery ("offloading.jobcloner.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOffloadingImplOffloadingJobCloner MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOffloadingImplOffloadingJobCloner MimePlainText


-- *** comAdobeGraniteOffloadingImplOffloadingJobOffloader

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.offloading.impl.OffloadingJobOffloader@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOffloadingImplOffloadingJobOffloader 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOffloadingImplOffloadingJobOffloader MimeNoContent ComAdobeGraniteOffloadingImplOffloadingJobOffloaderInfo accept
comAdobeGraniteOffloadingImplOffloadingJobOffloader  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.offloading.impl.OffloadingJobOffloader"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOffloadingImplOffloadingJobOffloader  
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplOffloadingJobOffloader OffloadingOffloaderEnabled where
  applyOptionalParam req (OffloadingOffloaderEnabled xs) =
    req `setQuery` toQuery ("offloading.offloader.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOffloadingImplOffloadingJobOffloader MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOffloadingImplOffloadingJobOffloader MimePlainText


-- *** comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager MimeNoContent ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManagerInfo accept
comAdobeGraniteOffloadingImplTransporterOffloadingAgentManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingAgentManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager  
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager OffloadingAgentmanagerEnabled where
  applyOptionalParam req (OffloadingAgentmanagerEnabled xs) =
    req `setQuery` toQuery ("offloading.agentmanager.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOffloadingImplTransporterOffloadingAgentManager MimePlainText


-- *** comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo MimeNoContent ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspoInfo accept
comAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.offloading.impl.transporter.OffloadingDefaultTransporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo  
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportAgentToWorkerPrefix where
  applyOptionalParam req (DefaultTransportAgentToWorkerPrefix xs) =
    req `setQuery` toQuery ("default.transport.agent-to-worker.prefix", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportAgentToMasterPrefix where
  applyOptionalParam req (DefaultTransportAgentToMasterPrefix xs) =
    req `setQuery` toQuery ("default.transport.agent-to-master.prefix", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportInputPackage where
  applyOptionalParam req (DefaultTransportInputPackage xs) =
    req `setQuery` toQuery ("default.transport.input.package", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportOutputPackage where
  applyOptionalParam req (DefaultTransportOutputPackage xs) =
    req `setQuery` toQuery ("default.transport.output.package", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportReplicationSynchronous where
  applyOptionalParam req (DefaultTransportReplicationSynchronous xs) =
    req `setQuery` toQuery ("default.transport.replication.synchronous", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo DefaultTransportContentpackage where
  applyOptionalParam req (DefaultTransportContentpackage xs) =
    req `setQuery` toQuery ("default.transport.contentpackage", Just xs)
instance HasOptionalParam ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo OffloadingTransporterDefaultEnabled where
  applyOptionalParam req (OffloadingTransporterDefaultEnabled xs) =
    req `setQuery` toQuery ("offloading.transporter.default.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOffloadingImplTransporterOffloadingDefaultTranspo MimePlainText


-- *** comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl MimeNoContent ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImplInfo accept
comAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.omnisearch.impl.core.OmniSearchServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl  
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl OmnisearchSuggestionRequiretextMin where
  applyOptionalParam req (OmnisearchSuggestionRequiretextMin xs) =
    req `setQuery` toQuery ("omnisearch.suggestion.requiretext.min", Just xs)
instance HasOptionalParam ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl OmnisearchSuggestionSpellcheckRequire where
  applyOptionalParam req (OmnisearchSuggestionSpellcheckRequire xs) =
    req `setQuery` toQuery ("omnisearch.suggestion.spellcheck.require", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOmnisearchImplCoreOmniSearchServiceImpl MimePlainText


-- *** comAdobeGraniteOptoutImplOptOutServiceImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.optout.impl.OptOutServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteOptoutImplOptOutServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteOptoutImplOptOutServiceImpl MimeNoContent ComAdobeGraniteOptoutImplOptOutServiceImplInfo accept
comAdobeGraniteOptoutImplOptOutServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.optout.impl.OptOutServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteOptoutImplOptOutServiceImpl  
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl OptoutCookies where
  applyOptionalParam req (OptoutCookies xs) =
    req `setQuery` toQueryColl MultiParamArray ("optout.cookies", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl OptoutHeaders where
  applyOptionalParam req (OptoutHeaders xs) =
    req `setQuery` toQueryColl MultiParamArray ("optout.headers", Just xs)
instance HasOptionalParam ComAdobeGraniteOptoutImplOptOutServiceImpl OptoutWhitelistCookies where
  applyOptionalParam req (OptoutWhitelistCookies xs) =
    req `setQuery` toQueryColl MultiParamArray ("optout.whitelist.cookies", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteOptoutImplOptOutServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteOptoutImplOptOutServiceImpl MimePlainText


-- *** comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck MimeNoContent ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheckInfo accept
comAdobeGraniteQueriesImplHcAsyncIndexHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.AsyncIndexHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck  
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck IndexingCriticalThreshold where
  applyOptionalParam req (IndexingCriticalThreshold xs) =
    req `setQuery` toQuery ("indexing.critical.threshold", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck IndexingWarnThreshold where
  applyOptionalParam req (IndexingWarnThreshold xs) =
    req `setQuery` toQuery ("indexing.warn.threshold", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteQueriesImplHcAsyncIndexHealthCheck MimePlainText


-- *** comAdobeGraniteQueriesImplHcLargeIndexHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteQueriesImplHcLargeIndexHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck MimeNoContent ComAdobeGraniteQueriesImplHcLargeIndexHealthCheckInfo accept
comAdobeGraniteQueriesImplHcLargeIndexHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.LargeIndexHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck  
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck LargeIndexCriticalThreshold where
  applyOptionalParam req (LargeIndexCriticalThreshold xs) =
    req `setQuery` toQuery ("large.index.critical.threshold", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck LargeIndexWarnThreshold where
  applyOptionalParam req (LargeIndexWarnThreshold xs) =
    req `setQuery` toQuery ("large.index.warn.threshold", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteQueriesImplHcLargeIndexHealthCheck MimePlainText


-- *** comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck MimeNoContent ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheckInfo accept
comAdobeGraniteQueriesImplHcQueriesStatusHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueriesStatusHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck  
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteQueriesImplHcQueriesStatusHealthCheck MimePlainText


-- *** comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics MimeNoContent ComAdobeGraniteQueriesImplHcQueryHealthCheckMetricsInfo accept
comAdobeGraniteQueriesImplHcQueryHealthCheckMetrics  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryHealthCheckMetrics"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics  
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics GetPeriod where
  applyOptionalParam req (GetPeriod xs) =
    req `setQuery` toQuery ("getPeriod", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteQueriesImplHcQueryHealthCheckMetrics MimePlainText


-- *** comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck MimeNoContent ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheckInfo accept
comAdobeGraniteQueriesImplHcQueryLimitsHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.queries.impl.hc.QueryLimitsHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck  
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteQueriesImplHcQueryLimitsHealthCheck MimePlainText


-- *** comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck MimeNoContent ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheckInfo accept
comAdobeGraniteReplicationHcImplReplicationQueueHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationQueueHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck  
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck NumberOfRetriesAllowed where
  applyOptionalParam req (NumberOfRetriesAllowed xs) =
    req `setQuery` toQuery ("number.of.retries.allowed", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteReplicationHcImplReplicationQueueHealthCheck MimePlainText


-- *** comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC MimeNoContent ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthCInfo accept
comAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.replication.hc.impl.ReplicationTransportUsersHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC  
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteReplicationHcImplReplicationTransportUsersHealthC MimePlainText


-- *** comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck MimeNoContent ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheckInfo accept
comAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.AuthorizableNodeNameHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplAuthorizableNodeNameHealthCheck MimePlainText


-- *** comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC MimeNoContent ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthCInfo accept
comAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.content.sling.SlingContentHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC ExcludeSearchPath where
  applyOptionalParam req (ExcludeSearchPath xs) =
    req `setQuery` toQueryColl MultiParamArray ("exclude.search.path", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplContentSlingSlingContentHealthC MimePlainText


-- *** comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck MimeNoContent ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheckInfo accept
comAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ContinuousRGCHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplContinuousRGCHealthCheck MimePlainText


-- *** comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe MimeNoContent ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthCheInfo accept
comAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultAccessUserProfileHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplDefaultAccessUserProfileHealthChe MimePlainText


-- *** comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck MimeNoContent ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheckInfo accept
comAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DefaultLoginsHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck AccountLogins where
  applyOptionalParam req (AccountLogins xs) =
    req `setQuery` toQueryColl MultiParamArray ("account.logins", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck ConsoleLogins where
  applyOptionalParam req (ConsoleLogins xs) =
    req `setQuery` toQueryColl MultiParamArray ("console.logins", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplDefaultLoginsHealthCheck MimePlainText


-- *** comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck MimeNoContent ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheckInfo accept
comAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.DiskSpaceHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck DiskSpaceWarnThreshold where
  applyOptionalParam req (DiskSpaceWarnThreshold xs) =
    req `setQuery` toQuery ("disk.space.warn.threshold", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck DiskSpaceErrorThreshold where
  applyOptionalParam req (DiskSpaceErrorThreshold xs) =
    req `setQuery` toQuery ("disk.space.error.threshold", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplDiskSpaceHealthCheck MimePlainText


-- *** comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck MimeNoContent ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheckInfo accept
comAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.hc.impl.ObservationQueueLengthHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck  
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryHcImplObservationQueueLengthHealthCheck MimePlainText


-- *** comAdobeGraniteRepositoryImplCommitStatsConfig

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.impl.CommitStatsConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryImplCommitStatsConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryImplCommitStatsConfig MimeNoContent ComAdobeGraniteRepositoryImplCommitStatsConfigInfo accept
comAdobeGraniteRepositoryImplCommitStatsConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.impl.CommitStatsConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryImplCommitStatsConfig  
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig IntervalSeconds where
  applyOptionalParam req (IntervalSeconds xs) =
    req `setQuery` toQuery ("intervalSeconds", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig CommitsPerIntervalThreshold where
  applyOptionalParam req (CommitsPerIntervalThreshold xs) =
    req `setQuery` toQuery ("commitsPerIntervalThreshold", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig MaxLocationLength where
  applyOptionalParam req (MaxLocationLength xs) =
    req `setQuery` toQuery ("maxLocationLength", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig MaxDetailsShown where
  applyOptionalParam req (MaxDetailsShown xs) =
    req `setQuery` toQuery ("maxDetailsShown", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig MinDetailsPercentage where
  applyOptionalParam req (MinDetailsPercentage xs) =
    req `setQuery` toQuery ("minDetailsPercentage", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig ThreadMatchers where
  applyOptionalParam req (ThreadMatchers xs) =
    req `setQuery` toQueryColl MultiParamArray ("threadMatchers", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig MaxGreedyDepth where
  applyOptionalParam req (MaxGreedyDepth xs) =
    req `setQuery` toQuery ("maxGreedyDepth", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig GreedyStackMatchers where
  applyOptionalParam req (GreedyStackMatchers xs) =
    req `setQuery` toQuery ("greedyStackMatchers", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig StackFilters where
  applyOptionalParam req (StackFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("stackFilters", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig StackMatchers where
  applyOptionalParam req (StackMatchers xs) =
    req `setQuery` toQueryColl MultiParamArray ("stackMatchers", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig StackCategorizers where
  applyOptionalParam req (StackCategorizers xs) =
    req `setQuery` toQueryColl MultiParamArray ("stackCategorizers", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryImplCommitStatsConfig StackShorteners where
  applyOptionalParam req (StackShorteners xs) =
    req `setQuery` toQueryColl MultiParamArray ("stackShorteners", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryImplCommitStatsConfig MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryImplCommitStatsConfig MimePlainText


-- *** comAdobeGraniteRepositoryServiceUserConfiguration

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.repository.ServiceUserConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRepositoryServiceUserConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRepositoryServiceUserConfiguration MimeNoContent ComAdobeGraniteRepositoryServiceUserConfigurationInfo accept
comAdobeGraniteRepositoryServiceUserConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.repository.ServiceUserConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRepositoryServiceUserConfiguration  
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration ServiceusersSimpleSubjectPopulation where
  applyOptionalParam req (ServiceusersSimpleSubjectPopulation xs) =
    req `setQuery` toQuery ("serviceusers.simpleSubjectPopulation", Just xs)
instance HasOptionalParam ComAdobeGraniteRepositoryServiceUserConfiguration ServiceusersList where
  applyOptionalParam req (ServiceusersList xs) =
    req `setQuery` toQueryColl MultiParamArray ("serviceusers.list", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRepositoryServiceUserConfiguration MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRepositoryServiceUserConfiguration MimePlainText


-- *** comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm MimeNoContent ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckImInfo accept
comAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.requests.logging.impl.hc.RequestsStatusHealthCheckImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm  
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRequestsLoggingImplHcRequestsStatusHealthCheckIm MimePlainText


-- *** comAdobeGraniteResourcestatusImplCompositeStatusType

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.resourcestatus.impl.CompositeStatusType@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteResourcestatusImplCompositeStatusType 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteResourcestatusImplCompositeStatusType MimeNoContent ComAdobeGraniteResourcestatusImplCompositeStatusTypeInfo accept
comAdobeGraniteResourcestatusImplCompositeStatusType  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.CompositeStatusType"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteResourcestatusImplCompositeStatusType  
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplCompositeStatusType Types where
  applyOptionalParam req (Types xs) =
    req `setQuery` toQueryColl MultiParamArray ("types", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteResourcestatusImplCompositeStatusType MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteResourcestatusImplCompositeStatusType MimePlainText


-- *** comAdobeGraniteResourcestatusImplStatusResourceProviderImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteResourcestatusImplStatusResourceProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl MimeNoContent ComAdobeGraniteResourcestatusImplStatusResourceProviderImplInfo accept
comAdobeGraniteResourcestatusImplStatusResourceProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.resourcestatus.impl.StatusResourceProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl  
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl ProviderRoot where
  applyOptionalParam req (ProviderRoot xs) =
    req `setQuery` toQuery ("provider.root", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteResourcestatusImplStatusResourceProviderImpl MimePlainText


-- *** comAdobeGraniteRestAssetsImplAssetContentDispositionFilter

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRestAssetsImplAssetContentDispositionFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter MimeNoContent ComAdobeGraniteRestAssetsImplAssetContentDispositionFilterInfo accept
comAdobeGraniteRestAssetsImplAssetContentDispositionFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.rest.assets.impl.AssetContentDispositionFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter  
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter MimeAllowEmpty where
  applyOptionalParam req (MimeAllowEmpty xs) =
    req `setQuery` toQuery ("mime.allowEmpty", Just xs)
instance HasOptionalParam ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter MimeAllowed where
  applyOptionalParam req (MimeAllowed xs) =
    req `setQuery` toQueryColl MultiParamArray ("mime.allowed", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRestAssetsImplAssetContentDispositionFilter MimePlainText


-- *** comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl MimeNoContent ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImplInfo accept
comAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.rest.impl.ApiEndpointResourceProviderFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl  
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl ProviderRoots where
  applyOptionalParam req (ProviderRoots xs) =
    req `setQuery` toQuery ("provider.roots", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRestImplApiEndpointResourceProviderFactoryImpl MimePlainText


-- *** comAdobeGraniteRestImplServletDefaultGETServlet

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.rest.impl.servlet.DefaultGETServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteRestImplServletDefaultGETServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteRestImplServletDefaultGETServlet MimeNoContent ComAdobeGraniteRestImplServletDefaultGETServletInfo accept
comAdobeGraniteRestImplServletDefaultGETServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.rest.impl.servlet.DefaultGETServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteRestImplServletDefaultGETServlet  
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet DefaultLimit where
  applyOptionalParam req (DefaultLimit xs) =
    req `setQuery` toQuery ("default.limit", Just xs)
instance HasOptionalParam ComAdobeGraniteRestImplServletDefaultGETServlet UseAbsoluteUri where
  applyOptionalParam req (UseAbsoluteUri xs) =
    req `setQuery` toQuery ("use.absolute.uri", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteRestImplServletDefaultGETServlet MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteRestImplServletDefaultGETServlet MimePlainText


-- *** comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS MimeNoContent ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationSInfo accept
comAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.security.user.ui.internal.servlets.SSLConfigurationServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS  
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteSecurityUserUiInternalServletsSSLConfigurationS MimePlainText


-- *** comAdobeGraniteSecurityUserUserPropertiesService

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.security.user.UserPropertiesService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteSecurityUserUserPropertiesService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteSecurityUserUserPropertiesService MimeNoContent ComAdobeGraniteSecurityUserUserPropertiesServiceInfo accept
comAdobeGraniteSecurityUserUserPropertiesService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.security.user.UserPropertiesService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteSecurityUserUserPropertiesService  
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService AdapterCondition where
  applyOptionalParam req (AdapterCondition xs) =
    req `setQuery` toQuery ("adapter.condition", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService GraniteUserpropertiesNodetypes where
  applyOptionalParam req (GraniteUserpropertiesNodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("granite.userproperties.nodetypes", Just xs)
instance HasOptionalParam ComAdobeGraniteSecurityUserUserPropertiesService GraniteUserpropertiesResourcetypes where
  applyOptionalParam req (GraniteUserpropertiesResourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("granite.userproperties.resourcetypes", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteSecurityUserUserPropertiesService MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteSecurityUserUserPropertiesService MimePlainText


-- *** comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl MimeNoContent ComAdobeGraniteSocialgraphImplSocialGraphFactoryImplInfo accept
comAdobeGraniteSocialgraphImplSocialGraphFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.socialgraph.impl.SocialGraphFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl  
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Group2memberRelationshipOutgoing where
  applyOptionalParam req (Group2memberRelationshipOutgoing xs) =
    req `setQuery` toQuery ("group2member.relationship.outgoing", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Group2memberExcludedOutgoing where
  applyOptionalParam req (Group2memberExcludedOutgoing xs) =
    req `setQuery` toQueryColl MultiParamArray ("group2member.excluded.outgoing", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Group2memberRelationshipIncoming where
  applyOptionalParam req (Group2memberRelationshipIncoming xs) =
    req `setQuery` toQuery ("group2member.relationship.incoming", Just xs)
instance HasOptionalParam ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl Group2memberExcludedIncoming where
  applyOptionalParam req (Group2memberExcludedIncoming xs) =
    req `setQuery` toQueryColl MultiParamArray ("group2member.excluded.incoming", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteSocialgraphImplSocialGraphFactoryImpl MimePlainText


-- *** comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl MimeNoContent ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImplInfo accept
comAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.system.monitoring.impl.SystemStatsMBeanImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl  
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl JmxObjectname where
  applyOptionalParam req (JmxObjectname xs) =
    req `setQuery` toQuery ("jmx.objectname", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteSystemMonitoringImplSystemStatsMBeanImpl MimePlainText


-- *** comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory MimeNoContent ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactoryInfo accept
comAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskAdapterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory  
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory AdapterCondition where
  applyOptionalParam req (AdapterCondition xs) =
    req `setQuery` toQuery ("adapter.condition", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTaskmanagementImplJcrTaskAdapterFactory MimePlainText


-- *** comAdobeGraniteTaskmanagementImplJcrTaskArchiveService

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTaskmanagementImplJcrTaskArchiveService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService MimeNoContent ComAdobeGraniteTaskmanagementImplJcrTaskArchiveServiceInfo accept
comAdobeGraniteTaskmanagementImplJcrTaskArchiveService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.jcr.TaskArchiveService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService  
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService ArchivingEnabled where
  applyOptionalParam req (ArchivingEnabled xs) =
    req `setQuery` toQuery ("archiving.enabled", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService ArchiveSinceDaysCompleted where
  applyOptionalParam req (ArchiveSinceDaysCompleted xs) =
    req `setQuery` toQuery ("archive.since.days.completed", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTaskmanagementImplJcrTaskArchiveService MimePlainText


-- *** comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask MimeNoContent ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTaskInfo accept
comAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.purge.TaskPurgeMaintenanceTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask  
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask PurgeCompleted where
  applyOptionalParam req (PurgeCompleted xs) =
    req `setQuery` toQuery ("purgeCompleted", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask CompletedAge where
  applyOptionalParam req (CompletedAge xs) =
    req `setQuery` toQuery ("completedAge", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask PurgeActive where
  applyOptionalParam req (PurgeActive xs) =
    req `setQuery` toQuery ("purgeActive", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask ActiveAge where
  applyOptionalParam req (ActiveAge xs) =
    req `setQuery` toQuery ("activeAge", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask SaveThreshold where
  applyOptionalParam req (SaveThreshold xs) =
    req `setQuery` toQuery ("saveThreshold", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTaskmanagementImplPurgeTaskPurgeMaintenanceTask MimePlainText


-- *** comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor MimeNoContent ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactorInfo accept
comAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.taskmanagement.impl.service.TaskManagerAdapterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor  
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor AdapterCondition where
  applyOptionalParam req (AdapterCondition xs) =
    req `setQuery` toQuery ("adapter.condition", Just xs)
instance HasOptionalParam ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor TaskmanagerAdmingroups where
  applyOptionalParam req (TaskmanagerAdmingroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("taskmanager.admingroups", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTaskmanagementImplServiceTaskManagerAdapterFactor MimePlainText


-- *** comAdobeGraniteThreaddumpThreadDumpCollector

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.threaddump.ThreadDumpCollector@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteThreaddumpThreadDumpCollector 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteThreaddumpThreadDumpCollector MimeNoContent ComAdobeGraniteThreaddumpThreadDumpCollectorInfo accept
comAdobeGraniteThreaddumpThreadDumpCollector  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.threaddump.ThreadDumpCollector"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteThreaddumpThreadDumpCollector  
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector SchedulerPeriod where
  applyOptionalParam req (SchedulerPeriod xs) =
    req `setQuery` toQuery ("scheduler.period", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector SchedulerRunOn where
  applyOptionalParam req (SchedulerRunOn xs) =
    req `setQuery` toQuery ("scheduler.runOn", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpEnabled where
  applyOptionalParam req (GraniteThreaddumpEnabled xs) =
    req `setQuery` toQuery ("granite.threaddump.enabled", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpDumpsPerFile where
  applyOptionalParam req (GraniteThreaddumpDumpsPerFile xs) =
    req `setQuery` toQuery ("granite.threaddump.dumpsPerFile", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpEnableGzipCompression where
  applyOptionalParam req (GraniteThreaddumpEnableGzipCompression xs) =
    req `setQuery` toQuery ("granite.threaddump.enableGzipCompression", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpEnableDirectoriesCompression where
  applyOptionalParam req (GraniteThreaddumpEnableDirectoriesCompression xs) =
    req `setQuery` toQuery ("granite.threaddump.enableDirectoriesCompression", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpEnableJStack where
  applyOptionalParam req (GraniteThreaddumpEnableJStack xs) =
    req `setQuery` toQuery ("granite.threaddump.enableJStack", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpMaxBackupDays where
  applyOptionalParam req (GraniteThreaddumpMaxBackupDays xs) =
    req `setQuery` toQuery ("granite.threaddump.maxBackupDays", Just xs)
instance HasOptionalParam ComAdobeGraniteThreaddumpThreadDumpCollector GraniteThreaddumpBackupCleanTrigger where
  applyOptionalParam req (GraniteThreaddumpBackupCleanTrigger xs) =
    req `setQuery` toQuery ("granite.threaddump.backupCleanTrigger", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteThreaddumpThreadDumpCollector MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteThreaddumpThreadDumpCollector MimePlainText


-- *** comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl MimeNoContent ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTranslInfo accept
comAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.translation.connector.msft.core.impl.MicrosoftTranslationServiceFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl  
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl TranslationFactory where
  applyOptionalParam req (TranslationFactory xs) =
    req `setQuery` toQuery ("translationFactory", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl DefaultConnectorLabel where
  applyOptionalParam req (DefaultConnectorLabel xs) =
    req `setQuery` toQuery ("defaultConnectorLabel", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl DefaultConnectorAttribution where
  applyOptionalParam req (DefaultConnectorAttribution xs) =
    req `setQuery` toQuery ("defaultConnectorAttribution", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl DefaultConnectorWorkspaceId where
  applyOptionalParam req (DefaultConnectorWorkspaceId xs) =
    req `setQuery` toQuery ("defaultConnectorWorkspaceId", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl DefaultConnectorSubscriptionKey where
  applyOptionalParam req (DefaultConnectorSubscriptionKey xs) =
    req `setQuery` toQuery ("defaultConnectorSubscriptionKey", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl LanguageMapLocation where
  applyOptionalParam req (LanguageMapLocation xs) =
    req `setQuery` toQuery ("languageMapLocation", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl CategoryMapLocation where
  applyOptionalParam req (CategoryMapLocation xs) =
    req `setQuery` toQuery ("categoryMapLocation", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl RetryAttempts where
  applyOptionalParam req (RetryAttempts xs) =
    req `setQuery` toQuery ("retryAttempts", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl TimeoutCount where
  applyOptionalParam req (TimeoutCount xs) =
    req `setQuery` toQuery ("timeoutCount", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTranslationConnectorMsftCoreImplMicrosoftTransl MimePlainText


-- *** comAdobeGraniteTranslationCoreImplTranslationManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.translation.core.impl.TranslationManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteTranslationCoreImplTranslationManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteTranslationCoreImplTranslationManagerImpl MimeNoContent ComAdobeGraniteTranslationCoreImplTranslationManagerImplInfo accept
comAdobeGraniteTranslationCoreImplTranslationManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.translation.core.impl.TranslationManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteTranslationCoreImplTranslationManagerImpl  
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl DefaultConnectorName where
  applyOptionalParam req (DefaultConnectorName xs) =
    req `setQuery` toQuery ("defaultConnectorName", Just xs)
instance HasOptionalParam ComAdobeGraniteTranslationCoreImplTranslationManagerImpl DefaultCategory where
  applyOptionalParam req (DefaultCategory xs) =
    req `setQuery` toQuery ("defaultCategory", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteTranslationCoreImplTranslationManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteTranslationCoreImplTranslationManagerImpl MimePlainText


-- *** comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl MimeNoContent ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImplInfo accept
comAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.ui.clientlibs.impl.HtmlLibraryManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl  
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerTiming where
  applyOptionalParam req (HtmllibmanagerTiming xs) =
    req `setQuery` toQuery ("htmllibmanager.timing", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerDebugInitJs where
  applyOptionalParam req (HtmllibmanagerDebugInitJs xs) =
    req `setQuery` toQuery ("htmllibmanager.debug.init.js", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerMinify where
  applyOptionalParam req (HtmllibmanagerMinify xs) =
    req `setQuery` toQuery ("htmllibmanager.minify", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerDebug where
  applyOptionalParam req (HtmllibmanagerDebug xs) =
    req `setQuery` toQuery ("htmllibmanager.debug", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerGzip where
  applyOptionalParam req (HtmllibmanagerGzip xs) =
    req `setQuery` toQuery ("htmllibmanager.gzip", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerMaxDataUriSize where
  applyOptionalParam req (HtmllibmanagerMaxDataUriSize xs) =
    req `setQuery` toQuery ("htmllibmanager.maxDataUriSize", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerMaxage where
  applyOptionalParam req (HtmllibmanagerMaxage xs) =
    req `setQuery` toQuery ("htmllibmanager.maxage", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerForceCqUrlInfo where
  applyOptionalParam req (HtmllibmanagerForceCqUrlInfo xs) =
    req `setQuery` toQuery ("htmllibmanager.forceCQUrlInfo", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerDefaultthemename where
  applyOptionalParam req (HtmllibmanagerDefaultthemename xs) =
    req `setQuery` toQuery ("htmllibmanager.defaultthemename", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerDefaultuserthemename where
  applyOptionalParam req (HtmllibmanagerDefaultuserthemename xs) =
    req `setQuery` toQuery ("htmllibmanager.defaultuserthemename", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerClientmanager where
  applyOptionalParam req (HtmllibmanagerClientmanager xs) =
    req `setQuery` toQuery ("htmllibmanager.clientmanager", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerPathList where
  applyOptionalParam req (HtmllibmanagerPathList xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.path.list", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerExcludedPathList where
  applyOptionalParam req (HtmllibmanagerExcludedPathList xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.excluded.path.list", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerProcessorJs where
  applyOptionalParam req (HtmllibmanagerProcessorJs xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.processor.js", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerProcessorCss where
  applyOptionalParam req (HtmllibmanagerProcessorCss xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.processor.css", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerLongcachePatterns where
  applyOptionalParam req (HtmllibmanagerLongcachePatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.longcache.patterns", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerLongcacheFormat where
  applyOptionalParam req (HtmllibmanagerLongcacheFormat xs) =
    req `setQuery` toQuery ("htmllibmanager.longcache.format", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerUseFileSystemOutputCache where
  applyOptionalParam req (HtmllibmanagerUseFileSystemOutputCache xs) =
    req `setQuery` toQuery ("htmllibmanager.useFileSystemOutputCache", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerFileSystemOutputCacheLocation where
  applyOptionalParam req (HtmllibmanagerFileSystemOutputCacheLocation xs) =
    req `setQuery` toQuery ("htmllibmanager.fileSystemOutputCacheLocation", Just xs)
instance HasOptionalParam ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl HtmllibmanagerDisableReplacement where
  applyOptionalParam req (HtmllibmanagerDisableReplacement xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.disable.replacement", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteUiClientlibsImplHtmlLibraryManagerImpl MimePlainText


-- *** comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature MimeNoContent ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeatureInfo accept
comAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.console.frags.WorkflowWithdrawFeature"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature  
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowConsoleFragsWorkflowWithdrawFeature MimePlainText


-- *** comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService MimeNoContent ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventServiceInfo accept
comAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.console.publish.WorkflowPublishEventService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService  
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService GraniteWorkflowWorkflowPublishEventServiceEnabled where
  applyOptionalParam req (GraniteWorkflowWorkflowPublishEventServiceEnabled xs) =
    req `setQuery` toQuery ("granite.workflow.WorkflowPublishEventService.enabled", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowConsolePublishWorkflowPublishEventService MimePlainText


-- *** comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager MimeNoContent ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManagerInfo accept
comAdobeGraniteWorkflowCoreJcrWorkflowBucketManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.jcr.WorkflowBucketManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager BucketSize where
  applyOptionalParam req (BucketSize xs) =
    req `setQuery` toQuery ("bucketSize", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreJcrWorkflowBucketManager MimePlainText


-- *** comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler MimeNoContent ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandlerInfo accept
comAdobeGraniteWorkflowCoreJobExternalProcessJobHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.job.ExternalProcessJobHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler DefaultTimeout where
  applyOptionalParam req (DefaultTimeout xs) =
    req `setQuery` toQuery ("default.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler MaxTimeout where
  applyOptionalParam req (MaxTimeout xs) =
    req `setQuery` toQuery ("max.timeout", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler DefaultPeriod where
  applyOptionalParam req (DefaultPeriod xs) =
    req `setQuery` toQuery ("default.period", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreJobExternalProcessJobHandler MimePlainText


-- *** comAdobeGraniteWorkflowCoreJobJobHandler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.job.JobHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreJobJobHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreJobJobHandler MimeNoContent ComAdobeGraniteWorkflowCoreJobJobHandlerInfo accept
comAdobeGraniteWorkflowCoreJobJobHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.job.JobHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreJobJobHandler  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler JobTopics[Text] where
  applyOptionalParam req (JobTopics[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("job.topics", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreJobJobHandler AllowSelfProcessTermination where
  applyOptionalParam req (AllowSelfProcessTermination xs) =
    req `setQuery` toQuery ("allow.self.process.termination", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreJobJobHandler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreJobJobHandler MimePlainText


-- *** comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum MimeNoContent ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsumInfo accept
comAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.offloading.WorkflowOffloadingJobConsumer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum JobTopics where
  applyOptionalParam req (JobTopics xs) =
    req `setQuery` toQuery ("job.topics", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreOffloadingWorkflowOffloadingJobConsum MimePlainText


-- *** comAdobeGraniteWorkflowCorePayloadMapCache

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.PayloadMapCache@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCorePayloadMapCache 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCorePayloadMapCache MimeNoContent ComAdobeGraniteWorkflowCorePayloadMapCacheInfo accept
comAdobeGraniteWorkflowCorePayloadMapCache  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.PayloadMapCache"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCorePayloadMapCache  
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache GetSystemWorkflowModels where
  applyOptionalParam req (GetSystemWorkflowModels xs) =
    req `setQuery` toQueryColl MultiParamArray ("getSystemWorkflowModels", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadMapCache GetPackageRootPath where
  applyOptionalParam req (GetPackageRootPath xs) =
    req `setQuery` toQuery ("getPackageRootPath", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCorePayloadMapCache MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCorePayloadMapCache MimePlainText


-- *** comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener MimeNoContent ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListenerInfo accept
comAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.payloadmap.PayloadMoveListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener  
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener PayloadMoveWhiteList where
  applyOptionalParam req (PayloadMoveWhiteList xs) =
    req `setQuery` toQueryColl MultiParamArray ("payload.move.white.list", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener PayloadMoveHandleFromWorkflowProcess where
  applyOptionalParam req (PayloadMoveHandleFromWorkflowProcess xs) =
    req `setQuery` toQuery ("payload.move.handle.from.workflow.process", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCorePayloadmapPayloadMoveListener MimePlainText


-- *** comAdobeGraniteWorkflowCoreWorkflowConfig

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.WorkflowConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreWorkflowConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreWorkflowConfig MimeNoContent ComAdobeGraniteWorkflowCoreWorkflowConfigInfo accept
comAdobeGraniteWorkflowCoreWorkflowConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreWorkflowConfig  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig CqWorkflowConfigWorkflowPackagesRootPath where
  applyOptionalParam req (CqWorkflowConfigWorkflowPackagesRootPath xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.workflow.config.workflow.packages.root.path", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig CqWorkflowConfigWorkflowProcessLegacyMode where
  applyOptionalParam req (CqWorkflowConfigWorkflowProcessLegacyMode xs) =
    req `setQuery` toQuery ("cq.workflow.config.workflow.process.legacy.mode", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowConfig CqWorkflowConfigAllowLocking where
  applyOptionalParam req (CqWorkflowConfigAllowLocking xs) =
    req `setQuery` toQuery ("cq.workflow.config.allow.locking", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreWorkflowConfig MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreWorkflowConfig MimePlainText


-- *** comAdobeGraniteWorkflowCoreWorkflowSessionFactory

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.core.WorkflowSessionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowCoreWorkflowSessionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowCoreWorkflowSessionFactory MimeNoContent ComAdobeGraniteWorkflowCoreWorkflowSessionFactoryInfo accept
comAdobeGraniteWorkflowCoreWorkflowSessionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.core.WorkflowSessionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowCoreWorkflowSessionFactory  
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowinboxSortPropertyName where
  applyOptionalParam req (GraniteWorkflowinboxSortPropertyName xs) =
    req `setQuery` toQuery ("granite.workflowinbox.sort.propertyName", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowinboxSortOrder where
  applyOptionalParam req (GraniteWorkflowinboxSortOrder xs) =
    req `setQuery` toQuery ("granite.workflowinbox.sort.order", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory CqWorkflowJobRetry where
  applyOptionalParam req (CqWorkflowJobRetry xs) =
    req `setQuery` toQuery ("cq.workflow.job.retry", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory CqWorkflowSuperuser where
  applyOptionalParam req (CqWorkflowSuperuser xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.workflow.superuser", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowInboxQuerySize where
  applyOptionalParam req (GraniteWorkflowInboxQuerySize xs) =
    req `setQuery` toQuery ("granite.workflow.inboxQuerySize", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowAdminUserGroupFilter where
  applyOptionalParam req (GraniteWorkflowAdminUserGroupFilter xs) =
    req `setQuery` toQuery ("granite.workflow.adminUserGroupFilter", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowEnforceWorkitemAssigneePermissions where
  applyOptionalParam req (GraniteWorkflowEnforceWorkitemAssigneePermissions xs) =
    req `setQuery` toQuery ("granite.workflow.enforceWorkitemAssigneePermissions", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowEnforceWorkflowInitiatorPermissions where
  applyOptionalParam req (GraniteWorkflowEnforceWorkflowInitiatorPermissions xs) =
    req `setQuery` toQuery ("granite.workflow.enforceWorkflowInitiatorPermissions", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowInjectTenantIdInJobTopics where
  applyOptionalParam req (GraniteWorkflowInjectTenantIdInJobTopics xs) =
    req `setQuery` toQuery ("granite.workflow.injectTenantIdInJobTopics", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowMaxPurgeSaveThreshold where
  applyOptionalParam req (GraniteWorkflowMaxPurgeSaveThreshold xs) =
    req `setQuery` toQuery ("granite.workflow.maxPurgeSaveThreshold", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowCoreWorkflowSessionFactory GraniteWorkflowMaxPurgeQueryCount where
  applyOptionalParam req (GraniteWorkflowMaxPurgeQueryCount xs) =
    req `setQuery` toQuery ("granite.workflow.maxPurgeQueryCount", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowCoreWorkflowSessionFactory MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowCoreWorkflowSessionFactory MimePlainText


-- *** comAdobeGraniteWorkflowPurgeScheduler

-- | @POST \/system\/console\/configMgr\/com.adobe.granite.workflow.purge.Scheduler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeGraniteWorkflowPurgeScheduler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeGraniteWorkflowPurgeScheduler MimeNoContent ComAdobeGraniteWorkflowPurgeSchedulerInfo accept
comAdobeGraniteWorkflowPurgeScheduler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.granite.workflow.purge.Scheduler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeGraniteWorkflowPurgeScheduler  
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler ScheduledpurgeName where
  applyOptionalParam req (ScheduledpurgeName xs) =
    req `setQuery` toQuery ("scheduledpurge.name", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler ScheduledpurgeWorkflowStatus where
  applyOptionalParam req (ScheduledpurgeWorkflowStatus xs) =
    req `setQuery` toQuery ("scheduledpurge.workflowStatus", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler ScheduledpurgeModelIds where
  applyOptionalParam req (ScheduledpurgeModelIds xs) =
    req `setQuery` toQueryColl MultiParamArray ("scheduledpurge.modelIds", Just xs)
instance HasOptionalParam ComAdobeGraniteWorkflowPurgeScheduler ScheduledpurgeDaysold where
  applyOptionalParam req (ScheduledpurgeDaysold xs) =
    req `setQuery` toQuery ("scheduledpurge.daysold", Just xs)

-- | @application/json@
instance Produces ComAdobeGraniteWorkflowPurgeScheduler MimeJSON
-- | @text/plain@
instance Produces ComAdobeGraniteWorkflowPurgeScheduler MimePlainText


-- *** comAdobeOctopusNcommBootstrap

-- | @POST \/system\/console\/configMgr\/com.adobe.octopus.ncomm.bootstrap@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeOctopusNcommBootstrap 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeOctopusNcommBootstrap MimeNoContent ComAdobeOctopusNcommBootstrapInfo accept
comAdobeOctopusNcommBootstrap  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.octopus.ncomm.bootstrap"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeOctopusNcommBootstrap  
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap MaxConnections where
  applyOptionalParam req (MaxConnections xs) =
    req `setQuery` toQuery ("maxConnections", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap MaxRequests where
  applyOptionalParam req (MaxRequests xs) =
    req `setQuery` toQuery ("maxRequests", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap RequestTimeout where
  applyOptionalParam req (RequestTimeout xs) =
    req `setQuery` toQuery ("requestTimeout", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap RequestRetries where
  applyOptionalParam req (RequestRetries xs) =
    req `setQuery` toQuery ("requestRetries", Just xs)
instance HasOptionalParam ComAdobeOctopusNcommBootstrap LaunchTimeout where
  applyOptionalParam req (LaunchTimeout xs) =
    req `setQuery` toQuery ("launchTimeout", Just xs)

-- | @application/json@
instance Produces ComAdobeOctopusNcommBootstrap MimeJSON
-- | @text/plain@
instance Produces ComAdobeOctopusNcommBootstrap MimePlainText


-- *** comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS

-- | @POST \/system\/console\/configMgr\/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS MimeNoContent ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullSInfo accept
comAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.social.integrations.livefyre.user.pingforpull.impl.PingPullServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS  
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS CommunitiesIntegrationLivefyreSlingEventFilter where
  applyOptionalParam req (CommunitiesIntegrationLivefyreSlingEventFilter xs) =
    req `setQuery` toQuery ("communities.integration.livefyre.sling.event.filter", Just xs)

-- | @application/json@
instance Produces ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS MimeJSON
-- | @text/plain@
instance Produces ComAdobeSocialIntegrationsLivefyreUserPingforpullImplPingPullS MimePlainText


-- *** comAdobeXmpWorkerFilesNcommXMPFilesNComm

-- | @POST \/system\/console\/configMgr\/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comAdobeXmpWorkerFilesNcommXMPFilesNComm 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComAdobeXmpWorkerFilesNcommXMPFilesNComm MimeNoContent ComAdobeXmpWorkerFilesNcommXMPFilesNCommInfo accept
comAdobeXmpWorkerFilesNcommXMPFilesNComm  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.adobe.xmp.worker.files.ncomm.XMPFilesNComm"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComAdobeXmpWorkerFilesNcommXMPFilesNComm  
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm MaxConnectionsText where
  applyOptionalParam req (MaxConnectionsText xs) =
    req `setQuery` toQuery ("maxConnections", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm MaxRequestsText where
  applyOptionalParam req (MaxRequestsText xs) =
    req `setQuery` toQuery ("maxRequests", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm RequestTimeoutText where
  applyOptionalParam req (RequestTimeoutText xs) =
    req `setQuery` toQuery ("requestTimeout", Just xs)
instance HasOptionalParam ComAdobeXmpWorkerFilesNcommXMPFilesNComm LogDir where
  applyOptionalParam req (LogDir xs) =
    req `setQuery` toQuery ("logDir", Just xs)

-- | @application/json@
instance Produces ComAdobeXmpWorkerFilesNcommXMPFilesNComm MimeJSON
-- | @text/plain@
instance Produces ComAdobeXmpWorkerFilesNcommXMPFilesNComm MimePlainText


-- *** comDayCommonsDatasourceJdbcpoolJdbcPoolService

-- | @POST \/system\/console\/configMgr\/com.day.commons.datasource.jdbcpool.JdbcPoolService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCommonsDatasourceJdbcpoolJdbcPoolService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCommonsDatasourceJdbcpoolJdbcPoolService MimeNoContent ComDayCommonsDatasourceJdbcpoolJdbcPoolServiceInfo accept
comDayCommonsDatasourceJdbcpoolJdbcPoolService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.commons.datasource.jdbcpool.JdbcPoolService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCommonsDatasourceJdbcpoolJdbcPoolService  
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService JdbcDriverClass where
  applyOptionalParam req (JdbcDriverClass xs) =
    req `setQuery` toQuery ("jdbc.driver.class", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService JdbcConnectionUri where
  applyOptionalParam req (JdbcConnectionUri xs) =
    req `setQuery` toQuery ("jdbc.connection.uri", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService JdbcUsername where
  applyOptionalParam req (JdbcUsername xs) =
    req `setQuery` toQuery ("jdbc.username", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService JdbcPassword where
  applyOptionalParam req (JdbcPassword xs) =
    req `setQuery` toQuery ("jdbc.password", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService JdbcValidationQuery where
  applyOptionalParam req (JdbcValidationQuery xs) =
    req `setQuery` toQuery ("jdbc.validation.query", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService DefaultReadonly where
  applyOptionalParam req (DefaultReadonly xs) =
    req `setQuery` toQuery ("default.readonly", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService DefaultAutocommit where
  applyOptionalParam req (DefaultAutocommit xs) =
    req `setQuery` toQuery ("default.autocommit", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService PoolSize where
  applyOptionalParam req (PoolSize xs) =
    req `setQuery` toQuery ("pool.size", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService PoolMaxWaitMsec where
  applyOptionalParam req (PoolMaxWaitMsec xs) =
    req `setQuery` toQuery ("pool.max.wait.msec", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService DatasourceName where
  applyOptionalParam req (DatasourceName xs) =
    req `setQuery` toQuery ("datasource.name", Just xs)
instance HasOptionalParam ComDayCommonsDatasourceJdbcpoolJdbcPoolService DatasourceSvcProperties where
  applyOptionalParam req (DatasourceSvcProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("datasource.svc.properties", Just xs)

-- | @application/json@
instance Produces ComDayCommonsDatasourceJdbcpoolJdbcPoolService MimeJSON
-- | @text/plain@
instance Produces ComDayCommonsDatasourceJdbcpoolJdbcPoolService MimePlainText


-- *** comDayCommonsHttpclient

-- | @POST \/system\/console\/configMgr\/com.day.commons.httpclient@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCommonsHttpclient 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCommonsHttpclient MimeNoContent ComDayCommonsHttpclientInfo accept
comDayCommonsHttpclient  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.commons.httpclient"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCommonsHttpclient  
instance HasOptionalParam ComDayCommonsHttpclient Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyEnabled where
  applyOptionalParam req (ProxyEnabled xs) =
    req `setQuery` toQuery ("proxy.enabled", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyHost where
  applyOptionalParam req (ProxyHost xs) =
    req `setQuery` toQuery ("proxy.host", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyUser where
  applyOptionalParam req (ProxyUser xs) =
    req `setQuery` toQuery ("proxy.user", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyPassword where
  applyOptionalParam req (ProxyPassword xs) =
    req `setQuery` toQuery ("proxy.password", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyNtlmHost where
  applyOptionalParam req (ProxyNtlmHost xs) =
    req `setQuery` toQuery ("proxy.ntlm.host", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyNtlmDomain where
  applyOptionalParam req (ProxyNtlmDomain xs) =
    req `setQuery` toQuery ("proxy.ntlm.domain", Just xs)
instance HasOptionalParam ComDayCommonsHttpclient ProxyExceptions where
  applyOptionalParam req (ProxyExceptions xs) =
    req `setQuery` toQueryColl MultiParamArray ("proxy.exceptions", Just xs)

-- | @application/json@
instance Produces ComDayCommonsHttpclient MimeJSON
-- | @text/plain@
instance Produces ComDayCommonsHttpclient MimePlainText


-- *** comDayCqAnalyticsImplStorePropertiesChangeListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.impl.StorePropertiesChangeListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsImplStorePropertiesChangeListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsImplStorePropertiesChangeListener MimeNoContent ComDayCqAnalyticsImplStorePropertiesChangeListenerInfo accept
comDayCqAnalyticsImplStorePropertiesChangeListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.impl.StorePropertiesChangeListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsImplStorePropertiesChangeListener  
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsImplStorePropertiesChangeListener CqStoreListenerAdditionalStorePaths where
  applyOptionalParam req (CqStoreListenerAdditionalStorePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.store.listener.additionalStorePaths", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsImplStorePropertiesChangeListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsImplStorePropertiesChangeListener MimePlainText


-- *** comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte MimeNoContent ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporteInfo accept
comDayCqAnalyticsSitecatalystImplExporterClassificationsExporte  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.exporter.ClassificationsExporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte  
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte AllowedPaths where
  applyOptionalParam req (AllowedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowed.paths", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte CqAnalyticsSaintExporterPagesize where
  applyOptionalParam req (CqAnalyticsSaintExporterPagesize xs) =
    req `setQuery` toQuery ("cq.analytics.saint.exporter.pagesize", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsSitecatalystImplExporterClassificationsExporte MimePlainText


-- *** comDayCqAnalyticsSitecatalystImplImporterReportImporter

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsSitecatalystImplImporterReportImporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsSitecatalystImplImporterReportImporter MimeNoContent ComDayCqAnalyticsSitecatalystImplImporterReportImporterInfo accept
comDayCqAnalyticsSitecatalystImplImporterReportImporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.importer.ReportImporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsSitecatalystImplImporterReportImporter  
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter ReportFetchAttempts where
  applyOptionalParam req (ReportFetchAttempts xs) =
    req `setQuery` toQuery ("report.fetch.attempts", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplImporterReportImporter ReportFetchDelay where
  applyOptionalParam req (ReportFetchDelay xs) =
    req `setQuery` toQuery ("report.fetch.delay", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsSitecatalystImplImporterReportImporter MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsSitecatalystImplImporterReportImporter MimePlainText


-- *** comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory MimeNoContent ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactoryInfo accept
comDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystAdapterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory  
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory CqAnalyticsAdapterfactoryContextstores where
  applyOptionalParam req (CqAnalyticsAdapterfactoryContextstores xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.analytics.adapterfactory.contextstores", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsSitecatalystImplSitecatalystAdapterFactory MimePlainText


-- *** comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl MimeNoContent ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImplInfo accept
comDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.sitecatalyst.impl.SitecatalystHttpClientImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl  
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl CqAnalyticsSitecatalystServiceDatacenterUrl where
  applyOptionalParam req (CqAnalyticsSitecatalystServiceDatacenterUrl xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.analytics.sitecatalyst.service.datacenter.url", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl Devhostnamepatterns where
  applyOptionalParam req (Devhostnamepatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("devhostnamepatterns", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connection.timeout", Just xs)
instance HasOptionalParam ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socket.timeout", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsSitecatalystImplSitecatalystHttpClientImpl MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater MimeNoContent ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdaterInfo accept
comDayCqAnalyticsTestandtargetImplAccountOptionsUpdater  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.AccountOptionsUpdater"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater CqAnalyticsTestandtargetAccountoptionsupdaterEnabled where
  applyOptionalParam req (CqAnalyticsTestandtargetAccountoptionsupdaterEnabled xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.accountoptionsupdater.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplAccountOptionsUpdater MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener MimeNoContent ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListenerInfo accept
comDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.DeleteAuthorActivityListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener CqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled where
  applyOptionalParam req (CqAnalyticsTestandtargetDeleteauthoractivitylistenerEnabled xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.deleteauthoractivitylistener.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplDeleteAuthorActivityListener MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener MimeNoContent ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListenerInfo accept
comDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.PushAuthorCampaignPageListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener CqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled where
  applyOptionalParam req (CqAnalyticsTestandtargetPushauthorcampaignpagelistenerEnabled xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.pushauthorcampaignpagelistener.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplPushAuthorCampaignPageListener MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplSegmentImporter

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.SegmentImporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplSegmentImporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplSegmentImporter MimeNoContent ComDayCqAnalyticsTestandtargetImplSegmentImporterInfo accept
comDayCqAnalyticsTestandtargetImplSegmentImporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.SegmentImporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplSegmentImporter  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplSegmentImporter CqAnalyticsTestandtargetSegmentimporterEnabled where
  applyOptionalParam req (CqAnalyticsTestandtargetSegmentimporterEnabled xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.segmentimporter.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplSegmentImporter MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplSegmentImporter MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl MimeNoContent ComDayCqAnalyticsTestandtargetImplServiceWebServiceImplInfo accept
comDayCqAnalyticsTestandtargetImplServiceWebServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.service.WebServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl EndpointUri where
  applyOptionalParam req (EndpointUri xs) =
    req `setQuery` toQuery ("endpointUri", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connectionTimeout", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socketTimeout", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplServiceWebServiceImpl MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet MimeNoContent ComDayCqAnalyticsTestandtargetImplServletsAdminServerServletInfo accept
comDayCqAnalyticsTestandtargetImplServletsAdminServerServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.servlets.AdminServerServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet TestandtargetEndpointUrl where
  applyOptionalParam req (TestandtargetEndpointUrl xs) =
    req `setQuery` toQuery ("testandtarget.endpoint.url", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplServletsAdminServerServlet MimePlainText


-- *** comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl MimeNoContent ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImplInfo accept
comDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.analytics.testandtarget.impl.TestandtargetHttpClientImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl  
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl CqAnalyticsTestandtargetApiUrl where
  applyOptionalParam req (CqAnalyticsTestandtargetApiUrl xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.api.url", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl CqAnalyticsTestandtargetTimeout where
  applyOptionalParam req (CqAnalyticsTestandtargetTimeout xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.timeout", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl CqAnalyticsTestandtargetSockettimeout where
  applyOptionalParam req (CqAnalyticsTestandtargetSockettimeout xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.sockettimeout", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl CqAnalyticsTestandtargetRecommendationsUrlReplace where
  applyOptionalParam req (CqAnalyticsTestandtargetRecommendationsUrlReplace xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.recommendations.url.replace", Just xs)
instance HasOptionalParam ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl CqAnalyticsTestandtargetRecommendationsUrlReplacewith where
  applyOptionalParam req (CqAnalyticsTestandtargetRecommendationsUrlReplacewith xs) =
    req `setQuery` toQuery ("cq.analytics.testandtarget.recommendations.url.replacewith", Just xs)

-- | @application/json@
instance Produces ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqAnalyticsTestandtargetImplTestandtargetHttpClientImpl MimePlainText


-- *** comDayCqAuthImplCugCugSupportImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.auth.impl.cug.CugSupportImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAuthImplCugCugSupportImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAuthImplCugCugSupportImpl MimeNoContent ComDayCqAuthImplCugCugSupportImplInfo accept
comDayCqAuthImplCugCugSupportImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.auth.impl.cug.CugSupportImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAuthImplCugCugSupportImpl  
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl CugExemptedPrincipals where
  applyOptionalParam req (CugExemptedPrincipals xs) =
    req `setQuery` toQueryColl MultiParamArray ("cug.exempted.principals", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl CugEnabled where
  applyOptionalParam req (CugEnabled xs) =
    req `setQuery` toQuery ("cug.enabled", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl CugPrincipalsRegex where
  applyOptionalParam req (CugPrincipalsRegex xs) =
    req `setQuery` toQuery ("cug.principals.regex", Just xs)
instance HasOptionalParam ComDayCqAuthImplCugCugSupportImpl CugPrincipalsReplacement where
  applyOptionalParam req (CugPrincipalsReplacement xs) =
    req `setQuery` toQuery ("cug.principals.replacement", Just xs)

-- | @application/json@
instance Produces ComDayCqAuthImplCugCugSupportImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqAuthImplCugCugSupportImpl MimePlainText


-- *** comDayCqAuthImplLoginSelectorHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.auth.impl.LoginSelectorHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqAuthImplLoginSelectorHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqAuthImplLoginSelectorHandler MimeNoContent ComDayCqAuthImplLoginSelectorHandlerInfo accept
comDayCqAuthImplLoginSelectorHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.auth.impl.LoginSelectorHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqAuthImplLoginSelectorHandler  
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorMappings where
  applyOptionalParam req (AuthLoginselectorMappings xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.loginselector.mappings", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorChangepwMappings where
  applyOptionalParam req (AuthLoginselectorChangepwMappings xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.loginselector.changepw.mappings", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorDefaultloginpage where
  applyOptionalParam req (AuthLoginselectorDefaultloginpage xs) =
    req `setQuery` toQuery ("auth.loginselector.defaultloginpage", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorDefaultchangepwpage where
  applyOptionalParam req (AuthLoginselectorDefaultchangepwpage xs) =
    req `setQuery` toQuery ("auth.loginselector.defaultchangepwpage", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorHandle where
  applyOptionalParam req (AuthLoginselectorHandle xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.loginselector.handle", Just xs)
instance HasOptionalParam ComDayCqAuthImplLoginSelectorHandler AuthLoginselectorHandleAllExtensions where
  applyOptionalParam req (AuthLoginselectorHandleAllExtensions xs) =
    req `setQuery` toQuery ("auth.loginselector.handle.all.extensions", Just xs)

-- | @application/json@
instance Produces ComDayCqAuthImplLoginSelectorHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqAuthImplLoginSelectorHandler MimePlainText


-- *** comDayCqCommonsImplExternalizerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.commons.impl.ExternalizerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqCommonsImplExternalizerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqCommonsImplExternalizerImpl MimeNoContent ComDayCqCommonsImplExternalizerImplInfo accept
comDayCqCommonsImplExternalizerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.commons.impl.ExternalizerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqCommonsImplExternalizerImpl  
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl ExternalizerDomains where
  applyOptionalParam req (ExternalizerDomains xs) =
    req `setQuery` toQueryColl MultiParamArray ("externalizer.domains", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl ExternalizerHost where
  applyOptionalParam req (ExternalizerHost xs) =
    req `setQuery` toQuery ("externalizer.host", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl ExternalizerContextpath where
  applyOptionalParam req (ExternalizerContextpath xs) =
    req `setQuery` toQuery ("externalizer.contextpath", Just xs)
instance HasOptionalParam ComDayCqCommonsImplExternalizerImpl ExternalizerEncodedpath where
  applyOptionalParam req (ExternalizerEncodedpath xs) =
    req `setQuery` toQuery ("externalizer.encodedpath", Just xs)

-- | @application/json@
instance Produces ComDayCqCommonsImplExternalizerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqCommonsImplExternalizerImpl MimePlainText


-- *** comDayCqCommonsServletsRootMappingServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.commons.servlets.RootMappingServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqCommonsServletsRootMappingServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqCommonsServletsRootMappingServlet MimeNoContent ComDayCqCommonsServletsRootMappingServletInfo accept
comDayCqCommonsServletsRootMappingServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.commons.servlets.RootMappingServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqCommonsServletsRootMappingServlet  
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqCommonsServletsRootMappingServlet RootmappingTarget where
  applyOptionalParam req (RootmappingTarget xs) =
    req `setQuery` toQuery ("rootmapping.target", Just xs)

-- | @application/json@
instance Produces ComDayCqCommonsServletsRootMappingServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqCommonsServletsRootMappingServlet MimePlainText


-- *** comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke

-- | @POST \/system\/console\/configMgr\/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke MimeNoContent ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionCheckeInfo accept
comDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.CodeUpgradeExecutionConditionChecker"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke  
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Codeupgradetasks where
  applyOptionalParam req (Codeupgradetasks xs) =
    req `setQuery` toQueryColl MultiParamArray ("codeupgradetasks", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke Codeupgradetaskfilters where
  applyOptionalParam req (Codeupgradetaskfilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("codeupgradetaskfilters", Just xs)

-- | @application/json@
instance Produces ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke MimeJSON
-- | @text/plain@
instance Produces ComDayCqCompatCodeupgradeImplCodeUpgradeExecutionConditionChecke MimePlainText


-- *** comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList

-- | @POST \/system\/console\/configMgr\/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList MimeNoContent ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreListInfo accept
comDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.UpgradeTaskIgnoreList"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList  
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList UpgradeTaskIgnoreList where
  applyOptionalParam req (UpgradeTaskIgnoreList xs) =
    req `setQuery` toQueryColl MultiParamArray ("upgradeTaskIgnoreList", Just xs)

-- | @application/json@
instance Produces ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList MimeJSON
-- | @text/plain@
instance Produces ComDayCqCompatCodeupgradeImplUpgradeTaskIgnoreList MimePlainText


-- *** comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist

-- | @POST \/system\/console\/configMgr\/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist MimeNoContent ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelistInfo accept
comDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.compat.codeupgrade.impl.VersionRangeTaskIgnorelist"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist  
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist EffectiveBundleListPath where
  applyOptionalParam req (EffectiveBundleListPath xs) =
    req `setQuery` toQuery ("effectiveBundleListPath", Just xs)

-- | @application/json@
instance Produces ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist MimeJSON
-- | @text/plain@
instance Produces ComDayCqCompatCodeupgradeImplVersionRangeTaskIgnorelist MimePlainText


-- *** comDayCqContentsyncImplContentSyncManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.contentsync.impl.ContentSyncManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqContentsyncImplContentSyncManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqContentsyncImplContentSyncManagerImpl MimeNoContent ComDayCqContentsyncImplContentSyncManagerImplInfo accept
comDayCqContentsyncImplContentSyncManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.contentsync.impl.ContentSyncManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqContentsyncImplContentSyncManagerImpl  
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl ContentsyncFallbackAuthorizable where
  applyOptionalParam req (ContentsyncFallbackAuthorizable xs) =
    req `setQuery` toQuery ("contentsync.fallback.authorizable", Just xs)
instance HasOptionalParam ComDayCqContentsyncImplContentSyncManagerImpl ContentsyncFallbackUpdateuser where
  applyOptionalParam req (ContentsyncFallbackUpdateuser xs) =
    req `setQuery` toQuery ("contentsync.fallback.updateuser", Just xs)

-- | @application/json@
instance Produces ComDayCqContentsyncImplContentSyncManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqContentsyncImplContentSyncManagerImpl MimePlainText


-- *** comDayCqDamCommonsHandlerStandardImageHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.commons.handler.StandardImageHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCommonsHandlerStandardImageHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCommonsHandlerStandardImageHandler MimeNoContent ComDayCqDamCommonsHandlerStandardImageHandlerInfo accept
comDayCqDamCommonsHandlerStandardImageHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.commons.handler.StandardImageHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCommonsHandlerStandardImageHandler  
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler LargeFileThreshold where
  applyOptionalParam req (LargeFileThreshold xs) =
    req `setQuery` toQuery ("large_file_threshold", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler LargeCommentThreshold where
  applyOptionalParam req (LargeCommentThreshold xs) =
    req `setQuery` toQuery ("large_comment_threshold", Just xs)
instance HasOptionalParam ComDayCqDamCommonsHandlerStandardImageHandler CqDamEnableExtMetaExtraction where
  applyOptionalParam req (CqDamEnableExtMetaExtraction xs) =
    req `setQuery` toQuery ("cq.dam.enable.ext.meta.extraction", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCommonsHandlerStandardImageHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCommonsHandlerStandardImageHandler MimePlainText


-- *** comDayCqDamCommonsMetadataXmpFilterBlackWhite

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCommonsMetadataXmpFilterBlackWhite 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCommonsMetadataXmpFilterBlackWhite MimeNoContent ComDayCqDamCommonsMetadataXmpFilterBlackWhiteInfo accept
comDayCqDamCommonsMetadataXmpFilterBlackWhite  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.commons.metadata.XmpFilterBlackWhite"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCommonsMetadataXmpFilterBlackWhite  
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite XmpFilterApplyWhitelist where
  applyOptionalParam req (XmpFilterApplyWhitelist xs) =
    req `setQuery` toQuery ("xmp.filter.apply_whitelist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite XmpFilterWhitelist where
  applyOptionalParam req (XmpFilterWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("xmp.filter.whitelist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite XmpFilterApplyBlacklist where
  applyOptionalParam req (XmpFilterApplyBlacklist xs) =
    req `setQuery` toQuery ("xmp.filter.apply_blacklist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsMetadataXmpFilterBlackWhite XmpFilterBlacklist where
  applyOptionalParam req (XmpFilterBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("xmp.filter.blacklist", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCommonsMetadataXmpFilterBlackWhite MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCommonsMetadataXmpFilterBlackWhite MimePlainText


-- *** comDayCqDamCommonsUtilImplAssetCacheImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.commons.util.impl.AssetCacheImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCommonsUtilImplAssetCacheImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCommonsUtilImplAssetCacheImpl MimeNoContent ComDayCqDamCommonsUtilImplAssetCacheImplInfo accept
comDayCqDamCommonsUtilImplAssetCacheImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.commons.util.impl.AssetCacheImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCommonsUtilImplAssetCacheImpl  
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl LargeFileMin where
  applyOptionalParam req (LargeFileMin xs) =
    req `setQuery` toQuery ("large.file.min", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl CacheApply where
  applyOptionalParam req (CacheApply xs) =
    req `setQuery` toQuery ("cache.apply", Just xs)
instance HasOptionalParam ComDayCqDamCommonsUtilImplAssetCacheImpl MimeTypes where
  applyOptionalParam req (MimeTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("mime.types", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCommonsUtilImplAssetCacheImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCommonsUtilImplAssetCacheImpl MimePlainText


-- *** comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig MimeNoContent ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfigInfo accept
comDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.annotation.pdf.AnnotationPdfConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig  
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfDocumentWidth where
  applyOptionalParam req (CqDamConfigAnnotationPdfDocumentWidth xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.document.width", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfDocumentHeight where
  applyOptionalParam req (CqDamConfigAnnotationPdfDocumentHeight xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.document.height", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfDocumentPaddingHorizontal where
  applyOptionalParam req (CqDamConfigAnnotationPdfDocumentPaddingHorizontal xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.document.padding.horizontal", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfDocumentPaddingVertical where
  applyOptionalParam req (CqDamConfigAnnotationPdfDocumentPaddingVertical xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.document.padding.vertical", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfFontSize where
  applyOptionalParam req (CqDamConfigAnnotationPdfFontSize xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.font.size", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfFontColor where
  applyOptionalParam req (CqDamConfigAnnotationPdfFontColor xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.font.color", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfFontFamily where
  applyOptionalParam req (CqDamConfigAnnotationPdfFontFamily xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.font.family", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfFontLight where
  applyOptionalParam req (CqDamConfigAnnotationPdfFontLight xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.font.light", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfMarginTextImage where
  applyOptionalParam req (CqDamConfigAnnotationPdfMarginTextImage xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.marginTextImage", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfMinImageHeight where
  applyOptionalParam req (CqDamConfigAnnotationPdfMinImageHeight xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.minImageHeight", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfReviewStatusWidth where
  applyOptionalParam req (CqDamConfigAnnotationPdfReviewStatusWidth xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.reviewStatus.width", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfReviewStatusColorApproved where
  applyOptionalParam req (CqDamConfigAnnotationPdfReviewStatusColorApproved xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.reviewStatus.color.approved", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfReviewStatusColorRejected where
  applyOptionalParam req (CqDamConfigAnnotationPdfReviewStatusColorRejected xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.reviewStatus.color.rejected", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfReviewStatusColorChangesRequested where
  applyOptionalParam req (CqDamConfigAnnotationPdfReviewStatusColorChangesRequested xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.reviewStatus.color.changesRequested", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfAnnotationMarkerWidth where
  applyOptionalParam req (CqDamConfigAnnotationPdfAnnotationMarkerWidth xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.annotationMarker.width", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig CqDamConfigAnnotationPdfAssetMinheight where
  applyOptionalParam req (CqDamConfigAnnotationPdfAssetMinheight xs) =
    req `setQuery` toQuery ("cq.dam.config.annotation.pdf.asset.minheight", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplAnnotationPdfAnnotationPdfConfig MimePlainText


-- *** comDayCqDamCoreImplAssetMoveListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.AssetMoveListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplAssetMoveListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplAssetMoveListener MimeNoContent ComDayCqDamCoreImplAssetMoveListenerInfo accept
comDayCqDamCoreImplAssetMoveListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.AssetMoveListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplAssetMoveListener  
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetMoveListener Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplAssetMoveListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplAssetMoveListener MimePlainText


-- *** comDayCqDamCoreImplAssethomeAssetHomePageConfiguration

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplAssethomeAssetHomePageConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration MimeNoContent ComDayCqDamCoreImplAssethomeAssetHomePageConfigurationInfo accept
comDayCqDamCoreImplAssethomeAssetHomePageConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.assethome.AssetHomePageConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration  
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration IsEnabled where
  applyOptionalParam req (IsEnabled xs) =
    req `setQuery` toQuery ("isEnabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplAssethomeAssetHomePageConfiguration MimePlainText


-- *** comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet MimeNoContent ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServletInfo accept
comDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.assetlinkshare.AdhocAssetShareProxyServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet  
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet CqDamAdhocAssetSharePrezipMaxcontentsize where
  applyOptionalParam req (CqDamAdhocAssetSharePrezipMaxcontentsize xs) =
    req `setQuery` toQuery ("cq.dam.adhoc.asset.share.prezip.maxcontentsize", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplAssetlinkshareAdhocAssetShareProxyServlet MimePlainText


-- *** comDayCqDamCoreImplCacheCQBufferedImageCache

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.cache.CQBufferedImageCache@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplCacheCQBufferedImageCache 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplCacheCQBufferedImageCache MimeNoContent ComDayCqDamCoreImplCacheCQBufferedImageCacheInfo accept
comDayCqDamCoreImplCacheCQBufferedImageCache  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.cache.CQBufferedImageCache"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplCacheCQBufferedImageCache  
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache CqDamImageCacheMaxMemory where
  applyOptionalParam req (CqDamImageCacheMaxMemory xs) =
    req `setQuery` toQuery ("cq.dam.image.cache.max.memory", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache CqDamImageCacheMaxAge where
  applyOptionalParam req (CqDamImageCacheMaxAge xs) =
    req `setQuery` toQuery ("cq.dam.image.cache.max.age", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplCacheCQBufferedImageCache CqDamImageCacheMaxDimension where
  applyOptionalParam req (CqDamImageCacheMaxDimension xs) =
    req `setQuery` toQuery ("cq.dam.image.cache.max.dimension", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplCacheCQBufferedImageCache MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplCacheCQBufferedImageCache MimePlainText


-- *** comDayCqDamCoreImplDamChangeEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.DamChangeEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplDamChangeEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplDamChangeEventListener MimeNoContent ComDayCqDamCoreImplDamChangeEventListenerInfo accept
comDayCqDamCoreImplDamChangeEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.DamChangeEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplDamChangeEventListener  
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamChangeEventListener ChangeeventlistenerObservedPaths where
  applyOptionalParam req (ChangeeventlistenerObservedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("changeeventlistener.observed.paths", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplDamChangeEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplDamChangeEventListener MimePlainText


-- *** comDayCqDamCoreImplDamEventPurgeService

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.DamEventPurgeService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplDamEventPurgeService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplDamEventPurgeService MimeNoContent ComDayCqDamCoreImplDamEventPurgeServiceInfo accept
comDayCqDamCoreImplDamEventPurgeService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventPurgeService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplDamEventPurgeService  
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService MaxSavedActivities where
  applyOptionalParam req (MaxSavedActivities xs) =
    req `setQuery` toQuery ("maxSavedActivities", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService SaveInterval where
  applyOptionalParam req (SaveInterval xs) =
    req `setQuery` toQuery ("saveInterval", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService EnableActivityPurge where
  applyOptionalParam req (EnableActivityPurge xs) =
    req `setQuery` toQuery ("enableActivityPurge", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventPurgeService EventTypes where
  applyOptionalParam req (EventTypes xs) =
    req `setQuery` toQuery ("eventTypes", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplDamEventPurgeService MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplDamEventPurgeService MimePlainText


-- *** comDayCqDamCoreImplDamEventRecorderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.DamEventRecorderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplDamEventRecorderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplDamEventRecorderImpl MimeNoContent ComDayCqDamCoreImplDamEventRecorderImplInfo accept
comDayCqDamCoreImplDamEventRecorderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.DamEventRecorderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplDamEventRecorderImpl  
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl EventQueueLength where
  applyOptionalParam req (EventQueueLength xs) =
    req `setQuery` toQuery ("event.queue.length", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl EventrecorderEnabled where
  applyOptionalParam req (EventrecorderEnabled xs) =
    req `setQuery` toQuery ("eventrecorder.enabled", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl EventrecorderBlacklist where
  applyOptionalParam req (EventrecorderBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("eventrecorder.blacklist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplDamEventRecorderImpl EventrecorderEventtypes where
  applyOptionalParam req (EventrecorderEventtypes xs) =
    req `setQuery` toQuery ("eventrecorder.eventtypes", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplDamEventRecorderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplDamEventRecorderImpl MimePlainText


-- *** comDayCqDamCoreImplEventDamEventAuditListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.event.DamEventAuditListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplEventDamEventAuditListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplEventDamEventAuditListener MimeNoContent ComDayCqDamCoreImplEventDamEventAuditListenerInfo accept
comDayCqDamCoreImplEventDamEventAuditListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.event.DamEventAuditListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplEventDamEventAuditListener  
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplEventDamEventAuditListener Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplEventDamEventAuditListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplEventDamEventAuditListener MimePlainText


-- *** comDayCqDamCoreImplExpiryNotificationJobImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplExpiryNotificationJobImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplExpiryNotificationJobImpl MimeNoContent ComDayCqDamCoreImplExpiryNotificationJobImplInfo accept
comDayCqDamCoreImplExpiryNotificationJobImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.ExpiryNotificationJobImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplExpiryNotificationJobImpl  
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl CqDamExpiryNotificationSchedulerIstimebased where
  applyOptionalParam req (CqDamExpiryNotificationSchedulerIstimebased xs) =
    req `setQuery` toQuery ("cq.dam.expiry.notification.scheduler.istimebased", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl CqDamExpiryNotificationSchedulerTimebasedRule where
  applyOptionalParam req (CqDamExpiryNotificationSchedulerTimebasedRule xs) =
    req `setQuery` toQuery ("cq.dam.expiry.notification.scheduler.timebased.rule", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl CqDamExpiryNotificationSchedulerPeriodRule where
  applyOptionalParam req (CqDamExpiryNotificationSchedulerPeriodRule xs) =
    req `setQuery` toQuery ("cq.dam.expiry.notification.scheduler.period.rule", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl SendEmail where
  applyOptionalParam req (SendEmail xs) =
    req `setQuery` toQuery ("send_email", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl AssetExpiredLimit where
  applyOptionalParam req (AssetExpiredLimit xs) =
    req `setQuery` toQuery ("asset_expired_limit", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl PriorNotificationSeconds where
  applyOptionalParam req (PriorNotificationSeconds xs) =
    req `setQuery` toQuery ("prior_notification_seconds", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplExpiryNotificationJobImpl CqDamExpiryNotificationUrlProtocol where
  applyOptionalParam req (CqDamExpiryNotificationUrlProtocol xs) =
    req `setQuery` toQuery ("cq.dam.expiry.notification.url.protocol", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplExpiryNotificationJobImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplExpiryNotificationJobImpl MimePlainText


-- *** comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat MimeNoContent ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeatInfo accept
comDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.foldermetadataschema.FolderMetadataSchemaFeatureFlag"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat  
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat IsEnabled where
  applyOptionalParam req (IsEnabled xs) =
    req `setQuery` toQuery ("isEnabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplFoldermetadataschemaFolderMetadataSchemaFeat MimePlainText


-- *** comDayCqDamCoreImplGfxCommonsGfxRenderer

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplGfxCommonsGfxRenderer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplGfxCommonsGfxRenderer MimeNoContent ComDayCqDamCoreImplGfxCommonsGfxRendererInfo accept
comDayCqDamCoreImplGfxCommonsGfxRenderer  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.gfx.CommonsGfxRenderer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplGfxCommonsGfxRenderer  
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplGfxCommonsGfxRenderer SkipBufferedcache where
  applyOptionalParam req (SkipBufferedcache xs) =
    req `setQuery` toQuery ("skip.bufferedcache", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplGfxCommonsGfxRenderer MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplGfxCommonsGfxRenderer MimePlainText


-- *** comDayCqDamCoreImplHandlerEPSFormatHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.handler.EPSFormatHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplHandlerEPSFormatHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplHandlerEPSFormatHandler MimeNoContent ComDayCqDamCoreImplHandlerEPSFormatHandlerInfo accept
comDayCqDamCoreImplHandlerEPSFormatHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.EPSFormatHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplHandlerEPSFormatHandler  
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerEPSFormatHandler Mimetype where
  applyOptionalParam req (Mimetype xs) =
    req `setQuery` toQuery ("mimetype", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplHandlerEPSFormatHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplHandlerEPSFormatHandler MimePlainText


-- *** comDayCqDamCoreImplHandlerIndesignFormatHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.handler.IndesignFormatHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplHandlerIndesignFormatHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplHandlerIndesignFormatHandler MimeNoContent ComDayCqDamCoreImplHandlerIndesignFormatHandlerInfo accept
comDayCqDamCoreImplHandlerIndesignFormatHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.IndesignFormatHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplHandlerIndesignFormatHandler  
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerIndesignFormatHandler Mimetype[Text] where
  applyOptionalParam req (Mimetype[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("mimetype", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplHandlerIndesignFormatHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplHandlerIndesignFormatHandler MimePlainText


-- *** comDayCqDamCoreImplHandlerJpegHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.handler.JpegHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplHandlerJpegHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplHandlerJpegHandler MimeNoContent ComDayCqDamCoreImplHandlerJpegHandlerInfo accept
comDayCqDamCoreImplHandlerJpegHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.JpegHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplHandlerJpegHandler  
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler CqDamEnableExtMetaExtraction where
  applyOptionalParam req (CqDamEnableExtMetaExtraction xs) =
    req `setQuery` toQuery ("cq.dam.enable.ext.meta.extraction", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler LargeFileThreshold where
  applyOptionalParam req (LargeFileThreshold xs) =
    req `setQuery` toQuery ("large_file_threshold", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerJpegHandler LargeCommentThreshold where
  applyOptionalParam req (LargeCommentThreshold xs) =
    req `setQuery` toQuery ("large_comment_threshold", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplHandlerJpegHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplHandlerJpegHandler MimePlainText


-- *** comDayCqDamCoreImplHandlerXmpNCommXMPHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplHandlerXmpNCommXMPHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplHandlerXmpNCommXMPHandler MimeNoContent ComDayCqDamCoreImplHandlerXmpNCommXMPHandlerInfo accept
comDayCqDamCoreImplHandlerXmpNCommXMPHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.handler.xmp.NCommXMPHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplHandlerXmpNCommXMPHandler  
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplHandlerXmpNCommXMPHandler XmphandlerCqFormats where
  applyOptionalParam req (XmphandlerCqFormats xs) =
    req `setQuery` toQueryColl MultiParamArray ("xmphandler.cq.formats", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplHandlerXmpNCommXMPHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplHandlerXmpNCommXMPHandler MimePlainText


-- *** comDayCqDamCoreImplJmxAssetIndexUpdateMonitor

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplJmxAssetIndexUpdateMonitor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor MimeNoContent ComDayCqDamCoreImplJmxAssetIndexUpdateMonitorInfo accept
comDayCqDamCoreImplJmxAssetIndexUpdateMonitor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetIndexUpdateMonitor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor  
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor JmxObjectname where
  applyOptionalParam req (JmxObjectname xs) =
    req `setQuery` toQuery ("jmx.objectname", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor PropertyMeasureEnabled where
  applyOptionalParam req (PropertyMeasureEnabled xs) =
    req `setQuery` toQuery ("property.measure.enabled", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor PropertyName where
  applyOptionalParam req (PropertyName xs) =
    req `setQuery` toQuery ("property.name", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor PropertyMaxWaitMs where
  applyOptionalParam req (PropertyMaxWaitMs xs) =
    req `setQuery` toQuery ("property.max.wait.ms", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor PropertyMaxRate where
  applyOptionalParam req (PropertyMaxRate xs) =
    req `setQuery` toQuery ("property.max.rate", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor FulltextMeasureEnabled where
  applyOptionalParam req (FulltextMeasureEnabled xs) =
    req `setQuery` toQuery ("fulltext.measure.enabled", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor FulltextName where
  applyOptionalParam req (FulltextName xs) =
    req `setQuery` toQuery ("fulltext.name", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor FulltextMaxWaitMs where
  applyOptionalParam req (FulltextMaxWaitMs xs) =
    req `setQuery` toQuery ("fulltext.max.wait.ms", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor FulltextMaxRate where
  applyOptionalParam req (FulltextMaxRate xs) =
    req `setQuery` toQuery ("fulltext.max.rate", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplJmxAssetIndexUpdateMonitor MimePlainText


-- *** comDayCqDamCoreImplJmxAssetMigrationMBeanImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplJmxAssetMigrationMBeanImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl MimeNoContent ComDayCqDamCoreImplJmxAssetMigrationMBeanImplInfo accept
comDayCqDamCoreImplJmxAssetMigrationMBeanImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetMigrationMBeanImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl  
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl JmxObjectname where
  applyOptionalParam req (JmxObjectname xs) =
    req `setQuery` toQuery ("jmx.objectname", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplJmxAssetMigrationMBeanImpl MimePlainText


-- *** comDayCqDamCoreImplJmxAssetUpdateMonitorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplJmxAssetUpdateMonitorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl MimeNoContent ComDayCqDamCoreImplJmxAssetUpdateMonitorImplInfo accept
comDayCqDamCoreImplJmxAssetUpdateMonitorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.jmx.AssetUpdateMonitorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl  
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl JmxObjectname where
  applyOptionalParam req (JmxObjectname xs) =
    req `setQuery` toQuery ("jmx.objectname", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl Active where
  applyOptionalParam req (Active xs) =
    req `setQuery` toQuery ("active", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplJmxAssetUpdateMonitorImpl MimePlainText


-- *** comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig MimeNoContent ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfigInfo accept
comDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataexport.AsyncMetadataExportConfigProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig  
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig Operation where
  applyOptionalParam req (Operation xs) =
    req `setQuery` toQuery ("operation", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig EmailEnabled where
  applyOptionalParam req (EmailEnabled xs) =
    req `setQuery` toQuery ("emailEnabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplJobsMetadataexportAsyncMetadataExportConfig MimePlainText


-- *** comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig MimeNoContent ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfigInfo accept
comDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.jobs.metadataimport.AsyncMetadataImportConfigProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig  
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig Operation where
  applyOptionalParam req (Operation xs) =
    req `setQuery` toQuery ("operation", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig OperationIcon where
  applyOptionalParam req (OperationIcon xs) =
    req `setQuery` toQuery ("operationIcon", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig TopicName where
  applyOptionalParam req (TopicName xs) =
    req `setQuery` toQuery ("topicName", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig EmailEnabled where
  applyOptionalParam req (EmailEnabled xs) =
    req `setQuery` toQuery ("emailEnabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplJobsMetadataimportAsyncMetadataImportConfig MimePlainText


-- *** comDayCqDamCoreImplLightboxLightboxServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.lightbox.LightboxServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplLightboxLightboxServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplLightboxLightboxServlet MimeNoContent ComDayCqDamCoreImplLightboxLightboxServletInfo accept
comDayCqDamCoreImplLightboxLightboxServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.lightbox.LightboxServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplLightboxLightboxServlet  
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet SlingServletPaths where
  applyOptionalParam req (SlingServletPaths xs) =
    req `setQuery` toQuery ("sling.servlet.paths", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet SlingServletMethods[Text] where
  applyOptionalParam req (SlingServletMethods[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.methods", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplLightboxLightboxServlet CqDamEnableAnonymous where
  applyOptionalParam req (CqDamEnableAnonymous xs) =
    req `setQuery` toQuery ("cq.dam.enable.anonymous", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplLightboxLightboxServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplLightboxLightboxServlet MimePlainText


-- *** comDayCqDamCoreImplMetadataEditorSelectComponentHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplMetadataEditorSelectComponentHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplMetadataEditorSelectComponentHandler MimeNoContent ComDayCqDamCoreImplMetadataEditorSelectComponentHandlerInfo accept
comDayCqDamCoreImplMetadataEditorSelectComponentHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.metadata.editor.SelectComponentHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplMetadataEditorSelectComponentHandler  
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMetadataEditorSelectComponentHandler Granitedata where
  applyOptionalParam req (Granitedata xs) =
    req `setQuery` toQueryColl MultiParamArray ("granite:data", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplMetadataEditorSelectComponentHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplMetadataEditorSelectComponentHandler MimePlainText


-- *** comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper MimeNoContent ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelperInfo accept
comDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.AssetUploadRestrictionHelper"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper  
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper CqDamAllowAllMime where
  applyOptionalParam req (CqDamAllowAllMime xs) =
    req `setQuery` toQuery ("cq.dam.allow.all.mime", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper CqDamAllowedAssetMimes where
  applyOptionalParam req (CqDamAllowedAssetMimes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.allowed.asset.mimes", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplMimeTypeAssetUploadRestrictionHelper MimePlainText


-- *** comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl MimeNoContent ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImplInfo accept
comDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.mimeType.DamMimeTypeServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl  
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl CqDamDetectAssetMimeFromContent where
  applyOptionalParam req (CqDamDetectAssetMimeFromContent xs) =
    req `setQuery` toQuery ("cq.dam.detect.asset.mime.from.content", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplMimeTypeDamMimeTypeServiceImpl MimePlainText


-- *** comDayCqDamCoreImplMissingMetadataNotificationJob

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.MissingMetadataNotificationJob@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplMissingMetadataNotificationJob 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplMissingMetadataNotificationJob MimeNoContent ComDayCqDamCoreImplMissingMetadataNotificationJobInfo accept
comDayCqDamCoreImplMissingMetadataNotificationJob  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.MissingMetadataNotificationJob"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplMissingMetadataNotificationJob  
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob CqDamMissingmetadataNotificationSchedulerIstimebased where
  applyOptionalParam req (CqDamMissingmetadataNotificationSchedulerIstimebased xs) =
    req `setQuery` toQuery ("cq.dam.missingmetadata.notification.scheduler.istimebased", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob CqDamMissingmetadataNotificationSchedulerTimebasedRule where
  applyOptionalParam req (CqDamMissingmetadataNotificationSchedulerTimebasedRule xs) =
    req `setQuery` toQuery ("cq.dam.missingmetadata.notification.scheduler.timebased.rule", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob CqDamMissingmetadataNotificationSchedulerPeriodRule where
  applyOptionalParam req (CqDamMissingmetadataNotificationSchedulerPeriodRule xs) =
    req `setQuery` toQuery ("cq.dam.missingmetadata.notification.scheduler.period.rule", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplMissingMetadataNotificationJob CqDamMissingmetadataNotificationRecipient where
  applyOptionalParam req (CqDamMissingmetadataNotificationRecipient xs) =
    req `setQuery` toQuery ("cq.dam.missingmetadata.notification.recipient", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplMissingMetadataNotificationJob MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplMissingMetadataNotificationJob MimePlainText


-- *** comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr MimeNoContent ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPrInfo accept
comDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.process.SendTransientWorkflowCompletedEmailProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr  
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr NotifyOnComplete where
  applyOptionalParam req (NotifyOnComplete xs) =
    req `setQuery` toQuery ("Notify on Complete", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplProcessSendTransientWorkflowCompletedEmailPr MimePlainText


-- *** comDayCqDamCoreImplProcessTextExtractionProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.process.TextExtractionProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplProcessTextExtractionProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplProcessTextExtractionProcess MimeNoContent ComDayCqDamCoreImplProcessTextExtractionProcessInfo accept
comDayCqDamCoreImplProcessTextExtractionProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.process.TextExtractionProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplProcessTextExtractionProcess  
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess MimeTypes where
  applyOptionalParam req (MimeTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("mimeTypes", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplProcessTextExtractionProcess MaxExtract where
  applyOptionalParam req (MaxExtract xs) =
    req `setQuery` toQuery ("maxExtract", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplProcessTextExtractionProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplProcessTextExtractionProcess MimePlainText


-- *** comDayCqDamCoreImplRenditionMakerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.RenditionMakerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplRenditionMakerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplRenditionMakerImpl MimeNoContent ComDayCqDamCoreImplRenditionMakerImplInfo accept
comDayCqDamCoreImplRenditionMakerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.RenditionMakerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplRenditionMakerImpl  
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl XmpPropagate where
  applyOptionalParam req (XmpPropagate xs) =
    req `setQuery` toQuery ("xmp.propagate", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplRenditionMakerImpl XmpExcludes where
  applyOptionalParam req (XmpExcludes xs) =
    req `setQuery` toQueryColl MultiParamArray ("xmp.excludes", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplRenditionMakerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplRenditionMakerImpl MimePlainText


-- *** comDayCqDamCoreImplReportsReportExportService

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.reports.ReportExportService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplReportsReportExportService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplReportsReportExportService MimeNoContent ComDayCqDamCoreImplReportsReportExportServiceInfo accept
comDayCqDamCoreImplReportsReportExportService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportExportService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplReportsReportExportService  
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportExportService QueryBatchSize where
  applyOptionalParam req (QueryBatchSize xs) =
    req `setQuery` toQuery ("queryBatchSize", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplReportsReportExportService MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplReportsReportExportService MimePlainText


-- *** comDayCqDamCoreImplReportsReportPurgeService

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.reports.ReportPurgeService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplReportsReportPurgeService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplReportsReportPurgeService MimeNoContent ComDayCqDamCoreImplReportsReportPurgeServiceInfo accept
comDayCqDamCoreImplReportsReportPurgeService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.reports.ReportPurgeService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplReportsReportPurgeService  
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService MaxSavedReports where
  applyOptionalParam req (MaxSavedReports xs) =
    req `setQuery` toQuery ("maxSavedReports", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService TimeDuration where
  applyOptionalParam req (TimeDuration xs) =
    req `setQuery` toQuery ("timeDuration", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplReportsReportPurgeService EnableReportPurge where
  applyOptionalParam req (EnableReportPurge xs) =
    req `setQuery` toQuery ("enableReportPurge", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplReportsReportPurgeService MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplReportsReportPurgeService MimePlainText


-- *** comDayCqDamCoreImplServletAssetDownloadServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletAssetDownloadServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletAssetDownloadServlet MimeNoContent ComDayCqDamCoreImplServletAssetDownloadServletInfo accept
comDayCqDamCoreImplServletAssetDownloadServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetDownloadServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletAssetDownloadServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetDownloadServlet Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletAssetDownloadServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletAssetDownloadServlet MimePlainText


-- *** comDayCqDamCoreImplServletAssetStatusServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.AssetStatusServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletAssetStatusServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletAssetStatusServlet MimeNoContent ComDayCqDamCoreImplServletAssetStatusServletInfo accept
comDayCqDamCoreImplServletAssetStatusServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetStatusServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletAssetStatusServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetStatusServlet CqDamBatchStatusMaxassets where
  applyOptionalParam req (CqDamBatchStatusMaxassets xs) =
    req `setQuery` toQuery ("cq.dam.batch.status.maxassets", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletAssetStatusServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletAssetStatusServlet MimePlainText


-- *** comDayCqDamCoreImplServletAssetXMPSearchServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletAssetXMPSearchServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletAssetXMPSearchServlet MimeNoContent ComDayCqDamCoreImplServletAssetXMPSearchServletInfo accept
comDayCqDamCoreImplServletAssetXMPSearchServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.AssetXMPSearchServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletAssetXMPSearchServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletAssetXMPSearchServlet CqDamBatchIndesignMaxassets where
  applyOptionalParam req (CqDamBatchIndesignMaxassets xs) =
    req `setQuery` toQuery ("cq.dam.batch.indesign.maxassets", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletAssetXMPSearchServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletAssetXMPSearchServlet MimePlainText


-- *** comDayCqDamCoreImplServletBatchMetadataServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletBatchMetadataServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletBatchMetadataServlet MimeNoContent ComDayCqDamCoreImplServletBatchMetadataServletInfo accept
comDayCqDamCoreImplServletBatchMetadataServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BatchMetadataServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletBatchMetadataServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet CqDamBatchMetadataAssetDefault where
  applyOptionalParam req (CqDamBatchMetadataAssetDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.batch.metadata.asset.default", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet CqDamBatchMetadataCollectionDefault where
  applyOptionalParam req (CqDamBatchMetadataCollectionDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.batch.metadata.collection.default", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBatchMetadataServlet CqDamBatchMetadataMaxresources where
  applyOptionalParam req (CqDamBatchMetadataMaxresources xs) =
    req `setQuery` toQuery ("cq.dam.batch.metadata.maxresources", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletBatchMetadataServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletBatchMetadataServlet MimePlainText


-- *** comDayCqDamCoreImplServletBinaryProviderServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletBinaryProviderServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletBinaryProviderServlet MimeNoContent ComDayCqDamCoreImplServletBinaryProviderServletInfo accept
comDayCqDamCoreImplServletBinaryProviderServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.BinaryProviderServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletBinaryProviderServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet SlingServletResourceTypes where
  applyOptionalParam req (SlingServletResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.resourceTypes", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet SlingServletMethods[Text] where
  applyOptionalParam req (SlingServletMethods[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.methods", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletBinaryProviderServlet CqDamDrmEnable where
  applyOptionalParam req (CqDamDrmEnable xs) =
    req `setQuery` toQuery ("cq.dam.drm.enable", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletBinaryProviderServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletBinaryProviderServlet MimePlainText


-- *** comDayCqDamCoreImplServletCollectionServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.CollectionServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletCollectionServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletCollectionServlet MimeNoContent ComDayCqDamCoreImplServletCollectionServletInfo accept
comDayCqDamCoreImplServletCollectionServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletCollectionServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet CqDamBatchCollectionProperties where
  applyOptionalParam req (CqDamBatchCollectionProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.batch.collection.properties", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionServlet CqDamBatchCollectionMaxcollections where
  applyOptionalParam req (CqDamBatchCollectionMaxcollections xs) =
    req `setQuery` toQuery ("cq.dam.batch.collection.maxcollections", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletCollectionServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletCollectionServlet MimePlainText


-- *** comDayCqDamCoreImplServletCollectionsServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.CollectionsServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletCollectionsServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletCollectionsServlet MimeNoContent ComDayCqDamCoreImplServletCollectionsServletInfo accept
comDayCqDamCoreImplServletCollectionsServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CollectionsServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletCollectionsServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet CqDamBatchCollectionsProperties where
  applyOptionalParam req (CqDamBatchCollectionsProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.batch.collections.properties", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCollectionsServlet CqDamBatchCollectionsLimit where
  applyOptionalParam req (CqDamBatchCollectionsLimit xs) =
    req `setQuery` toQuery ("cq.dam.batch.collections.limit", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletCollectionsServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletCollectionsServlet MimePlainText


-- *** comDayCqDamCoreImplServletCompanionServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.CompanionServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletCompanionServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletCompanionServlet MimeNoContent ComDayCqDamCoreImplServletCompanionServletInfo accept
comDayCqDamCoreImplServletCompanionServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CompanionServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletCompanionServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet MoreInfo where
  applyOptionalParam req (MoreInfo xs) =
    req `setQuery` toQuery ("More Info", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCompanionServlet MntoverlaydamguicontentassetsmoreinfoHtmlpath where
  applyOptionalParam req (MntoverlaydamguicontentassetsmoreinfoHtmlpath xs) =
    req `setQuery` toQuery ("/mnt/overlay/dam/gui/content/assets/moreinfo.html/${path}", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletCompanionServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletCompanionServlet MimePlainText


-- *** comDayCqDamCoreImplServletCreateAssetServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.CreateAssetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletCreateAssetServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletCreateAssetServlet MimeNoContent ComDayCqDamCoreImplServletCreateAssetServletInfo accept
comDayCqDamCoreImplServletCreateAssetServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.CreateAssetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletCreateAssetServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletCreateAssetServlet DetectDuplicate where
  applyOptionalParam req (DetectDuplicate xs) =
    req `setQuery` toQuery ("detect_duplicate", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletCreateAssetServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletCreateAssetServlet MimePlainText


-- *** comDayCqDamCoreImplServletDamContentDispositionFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletDamContentDispositionFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletDamContentDispositionFilter MimeNoContent ComDayCqDamCoreImplServletDamContentDispositionFilterInfo accept
comDayCqDamCoreImplServletDamContentDispositionFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.DamContentDispositionFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletDamContentDispositionFilter  
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter CqMimeTypeBlacklist where
  applyOptionalParam req (CqMimeTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.mime.type.blacklist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletDamContentDispositionFilter CqDamEmptyMime where
  applyOptionalParam req (CqDamEmptyMime xs) =
    req `setQuery` toQuery ("cq.dam.empty.mime", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletDamContentDispositionFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletDamContentDispositionFilter MimePlainText


-- *** comDayCqDamCoreImplServletGuidLookupFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.GuidLookupFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletGuidLookupFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletGuidLookupFilter MimeNoContent ComDayCqDamCoreImplServletGuidLookupFilterInfo accept
comDayCqDamCoreImplServletGuidLookupFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.GuidLookupFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletGuidLookupFilter  
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletGuidLookupFilter CqDamCoreGuidlookupfilterEnabled where
  applyOptionalParam req (CqDamCoreGuidlookupfilterEnabled xs) =
    req `setQuery` toQuery ("cq.dam.core.guidlookupfilter.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletGuidLookupFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletGuidLookupFilter MimePlainText


-- *** comDayCqDamCoreImplServletHealthCheckServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.HealthCheckServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletHealthCheckServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletHealthCheckServlet MimeNoContent ComDayCqDamCoreImplServletHealthCheckServletInfo accept
comDayCqDamCoreImplServletHealthCheckServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.HealthCheckServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletHealthCheckServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet CqDamSyncWorkflowId where
  applyOptionalParam req (CqDamSyncWorkflowId xs) =
    req `setQuery` toQuery ("cq.dam.sync.workflow.id", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletHealthCheckServlet CqDamSyncFolderTypes where
  applyOptionalParam req (CqDamSyncFolderTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.sync.folder.types", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletHealthCheckServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletHealthCheckServlet MimePlainText


-- *** comDayCqDamCoreImplServletMetadataGetServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.MetadataGetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletMetadataGetServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletMetadataGetServlet MimeNoContent ComDayCqDamCoreImplServletMetadataGetServletInfo accept
comDayCqDamCoreImplServletMetadataGetServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MetadataGetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletMetadataGetServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet SlingServletResourceTypesText where
  applyOptionalParam req (SlingServletResourceTypesText xs) =
    req `setQuery` toQuery ("sling.servlet.resourceTypes", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet SlingServletExtensions where
  applyOptionalParam req (SlingServletExtensions xs) =
    req `setQuery` toQuery ("sling.servlet.extensions", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMetadataGetServlet SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletMetadataGetServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletMetadataGetServlet MimePlainText


-- *** comDayCqDamCoreImplServletMultipleLicenseAcceptServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletMultipleLicenseAcceptServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet MimeNoContent ComDayCqDamCoreImplServletMultipleLicenseAcceptServletInfo accept
comDayCqDamCoreImplServletMultipleLicenseAcceptServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.MultipleLicenseAcceptServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet CqDamDrmEnable where
  applyOptionalParam req (CqDamDrmEnable xs) =
    req `setQuery` toQuery ("cq.dam.drm.enable", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletMultipleLicenseAcceptServlet MimePlainText


-- *** comDayCqDamCoreImplServletResourceCollectionServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplServletResourceCollectionServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplServletResourceCollectionServlet MimeNoContent ComDayCqDamCoreImplServletResourceCollectionServletInfo accept
comDayCqDamCoreImplServletResourceCollectionServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.servlet.ResourceCollectionServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplServletResourceCollectionServlet  
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet SlingServletResourceTypes where
  applyOptionalParam req (SlingServletResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.resourceTypes", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet DownloadConfig where
  applyOptionalParam req (DownloadConfig xs) =
    req `setQuery` toQuery ("download.config", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet ViewSelector where
  applyOptionalParam req (ViewSelector xs) =
    req `setQuery` toQuery ("view.selector", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplServletResourceCollectionServlet SendEmail where
  applyOptionalParam req (SendEmail xs) =
    req `setQuery` toQuery ("send_email", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplServletResourceCollectionServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplServletResourceCollectionServlet MimePlainText


-- *** comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl MimeNoContent ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImplInfo accept
comDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.ui.preview.FolderPreviewUpdaterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl  
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl CreatePreviewEnabled where
  applyOptionalParam req (CreatePreviewEnabled xs) =
    req `setQuery` toQuery ("createPreviewEnabled", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl UpdatePreviewEnabled where
  applyOptionalParam req (UpdatePreviewEnabled xs) =
    req `setQuery` toQuery ("updatePreviewEnabled", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl QueueSize where
  applyOptionalParam req (QueueSize xs) =
    req `setQuery` toQuery ("queueSize", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl FolderPreviewRenditionRegex where
  applyOptionalParam req (FolderPreviewRenditionRegex xs) =
    req `setQuery` toQuery ("folderPreviewRenditionRegex", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplUiPreviewFolderPreviewUpdaterImpl MimePlainText


-- *** comDayCqDamCoreImplUnzipUnzipConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.impl.unzip.UnzipConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreImplUnzipUnzipConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreImplUnzipUnzipConfig MimeNoContent ComDayCqDamCoreImplUnzipUnzipConfigInfo accept
comDayCqDamCoreImplUnzipUnzipConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.impl.unzip.UnzipConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreImplUnzipUnzipConfig  
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig CqDamConfigUnzipMaxuncompressedsize where
  applyOptionalParam req (CqDamConfigUnzipMaxuncompressedsize xs) =
    req `setQuery` toQuery ("cq.dam.config.unzip.maxuncompressedsize", Just xs)
instance HasOptionalParam ComDayCqDamCoreImplUnzipUnzipConfig CqDamConfigUnzipEncoding where
  applyOptionalParam req (CqDamConfigUnzipEncoding xs) =
    req `setQuery` toQuery ("cq.dam.config.unzip.encoding", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreImplUnzipUnzipConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreImplUnzipUnzipConfig MimePlainText


-- *** comDayCqDamCoreProcessExifToolExtractMetadataProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreProcessExifToolExtractMetadataProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreProcessExifToolExtractMetadataProcess MimeNoContent ComDayCqDamCoreProcessExifToolExtractMetadataProcessInfo accept
comDayCqDamCoreProcessExifToolExtractMetadataProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.process.ExifToolExtractMetadataProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreProcessExifToolExtractMetadataProcess  
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExifToolExtractMetadataProcess CqDamEnableSha1 where
  applyOptionalParam req (CqDamEnableSha1 xs) =
    req `setQuery` toQuery ("cq.dam.enable.sha1", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreProcessExifToolExtractMetadataProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreProcessExifToolExtractMetadataProcess MimePlainText


-- *** comDayCqDamCoreProcessExtractMetadataProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.process.ExtractMetadataProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreProcessExtractMetadataProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreProcessExtractMetadataProcess MimeNoContent ComDayCqDamCoreProcessExtractMetadataProcessInfo accept
comDayCqDamCoreProcessExtractMetadataProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.process.ExtractMetadataProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreProcessExtractMetadataProcess  
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessExtractMetadataProcess CqDamEnableSha1 where
  applyOptionalParam req (CqDamEnableSha1 xs) =
    req `setQuery` toQuery ("cq.dam.enable.sha1", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreProcessExtractMetadataProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreProcessExtractMetadataProcess MimePlainText


-- *** comDayCqDamCoreProcessMetadataProcessorProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.core.process.MetadataProcessorProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamCoreProcessMetadataProcessorProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamCoreProcessMetadataProcessorProcess MimeNoContent ComDayCqDamCoreProcessMetadataProcessorProcessInfo accept
comDayCqDamCoreProcessMetadataProcessorProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.core.process.MetadataProcessorProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamCoreProcessMetadataProcessorProcess  
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess CqDamEnableSha1 where
  applyOptionalParam req (CqDamEnableSha1 xs) =
    req `setQuery` toQuery ("cq.dam.enable.sha1", Just xs)
instance HasOptionalParam ComDayCqDamCoreProcessMetadataProcessorProcess CqDamMetadataXssprotectedProperties where
  applyOptionalParam req (CqDamMetadataXssprotectedProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.metadata.xssprotected.properties", Just xs)

-- | @application/json@
instance Produces ComDayCqDamCoreProcessMetadataProcessorProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamCoreProcessMetadataProcessorProcess MimePlainText


-- *** comDayCqDamHandlerFfmpegLocatorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.handler.ffmpeg.LocatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamHandlerFfmpegLocatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamHandlerFfmpegLocatorImpl MimeNoContent ComDayCqDamHandlerFfmpegLocatorImplInfo accept
comDayCqDamHandlerFfmpegLocatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.handler.ffmpeg.LocatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamHandlerFfmpegLocatorImpl  
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamHandlerFfmpegLocatorImpl ExecutableSearchpath where
  applyOptionalParam req (ExecutableSearchpath xs) =
    req `setQuery` toQueryColl MultiParamArray ("executable.searchpath", Just xs)

-- | @application/json@
instance Produces ComDayCqDamHandlerFfmpegLocatorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamHandlerFfmpegLocatorImpl MimePlainText


-- *** comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl MimeNoContent ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImplInfo accept
comDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.handler.gibson.fontmanager.impl.FontManagerServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl  
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl FontmgrSystemFontDir where
  applyOptionalParam req (FontmgrSystemFontDir xs) =
    req `setQuery` toQueryColl MultiParamArray ("fontmgr.system.font.dir", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl FontmgrAdobeFontDir where
  applyOptionalParam req (FontmgrAdobeFontDir xs) =
    req `setQuery` toQuery ("fontmgr.adobe.font.dir", Just xs)
instance HasOptionalParam ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl FontmgrCustomerFontDir where
  applyOptionalParam req (FontmgrCustomerFontDir xs) =
    req `setQuery` toQuery ("fontmgr.customer.font.dir", Just xs)

-- | @application/json@
instance Produces ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamHandlerGibsonFontmanagerImplFontManagerServiceImpl MimePlainText


-- *** comDayCqDamHandlerStandardPdfPdfHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.handler.standard.pdf.PdfHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamHandlerStandardPdfPdfHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamHandlerStandardPdfPdfHandler MimeNoContent ComDayCqDamHandlerStandardPdfPdfHandlerInfo accept
comDayCqDamHandlerStandardPdfPdfHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.handler.standard.pdf.PdfHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamHandlerStandardPdfPdfHandler  
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPdfPdfHandler RasterAnnotation where
  applyOptionalParam req (RasterAnnotation xs) =
    req `setQuery` toQuery ("raster.annotation", Just xs)

-- | @application/json@
instance Produces ComDayCqDamHandlerStandardPdfPdfHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamHandlerStandardPdfPdfHandler MimePlainText


-- *** comDayCqDamHandlerStandardPsPostScriptHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.handler.standard.ps.PostScriptHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamHandlerStandardPsPostScriptHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamHandlerStandardPsPostScriptHandler MimeNoContent ComDayCqDamHandlerStandardPsPostScriptHandlerInfo accept
comDayCqDamHandlerStandardPsPostScriptHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.handler.standard.ps.PostScriptHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamHandlerStandardPsPostScriptHandler  
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsPostScriptHandler RasterAnnotation where
  applyOptionalParam req (RasterAnnotation xs) =
    req `setQuery` toQuery ("raster.annotation", Just xs)

-- | @application/json@
instance Produces ComDayCqDamHandlerStandardPsPostScriptHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamHandlerStandardPsPostScriptHandler MimePlainText


-- *** comDayCqDamHandlerStandardPsdPsdHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.handler.standard.psd.PsdHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamHandlerStandardPsdPsdHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamHandlerStandardPsdPsdHandler MimeNoContent ComDayCqDamHandlerStandardPsdPsdHandlerInfo accept
comDayCqDamHandlerStandardPsdPsdHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.handler.standard.psd.PsdHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamHandlerStandardPsdPsdHandler  
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamHandlerStandardPsdPsdHandler LargeFileThreshold where
  applyOptionalParam req (LargeFileThreshold xs) =
    req `setQuery` toQuery ("large_file_threshold", Just xs)

-- | @application/json@
instance Produces ComDayCqDamHandlerStandardPsdPsdHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamHandlerStandardPsdPsdHandler MimePlainText


-- *** comDayCqDamIdsImplIDSJobProcessor

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.ids.impl.IDSJobProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamIdsImplIDSJobProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamIdsImplIDSJobProcessor MimeNoContent ComDayCqDamIdsImplIDSJobProcessorInfo accept
comDayCqDamIdsImplIDSJobProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSJobProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamIdsImplIDSJobProcessor  
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor EnableMultisession where
  applyOptionalParam req (EnableMultisession xs) =
    req `setQuery` toQuery ("enable.multisession", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor IdsCcEnable where
  applyOptionalParam req (IdsCcEnable xs) =
    req `setQuery` toQuery ("ids.cc.enable", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor EnableRetry where
  applyOptionalParam req (EnableRetry xs) =
    req `setQuery` toQuery ("enable.retry", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor EnableRetryScripterror where
  applyOptionalParam req (EnableRetryScripterror xs) =
    req `setQuery` toQuery ("enable.retry.scripterror", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor ExternalizerDomainCqhost where
  applyOptionalParam req (ExternalizerDomainCqhost xs) =
    req `setQuery` toQuery ("externalizer.domain.cqhost", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSJobProcessor ExternalizerDomainHttp where
  applyOptionalParam req (ExternalizerDomainHttp xs) =
    req `setQuery` toQuery ("externalizer.domain.http", Just xs)

-- | @application/json@
instance Produces ComDayCqDamIdsImplIDSJobProcessor MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamIdsImplIDSJobProcessor MimePlainText


-- *** comDayCqDamIdsImplIDSPoolManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.ids.impl.IDSPoolManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamIdsImplIDSPoolManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamIdsImplIDSPoolManagerImpl MimeNoContent ComDayCqDamIdsImplIDSPoolManagerImplInfo accept
comDayCqDamIdsImplIDSPoolManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.ids.impl.IDSPoolManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamIdsImplIDSPoolManagerImpl  
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl MaxErrorsToBlacklist where
  applyOptionalParam req (MaxErrorsToBlacklist xs) =
    req `setQuery` toQuery ("max.errors.to.blacklist", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl RetryIntervalToWhitelist where
  applyOptionalParam req (RetryIntervalToWhitelist xs) =
    req `setQuery` toQuery ("retry.interval.to.whitelist", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl ConnectTimeout where
  applyOptionalParam req (ConnectTimeout xs) =
    req `setQuery` toQuery ("connect.timeout", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socket.timeout", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamIdsImplIDSPoolManagerImpl ConnectionUseMax where
  applyOptionalParam req (ConnectionUseMax xs) =
    req `setQuery` toQuery ("connection.use.max", Just xs)

-- | @application/json@
instance Produces ComDayCqDamIdsImplIDSPoolManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamIdsImplIDSPoolManagerImpl MimePlainText


-- *** comDayCqDamInddImplHandlerIndesignXMPHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamInddImplHandlerIndesignXMPHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamInddImplHandlerIndesignXMPHandler MimeNoContent ComDayCqDamInddImplHandlerIndesignXMPHandlerInfo accept
comDayCqDamInddImplHandlerIndesignXMPHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.indd.impl.handler.IndesignXMPHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamInddImplHandlerIndesignXMPHandler  
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamInddImplHandlerIndesignXMPHandler ExtractPages where
  applyOptionalParam req (ExtractPages xs) =
    req `setQuery` toQuery ("extract.pages", Just xs)

-- | @application/json@
instance Produces ComDayCqDamInddImplHandlerIndesignXMPHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamInddImplHandlerIndesignXMPHandler MimePlainText


-- *** comDayCqDamInddImplServletSnippetCreationServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamInddImplServletSnippetCreationServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamInddImplServletSnippetCreationServlet MimeNoContent ComDayCqDamInddImplServletSnippetCreationServletInfo accept
comDayCqDamInddImplServletSnippetCreationServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.indd.impl.servlet.SnippetCreationServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamInddImplServletSnippetCreationServlet  
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamInddImplServletSnippetCreationServlet SnippetcreationMaxcollections where
  applyOptionalParam req (SnippetcreationMaxcollections xs) =
    req `setQuery` toQuery ("snippetcreation.maxcollections", Just xs)

-- | @application/json@
instance Produces ComDayCqDamInddImplServletSnippetCreationServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamInddImplServletSnippetCreationServlet MimePlainText


-- *** comDayCqDamInddProcessINDDMediaExtractProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.indd.process.INDDMediaExtractProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamInddProcessINDDMediaExtractProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamInddProcessINDDMediaExtractProcess MimeNoContent ComDayCqDamInddProcessINDDMediaExtractProcessInfo accept
comDayCqDamInddProcessINDDMediaExtractProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.indd.process.INDDMediaExtractProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamInddProcessINDDMediaExtractProcess  
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess CqDamInddPagesRegex where
  applyOptionalParam req (CqDamInddPagesRegex xs) =
    req `setQuery` toQuery ("cq.dam.indd.pages.regex", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess IdsJobDecoupled where
  applyOptionalParam req (IdsJobDecoupled xs) =
    req `setQuery` toQuery ("ids.job.decoupled", Just xs)
instance HasOptionalParam ComDayCqDamInddProcessINDDMediaExtractProcess IdsJobWorkflowModel where
  applyOptionalParam req (IdsJobWorkflowModel xs) =
    req `setQuery` toQuery ("ids.job.workflow.model", Just xs)

-- | @application/json@
instance Produces ComDayCqDamInddProcessINDDMediaExtractProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamInddProcessINDDMediaExtractProcess MimePlainText


-- *** comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl MimeNoContent ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImplInfo accept
comDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceDataHandlerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl  
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl BatchCommitSize where
  applyOptionalParam req (BatchCommitSize xs) =
    req `setQuery` toQuery ("batch.commit.size", Just xs)

-- | @application/json@
instance Produces ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamPerformanceInternalAssetPerformanceDataHandlerImpl MimePlainText


-- *** comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob MimeNoContent ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJobInfo accept
comDayCqDamPerformanceInternalAssetPerformanceReportSyncJob  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.performance.internal.AssetPerformanceReportSyncJob"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob  
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)

-- | @application/json@
instance Produces ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamPerformanceInternalAssetPerformanceReportSyncJob MimePlainText


-- *** comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro MimeNoContent ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadProInfo accept
comDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.pim.impl.sourcing.upload.process.ProductAssetsUploadProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro  
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro DeleteZipFile where
  applyOptionalParam req (DeleteZipFile xs) =
    req `setQuery` toQuery ("delete.zip.file", Just xs)

-- | @application/json@
instance Produces ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamPimImplSourcingUploadProcessProductAssetsUploadPro MimePlainText


-- *** comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven MimeNoContent ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEvenInfo accept
comDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.S7damDynamicMediaConfigEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven  
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven CqDamS7damDynamicmediaconfigeventlistenerEnabled where
  applyOptionalParam req (CqDamS7damDynamicmediaconfigeventlistenerEnabled xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.dynamicmediaconfigeventlistener.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonAnalyticsImplS7damDynamicMediaConfigEven MimePlainText


-- *** comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner MimeNoContent ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunnerInfo accept
comDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.analytics.impl.SiteCatalystReportRunner"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner  
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner SchedulerConcurrent where
  applyOptionalParam req (SchedulerConcurrent xs) =
    req `setQuery` toQuery ("scheduler.concurrent", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonAnalyticsImplSiteCatalystReportRunner MimePlainText


-- *** comDayCqDamS7damCommonPostServletsSetCreateHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonPostServletsSetCreateHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonPostServletsSetCreateHandler MimeNoContent ComDayCqDamS7damCommonPostServletsSetCreateHandlerInfo accept
comDayCqDamS7damCommonPostServletsSetCreateHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetCreateHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonPostServletsSetCreateHandler  
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler SlingPostOperation where
  applyOptionalParam req (SlingPostOperation xs) =
    req `setQuery` toQuery ("sling.post.operation", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetCreateHandler SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonPostServletsSetCreateHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonPostServletsSetCreateHandler MimePlainText


-- *** comDayCqDamS7damCommonPostServletsSetModifyHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonPostServletsSetModifyHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonPostServletsSetModifyHandler MimeNoContent ComDayCqDamS7damCommonPostServletsSetModifyHandlerInfo accept
comDayCqDamS7damCommonPostServletsSetModifyHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.post.servlets.SetModifyHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonPostServletsSetModifyHandler  
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler SlingPostOperation where
  applyOptionalParam req (SlingPostOperation xs) =
    req `setQuery` toQuery ("sling.post.operation", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonPostServletsSetModifyHandler SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonPostServletsSetModifyHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonPostServletsSetModifyHandler MimePlainText


-- *** comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess MimeNoContent ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcessInfo accept
comDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.process.VideoThumbnailDownloadProcess"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess  
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess ProcessLabel where
  applyOptionalParam req (ProcessLabel xs) =
    req `setQuery` toQuery ("process.label", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonProcessVideoThumbnailDownloadProcess MimePlainText


-- *** comDayCqDamS7damCommonS7damDamChangeEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonS7damDamChangeEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonS7damDamChangeEventListener MimeNoContent ComDayCqDamS7damCommonS7damDamChangeEventListenerInfo accept
comDayCqDamS7damCommonS7damDamChangeEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.S7damDamChangeEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonS7damDamChangeEventListener  
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonS7damDamChangeEventListener CqDamS7damDamchangeeventlistenerEnabled where
  applyOptionalParam req (CqDamS7damDamchangeeventlistenerEnabled xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.damchangeeventlistener.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonS7damDamChangeEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonS7damDamChangeEventListener MimePlainText


-- *** comDayCqDamS7damCommonServletsS7damProductInfoServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonServletsS7damProductInfoServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonServletsS7damProductInfoServlet MimeNoContent ComDayCqDamS7damCommonServletsS7damProductInfoServletInfo accept
comDayCqDamS7damCommonServletsS7damProductInfoServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.servlets.S7damProductInfoServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonServletsS7damProductInfoServlet  
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet SlingServletPaths where
  applyOptionalParam req (SlingServletPaths xs) =
    req `setQuery` toQuery ("sling.servlet.paths", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonServletsS7damProductInfoServlet SlingServletMethods where
  applyOptionalParam req (SlingServletMethods xs) =
    req `setQuery` toQuery ("sling.servlet.methods", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonServletsS7damProductInfoServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonServletsS7damProductInfoServlet MimePlainText


-- *** comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl MimeNoContent ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImplInfo accept
comDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.s7dam.common.video.impl.VideoProxyClientServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl  
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceMultipartuploadMinsizeName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.multipartupload.minsize.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceMultipartuploadPartsizeName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.multipartupload.partsize.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceMultipartuploadNumthreadName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.multipartupload.numthread.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceHttpReadtimeoutName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceHttpReadtimeoutName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.http.readtimeout.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceHttpConnectiontimeoutName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.http.connectiontimeout.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceHttpMaxretrycountName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceHttpMaxretrycountName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.http.maxretrycount.name", Just xs)
instance HasOptionalParam ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl CqDamS7damVideoproxyclientserviceUploadprogressIntervalName where
  applyOptionalParam req (CqDamS7damVideoproxyclientserviceUploadprogressIntervalName xs) =
    req `setQuery` toQuery ("cq.dam.s7dam.videoproxyclientservice.uploadprogress.interval.name", Just xs)

-- | @application/json@
instance Produces ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamS7damCommonVideoImplVideoProxyClientServiceImpl MimePlainText


-- *** comDayCqDamScene7ImplScene7APIClientImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7APIClientImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7APIClientImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7APIClientImpl MimeNoContent ComDayCqDamScene7ImplScene7APIClientImplInfo accept
comDayCqDamScene7ImplScene7APIClientImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7APIClientImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7APIClientImpl  
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl CqDamScene7ApiclientRecordsperpageNofilterName where
  applyOptionalParam req (CqDamScene7ApiclientRecordsperpageNofilterName xs) =
    req `setQuery` toQuery ("cq.dam.scene7.apiclient.recordsperpage.nofilter.name", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7APIClientImpl CqDamScene7ApiclientRecordsperpageWithfilterName where
  applyOptionalParam req (CqDamScene7ApiclientRecordsperpageWithfilterName xs) =
    req `setQuery` toQuery ("cq.dam.scene7.apiclient.recordsperpage.withfilter.name", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7APIClientImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7APIClientImpl MimePlainText


-- *** comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl MimeNoContent ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImplInfo accept
comDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7AssetMimeTypeServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl  
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl CqDamScene7AssetmimetypeserviceMapping where
  applyOptionalParam req (CqDamScene7AssetmimetypeserviceMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.scene7.assetmimetypeservice.mapping", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7AssetMimeTypeServiceImpl MimePlainText


-- *** comDayCqDamScene7ImplScene7ConfigurationEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7ConfigurationEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7ConfigurationEventListener MimeNoContent ComDayCqDamScene7ImplScene7ConfigurationEventListenerInfo accept
comDayCqDamScene7ImplScene7ConfigurationEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7ConfigurationEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7ConfigurationEventListener  
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7ConfigurationEventListener CqDamScene7ConfigurationeventlistenerEnabled where
  applyOptionalParam req (CqDamScene7ConfigurationeventlistenerEnabled xs) =
    req `setQuery` toQuery ("cq.dam.scene7.configurationeventlistener.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7ConfigurationEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7ConfigurationEventListener MimePlainText


-- *** comDayCqDamScene7ImplScene7DamChangeEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7DamChangeEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7DamChangeEventListener MimeNoContent ComDayCqDamScene7ImplScene7DamChangeEventListenerInfo accept
comDayCqDamScene7ImplScene7DamChangeEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7DamChangeEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7DamChangeEventListener  
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener CqDamScene7DamchangeeventlistenerEnabled where
  applyOptionalParam req (CqDamScene7DamchangeeventlistenerEnabled xs) =
    req `setQuery` toQuery ("cq.dam.scene7.damchangeeventlistener.enabled", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7DamChangeEventListener CqDamScene7DamchangeeventlistenerObservedPaths where
  applyOptionalParam req (CqDamScene7DamchangeeventlistenerObservedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.dam.scene7.damchangeeventlistener.observed.paths", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7DamChangeEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7DamChangeEventListener MimePlainText


-- *** comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl MimeNoContent ComDayCqDamScene7ImplScene7FlashTemplatesServiceImplInfo accept
comDayCqDamScene7ImplScene7FlashTemplatesServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7FlashTemplatesServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl  
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Scene7FlashTemplatesRti where
  applyOptionalParam req (Scene7FlashTemplatesRti xs) =
    req `setQuery` toQuery ("scene7FlashTemplates.rti", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Scene7FlashTemplatesRsi where
  applyOptionalParam req (Scene7FlashTemplatesRsi xs) =
    req `setQuery` toQuery ("scene7FlashTemplates.rsi", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Scene7FlashTemplatesRb where
  applyOptionalParam req (Scene7FlashTemplatesRb xs) =
    req `setQuery` toQuery ("scene7FlashTemplates.rb", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Scene7FlashTemplatesRurl where
  applyOptionalParam req (Scene7FlashTemplatesRurl xs) =
    req `setQuery` toQuery ("scene7FlashTemplates.rurl", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl Scene7FlashTemplateUrlFormatParameter where
  applyOptionalParam req (Scene7FlashTemplateUrlFormatParameter xs) =
    req `setQuery` toQuery ("scene7FlashTemplate.urlFormatParameter", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7FlashTemplatesServiceImpl MimePlainText


-- *** comDayCqDamScene7ImplScene7UploadServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamScene7ImplScene7UploadServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamScene7ImplScene7UploadServiceImpl MimeNoContent ComDayCqDamScene7ImplScene7UploadServiceImplInfo accept
comDayCqDamScene7ImplScene7UploadServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.scene7.impl.Scene7UploadServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamScene7ImplScene7UploadServiceImpl  
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl CqDamScene7UploadserviceActivejobtimeoutLabel where
  applyOptionalParam req (CqDamScene7UploadserviceActivejobtimeoutLabel xs) =
    req `setQuery` toQuery ("cq.dam.scene7.uploadservice.activejobtimeout.label", Just xs)
instance HasOptionalParam ComDayCqDamScene7ImplScene7UploadServiceImpl CqDamScene7UploadserviceConnectionmaxperrouteLabel where
  applyOptionalParam req (CqDamScene7UploadserviceConnectionmaxperrouteLabel xs) =
    req `setQuery` toQuery ("cq.dam.scene7.uploadservice.connectionmaxperroute.label", Just xs)

-- | @application/json@
instance Produces ComDayCqDamScene7ImplScene7UploadServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamScene7ImplScene7UploadServiceImpl MimePlainText


-- *** comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer MimeNoContent ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSerInfo accept
comDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.cache.StockCacheConfigurationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer  
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer GetCacheExpirationUnit where
  applyOptionalParam req (GetCacheExpirationUnit xs) =
    req `setQuery` toQuery ("getCacheExpirationUnit", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer GetCacheExpirationValue where
  applyOptionalParam req (GetCacheExpirationValue xs) =
    req `setQuery` toQuery ("getCacheExpirationValue", Just xs)

-- | @application/json@
instance Produces ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamStockIntegrationImplCacheStockCacheConfigurationSer MimePlainText


-- *** comDayCqDamStockIntegrationImplConfigurationStockConfiguration

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamStockIntegrationImplConfigurationStockConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamStockIntegrationImplConfigurationStockConfiguration MimeNoContent ComDayCqDamStockIntegrationImplConfigurationStockConfigurationInfo accept
comDayCqDamStockIntegrationImplConfigurationStockConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.stock.integration.impl.configuration.StockConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamStockIntegrationImplConfigurationStockConfiguration  
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)
instance HasOptionalParam ComDayCqDamStockIntegrationImplConfigurationStockConfiguration ImsConfig where
  applyOptionalParam req (ImsConfig xs) =
    req `setQuery` toQuery ("imsConfig", Just xs)

-- | @application/json@
instance Produces ComDayCqDamStockIntegrationImplConfigurationStockConfiguration MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamStockIntegrationImplConfigurationStockConfiguration MimePlainText


-- *** comDayCqDamVideoImplServletVideoTestServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.dam.video.impl.servlet.VideoTestServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqDamVideoImplServletVideoTestServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqDamVideoImplServletVideoTestServlet MimeNoContent ComDayCqDamVideoImplServletVideoTestServletInfo accept
comDayCqDamVideoImplServletVideoTestServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.dam.video.impl.servlet.VideoTestServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqDamVideoImplServletVideoTestServlet  
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqDamVideoImplServletVideoTestServlet Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqDamVideoImplServletVideoTestServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqDamVideoImplServletVideoTestServlet MimePlainText


-- *** comDayCqExtwidgetServletsImageSpriteServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.extwidget.servlets.ImageSpriteServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqExtwidgetServletsImageSpriteServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqExtwidgetServletsImageSpriteServlet MimeNoContent ComDayCqExtwidgetServletsImageSpriteServletInfo accept
comDayCqExtwidgetServletsImageSpriteServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.extwidget.servlets.ImageSpriteServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqExtwidgetServletsImageSpriteServlet  
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet MaxWidth where
  applyOptionalParam req (MaxWidth xs) =
    req `setQuery` toQuery ("maxWidth", Just xs)
instance HasOptionalParam ComDayCqExtwidgetServletsImageSpriteServlet MaxHeight where
  applyOptionalParam req (MaxHeight xs) =
    req `setQuery` toQuery ("maxHeight", Just xs)

-- | @application/json@
instance Produces ComDayCqExtwidgetServletsImageSpriteServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqExtwidgetServletsImageSpriteServlet MimePlainText


-- *** comDayCqImageInternalFontFontHelper

-- | @POST \/system\/console\/configMgr\/com.day.cq.image.internal.font.FontHelper@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqImageInternalFontFontHelper 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqImageInternalFontFontHelper MimeNoContent ComDayCqImageInternalFontFontHelperInfo accept
comDayCqImageInternalFontFontHelper  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.image.internal.font.FontHelper"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqImageInternalFontFontHelper  
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper Fontpath where
  applyOptionalParam req (Fontpath xs) =
    req `setQuery` toQueryColl MultiParamArray ("fontpath", Just xs)
instance HasOptionalParam ComDayCqImageInternalFontFontHelper OversamplingFactor where
  applyOptionalParam req (OversamplingFactor xs) =
    req `setQuery` toQuery ("oversamplingFactor", Just xs)

-- | @application/json@
instance Produces ComDayCqImageInternalFontFontHelper MimeJSON
-- | @text/plain@
instance Produces ComDayCqImageInternalFontFontHelper MimePlainText


-- *** comDayCqJcrclustersupportClusterStartLevelController

-- | @POST \/system\/console\/configMgr\/com.day.cq.jcrclustersupport.ClusterStartLevelController@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqJcrclustersupportClusterStartLevelController 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqJcrclustersupportClusterStartLevelController MimeNoContent ComDayCqJcrclustersupportClusterStartLevelControllerInfo accept
comDayCqJcrclustersupportClusterStartLevelController  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.jcrclustersupport.ClusterStartLevelController"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqJcrclustersupportClusterStartLevelController  
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController ClusterLevelEnable where
  applyOptionalParam req (ClusterLevelEnable xs) =
    req `setQuery` toQuery ("cluster.level.enable", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController ClusterMasterLevel where
  applyOptionalParam req (ClusterMasterLevel xs) =
    req `setQuery` toQuery ("cluster.master.level", Just xs)
instance HasOptionalParam ComDayCqJcrclustersupportClusterStartLevelController ClusterSlaveLevel where
  applyOptionalParam req (ClusterSlaveLevel xs) =
    req `setQuery` toQuery ("cluster.slave.level", Just xs)

-- | @application/json@
instance Produces ComDayCqJcrclustersupportClusterStartLevelController MimeJSON
-- | @text/plain@
instance Produces ComDayCqJcrclustersupportClusterStartLevelController MimePlainText


-- *** comDayCqMailerDefaultMailService

-- | @POST \/system\/console\/configMgr\/com.day.cq.mailer.DefaultMailService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMailerDefaultMailService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMailerDefaultMailService MimeNoContent ComDayCqMailerDefaultMailServiceInfo accept
comDayCqMailerDefaultMailService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mailer.DefaultMailService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMailerDefaultMailService  
instance HasOptionalParam ComDayCqMailerDefaultMailService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpHost where
  applyOptionalParam req (SmtpHost xs) =
    req `setQuery` toQuery ("smtp.host", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpPort where
  applyOptionalParam req (SmtpPort xs) =
    req `setQuery` toQuery ("smtp.port", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpUser where
  applyOptionalParam req (SmtpUser xs) =
    req `setQuery` toQuery ("smtp.user", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpPassword where
  applyOptionalParam req (SmtpPassword xs) =
    req `setQuery` toQuery ("smtp.password", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService FromAddress where
  applyOptionalParam req (FromAddress xs) =
    req `setQuery` toQuery ("from.address", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpSsl where
  applyOptionalParam req (SmtpSsl xs) =
    req `setQuery` toQuery ("smtp.ssl", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService SmtpStarttls where
  applyOptionalParam req (SmtpStarttls xs) =
    req `setQuery` toQuery ("smtp.starttls", Just xs)
instance HasOptionalParam ComDayCqMailerDefaultMailService DebugEmail where
  applyOptionalParam req (DebugEmail xs) =
    req `setQuery` toQuery ("debug.email", Just xs)

-- | @application/json@
instance Produces ComDayCqMailerDefaultMailService MimeJSON
-- | @text/plain@
instance Produces ComDayCqMailerDefaultMailService MimePlainText


-- *** comDayCqMailerImplCqMailingService

-- | @POST \/system\/console\/configMgr\/com.day.cq.mailer.impl.CqMailingService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMailerImplCqMailingService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMailerImplCqMailingService MimeNoContent ComDayCqMailerImplCqMailingServiceInfo accept
comDayCqMailerImplCqMailingService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mailer.impl.CqMailingService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMailerImplCqMailingService  
instance HasOptionalParam ComDayCqMailerImplCqMailingService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMailerImplCqMailingService MaxRecipientCount where
  applyOptionalParam req (MaxRecipientCount xs) =
    req `setQuery` toQuery ("max.recipient.count", Just xs)

-- | @application/json@
instance Produces ComDayCqMailerImplCqMailingService MimeJSON
-- | @text/plain@
instance Produces ComDayCqMailerImplCqMailingService MimePlainText


-- *** comDayCqMailerImplEmailCqEmailTemplateFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.mailer.impl.email.CqEmailTemplateFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMailerImplEmailCqEmailTemplateFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMailerImplEmailCqEmailTemplateFactory MimeNoContent ComDayCqMailerImplEmailCqEmailTemplateFactoryInfo accept
comDayCqMailerImplEmailCqEmailTemplateFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mailer.impl.email.CqEmailTemplateFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMailerImplEmailCqEmailTemplateFactory  
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqEmailTemplateFactory MailerEmailCharset where
  applyOptionalParam req (MailerEmailCharset xs) =
    req `setQuery` toQuery ("mailer.email.charset", Just xs)

-- | @application/json@
instance Produces ComDayCqMailerImplEmailCqEmailTemplateFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqMailerImplEmailCqEmailTemplateFactory MimePlainText


-- *** comDayCqMailerImplEmailCqRetrieverTemplateFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMailerImplEmailCqRetrieverTemplateFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMailerImplEmailCqRetrieverTemplateFactory MimeNoContent ComDayCqMailerImplEmailCqRetrieverTemplateFactoryInfo accept
comDayCqMailerImplEmailCqRetrieverTemplateFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mailer.impl.email.CqRetrieverTemplateFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMailerImplEmailCqRetrieverTemplateFactory  
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory MailerEmailEmbed where
  applyOptionalParam req (MailerEmailEmbed xs) =
    req `setQuery` toQuery ("mailer.email.embed", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory MailerEmailCharset where
  applyOptionalParam req (MailerEmailCharset xs) =
    req `setQuery` toQuery ("mailer.email.charset", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory MailerEmailRetrieverUserId where
  applyOptionalParam req (MailerEmailRetrieverUserId xs) =
    req `setQuery` toQuery ("mailer.email.retrieverUserID", Just xs)
instance HasOptionalParam ComDayCqMailerImplEmailCqRetrieverTemplateFactory MailerEmailRetrieverUserPwd where
  applyOptionalParam req (MailerEmailRetrieverUserPwd xs) =
    req `setQuery` toQuery ("mailer.email.retrieverUserPWD", Just xs)

-- | @application/json@
instance Produces ComDayCqMailerImplEmailCqRetrieverTemplateFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqMailerImplEmailCqRetrieverTemplateFactory MimePlainText


-- *** comDayCqMcmCampaignImplIntegrationConfigImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmCampaignImplIntegrationConfigImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmCampaignImplIntegrationConfigImpl MimeNoContent ComDayCqMcmCampaignImplIntegrationConfigImplInfo accept
comDayCqMcmCampaignImplIntegrationConfigImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.campaign.impl.IntegrationConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmCampaignImplIntegrationConfigImpl  
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl AemMcmCampaignFormConstraints where
  applyOptionalParam req (AemMcmCampaignFormConstraints xs) =
    req `setQuery` toQueryColl MultiParamArray ("aem.mcm.campaign.formConstraints", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl AemMcmCampaignPublicUrl where
  applyOptionalParam req (AemMcmCampaignPublicUrl xs) =
    req `setQuery` toQuery ("aem.mcm.campaign.publicUrl", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImplIntegrationConfigImpl AemMcmCampaignRelaxedSsl where
  applyOptionalParam req (AemMcmCampaignRelaxedSsl xs) =
    req `setQuery` toQuery ("aem.mcm.campaign.relaxedSSL", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmCampaignImplIntegrationConfigImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmCampaignImplIntegrationConfigImpl MimePlainText


-- *** comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory MimeNoContent ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactoryInfo accept
comDayCqMcmCampaignImporterPersonalizedTextHandlerFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.campaign.importer.PersonalizedTextHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory  
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmCampaignImporterPersonalizedTextHandlerFactory MimePlainText


-- *** comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl MimeNoContent ComDayCqMcmCoreNewsletterNewsletterEmailServiceImplInfo accept
comDayCqMcmCoreNewsletterNewsletterEmailServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.core.newsletter.NewsletterEmailServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl  
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl FromAddress where
  applyOptionalParam req (FromAddress xs) =
    req `setQuery` toQuery ("from.address", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl SenderHost where
  applyOptionalParam req (SenderHost xs) =
    req `setQuery` toQuery ("sender.host", Just xs)
instance HasOptionalParam ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl MaxBounceCount where
  applyOptionalParam req (MaxBounceCount xs) =
    req `setQuery` toQuery ("max.bounce.count", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmCoreNewsletterNewsletterEmailServiceImpl MimePlainText


-- *** comDayCqMcmImplMCMConfiguration

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.impl.MCMConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmImplMCMConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmImplMCMConfiguration MimeNoContent ComDayCqMcmImplMCMConfigurationInfo accept
comDayCqMcmImplMCMConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.impl.MCMConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmImplMCMConfiguration  
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration ExperienceIndirection where
  applyOptionalParam req (ExperienceIndirection xs) =
    req `setQuery` toQueryColl MultiParamArray ("experience.indirection", Just xs)
instance HasOptionalParam ComDayCqMcmImplMCMConfiguration TouchpointIndirection where
  applyOptionalParam req (TouchpointIndirection xs) =
    req `setQuery` toQueryColl MultiParamArray ("touchpoint.indirection", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmImplMCMConfiguration MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmImplMCMConfiguration MimePlainText


-- *** comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen MimeNoContent ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponenInfo accept
comDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.ClickThroughComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen  
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaClickThroughComponen MimePlainText


-- *** comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug MimeNoContent ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThrougInfo accept
comDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.GraphicalClickThroughComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug  
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaGraphicalClickThroug MimePlainText


-- *** comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent MimeNoContent ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponentInfo accept
comDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.cta.LeadFormCTAComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent  
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmLandingpageParserTaghandlersCtaLeadFormCTAComponent MimePlainText


-- *** comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa MimeNoContent ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHaInfo accept
comDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.MBoxExperienceTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa  
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmLandingpageParserTaghandlersMboxMBoxExperienceTagHa MimePlainText


-- *** comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH

-- | @POST \/system\/console\/configMgr\/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH MimeNoContent ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagHInfo accept
comDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.mcm.landingpage.parser.taghandlers.mbox.TargetComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH  
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH MimeJSON
-- | @text/plain@
instance Produces ComDayCqMcmLandingpageParserTaghandlersMboxTargetComponentTagH MimePlainText


-- *** comDayCqNotificationImplNotificationServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.notification.impl.NotificationServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqNotificationImplNotificationServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqNotificationImplNotificationServiceImpl MimeNoContent ComDayCqNotificationImplNotificationServiceImplInfo accept
comDayCqNotificationImplNotificationServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.notification.impl.NotificationServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqNotificationImplNotificationServiceImpl  
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqNotificationImplNotificationServiceImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)

-- | @application/json@
instance Produces ComDayCqNotificationImplNotificationServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqNotificationImplNotificationServiceImpl MimePlainText


-- *** comDayCqPersonalizationImplServletsTargetingConfigurationServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqPersonalizationImplServletsTargetingConfigurationServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqPersonalizationImplServletsTargetingConfigurationServlet MimeNoContent ComDayCqPersonalizationImplServletsTargetingConfigurationServletInfo accept
comDayCqPersonalizationImplServletsTargetingConfigurationServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.personalization.impl.servlets.TargetingConfigurationServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqPersonalizationImplServletsTargetingConfigurationServlet  
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqPersonalizationImplServletsTargetingConfigurationServlet Forcelocation where
  applyOptionalParam req (Forcelocation xs) =
    req `setQuery` toQuery ("forcelocation", Just xs)

-- | @application/json@
instance Produces ComDayCqPersonalizationImplServletsTargetingConfigurationServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqPersonalizationImplServletsTargetingConfigurationServlet MimePlainText


-- *** comDayCqPollingImporterImplManagedPollConfigImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.polling.importer.impl.ManagedPollConfigImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqPollingImporterImplManagedPollConfigImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqPollingImporterImplManagedPollConfigImpl MimeNoContent ComDayCqPollingImporterImplManagedPollConfigImplInfo accept
comDayCqPollingImporterImplManagedPollConfigImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollConfigImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqPollingImporterImplManagedPollConfigImpl  
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Id where
  applyOptionalParam req (Id xs) =
    req `setQuery` toQuery ("id", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Reference where
  applyOptionalParam req (Reference xs) =
    req `setQuery` toQuery ("reference", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Interval where
  applyOptionalParam req (Interval xs) =
    req `setQuery` toQuery ("interval", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Expression where
  applyOptionalParam req (Expression xs) =
    req `setQuery` toQuery ("expression", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Source where
  applyOptionalParam req (Source xs) =
    req `setQuery` toQuery ("source", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Target where
  applyOptionalParam req (Target xs) =
    req `setQuery` toQuery ("target", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Login where
  applyOptionalParam req (Login xs) =
    req `setQuery` toQuery ("login", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollConfigImpl Password where
  applyOptionalParam req (Password xs) =
    req `setQuery` toQuery ("password", Just xs)

-- | @application/json@
instance Produces ComDayCqPollingImporterImplManagedPollConfigImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqPollingImporterImplManagedPollConfigImpl MimePlainText


-- *** comDayCqPollingImporterImplManagedPollingImporterImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqPollingImporterImplManagedPollingImporterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqPollingImporterImplManagedPollingImporterImpl MimeNoContent ComDayCqPollingImporterImplManagedPollingImporterImplInfo accept
comDayCqPollingImporterImplManagedPollingImporterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.polling.importer.impl.ManagedPollingImporterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqPollingImporterImplManagedPollingImporterImpl  
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplManagedPollingImporterImpl ImporterUser where
  applyOptionalParam req (ImporterUser xs) =
    req `setQuery` toQuery ("importer.user", Just xs)

-- | @application/json@
instance Produces ComDayCqPollingImporterImplManagedPollingImporterImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqPollingImporterImplManagedPollingImporterImpl MimePlainText


-- *** comDayCqPollingImporterImplPollingImporterImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.polling.importer.impl.PollingImporterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqPollingImporterImplPollingImporterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqPollingImporterImplPollingImporterImpl MimeNoContent ComDayCqPollingImporterImplPollingImporterImplInfo accept
comDayCqPollingImporterImplPollingImporterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.polling.importer.impl.PollingImporterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqPollingImporterImplPollingImporterImpl  
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl ImporterMinInterval where
  applyOptionalParam req (ImporterMinInterval xs) =
    req `setQuery` toQuery ("importer.min.interval", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl ImporterUser where
  applyOptionalParam req (ImporterUser xs) =
    req `setQuery` toQuery ("importer.user", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl ExcludePaths where
  applyOptionalParam req (ExcludePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("exclude.paths", Just xs)
instance HasOptionalParam ComDayCqPollingImporterImplPollingImporterImpl IncludePaths where
  applyOptionalParam req (IncludePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("include.paths", Just xs)

-- | @application/json@
instance Produces ComDayCqPollingImporterImplPollingImporterImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqPollingImporterImplPollingImporterImpl MimePlainText


-- *** comDayCqReplicationAuditReplicationEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.audit.ReplicationEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationAuditReplicationEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationAuditReplicationEventListener MimeNoContent ComDayCqReplicationAuditReplicationEventListenerInfo accept
comDayCqReplicationAuditReplicationEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.audit.ReplicationEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationAuditReplicationEventListener  
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationAuditReplicationEventListener ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationAuditReplicationEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationAuditReplicationEventListener MimePlainText


-- *** comDayCqReplicationContentStaticContentBuilder

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.content.StaticContentBuilder@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationContentStaticContentBuilder 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationContentStaticContentBuilder MimeNoContent ComDayCqReplicationContentStaticContentBuilderInfo accept
comDayCqReplicationContentStaticContentBuilder  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.content.StaticContentBuilder"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationContentStaticContentBuilder  
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Host where
  applyOptionalParam req (Host xs) =
    req `setQuery` toQuery ("host", Just xs)
instance HasOptionalParam ComDayCqReplicationContentStaticContentBuilder Port where
  applyOptionalParam req (Port xs) =
    req `setQuery` toQuery ("port", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationContentStaticContentBuilder MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationContentStaticContentBuilder MimePlainText


-- *** comDayCqReplicationImplAgentManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.AgentManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplAgentManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplAgentManagerImpl MimeNoContent ComDayCqReplicationImplAgentManagerImplInfo accept
comDayCqReplicationImplAgentManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.AgentManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplAgentManagerImpl  
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl JobTopics where
  applyOptionalParam req (JobTopics xs) =
    req `setQuery` toQuery ("job.topics", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl ServiceUserTarget where
  applyOptionalParam req (ServiceUserTarget xs) =
    req `setQuery` toQuery ("serviceUser.target", Just xs)
instance HasOptionalParam ComDayCqReplicationImplAgentManagerImpl AgentProviderTarget where
  applyOptionalParam req (AgentProviderTarget xs) =
    req `setQuery` toQuery ("agentProvider.target", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplAgentManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplAgentManagerImpl MimePlainText


-- *** comDayCqReplicationImplContentDurboBinaryLessContentBuilder

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplContentDurboBinaryLessContentBuilder 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplContentDurboBinaryLessContentBuilder MimeNoContent ComDayCqReplicationImplContentDurboBinaryLessContentBuilderInfo accept
comDayCqReplicationImplContentDurboBinaryLessContentBuilder  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.BinaryLessContentBuilder"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplContentDurboBinaryLessContentBuilder  
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboBinaryLessContentBuilder BinaryThreshold where
  applyOptionalParam req (BinaryThreshold xs) =
    req `setQuery` toQuery ("binary.threshold", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplContentDurboBinaryLessContentBuilder MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplContentDurboBinaryLessContentBuilder MimePlainText


-- *** comDayCqReplicationImplContentDurboDurboImportConfigurationProv

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplContentDurboDurboImportConfigurationProv 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplContentDurboDurboImportConfigurationProv MimeNoContent ComDayCqReplicationImplContentDurboDurboImportConfigurationProvInfo accept
comDayCqReplicationImplContentDurboDurboImportConfigurationProv  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.content.durbo.DurboImportConfigurationProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplContentDurboDurboImportConfigurationProv  
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv PreserveHierarchyNodes where
  applyOptionalParam req (PreserveHierarchyNodes xs) =
    req `setQuery` toQuery ("preserve.hierarchy.nodes", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv IgnoreVersioning where
  applyOptionalParam req (IgnoreVersioning xs) =
    req `setQuery` toQuery ("ignore.versioning", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv ImportAcl where
  applyOptionalParam req (ImportAcl xs) =
    req `setQuery` toQuery ("import.acl", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv SaveThreshold where
  applyOptionalParam req (SaveThreshold xs) =
    req `setQuery` toQuery ("save.threshold", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv PreserveUserPaths where
  applyOptionalParam req (PreserveUserPaths xs) =
    req `setQuery` toQuery ("preserve.user.paths", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv PreserveUuid where
  applyOptionalParam req (PreserveUuid xs) =
    req `setQuery` toQuery ("preserve.uuid", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv PreserveUuidNodetypes where
  applyOptionalParam req (PreserveUuidNodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("preserve.uuid.nodetypes", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv PreserveUuidSubtrees where
  applyOptionalParam req (PreserveUuidSubtrees xs) =
    req `setQuery` toQueryColl MultiParamArray ("preserve.uuid.subtrees", Just xs)
instance HasOptionalParam ComDayCqReplicationImplContentDurboDurboImportConfigurationProv AutoCommit where
  applyOptionalParam req (AutoCommit xs) =
    req `setQuery` toQuery ("auto.commit", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplContentDurboDurboImportConfigurationProv MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplContentDurboDurboImportConfigurationProv MimePlainText


-- *** comDayCqReplicationImplReplicationContentFactoryProviderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplReplicationContentFactoryProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplReplicationContentFactoryProviderImpl MimeNoContent ComDayCqReplicationImplReplicationContentFactoryProviderImplInfo accept
comDayCqReplicationImplReplicationContentFactoryProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.ReplicationContentFactoryProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplReplicationContentFactoryProviderImpl  
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl ReplicationContentUseFileStorage where
  applyOptionalParam req (ReplicationContentUseFileStorage xs) =
    req `setQuery` toQuery ("replication.content.useFileStorage", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationContentFactoryProviderImpl ReplicationContentMaxCommitAttempts where
  applyOptionalParam req (ReplicationContentMaxCommitAttempts xs) =
    req `setQuery` toQuery ("replication.content.maxCommitAttempts", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplReplicationContentFactoryProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplReplicationContentFactoryProviderImpl MimePlainText


-- *** comDayCqReplicationImplReplicationReceiverImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.ReplicationReceiverImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplReplicationReceiverImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplReplicationReceiverImpl MimeNoContent ComDayCqReplicationImplReplicationReceiverImplInfo accept
comDayCqReplicationImplReplicationReceiverImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.ReplicationReceiverImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplReplicationReceiverImpl  
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl ReceiverTmpfileThreshold where
  applyOptionalParam req (ReceiverTmpfileThreshold xs) =
    req `setQuery` toQuery ("receiver.tmpfile.threshold", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicationReceiverImpl ReceiverPackagesUseInstall where
  applyOptionalParam req (ReceiverPackagesUseInstall xs) =
    req `setQuery` toQuery ("receiver.packages.use.install", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplReplicationReceiverImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplReplicationReceiverImpl MimePlainText


-- *** comDayCqReplicationImplReplicatorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.ReplicatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplReplicatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplReplicatorImpl MimeNoContent ComDayCqReplicationImplReplicatorImplInfo accept
comDayCqReplicationImplReplicatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.ReplicatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplReplicatorImpl  
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReplicatorImpl DistributeEvents where
  applyOptionalParam req (DistributeEvents xs) =
    req `setQuery` toQuery ("distribute_events", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplReplicatorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplReplicatorImpl MimePlainText


-- *** comDayCqReplicationImplReverseReplicator

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.ReverseReplicator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplReverseReplicator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplReverseReplicator MimeNoContent ComDayCqReplicationImplReverseReplicatorInfo accept
comDayCqReplicationImplReverseReplicator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.ReverseReplicator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplReverseReplicator  
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplReverseReplicator SchedulerPeriod where
  applyOptionalParam req (SchedulerPeriod xs) =
    req `setQuery` toQuery ("scheduler.period", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplReverseReplicator MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplReverseReplicator MimePlainText


-- *** comDayCqReplicationImplTransportBinaryLessTransportHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.transport.BinaryLessTransportHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplTransportBinaryLessTransportHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplTransportBinaryLessTransportHandler MimeNoContent ComDayCqReplicationImplTransportBinaryLessTransportHandlerInfo accept
comDayCqReplicationImplTransportBinaryLessTransportHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.transport.BinaryLessTransportHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplTransportBinaryLessTransportHandler  
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler DisabledCipherSuites where
  applyOptionalParam req (DisabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("disabled.cipher.suites", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportBinaryLessTransportHandler EnabledCipherSuites where
  applyOptionalParam req (EnabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("enabled.cipher.suites", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplTransportBinaryLessTransportHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplTransportBinaryLessTransportHandler MimePlainText


-- *** comDayCqReplicationImplTransportHttp

-- | @POST \/system\/console\/configMgr\/com.day.cq.replication.impl.transport.Http@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReplicationImplTransportHttp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReplicationImplTransportHttp MimeNoContent ComDayCqReplicationImplTransportHttpInfo accept
comDayCqReplicationImplTransportHttp  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.replication.impl.transport.Http"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReplicationImplTransportHttp  
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp DisabledCipherSuites where
  applyOptionalParam req (DisabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("disabled.cipher.suites", Just xs)
instance HasOptionalParam ComDayCqReplicationImplTransportHttp EnabledCipherSuites where
  applyOptionalParam req (EnabledCipherSuites xs) =
    req `setQuery` toQueryColl MultiParamArray ("enabled.cipher.suites", Just xs)

-- | @application/json@
instance Produces ComDayCqReplicationImplTransportHttp MimeJSON
-- | @text/plain@
instance Produces ComDayCqReplicationImplTransportHttp MimePlainText


-- *** comDayCqReportingImplCacheCacheImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.reporting.impl.cache.CacheImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReportingImplCacheCacheImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReportingImplCacheCacheImpl MimeNoContent ComDayCqReportingImplCacheCacheImplInfo accept
comDayCqReportingImplCacheCacheImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.reporting.impl.cache.CacheImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReportingImplCacheCacheImpl  
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl RepcacheEnable where
  applyOptionalParam req (RepcacheEnable xs) =
    req `setQuery` toQuery ("repcache.enable", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl RepcacheTtl where
  applyOptionalParam req (RepcacheTtl xs) =
    req `setQuery` toQuery ("repcache.ttl", Just xs)
instance HasOptionalParam ComDayCqReportingImplCacheCacheImpl RepcacheMax where
  applyOptionalParam req (RepcacheMax xs) =
    req `setQuery` toQuery ("repcache.max", Just xs)

-- | @application/json@
instance Produces ComDayCqReportingImplCacheCacheImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReportingImplCacheCacheImpl MimePlainText


-- *** comDayCqReportingImplConfigServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.reporting.impl.ConfigServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReportingImplConfigServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReportingImplConfigServiceImpl MimeNoContent ComDayCqReportingImplConfigServiceImplInfo accept
comDayCqReportingImplConfigServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.reporting.impl.ConfigServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReportingImplConfigServiceImpl  
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfTimezone where
  applyOptionalParam req (RepconfTimezone xs) =
    req `setQuery` toQuery ("repconf.timezone", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfLocale where
  applyOptionalParam req (RepconfLocale xs) =
    req `setQuery` toQuery ("repconf.locale", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfSnapshots where
  applyOptionalParam req (RepconfSnapshots xs) =
    req `setQuery` toQuery ("repconf.snapshots", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfRepdir where
  applyOptionalParam req (RepconfRepdir xs) =
    req `setQuery` toQuery ("repconf.repdir", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfHourofday where
  applyOptionalParam req (RepconfHourofday xs) =
    req `setQuery` toQuery ("repconf.hourofday", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfMinofhour where
  applyOptionalParam req (RepconfMinofhour xs) =
    req `setQuery` toQuery ("repconf.minofhour", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfMaxrows where
  applyOptionalParam req (RepconfMaxrows xs) =
    req `setQuery` toQuery ("repconf.maxrows", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfFakedata where
  applyOptionalParam req (RepconfFakedata xs) =
    req `setQuery` toQuery ("repconf.fakedata", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfSnapshotuser where
  applyOptionalParam req (RepconfSnapshotuser xs) =
    req `setQuery` toQuery ("repconf.snapshotuser", Just xs)
instance HasOptionalParam ComDayCqReportingImplConfigServiceImpl RepconfEnforcesnapshotuser where
  applyOptionalParam req (RepconfEnforcesnapshotuser xs) =
    req `setQuery` toQuery ("repconf.enforcesnapshotuser", Just xs)

-- | @application/json@
instance Produces ComDayCqReportingImplConfigServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqReportingImplConfigServiceImpl MimePlainText


-- *** comDayCqReportingImplRLogAnalyzer

-- | @POST \/system\/console\/configMgr\/com.day.cq.reporting.impl.RLogAnalyzer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqReportingImplRLogAnalyzer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqReportingImplRLogAnalyzer MimeNoContent ComDayCqReportingImplRLogAnalyzerInfo accept
comDayCqReportingImplRLogAnalyzer  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.reporting.impl.RLogAnalyzer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqReportingImplRLogAnalyzer  
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqReportingImplRLogAnalyzer RequestLogOutput where
  applyOptionalParam req (RequestLogOutput xs) =
    req `setQuery` toQuery ("request.log.output", Just xs)

-- | @application/json@
instance Produces ComDayCqReportingImplRLogAnalyzer MimeJSON
-- | @text/plain@
instance Produces ComDayCqReportingImplRLogAnalyzer MimePlainText


-- *** comDayCqRewriterLinkcheckerImplLinkCheckerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqRewriterLinkcheckerImplLinkCheckerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqRewriterLinkcheckerImplLinkCheckerImpl MimeNoContent ComDayCqRewriterLinkcheckerImplLinkCheckerImplInfo accept
comDayCqRewriterLinkcheckerImplLinkCheckerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqRewriterLinkcheckerImplLinkCheckerImpl  
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl SchedulerPeriod where
  applyOptionalParam req (SchedulerPeriod xs) =
    req `setQuery` toQuery ("scheduler.period", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl SchedulerConcurrent where
  applyOptionalParam req (SchedulerConcurrent xs) =
    req `setQuery` toQuery ("scheduler.concurrent", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl ServiceBadLinkToleranceInterval where
  applyOptionalParam req (ServiceBadLinkToleranceInterval xs) =
    req `setQuery` toQuery ("service.bad_link_tolerance_interval", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl ServiceCheckOverridePatterns where
  applyOptionalParam req (ServiceCheckOverridePatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("service.check_override_patterns", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl ServiceCacheBrokenInternalLinks where
  applyOptionalParam req (ServiceCacheBrokenInternalLinks xs) =
    req `setQuery` toQuery ("service.cache_broken_internal_links", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl ServiceSpecialLinkPrefix where
  applyOptionalParam req (ServiceSpecialLinkPrefix xs) =
    req `setQuery` toQueryColl MultiParamArray ("service.special_link_prefix", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerImpl ServiceSpecialLinkPatterns where
  applyOptionalParam req (ServiceSpecialLinkPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("service.special_link_patterns", Just xs)

-- | @application/json@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerImpl MimePlainText


-- *** comDayCqRewriterLinkcheckerImplLinkCheckerTask

-- | @POST \/system\/console\/configMgr\/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqRewriterLinkcheckerImplLinkCheckerTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqRewriterLinkcheckerImplLinkCheckerTask MimeNoContent ComDayCqRewriterLinkcheckerImplLinkCheckerTaskInfo accept
comDayCqRewriterLinkcheckerImplLinkCheckerTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqRewriterLinkcheckerImplLinkCheckerTask  
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask SchedulerPeriod where
  applyOptionalParam req (SchedulerPeriod xs) =
    req `setQuery` toQuery ("scheduler.period", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask SchedulerConcurrent where
  applyOptionalParam req (SchedulerConcurrent xs) =
    req `setQuery` toQuery ("scheduler.concurrent", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask GoodLinkTestInterval where
  applyOptionalParam req (GoodLinkTestInterval xs) =
    req `setQuery` toQuery ("good_link_test_interval", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask BadLinkTestInterval where
  applyOptionalParam req (BadLinkTestInterval xs) =
    req `setQuery` toQuery ("bad_link_test_interval", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask LinkUnusedInterval where
  applyOptionalParam req (LinkUnusedInterval xs) =
    req `setQuery` toQuery ("link_unused_interval", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTask ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connection.timeout", Just xs)

-- | @application/json@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerTask MimeJSON
-- | @text/plain@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerTask MimePlainText


-- *** comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory MimeNoContent ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactoryInfo accept
comDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkCheckerTransformerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory  
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerDisableRewriting where
  applyOptionalParam req (LinkcheckertransformerDisableRewriting xs) =
    req `setQuery` toQuery ("linkcheckertransformer.disableRewriting", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerDisableChecking where
  applyOptionalParam req (LinkcheckertransformerDisableChecking xs) =
    req `setQuery` toQuery ("linkcheckertransformer.disableChecking", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerMapCacheSize where
  applyOptionalParam req (LinkcheckertransformerMapCacheSize xs) =
    req `setQuery` toQuery ("linkcheckertransformer.mapCacheSize", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerStrictExtensionCheck where
  applyOptionalParam req (LinkcheckertransformerStrictExtensionCheck xs) =
    req `setQuery` toQuery ("linkcheckertransformer.strictExtensionCheck", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerStripHtmltExtension where
  applyOptionalParam req (LinkcheckertransformerStripHtmltExtension xs) =
    req `setQuery` toQuery ("linkcheckertransformer.stripHtmltExtension", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerRewriteElements where
  applyOptionalParam req (LinkcheckertransformerRewriteElements xs) =
    req `setQuery` toQueryColl MultiParamArray ("linkcheckertransformer.rewriteElements", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory LinkcheckertransformerStripExtensionPathBlacklist where
  applyOptionalParam req (LinkcheckertransformerStripExtensionPathBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("linkcheckertransformer.stripExtensionPathBlacklist", Just xs)

-- | @application/json@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqRewriterLinkcheckerImplLinkCheckerTransformerFactory MimePlainText


-- *** comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl MimeNoContent ComDayCqRewriterLinkcheckerImplLinkInfoStorageImplInfo accept
comDayCqRewriterLinkcheckerImplLinkInfoStorageImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.rewriter.linkchecker.impl.LinkInfoStorageImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl  
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl ServiceMaxLinksPerHost where
  applyOptionalParam req (ServiceMaxLinksPerHost xs) =
    req `setQuery` toQuery ("service.max_links_per_host", Just xs)
instance HasOptionalParam ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl ServiceSaveExternalLinkReferences where
  applyOptionalParam req (ServiceSaveExternalLinkReferences xs) =
    req `setQuery` toQuery ("service.save_external_link_references", Just xs)

-- | @application/json@
instance Produces ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqRewriterLinkcheckerImplLinkInfoStorageImpl MimePlainText


-- *** comDayCqRewriterProcessorImplHtmlParserFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.rewriter.processor.impl.HtmlParserFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqRewriterProcessorImplHtmlParserFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqRewriterProcessorImplHtmlParserFactory MimeNoContent ComDayCqRewriterProcessorImplHtmlParserFactoryInfo accept
comDayCqRewriterProcessorImplHtmlParserFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.rewriter.processor.impl.HtmlParserFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqRewriterProcessorImplHtmlParserFactory  
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory HtmlparserProcessTags where
  applyOptionalParam req (HtmlparserProcessTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmlparser.processTags", Just xs)
instance HasOptionalParam ComDayCqRewriterProcessorImplHtmlParserFactory HtmlparserPreserveCamelCase where
  applyOptionalParam req (HtmlparserPreserveCamelCase xs) =
    req `setQuery` toQuery ("htmlparser.preserveCamelCase", Just xs)

-- | @application/json@
instance Produces ComDayCqRewriterProcessorImplHtmlParserFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqRewriterProcessorImplHtmlParserFactory MimePlainText


-- *** comDayCqSearchImplBuilderQueryBuilderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.search.impl.builder.QueryBuilderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqSearchImplBuilderQueryBuilderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqSearchImplBuilderQueryBuilderImpl MimeNoContent ComDayCqSearchImplBuilderQueryBuilderImplInfo accept
comDayCqSearchImplBuilderQueryBuilderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.search.impl.builder.QueryBuilderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqSearchImplBuilderQueryBuilderImpl  
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl ExcerptProperties where
  applyOptionalParam req (ExcerptProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("excerpt.properties", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl CacheMaxEntries where
  applyOptionalParam req (CacheMaxEntries xs) =
    req `setQuery` toQuery ("cache.max.entries", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl CacheEntryLifetime where
  applyOptionalParam req (CacheEntryLifetime xs) =
    req `setQuery` toQuery ("cache.entry.lifetime", Just xs)
instance HasOptionalParam ComDayCqSearchImplBuilderQueryBuilderImpl XpathUnion where
  applyOptionalParam req (XpathUnion xs) =
    req `setQuery` toQuery ("xpath.union", Just xs)

-- | @application/json@
instance Produces ComDayCqSearchImplBuilderQueryBuilderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqSearchImplBuilderQueryBuilderImpl MimePlainText


-- *** comDayCqSearchSuggestImplSuggestionIndexManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqSearchSuggestImplSuggestionIndexManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqSearchSuggestImplSuggestionIndexManagerImpl MimeNoContent ComDayCqSearchSuggestImplSuggestionIndexManagerImplInfo accept
comDayCqSearchSuggestImplSuggestionIndexManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.search.suggest.impl.SuggestionIndexManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqSearchSuggestImplSuggestionIndexManagerImpl  
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl PathBuilderTarget where
  applyOptionalParam req (PathBuilderTarget xs) =
    req `setQuery` toQuery ("pathBuilder.target", Just xs)
instance HasOptionalParam ComDayCqSearchSuggestImplSuggestionIndexManagerImpl SuggestBasepath where
  applyOptionalParam req (SuggestBasepath xs) =
    req `setQuery` toQuery ("suggest.basepath", Just xs)

-- | @application/json@
instance Produces ComDayCqSearchSuggestImplSuggestionIndexManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqSearchSuggestImplSuggestionIndexManagerImpl MimePlainText


-- *** comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler MimeNoContent ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandlerInfo accept
comDayCqSearchpromoteImplPublishSearchPromoteConfigHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.searchpromote.impl.PublishSearchPromoteConfigHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler  
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler CqSearchpromoteConfighandlerEnabled where
  applyOptionalParam req (CqSearchpromoteConfighandlerEnabled xs) =
    req `setQuery` toQuery ("cq.searchpromote.confighandler.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqSearchpromoteImplPublishSearchPromoteConfigHandler MimePlainText


-- *** comDayCqSearchpromoteImplSearchPromoteServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqSearchpromoteImplSearchPromoteServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqSearchpromoteImplSearchPromoteServiceImpl MimeNoContent ComDayCqSearchpromoteImplSearchPromoteServiceImplInfo accept
comDayCqSearchpromoteImplSearchPromoteServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.searchpromote.impl.SearchPromoteServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqSearchpromoteImplSearchPromoteServiceImpl  
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl CqSearchpromoteConfigurationServerUri where
  applyOptionalParam req (CqSearchpromoteConfigurationServerUri xs) =
    req `setQuery` toQuery ("cq.searchpromote.configuration.server.uri", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl CqSearchpromoteConfigurationEnvironment where
  applyOptionalParam req (CqSearchpromoteConfigurationEnvironment xs) =
    req `setQuery` toQuery ("cq.searchpromote.configuration.environment", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl ConnectionTimeout where
  applyOptionalParam req (ConnectionTimeout xs) =
    req `setQuery` toQuery ("connection.timeout", Just xs)
instance HasOptionalParam ComDayCqSearchpromoteImplSearchPromoteServiceImpl SocketTimeout where
  applyOptionalParam req (SocketTimeout xs) =
    req `setQuery` toQuery ("socket.timeout", Just xs)

-- | @application/json@
instance Produces ComDayCqSearchpromoteImplSearchPromoteServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqSearchpromoteImplSearchPromoteServiceImpl MimePlainText


-- *** comDayCqSecurityACLSetup

-- | @POST \/system\/console\/configMgr\/com.day.cq.security.ACLSetup@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqSecurityACLSetup 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqSecurityACLSetup MimeNoContent ComDayCqSecurityACLSetupInfo accept
comDayCqSecurityACLSetup  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.security.ACLSetup"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqSecurityACLSetup  
instance HasOptionalParam ComDayCqSecurityACLSetup Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqSecurityACLSetup CqAclsetupRules where
  applyOptionalParam req (CqAclsetupRules xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.aclsetup.rules", Just xs)

-- | @application/json@
instance Produces ComDayCqSecurityACLSetup MimeJSON
-- | @text/plain@
instance Produces ComDayCqSecurityACLSetup MimePlainText


-- *** comDayCqStatisticsImplStatisticsServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.statistics.impl.StatisticsServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqStatisticsImplStatisticsServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqStatisticsImplStatisticsServiceImpl MimeNoContent ComDayCqStatisticsImplStatisticsServiceImplInfo accept
comDayCqStatisticsImplStatisticsServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.statistics.impl.StatisticsServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqStatisticsImplStatisticsServiceImpl  
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl SchedulerPeriod where
  applyOptionalParam req (SchedulerPeriod xs) =
    req `setQuery` toQuery ("scheduler.period", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl SchedulerConcurrent where
  applyOptionalParam req (SchedulerConcurrent xs) =
    req `setQuery` toQuery ("scheduler.concurrent", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl Workspace where
  applyOptionalParam req (Workspace xs) =
    req `setQuery` toQuery ("workspace", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl KeywordsPath where
  applyOptionalParam req (KeywordsPath xs) =
    req `setQuery` toQuery ("keywordsPath", Just xs)
instance HasOptionalParam ComDayCqStatisticsImplStatisticsServiceImpl AsyncEntries where
  applyOptionalParam req (AsyncEntries xs) =
    req `setQuery` toQuery ("asyncEntries", Just xs)

-- | @application/json@
instance Produces ComDayCqStatisticsImplStatisticsServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqStatisticsImplStatisticsServiceImpl MimePlainText


-- *** comDayCqTaggingImplJcrTagManagerFactoryImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqTaggingImplJcrTagManagerFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqTaggingImplJcrTagManagerFactoryImpl MimeNoContent ComDayCqTaggingImplJcrTagManagerFactoryImplInfo accept
comDayCqTaggingImplJcrTagManagerFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.tagging.impl.JcrTagManagerFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqTaggingImplJcrTagManagerFactoryImpl  
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqTaggingImplJcrTagManagerFactoryImpl ValidationEnabled where
  applyOptionalParam req (ValidationEnabled xs) =
    req `setQuery` toQuery ("validation.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqTaggingImplJcrTagManagerFactoryImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqTaggingImplJcrTagManagerFactoryImpl MimePlainText


-- *** comDayCqTaggingImplSearchTagPredicateEvaluator

-- | @POST \/system\/console\/configMgr\/com.day.cq.tagging.impl.search.TagPredicateEvaluator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqTaggingImplSearchTagPredicateEvaluator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqTaggingImplSearchTagPredicateEvaluator MimeNoContent ComDayCqTaggingImplSearchTagPredicateEvaluatorInfo accept
comDayCqTaggingImplSearchTagPredicateEvaluator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.tagging.impl.search.TagPredicateEvaluator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqTaggingImplSearchTagPredicateEvaluator  
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqTaggingImplSearchTagPredicateEvaluator IgnorePath where
  applyOptionalParam req (IgnorePath xs) =
    req `setQuery` toQuery ("ignore_path", Just xs)

-- | @application/json@
instance Produces ComDayCqTaggingImplSearchTagPredicateEvaluator MimeJSON
-- | @text/plain@
instance Produces ComDayCqTaggingImplSearchTagPredicateEvaluator MimePlainText


-- *** comDayCqTaggingImplTagGarbageCollector

-- | @POST \/system\/console\/configMgr\/com.day.cq.tagging.impl.TagGarbageCollector@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqTaggingImplTagGarbageCollector 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqTaggingImplTagGarbageCollector MimeNoContent ComDayCqTaggingImplTagGarbageCollectorInfo accept
comDayCqTaggingImplTagGarbageCollector  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.tagging.impl.TagGarbageCollector"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqTaggingImplTagGarbageCollector  
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqTaggingImplTagGarbageCollector SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)

-- | @application/json@
instance Produces ComDayCqTaggingImplTagGarbageCollector MimeJSON
-- | @text/plain@
instance Produces ComDayCqTaggingImplTagGarbageCollector MimePlainText


-- *** comDayCqWcmContentsyncImplHandlerPagesUpdateHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmContentsyncImplHandlerPagesUpdateHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler MimeNoContent ComDayCqWcmContentsyncImplHandlerPagesUpdateHandlerInfo accept
comDayCqWcmContentsyncImplHandlerPagesUpdateHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.handler.PagesUpdateHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler  
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler CqPagesupdatehandlerImageresourcetypes where
  applyOptionalParam req (CqPagesupdatehandlerImageresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.pagesupdatehandler.imageresourcetypes", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmContentsyncImplHandlerPagesUpdateHandler MimePlainText


-- *** comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor MimeNoContent ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactorInfo accept
comDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.contentsync.impl.rewriter.PathRewriterTransformerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor  
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerMappingLinks where
  applyOptionalParam req (CqContentsyncPathrewritertransformerMappingLinks xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.contentsync.pathrewritertransformer.mapping.links", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerMappingClientlibs where
  applyOptionalParam req (CqContentsyncPathrewritertransformerMappingClientlibs xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.contentsync.pathrewritertransformer.mapping.clientlibs", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerMappingImages where
  applyOptionalParam req (CqContentsyncPathrewritertransformerMappingImages xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.contentsync.pathrewritertransformer.mapping.images", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerAttributePattern where
  applyOptionalParam req (CqContentsyncPathrewritertransformerAttributePattern xs) =
    req `setQuery` toQuery ("cq.contentsync.pathrewritertransformer.attribute.pattern", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerClientlibraryPattern where
  applyOptionalParam req (CqContentsyncPathrewritertransformerClientlibraryPattern xs) =
    req `setQuery` toQuery ("cq.contentsync.pathrewritertransformer.clientlibrary.pattern", Just xs)
instance HasOptionalParam ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor CqContentsyncPathrewritertransformerClientlibraryReplace where
  applyOptionalParam req (CqContentsyncPathrewritertransformerClientlibraryReplace xs) =
    req `setQuery` toQuery ("cq.contentsync.pathrewritertransformer.clientlibrary.replace", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmContentsyncImplRewriterPathRewriterTransformerFactor MimePlainText


-- *** comDayCqWcmCoreImplAuthoringUIModeServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplAuthoringUIModeServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplAuthoringUIModeServiceImpl MimeNoContent ComDayCqWcmCoreImplAuthoringUIModeServiceImplInfo accept
comDayCqWcmCoreImplAuthoringUIModeServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.AuthoringUIModeServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplAuthoringUIModeServiceImpl  
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplAuthoringUIModeServiceImpl AuthoringUiModeServiceDefault where
  applyOptionalParam req (AuthoringUiModeServiceDefault xs) =
    req `setQuery` toQuery ("authoringUIModeService.default", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplAuthoringUIModeServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplAuthoringUIModeServiceImpl MimePlainText


-- *** comDayCqWcmCoreImplCommandsWCMCommandServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.commands.WCMCommandServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplCommandsWCMCommandServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplCommandsWCMCommandServlet MimeNoContent ComDayCqWcmCoreImplCommandsWCMCommandServletInfo accept
comDayCqWcmCoreImplCommandsWCMCommandServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.commands.WCMCommandServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplCommandsWCMCommandServlet  
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplCommandsWCMCommandServlet WcmcommandservletDeleteWhitelist where
  applyOptionalParam req (WcmcommandservletDeleteWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("wcmcommandservlet.delete_whitelist", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplCommandsWCMCommandServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplCommandsWCMCommandServlet MimePlainText


-- *** comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl MimeNoContent ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImplInfo accept
comDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.devicedetection.DeviceIdentificationModeImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl  
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl DimDefaultMode where
  applyOptionalParam req (DimDefaultMode xs) =
    req `setQuery` toQuery ("dim.default.mode", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl DimAppcacheEnabled where
  applyOptionalParam req (DimAppcacheEnabled xs) =
    req `setQuery` toQuery ("dim.appcache.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplDevicedetectionDeviceIdentificationModeImpl MimePlainText


-- *** comDayCqWcmCoreImplEventPageEventAuditListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.event.PageEventAuditListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplEventPageEventAuditListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplEventPageEventAuditListener MimeNoContent ComDayCqWcmCoreImplEventPageEventAuditListenerInfo accept
comDayCqWcmCoreImplEventPageEventAuditListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PageEventAuditListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplEventPageEventAuditListener  
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPageEventAuditListener Configured where
  applyOptionalParam req (Configured xs) =
    req `setQuery` toQuery ("configured", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplEventPageEventAuditListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplEventPageEventAuditListener MimePlainText


-- *** comDayCqWcmCoreImplEventPagePostProcessor

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.event.PagePostProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplEventPagePostProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplEventPagePostProcessor MimeNoContent ComDayCqWcmCoreImplEventPagePostProcessorInfo accept
comDayCqWcmCoreImplEventPagePostProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.PagePostProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplEventPagePostProcessor  
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventPagePostProcessor Paths where
  applyOptionalParam req (Paths xs) =
    req `setQuery` toQueryColl MultiParamArray ("paths", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplEventPagePostProcessor MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplEventPagePostProcessor MimePlainText


-- *** comDayCqWcmCoreImplEventRepositoryChangeEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplEventRepositoryChangeEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplEventRepositoryChangeEventListener MimeNoContent ComDayCqWcmCoreImplEventRepositoryChangeEventListenerInfo accept
comDayCqWcmCoreImplEventRepositoryChangeEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.RepositoryChangeEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplEventRepositoryChangeEventListener  
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener Paths where
  applyOptionalParam req (Paths xs) =
    req `setQuery` toQueryColl MultiParamArray ("paths", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventRepositoryChangeEventListener ExcludedPaths where
  applyOptionalParam req (ExcludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("excludedPaths", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplEventRepositoryChangeEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplEventRepositoryChangeEventListener MimePlainText


-- *** comDayCqWcmCoreImplEventTemplatePostProcessor

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.event.TemplatePostProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplEventTemplatePostProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplEventTemplatePostProcessor MimeNoContent ComDayCqWcmCoreImplEventTemplatePostProcessorInfo accept
comDayCqWcmCoreImplEventTemplatePostProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.event.TemplatePostProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplEventTemplatePostProcessor  
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplEventTemplatePostProcessor PathsText where
  applyOptionalParam req (PathsText xs) =
    req `setQuery` toQuery ("paths", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplEventTemplatePostProcessor MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplEventTemplatePostProcessor MimePlainText


-- *** comDayCqWcmCoreImplLanguageManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.LanguageManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplLanguageManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplLanguageManagerImpl MimeNoContent ComDayCqWcmCoreImplLanguageManagerImplInfo accept
comDayCqWcmCoreImplLanguageManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.LanguageManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplLanguageManagerImpl  
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl LangmgrListPath where
  applyOptionalParam req (LangmgrListPath xs) =
    req `setQuery` toQuery ("langmgr.list.path", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLanguageManagerImpl LangmgrCountryDefault where
  applyOptionalParam req (LangmgrCountryDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("langmgr.country.default", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplLanguageManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplLanguageManagerImpl MimePlainText


-- *** comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl MimeNoContent ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImplInfo accept
comDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.LinkCheckerConfigurationFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl  
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkExpiredPrefix where
  applyOptionalParam req (LinkExpiredPrefix xs) =
    req `setQuery` toQuery ("link.expired.prefix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkExpiredRemove where
  applyOptionalParam req (LinkExpiredRemove xs) =
    req `setQuery` toQuery ("link.expired.remove", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkExpiredSuffix where
  applyOptionalParam req (LinkExpiredSuffix xs) =
    req `setQuery` toQuery ("link.expired.suffix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkInvalidPrefix where
  applyOptionalParam req (LinkInvalidPrefix xs) =
    req `setQuery` toQuery ("link.invalid.prefix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkInvalidRemove where
  applyOptionalParam req (LinkInvalidRemove xs) =
    req `setQuery` toQuery ("link.invalid.remove", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkInvalidSuffix where
  applyOptionalParam req (LinkInvalidSuffix xs) =
    req `setQuery` toQuery ("link.invalid.suffix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkPredatedPrefix where
  applyOptionalParam req (LinkPredatedPrefix xs) =
    req `setQuery` toQuery ("link.predated.prefix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkPredatedRemove where
  applyOptionalParam req (LinkPredatedRemove xs) =
    req `setQuery` toQuery ("link.predated.remove", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkPredatedSuffix where
  applyOptionalParam req (LinkPredatedSuffix xs) =
    req `setQuery` toQuery ("link.predated.suffix", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl LinkWcmmodes where
  applyOptionalParam req (LinkWcmmodes xs) =
    req `setQuery` toQueryColl MultiParamArray ("link.wcmmodes", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplLinkCheckerConfigurationFactoryImpl MimePlainText


-- *** comDayCqWcmCoreImplPagePageInfoAggregatorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplPagePageInfoAggregatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplPagePageInfoAggregatorImpl MimeNoContent ComDayCqWcmCoreImplPagePageInfoAggregatorImplInfo accept
comDayCqWcmCoreImplPagePageInfoAggregatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageInfoAggregatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplPagePageInfoAggregatorImpl  
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl PageInfoProviderPropertyRegexDefault where
  applyOptionalParam req (PageInfoProviderPropertyRegexDefault xs) =
    req `setQuery` toQuery ("page.info.provider.property.regex.default", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageInfoAggregatorImpl PageInfoProviderPropertyName where
  applyOptionalParam req (PageInfoProviderPropertyName xs) =
    req `setQuery` toQuery ("page.info.provider.property.name", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplPagePageInfoAggregatorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplPagePageInfoAggregatorImpl MimePlainText


-- *** comDayCqWcmCoreImplPagePageManagerFactoryImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplPagePageManagerFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplPagePageManagerFactoryImpl MimeNoContent ComDayCqWcmCoreImplPagePageManagerFactoryImplInfo accept
comDayCqWcmCoreImplPagePageManagerFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.page.PageManagerFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplPagePageManagerFactoryImpl  
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl IllegalCharMapping where
  applyOptionalParam req (IllegalCharMapping xs) =
    req `setQuery` toQuery ("illegalCharMapping", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplPagePageManagerFactoryImpl PageSubTreeActivationCheck where
  applyOptionalParam req (PageSubTreeActivationCheck xs) =
    req `setQuery` toQuery ("pageSubTreeActivationCheck", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplPagePageManagerFactoryImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplPagePageManagerFactoryImpl MimePlainText


-- *** comDayCqWcmCoreImplReferencesContentContentReferenceConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplReferencesContentContentReferenceConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplReferencesContentContentReferenceConfig MimeNoContent ComDayCqWcmCoreImplReferencesContentContentReferenceConfigInfo accept
comDayCqWcmCoreImplReferencesContentContentReferenceConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.references.content.ContentReferenceConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplReferencesContentContentReferenceConfig  
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplReferencesContentContentReferenceConfig ContentReferenceConfigResourceTypes where
  applyOptionalParam req (ContentReferenceConfigResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("contentReferenceConfig.resourceTypes", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplReferencesContentContentReferenceConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplReferencesContentContentReferenceConfig MimePlainText


-- *** comDayCqWcmCoreImplServletsContentfinderAssetViewHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsContentfinderAssetViewHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler MimeNoContent ComDayCqWcmCoreImplServletsContentfinderAssetViewHandlerInfo accept
comDayCqWcmCoreImplServletsContentfinderAssetViewHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.AssetViewHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler  
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler DamShowexpired where
  applyOptionalParam req (DamShowexpired xs) =
    req `setQuery` toQuery ("dam.showexpired", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler DamShowhidden where
  applyOptionalParam req (DamShowhidden xs) =
    req `setQuery` toQuery ("dam.showhidden", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler TagTitleSearch where
  applyOptionalParam req (TagTitleSearch xs) =
    req `setQuery` toQuery ("tagTitleSearch", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler GuessTotal where
  applyOptionalParam req (GuessTotal xs) =
    req `setQuery` toQuery ("guessTotal", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler DamExpiryProperty where
  applyOptionalParam req (DamExpiryProperty xs) =
    req `setQuery` toQuery ("dam.expiryProperty", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsContentfinderAssetViewHandler MimePlainText


-- *** comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie MimeNoContent ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVieInfo accept
comDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.connector.ConnectorViewHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie  
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie ItemResourceTypes where
  applyOptionalParam req (ItemResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("item.resource.types", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsContentfinderConnectorConnectorVie MimePlainText


-- *** comDayCqWcmCoreImplServletsContentfinderPageViewHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsContentfinderPageViewHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsContentfinderPageViewHandler MimeNoContent ComDayCqWcmCoreImplServletsContentfinderPageViewHandlerInfo accept
comDayCqWcmCoreImplServletsContentfinderPageViewHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.contentfinder.PageViewHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsContentfinderPageViewHandler  
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler GuessTotal where
  applyOptionalParam req (GuessTotal xs) =
    req `setQuery` toQuery ("guessTotal", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsContentfinderPageViewHandler TagTitleSearch where
  applyOptionalParam req (TagTitleSearch xs) =
    req `setQuery` toQuery ("tagTitleSearch", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsContentfinderPageViewHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsContentfinderPageViewHandler MimePlainText


-- *** comDayCqWcmCoreImplServletsFindReplaceServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsFindReplaceServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsFindReplaceServlet MimeNoContent ComDayCqWcmCoreImplServletsFindReplaceServletInfo accept
comDayCqWcmCoreImplServletsFindReplaceServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.FindReplaceServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsFindReplaceServlet  
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsFindReplaceServlet Scope[Text] where
  applyOptionalParam req (Scope[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("scope", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsFindReplaceServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsFindReplaceServlet MimePlainText


-- *** comDayCqWcmCoreImplServletsReferenceSearchServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsReferenceSearchServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsReferenceSearchServlet MimeNoContent ComDayCqWcmCoreImplServletsReferenceSearchServletInfo accept
comDayCqWcmCoreImplServletsReferenceSearchServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ReferenceSearchServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsReferenceSearchServlet  
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet ReferencesearchservletMaxReferencesPerPage where
  applyOptionalParam req (ReferencesearchservletMaxReferencesPerPage xs) =
    req `setQuery` toQuery ("referencesearchservlet.maxReferencesPerPage", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsReferenceSearchServlet ReferencesearchservletMaxPages where
  applyOptionalParam req (ReferencesearchservletMaxPages xs) =
    req `setQuery` toQuery ("referencesearchservlet.maxPages", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsReferenceSearchServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsReferenceSearchServlet MimePlainText


-- *** comDayCqWcmCoreImplServletsThumbnailServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplServletsThumbnailServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplServletsThumbnailServlet MimeNoContent ComDayCqWcmCoreImplServletsThumbnailServletInfo accept
comDayCqWcmCoreImplServletsThumbnailServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.servlets.ThumbnailServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplServletsThumbnailServlet  
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Workspace where
  applyOptionalParam req (Workspace xs) =
    req `setQuery` toQuery ("workspace", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplServletsThumbnailServlet Dimensions where
  applyOptionalParam req (Dimensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("dimensions", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplServletsThumbnailServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplServletsThumbnailServlet MimePlainText


-- *** comDayCqWcmCoreImplUtilsDefaultPageNameValidator

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplUtilsDefaultPageNameValidator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplUtilsDefaultPageNameValidator MimeNoContent ComDayCqWcmCoreImplUtilsDefaultPageNameValidatorInfo accept
comDayCqWcmCoreImplUtilsDefaultPageNameValidator  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.utils.DefaultPageNameValidator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplUtilsDefaultPageNameValidator  
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplUtilsDefaultPageNameValidator NonValidChars where
  applyOptionalParam req (NonValidChars xs) =
    req `setQuery` toQuery ("nonValidChars", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplUtilsDefaultPageNameValidator MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplUtilsDefaultPageNameValidator MimePlainText


-- *** comDayCqWcmCoreImplVariantsPageVariantsProviderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplVariantsPageVariantsProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl MimeNoContent ComDayCqWcmCoreImplVariantsPageVariantsProviderImplInfo accept
comDayCqWcmCoreImplVariantsPageVariantsProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.variants.PageVariantsProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl  
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl DefaultExternalizerDomain where
  applyOptionalParam req (DefaultExternalizerDomain xs) =
    req `setQuery` toQuery ("default.externalizer.domain", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplVariantsPageVariantsProviderImpl MimePlainText


-- *** comDayCqWcmCoreImplVersionManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.VersionManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplVersionManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplVersionManagerImpl MimeNoContent ComDayCqWcmCoreImplVersionManagerImplInfo accept
comDayCqWcmCoreImplVersionManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplVersionManagerImpl  
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerCreateVersionOnActivation where
  applyOptionalParam req (VersionmanagerCreateVersionOnActivation xs) =
    req `setQuery` toQuery ("versionmanager.createVersionOnActivation", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerPurgingEnabled where
  applyOptionalParam req (VersionmanagerPurgingEnabled xs) =
    req `setQuery` toQuery ("versionmanager.purgingEnabled", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerPurgePaths where
  applyOptionalParam req (VersionmanagerPurgePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("versionmanager.purgePaths", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerIvPaths where
  applyOptionalParam req (VersionmanagerIvPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("versionmanager.ivPaths", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerMaxAgeDays where
  applyOptionalParam req (VersionmanagerMaxAgeDays xs) =
    req `setQuery` toQuery ("versionmanager.maxAgeDays", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerMaxNumberVersions where
  applyOptionalParam req (VersionmanagerMaxNumberVersions xs) =
    req `setQuery` toQuery ("versionmanager.maxNumberVersions", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionManagerImpl VersionmanagerMinNumberVersions where
  applyOptionalParam req (VersionmanagerMinNumberVersions xs) =
    req `setQuery` toQuery ("versionmanager.minNumberVersions", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplVersionManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplVersionManagerImpl MimePlainText


-- *** comDayCqWcmCoreImplVersionPurgeTask

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.VersionPurgeTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplVersionPurgeTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplVersionPurgeTask MimeNoContent ComDayCqWcmCoreImplVersionPurgeTaskInfo accept
comDayCqWcmCoreImplVersionPurgeTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.VersionPurgeTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplVersionPurgeTask  
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask VersionpurgePaths where
  applyOptionalParam req (VersionpurgePaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("versionpurge.paths", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask VersionpurgeRecursive where
  applyOptionalParam req (VersionpurgeRecursive xs) =
    req `setQuery` toQuery ("versionpurge.recursive", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask VersionpurgeMaxVersions where
  applyOptionalParam req (VersionpurgeMaxVersions xs) =
    req `setQuery` toQuery ("versionpurge.maxVersions", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask VersionpurgeMinVersions where
  applyOptionalParam req (VersionpurgeMinVersions xs) =
    req `setQuery` toQuery ("versionpurge.minVersions", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplVersionPurgeTask VersionpurgeMaxAgeDays where
  applyOptionalParam req (VersionpurgeMaxAgeDays xs) =
    req `setQuery` toQuery ("versionpurge.maxAgeDays", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplVersionPurgeTask MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplVersionPurgeTask MimePlainText


-- *** comDayCqWcmCoreImplWCMDebugFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.WCMDebugFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplWCMDebugFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplWCMDebugFilter MimeNoContent ComDayCqWcmCoreImplWCMDebugFilterInfo accept
comDayCqWcmCoreImplWCMDebugFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDebugFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplWCMDebugFilter  
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter WcmdbgfilterEnabled where
  applyOptionalParam req (WcmdbgfilterEnabled xs) =
    req `setQuery` toQuery ("wcmdbgfilter.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDebugFilter WcmdbgfilterJspDebug where
  applyOptionalParam req (WcmdbgfilterJspDebug xs) =
    req `setQuery` toQuery ("wcmdbgfilter.jspDebug", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplWCMDebugFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplWCMDebugFilter MimePlainText


-- *** comDayCqWcmCoreImplWCMDeveloperModeFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplWCMDeveloperModeFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplWCMDeveloperModeFilter MimeNoContent ComDayCqWcmCoreImplWCMDeveloperModeFilterInfo accept
comDayCqWcmCoreImplWCMDeveloperModeFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.WCMDeveloperModeFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplWCMDeveloperModeFilter  
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWCMDeveloperModeFilter WcmdevmodefilterEnabled where
  applyOptionalParam req (WcmdevmodefilterEnabled xs) =
    req `setQuery` toQuery ("wcmdevmodefilter.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplWCMDeveloperModeFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplWCMDeveloperModeFilter MimePlainText


-- *** comDayCqWcmCoreImplWarpTimeWarpFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.impl.warp.TimeWarpFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreImplWarpTimeWarpFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreImplWarpTimeWarpFilter MimeNoContent ComDayCqWcmCoreImplWarpTimeWarpFilterInfo accept
comDayCqWcmCoreImplWarpTimeWarpFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.impl.warp.TimeWarpFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreImplWarpTimeWarpFilter  
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter FilterOrder where
  applyOptionalParam req (FilterOrder xs) =
    req `setQuery` toQuery ("filter.order", Just xs)
instance HasOptionalParam ComDayCqWcmCoreImplWarpTimeWarpFilter FilterScope where
  applyOptionalParam req (FilterScope xs) =
    req `setQuery` toQuery ("filter.scope", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreImplWarpTimeWarpFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreImplWarpTimeWarpFilter MimePlainText


-- *** comDayCqWcmCoreMvtMVTStatisticsImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.mvt.MVTStatisticsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreMvtMVTStatisticsImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreMvtMVTStatisticsImpl MimeNoContent ComDayCqWcmCoreMvtMVTStatisticsImplInfo accept
comDayCqWcmCoreMvtMVTStatisticsImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.mvt.MVTStatisticsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreMvtMVTStatisticsImpl  
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreMvtMVTStatisticsImpl MvtstatisticsTrackingurl where
  applyOptionalParam req (MvtstatisticsTrackingurl xs) =
    req `setQuery` toQuery ("mvtstatistics.trackingurl", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreMvtMVTStatisticsImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreMvtMVTStatisticsImpl MimePlainText


-- *** comDayCqWcmCoreStatsPageViewStatisticsImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.stats.PageViewStatisticsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreStatsPageViewStatisticsImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreStatsPageViewStatisticsImpl MimeNoContent ComDayCqWcmCoreStatsPageViewStatisticsImplInfo accept
comDayCqWcmCoreStatsPageViewStatisticsImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.stats.PageViewStatisticsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreStatsPageViewStatisticsImpl  
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl PageviewstatisticsTrackingurl where
  applyOptionalParam req (PageviewstatisticsTrackingurl xs) =
    req `setQuery` toQuery ("pageviewstatistics.trackingurl", Just xs)
instance HasOptionalParam ComDayCqWcmCoreStatsPageViewStatisticsImpl PageviewstatisticsTrackingscriptEnabled where
  applyOptionalParam req (PageviewstatisticsTrackingscriptEnabled xs) =
    req `setQuery` toQuery ("pageviewstatistics.trackingscript.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreStatsPageViewStatisticsImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreStatsPageViewStatisticsImpl MimePlainText


-- *** comDayCqWcmCoreWCMRequestFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.core.WCMRequestFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmCoreWCMRequestFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmCoreWCMRequestFilter MimeNoContent ComDayCqWcmCoreWCMRequestFilterInfo accept
comDayCqWcmCoreWCMRequestFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.core.WCMRequestFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmCoreWCMRequestFilter  
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmCoreWCMRequestFilter WcmfilterMode where
  applyOptionalParam req (WcmfilterMode xs) =
    req `setQuery` toQuery ("wcmfilter.mode", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmCoreWCMRequestFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmCoreWCMRequestFilter MimePlainText


-- *** comDayCqWcmDesignimporterDesignPackageImporter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.DesignPackageImporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterDesignPackageImporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterDesignPackageImporter MimeNoContent ComDayCqWcmDesignimporterDesignPackageImporterInfo accept
comDayCqWcmDesignimporterDesignPackageImporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.DesignPackageImporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterDesignPackageImporter  
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterDesignPackageImporter ExtractFilter where
  applyOptionalParam req (ExtractFilter xs) =
    req `setQuery` toQueryColl MultiParamArray ("extract.filter", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterDesignPackageImporter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterDesignPackageImporter MimePlainText


-- *** comDayCqWcmDesignimporterImplCanvasBuilderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterImplCanvasBuilderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterImplCanvasBuilderImpl MimeNoContent ComDayCqWcmDesignimporterImplCanvasBuilderImplInfo accept
comDayCqWcmDesignimporterImplCanvasBuilderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasBuilderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterImplCanvasBuilderImpl  
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl Filepattern where
  applyOptionalParam req (Filepattern xs) =
    req `setQuery` toQuery ("filepattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl BuildPageNodes where
  applyOptionalParam req (BuildPageNodes xs) =
    req `setQuery` toQuery ("build.page.nodes", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl BuildClientLibs where
  applyOptionalParam req (BuildClientLibs xs) =
    req `setQuery` toQuery ("build.client.libs", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasBuilderImpl BuildCanvasComponent where
  applyOptionalParam req (BuildCanvasComponent xs) =
    req `setQuery` toQuery ("build.canvas.component", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterImplCanvasBuilderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterImplCanvasBuilderImpl MimePlainText


-- *** comDayCqWcmDesignimporterImplCanvasPageDeleteHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterImplCanvasPageDeleteHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler MimeNoContent ComDayCqWcmDesignimporterImplCanvasPageDeleteHandlerInfo accept
comDayCqWcmDesignimporterImplCanvasPageDeleteHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.CanvasPageDeleteHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler  
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler MinThreadPoolSize where
  applyOptionalParam req (MinThreadPoolSize xs) =
    req `setQuery` toQuery ("minThreadPoolSize", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler MaxThreadPoolSize where
  applyOptionalParam req (MaxThreadPoolSize xs) =
    req `setQuery` toQuery ("maxThreadPoolSize", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterImplCanvasPageDeleteHandler MimePlainText


-- *** comDayCqWcmDesignimporterImplEntryPreprocessorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterImplEntryPreprocessorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterImplEntryPreprocessorImpl MimeNoContent ComDayCqWcmDesignimporterImplEntryPreprocessorImplInfo accept
comDayCqWcmDesignimporterImplEntryPreprocessorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.EntryPreprocessorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterImplEntryPreprocessorImpl  
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl SearchPattern where
  applyOptionalParam req (SearchPattern xs) =
    req `setQuery` toQuery ("search.pattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplEntryPreprocessorImpl ReplacePattern where
  applyOptionalParam req (ReplacePattern xs) =
    req `setQuery` toQuery ("replace.pattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterImplEntryPreprocessorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterImplEntryPreprocessorImpl MimePlainText


-- *** comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl MimeNoContent ComDayCqWcmDesignimporterImplMobileCanvasBuilderImplInfo accept
comDayCqWcmDesignimporterImplMobileCanvasBuilderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.impl.MobileCanvasBuilderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl  
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl Filepattern where
  applyOptionalParam req (Filepattern xs) =
    req `setQuery` toQuery ("filepattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl DeviceGroups where
  applyOptionalParam req (DeviceGroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("device.groups", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl BuildPageNodes where
  applyOptionalParam req (BuildPageNodes xs) =
    req `setQuery` toQuery ("build.page.nodes", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl BuildClientLibs where
  applyOptionalParam req (BuildClientLibs xs) =
    req `setQuery` toQuery ("build.client.libs", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl BuildCanvasComponent where
  applyOptionalParam req (BuildCanvasComponent xs) =
    req `setQuery` toQuery ("build.canvas.component", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterImplMobileCanvasBuilderImpl MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasComponeInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.CanvasComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryCanvasCompone MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultComponInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultCompon MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHanInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.DefaultTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryDefaultTagHan MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandleInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.HeadTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryHeadTagHandle MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHandInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.IFrameTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryIFrameTagHand MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponenInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImageComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryImageComponen MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandlerInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ImgTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryImgTagHandler MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptTInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.InlineScriptTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryInlineScriptT MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandleInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.LinkTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryLinkTagHandle MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandleInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.MetaTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryMetaTagHandle MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagHInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.NonScriptTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryNonScriptTagH MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysComponeInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ParsysComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryParsysCompone MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHandInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.ScriptTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryScriptTagHand MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandlInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.StyleTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryStyleTagHandl MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponentInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TextComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTextComponent MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponenInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleComponentTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen ComponentResourceType where
  applyOptionalParam req (ComponentResourceType xs) =
    req `setQuery` toQuery ("component.resourceType", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleComponen MimePlainText


-- *** comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl MimeNoContent ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandlInfo accept
comDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.designimporter.parser.taghandlers.factory.TitleTagHandlerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl  
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl Tagpattern where
  applyOptionalParam req (Tagpattern xs) =
    req `setQuery` toQuery ("tagpattern", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmDesignimporterParserTaghandlersFactoryTitleTagHandl MimePlainText


-- *** comDayCqWcmFoundationFormsImplFormChooserServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationFormsImplFormChooserServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationFormsImplFormChooserServlet MimeNoContent ComDayCqWcmFoundationFormsImplFormChooserServletInfo accept
comDayCqWcmFoundationFormsImplFormChooserServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormChooserServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationFormsImplFormChooserServlet  
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("service.name", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet SlingServletResourceTypesText where
  applyOptionalParam req (SlingServletResourceTypesText xs) =
    req `setQuery` toQuery ("sling.servlet.resourceTypes", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet SlingServletMethods[Text] where
  applyOptionalParam req (SlingServletMethods[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.methods", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormChooserServlet FormsFormchooserservletAdvansesearchRequire where
  applyOptionalParam req (FormsFormchooserservletAdvansesearchRequire xs) =
    req `setQuery` toQuery ("forms.formchooserservlet.advansesearch.require", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationFormsImplFormChooserServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationFormsImplFormChooserServlet MimePlainText


-- *** comDayCqWcmFoundationFormsImplFormParagraphPostProcessor

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationFormsImplFormParagraphPostProcessor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor MimeNoContent ComDayCqWcmFoundationFormsImplFormParagraphPostProcessorInfo accept
comDayCqWcmFoundationFormsImplFormParagraphPostProcessor  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormParagraphPostProcessor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor  
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor FormsFormparagraphpostprocessorEnabled where
  applyOptionalParam req (FormsFormparagraphpostprocessorEnabled xs) =
    req `setQuery` toQuery ("forms.formparagraphpostprocessor.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor FormsFormparagraphpostprocessorFormresourcetypes where
  applyOptionalParam req (FormsFormparagraphpostprocessorFormresourcetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("forms.formparagraphpostprocessor.formresourcetypes", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationFormsImplFormParagraphPostProcessor MimePlainText


-- *** comDayCqWcmFoundationFormsImplFormsHandlingServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationFormsImplFormsHandlingServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationFormsImplFormsHandlingServlet MimeNoContent ComDayCqWcmFoundationFormsImplFormsHandlingServletInfo accept
comDayCqWcmFoundationFormsImplFormsHandlingServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.FormsHandlingServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationFormsImplFormsHandlingServlet  
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet NameWhitelist where
  applyOptionalParam req (NameWhitelist xs) =
    req `setQuery` toQuery ("name.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplFormsHandlingServlet AllowExpressions where
  applyOptionalParam req (AllowExpressions xs) =
    req `setQuery` toQuery ("allow.expressions", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationFormsImplFormsHandlingServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationFormsImplFormsHandlingServlet MimePlainText


-- *** comDayCqWcmFoundationFormsImplMailServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.forms.impl.MailServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationFormsImplMailServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationFormsImplMailServlet MimeNoContent ComDayCqWcmFoundationFormsImplMailServletInfo accept
comDayCqWcmFoundationFormsImplMailServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.forms.impl.MailServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationFormsImplMailServlet  
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet SlingServletResourceTypesText where
  applyOptionalParam req (SlingServletResourceTypesText xs) =
    req `setQuery` toQuery ("sling.servlet.resourceTypes", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet SlingServletSelectors where
  applyOptionalParam req (SlingServletSelectors xs) =
    req `setQuery` toQuery ("sling.servlet.selectors", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet ResourceWhitelist where
  applyOptionalParam req (ResourceWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationFormsImplMailServlet ResourceBlacklist where
  applyOptionalParam req (ResourceBlacklist xs) =
    req `setQuery` toQuery ("resource.blacklist", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationFormsImplMailServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationFormsImplMailServlet MimePlainText


-- *** comDayCqWcmFoundationImplAdaptiveImageComponentServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationImplAdaptiveImageComponentServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationImplAdaptiveImageComponentServlet MimeNoContent ComDayCqWcmFoundationImplAdaptiveImageComponentServletInfo accept
comDayCqWcmFoundationImplAdaptiveImageComponentServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.AdaptiveImageComponentServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationImplAdaptiveImageComponentServlet  
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplAdaptiveImageComponentServlet AdaptSupportedWidths where
  applyOptionalParam req (AdaptSupportedWidths xs) =
    req `setQuery` toQueryColl MultiParamArray ("adapt.supported.widths", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationImplAdaptiveImageComponentServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationImplAdaptiveImageComponentServlet MimePlainText


-- *** comDayCqWcmFoundationImplHTTPAuthHandler

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.impl.HTTPAuthHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationImplHTTPAuthHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationImplHTTPAuthHandler MimeNoContent ComDayCqWcmFoundationImplHTTPAuthHandlerInfo accept
comDayCqWcmFoundationImplHTTPAuthHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.HTTPAuthHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationImplHTTPAuthHandler  
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler AuthHttpNologin where
  applyOptionalParam req (AuthHttpNologin xs) =
    req `setQuery` toQuery ("auth.http.nologin", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler AuthHttpRealm where
  applyOptionalParam req (AuthHttpRealm xs) =
    req `setQuery` toQuery ("auth.http.realm", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler AuthDefaultLoginpage where
  applyOptionalParam req (AuthDefaultLoginpage xs) =
    req `setQuery` toQuery ("auth.default.loginpage", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler AuthCredForm where
  applyOptionalParam req (AuthCredForm xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.cred.form", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplHTTPAuthHandler AuthCredUtf8 where
  applyOptionalParam req (AuthCredUtf8 xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.cred.utf8", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationImplHTTPAuthHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationImplHTTPAuthHandler MimePlainText


-- *** comDayCqWcmFoundationImplPageImpressionsTracker

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.impl.PageImpressionsTracker@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationImplPageImpressionsTracker 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationImplPageImpressionsTracker MimeNoContent ComDayCqWcmFoundationImplPageImpressionsTrackerInfo accept
comDayCqWcmFoundationImplPageImpressionsTracker  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageImpressionsTracker"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationImplPageImpressionsTracker  
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageImpressionsTracker SlingAuthRequirements where
  applyOptionalParam req (SlingAuthRequirements xs) =
    req `setQuery` toQuery ("sling.auth.requirements", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationImplPageImpressionsTracker MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationImplPageImpressionsTracker MimePlainText


-- *** comDayCqWcmFoundationImplPageRedirectServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.impl.PageRedirectServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationImplPageRedirectServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationImplPageRedirectServlet MimeNoContent ComDayCqWcmFoundationImplPageRedirectServletInfo accept
comDayCqWcmFoundationImplPageRedirectServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.impl.PageRedirectServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationImplPageRedirectServlet  
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationImplPageRedirectServlet ExcludedResourceTypes where
  applyOptionalParam req (ExcludedResourceTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("excluded.resource.types", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationImplPageRedirectServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationImplPageRedirectServlet MimePlainText


-- *** comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist MimeNoContent ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklistInfo accept
comDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.DefaultAttachmentTypeBlacklistService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist  
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist DefaultAttachmentTypeBlacklist where
  applyOptionalParam req (DefaultAttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("default.attachment.type.blacklist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist BaselineAttachmentTypeBlacklist where
  applyOptionalParam req (BaselineAttachmentTypeBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("baseline.attachment.type.blacklist", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationSecurityImplDefaultAttachmentTypeBlacklist MimePlainText


-- *** comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl MimeNoContent ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImplInfo accept
comDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.foundation.security.impl.SaferSlingPostValidatorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl  
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl ParameterWhitelist where
  applyOptionalParam req (ParameterWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("parameter.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl ParameterWhitelistPrefixes where
  applyOptionalParam req (ParameterWhitelistPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("parameter.whitelist.prefixes", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl BinaryParameterWhitelist where
  applyOptionalParam req (BinaryParameterWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("binary.parameter.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl ModifierWhitelist where
  applyOptionalParam req (ModifierWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("modifier.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl OperationWhitelist where
  applyOptionalParam req (OperationWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("operation.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl OperationWhitelistPrefixes where
  applyOptionalParam req (OperationWhitelistPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("operation.whitelist.prefixes", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl TypehintWhitelist where
  applyOptionalParam req (TypehintWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("typehint.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl ResourcetypeWhitelist where
  applyOptionalParam req (ResourcetypeWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("resourcetype.whitelist", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmFoundationSecurityImplSaferSlingPostValidatorImpl MimePlainText


-- *** comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory MimeNoContent ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactoryInfo accept
comDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.device.DeviceInfoTransformerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory  
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory DeviceInfoTransformerEnabled where
  applyOptionalParam req (DeviceInfoTransformerEnabled xs) =
    req `setQuery` toQuery ("device.info.transformer.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory DeviceInfoTransformerCssStyle where
  applyOptionalParam req (DeviceInfoTransformerCssStyle xs) =
    req `setQuery` toQuery ("device.info.transformer.css.style", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMobileCoreImplDeviceDeviceInfoTransformerFactory MimePlainText


-- *** comDayCqWcmMobileCoreImplRedirectRedirectFilter

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMobileCoreImplRedirectRedirectFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMobileCoreImplRedirectRedirectFilter MimeNoContent ComDayCqWcmMobileCoreImplRedirectRedirectFilterInfo accept
comDayCqWcmMobileCoreImplRedirectRedirectFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.mobile.core.impl.redirect.RedirectFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMobileCoreImplRedirectRedirectFilter  
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter RedirectEnabled where
  applyOptionalParam req (RedirectEnabled xs) =
    req `setQuery` toQuery ("redirect.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter RedirectStatsEnabled where
  applyOptionalParam req (RedirectStatsEnabled xs) =
    req `setQuery` toQuery ("redirect.stats.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter RedirectExtensions where
  applyOptionalParam req (RedirectExtensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("redirect.extensions", Just xs)
instance HasOptionalParam ComDayCqWcmMobileCoreImplRedirectRedirectFilter RedirectPaths where
  applyOptionalParam req (RedirectPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("redirect.paths", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMobileCoreImplRedirectRedirectFilter MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMobileCoreImplRedirectRedirectFilter MimePlainText


-- *** comDayCqWcmMsmImplActionsContentCopyActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsContentCopyActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsContentCopyActionFactory MimeNoContent ComDayCqWcmMsmImplActionsContentCopyActionFactoryInfo accept
comDayCqWcmMsmImplActionsContentCopyActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentCopyActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsContentCopyActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentCopyActionFactory ContentcopyactionOrderStyle where
  applyOptionalParam req (ContentcopyactionOrderStyle xs) =
    req `setQuery` toQuery ("contentcopyaction.order.style", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsContentCopyActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsContentCopyActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsContentDeleteActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsContentDeleteActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsContentDeleteActionFactory MimeNoContent ComDayCqWcmMsmImplActionsContentDeleteActionFactoryInfo accept
comDayCqWcmMsmImplActionsContentDeleteActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentDeleteActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsContentDeleteActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentDeleteActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsContentDeleteActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsContentDeleteActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsContentUpdateActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsContentUpdateActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsContentUpdateActionFactory MimeNoContent ComDayCqWcmMsmImplActionsContentUpdateActionFactoryInfo accept
comDayCqWcmMsmImplActionsContentUpdateActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ContentUpdateActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsContentUpdateActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsContentUpdateActionFactory CqWcmMsmActionIgnoredMixin where
  applyOptionalParam req (CqWcmMsmActionIgnoredMixin xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.ignoredMixin", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsContentUpdateActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsContentUpdateActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsOrderChildrenActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsOrderChildrenActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsOrderChildrenActionFactory MimeNoContent ComDayCqWcmMsmImplActionsOrderChildrenActionFactoryInfo accept
comDayCqWcmMsmImplActionsOrderChildrenActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.OrderChildrenActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsOrderChildrenActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsOrderChildrenActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsOrderChildrenActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsOrderChildrenActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsPageMoveActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsPageMoveActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsPageMoveActionFactory MimeNoContent ComDayCqWcmMsmImplActionsPageMoveActionFactoryInfo accept
comDayCqWcmMsmImplActionsPageMoveActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.PageMoveActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsPageMoveActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsPageMoveActionFactory CqWcmMsmImplActionsPagemovePropReferenceUpdate where
  applyOptionalParam req (CqWcmMsmImplActionsPagemovePropReferenceUpdate xs) =
    req `setQuery` toQuery ("cq.wcm.msm.impl.actions.pagemove.prop_referenceUpdate", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsPageMoveActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsPageMoveActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsReferencesUpdateActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsReferencesUpdateActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory MimeNoContent ComDayCqWcmMsmImplActionsReferencesUpdateActionFactoryInfo accept
comDayCqWcmMsmImplActionsReferencesUpdateActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.ReferencesUpdateActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory CqWcmMsmImplActionReferencesupdatePropUpdateNested where
  applyOptionalParam req (CqWcmMsmImplActionReferencesupdatePropUpdateNested xs) =
    req `setQuery` toQuery ("cq.wcm.msm.impl.action.referencesupdate.prop_updateNested", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsReferencesUpdateActionFactory MimePlainText


-- *** comDayCqWcmMsmImplActionsVersionCopyActionFactory

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplActionsVersionCopyActionFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplActionsVersionCopyActionFactory MimeNoContent ComDayCqWcmMsmImplActionsVersionCopyActionFactoryInfo accept
comDayCqWcmMsmImplActionsVersionCopyActionFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.actions.VersionCopyActionFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplActionsVersionCopyActionFactory  
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory CqWcmMsmActionExcludednodetypes where
  applyOptionalParam req (CqWcmMsmActionExcludednodetypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludednodetypes", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory CqWcmMsmActionExcludedparagraphitems where
  applyOptionalParam req (CqWcmMsmActionExcludedparagraphitems xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedparagraphitems", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplActionsVersionCopyActionFactory CqWcmMsmActionExcludedprops where
  applyOptionalParam req (CqWcmMsmActionExcludedprops xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.msm.action.excludedprops", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplActionsVersionCopyActionFactory MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplActionsVersionCopyActionFactory MimePlainText


-- *** comDayCqWcmMsmImplLiveRelationshipManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplLiveRelationshipManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplLiveRelationshipManagerImpl MimeNoContent ComDayCqWcmMsmImplLiveRelationshipManagerImplInfo accept
comDayCqWcmMsmImplLiveRelationshipManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.LiveRelationshipManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplLiveRelationshipManagerImpl  
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplLiveRelationshipManagerImpl LiverelationshipmgrRelationsconfigDefault where
  applyOptionalParam req (LiverelationshipmgrRelationsconfigDefault xs) =
    req `setQuery` toQuery ("liverelationshipmgr.relationsconfig.default", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplLiveRelationshipManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplLiveRelationshipManagerImpl MimePlainText


-- *** comDayCqWcmMsmImplRolloutManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.RolloutManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplRolloutManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplRolloutManagerImpl MimeNoContent ComDayCqWcmMsmImplRolloutManagerImplInfo accept
comDayCqWcmMsmImplRolloutManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.RolloutManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplRolloutManagerImpl  
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrExcludedpropsDefault where
  applyOptionalParam req (RolloutmgrExcludedpropsDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("rolloutmgr.excludedprops.default", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrExcludedparagraphpropsDefault where
  applyOptionalParam req (RolloutmgrExcludedparagraphpropsDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("rolloutmgr.excludedparagraphprops.default", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrExcludednodetypesDefault where
  applyOptionalParam req (RolloutmgrExcludednodetypesDefault xs) =
    req `setQuery` toQueryColl MultiParamArray ("rolloutmgr.excludednodetypes.default", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrThreadpoolMaxsize where
  applyOptionalParam req (RolloutmgrThreadpoolMaxsize xs) =
    req `setQuery` toQuery ("rolloutmgr.threadpool.maxsize", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrThreadpoolMaxshutdowntime where
  applyOptionalParam req (RolloutmgrThreadpoolMaxshutdowntime xs) =
    req `setQuery` toQuery ("rolloutmgr.threadpool.maxshutdowntime", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrThreadpoolPriority where
  applyOptionalParam req (RolloutmgrThreadpoolPriority xs) =
    req `setQuery` toQuery ("rolloutmgr.threadpool.priority", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrCommitSize where
  applyOptionalParam req (RolloutmgrCommitSize xs) =
    req `setQuery` toQuery ("rolloutmgr.commit.size", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplRolloutManagerImpl RolloutmgrConflicthandlingEnabled where
  applyOptionalParam req (RolloutmgrConflicthandlingEnabled xs) =
    req `setQuery` toQuery ("rolloutmgr.conflicthandling.enabled", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplRolloutManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplRolloutManagerImpl MimePlainText


-- *** comDayCqWcmMsmImplServletsAuditLogServlet

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmMsmImplServletsAuditLogServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmMsmImplServletsAuditLogServlet MimeNoContent ComDayCqWcmMsmImplServletsAuditLogServletInfo accept
comDayCqWcmMsmImplServletsAuditLogServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.msm.impl.servlets.AuditLogServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmMsmImplServletsAuditLogServlet  
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet AuditlogservletDefaultEventsCount where
  applyOptionalParam req (AuditlogservletDefaultEventsCount xs) =
    req `setQuery` toQuery ("auditlogservlet.default.events.count", Just xs)
instance HasOptionalParam ComDayCqWcmMsmImplServletsAuditLogServlet AuditlogservletDefaultPath where
  applyOptionalParam req (AuditlogservletDefaultPath xs) =
    req `setQuery` toQuery ("auditlogservlet.default.path", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmMsmImplServletsAuditLogServlet MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmMsmImplServletsAuditLogServlet MimePlainText


-- *** comDayCqWcmNotificationEmailImplEmailChannel

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.notification.email.impl.EmailChannel@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmNotificationEmailImplEmailChannel 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmNotificationEmailImplEmailChannel MimeNoContent ComDayCqWcmNotificationEmailImplEmailChannelInfo accept
comDayCqWcmNotificationEmailImplEmailChannel  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.notification.email.impl.EmailChannel"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmNotificationEmailImplEmailChannel  
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationEmailImplEmailChannel EmailFrom where
  applyOptionalParam req (EmailFrom xs) =
    req `setQuery` toQuery ("email.from", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmNotificationEmailImplEmailChannel MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmNotificationEmailImplEmailChannel MimePlainText


-- *** comDayCqWcmNotificationImplNotificationManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.notification.impl.NotificationManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmNotificationImplNotificationManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmNotificationImplNotificationManagerImpl MimeNoContent ComDayCqWcmNotificationImplNotificationManagerImplInfo accept
comDayCqWcmNotificationImplNotificationManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.notification.impl.NotificationManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmNotificationImplNotificationManagerImpl  
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmNotificationImplNotificationManagerImpl EventTopics[Text] where
  applyOptionalParam req (EventTopics[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("event.topics", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmNotificationImplNotificationManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmNotificationImplNotificationManagerImpl MimePlainText


-- *** comDayCqWcmScriptingImplBVPManager

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.scripting.impl.BVPManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmScriptingImplBVPManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmScriptingImplBVPManager MimeNoContent ComDayCqWcmScriptingImplBVPManagerInfo accept
comDayCqWcmScriptingImplBVPManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.scripting.impl.BVPManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmScriptingImplBVPManager  
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmScriptingImplBVPManager ComDayCqWcmScriptingBvpScriptEngines where
  applyOptionalParam req (ComDayCqWcmScriptingBvpScriptEngines xs) =
    req `setQuery` toQueryColl MultiParamArray ("com.day.cq.wcm.scripting.bvp.script.engines", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmScriptingImplBVPManager MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmScriptingImplBVPManager MimePlainText


-- *** comDayCqWcmUndoUndoConfig

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.undo.UndoConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmUndoUndoConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmUndoUndoConfig MimeNoContent ComDayCqWcmUndoUndoConfigInfo accept
comDayCqWcmUndoUndoConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.undo.UndoConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmUndoUndoConfig  
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoEnabled where
  applyOptionalParam req (CqWcmUndoEnabled xs) =
    req `setQuery` toQuery ("cq.wcm.undo.enabled", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoPath where
  applyOptionalParam req (CqWcmUndoPath xs) =
    req `setQuery` toQuery ("cq.wcm.undo.path", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoValidity where
  applyOptionalParam req (CqWcmUndoValidity xs) =
    req `setQuery` toQuery ("cq.wcm.undo.validity", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoSteps where
  applyOptionalParam req (CqWcmUndoSteps xs) =
    req `setQuery` toQuery ("cq.wcm.undo.steps", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoPersistence where
  applyOptionalParam req (CqWcmUndoPersistence xs) =
    req `setQuery` toQuery ("cq.wcm.undo.persistence", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoPersistenceMode where
  applyOptionalParam req (CqWcmUndoPersistenceMode xs) =
    req `setQuery` toQuery ("cq.wcm.undo.persistence.mode", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoMarkermode where
  applyOptionalParam req (CqWcmUndoMarkermode xs) =
    req `setQuery` toQuery ("cq.wcm.undo.markermode", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoWhitelist where
  applyOptionalParam req (CqWcmUndoWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.undo.whitelist", Just xs)
instance HasOptionalParam ComDayCqWcmUndoUndoConfig CqWcmUndoBlacklist where
  applyOptionalParam req (CqWcmUndoBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.undo.blacklist", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmUndoUndoConfig MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmUndoUndoConfig MimePlainText


-- *** comDayCqWcmWebservicesupportImplReplicationEventListener

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmWebservicesupportImplReplicationEventListener 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmWebservicesupportImplReplicationEventListener MimeNoContent ComDayCqWcmWebservicesupportImplReplicationEventListenerInfo accept
comDayCqWcmWebservicesupportImplReplicationEventListener  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.webservicesupport.impl.ReplicationEventListener"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmWebservicesupportImplReplicationEventListener  
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmWebservicesupportImplReplicationEventListener FlushAgents where
  applyOptionalParam req (FlushAgents xs) =
    req `setQuery` toQueryColl MultiParamArray ("Flush agents", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmWebservicesupportImplReplicationEventListener MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmWebservicesupportImplReplicationEventListener MimePlainText


-- *** comDayCqWcmWorkflowImplWcmWorkflowServiceImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmWorkflowImplWcmWorkflowServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl MimeNoContent ComDayCqWcmWorkflowImplWcmWorkflowServiceImplInfo accept
comDayCqWcmWorkflowImplWcmWorkflowServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WcmWorkflowServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl  
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl EventFilter where
  applyOptionalParam req (EventFilter xs) =
    req `setQuery` toQuery ("event.filter", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl MinThreadPoolSize where
  applyOptionalParam req (MinThreadPoolSize xs) =
    req `setQuery` toQuery ("minThreadPoolSize", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl MaxThreadPoolSize where
  applyOptionalParam req (MaxThreadPoolSize xs) =
    req `setQuery` toQuery ("maxThreadPoolSize", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl CqWcmWorkflowTerminateOnActivate where
  applyOptionalParam req (CqWcmWorkflowTerminateOnActivate xs) =
    req `setQuery` toQuery ("cq.wcm.workflow.terminate.on.activate", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl CqWcmWorklfowTerminateExclusionList where
  applyOptionalParam req (CqWcmWorklfowTerminateExclusionList xs) =
    req `setQuery` toQueryColl MultiParamArray ("cq.wcm.worklfow.terminate.exclusion.list", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmWorkflowImplWcmWorkflowServiceImpl MimePlainText


-- *** comDayCqWcmWorkflowImplWorkflowPackageInfoProvider

-- | @POST \/system\/console\/configMgr\/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWcmWorkflowImplWorkflowPackageInfoProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider MimeNoContent ComDayCqWcmWorkflowImplWorkflowPackageInfoProviderInfo accept
comDayCqWcmWorkflowImplWorkflowPackageInfoProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.wcm.workflow.impl.WorkflowPackageInfoProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider  
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider WorkflowpackageinfoproviderFilter where
  applyOptionalParam req (WorkflowpackageinfoproviderFilter xs) =
    req `setQuery` toQueryColl MultiParamArray ("workflowpackageinfoprovider.filter", Just xs)
instance HasOptionalParam ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider WorkflowpackageinfoproviderFilterRootpath where
  applyOptionalParam req (WorkflowpackageinfoproviderFilterRootpath xs) =
    req `setQuery` toQuery ("workflowpackageinfoprovider.filter.rootpath", Just xs)

-- | @application/json@
instance Produces ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider MimeJSON
-- | @text/plain@
instance Produces ComDayCqWcmWorkflowImplWorkflowPackageInfoProvider MimePlainText


-- *** comDayCqWidgetImplHtmlLibraryManagerImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.widget.impl.HtmlLibraryManagerImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWidgetImplHtmlLibraryManagerImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWidgetImplHtmlLibraryManagerImpl MimeNoContent ComDayCqWidgetImplHtmlLibraryManagerImplInfo accept
comDayCqWidgetImplHtmlLibraryManagerImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.widget.impl.HtmlLibraryManagerImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWidgetImplHtmlLibraryManagerImpl  
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerClientmanager where
  applyOptionalParam req (HtmllibmanagerClientmanager xs) =
    req `setQuery` toQuery ("htmllibmanager.clientmanager", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerDebug where
  applyOptionalParam req (HtmllibmanagerDebug xs) =
    req `setQuery` toQuery ("htmllibmanager.debug", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerDebugConsole where
  applyOptionalParam req (HtmllibmanagerDebugConsole xs) =
    req `setQuery` toQuery ("htmllibmanager.debug.console", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerDebugInitJs where
  applyOptionalParam req (HtmllibmanagerDebugInitJs xs) =
    req `setQuery` toQuery ("htmllibmanager.debug.init.js", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerDefaultthemename where
  applyOptionalParam req (HtmllibmanagerDefaultthemename xs) =
    req `setQuery` toQuery ("htmllibmanager.defaultthemename", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerDefaultuserthemename where
  applyOptionalParam req (HtmllibmanagerDefaultuserthemename xs) =
    req `setQuery` toQuery ("htmllibmanager.defaultuserthemename", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerFirebuglitePath where
  applyOptionalParam req (HtmllibmanagerFirebuglitePath xs) =
    req `setQuery` toQuery ("htmllibmanager.firebuglite.path", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerForceCqUrlInfo where
  applyOptionalParam req (HtmllibmanagerForceCqUrlInfo xs) =
    req `setQuery` toQuery ("htmllibmanager.forceCQUrlInfo", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerGzip where
  applyOptionalParam req (HtmllibmanagerGzip xs) =
    req `setQuery` toQuery ("htmllibmanager.gzip", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerMaxage where
  applyOptionalParam req (HtmllibmanagerMaxage xs) =
    req `setQuery` toQuery ("htmllibmanager.maxage", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerMaxDataUriSize where
  applyOptionalParam req (HtmllibmanagerMaxDataUriSize xs) =
    req `setQuery` toQuery ("htmllibmanager.maxDataUriSize", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerMinify where
  applyOptionalParam req (HtmllibmanagerMinify xs) =
    req `setQuery` toQuery ("htmllibmanager.minify", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerPathList where
  applyOptionalParam req (HtmllibmanagerPathList xs) =
    req `setQuery` toQueryColl MultiParamArray ("htmllibmanager.path.list", Just xs)
instance HasOptionalParam ComDayCqWidgetImplHtmlLibraryManagerImpl HtmllibmanagerTiming where
  applyOptionalParam req (HtmllibmanagerTiming xs) =
    req `setQuery` toQuery ("htmllibmanager.timing", Just xs)

-- | @application/json@
instance Produces ComDayCqWidgetImplHtmlLibraryManagerImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWidgetImplHtmlLibraryManagerImpl MimePlainText


-- *** comDayCqWidgetImplWidgetExtensionProviderImpl

-- | @POST \/system\/console\/configMgr\/com.day.cq.widget.impl.WidgetExtensionProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWidgetImplWidgetExtensionProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWidgetImplWidgetExtensionProviderImpl MimeNoContent ComDayCqWidgetImplWidgetExtensionProviderImplInfo accept
comDayCqWidgetImplWidgetExtensionProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.widget.impl.WidgetExtensionProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWidgetImplWidgetExtensionProviderImpl  
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl ExtendableWidgets where
  applyOptionalParam req (ExtendableWidgets xs) =
    req `setQuery` toQueryColl MultiParamArray ("extendable.widgets", Just xs)
instance HasOptionalParam ComDayCqWidgetImplWidgetExtensionProviderImpl WidgetextensionproviderDebug where
  applyOptionalParam req (WidgetextensionproviderDebug xs) =
    req `setQuery` toQuery ("widgetextensionprovider.debug", Just xs)

-- | @application/json@
instance Produces ComDayCqWidgetImplWidgetExtensionProviderImpl MimeJSON
-- | @text/plain@
instance Produces ComDayCqWidgetImplWidgetExtensionProviderImpl MimePlainText


-- *** comDayCqWorkflowImplEmailEMailNotificationService

-- | @POST \/system\/console\/configMgr\/com.day.cq.workflow.impl.email.EMailNotificationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWorkflowImplEmailEMailNotificationService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWorkflowImplEmailEMailNotificationService MimeNoContent ComDayCqWorkflowImplEmailEMailNotificationServiceInfo accept
comDayCqWorkflowImplEmailEMailNotificationService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.workflow.impl.email.EMailNotificationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWorkflowImplEmailEMailNotificationService  
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService FromAddress where
  applyOptionalParam req (FromAddress xs) =
    req `setQuery` toQuery ("from.address", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService HostPrefix where
  applyOptionalParam req (HostPrefix xs) =
    req `setQuery` toQuery ("host.prefix", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService NotifyOnabort where
  applyOptionalParam req (NotifyOnabort xs) =
    req `setQuery` toQuery ("notify.onabort", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService NotifyOncomplete where
  applyOptionalParam req (NotifyOncomplete xs) =
    req `setQuery` toQuery ("notify.oncomplete", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService NotifyOncontainercomplete where
  applyOptionalParam req (NotifyOncontainercomplete xs) =
    req `setQuery` toQuery ("notify.oncontainercomplete", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailEMailNotificationService NotifyUseronly where
  applyOptionalParam req (NotifyUseronly xs) =
    req `setQuery` toQuery ("notify.useronly", Just xs)

-- | @application/json@
instance Produces ComDayCqWorkflowImplEmailEMailNotificationService MimeJSON
-- | @text/plain@
instance Produces ComDayCqWorkflowImplEmailEMailNotificationService MimePlainText


-- *** comDayCqWorkflowImplEmailTaskEMailNotificationService

-- | @POST \/system\/console\/configMgr\/com.day.cq.workflow.impl.email.TaskEMailNotificationService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCqWorkflowImplEmailTaskEMailNotificationService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCqWorkflowImplEmailTaskEMailNotificationService MimeNoContent ComDayCqWorkflowImplEmailTaskEMailNotificationServiceInfo accept
comDayCqWorkflowImplEmailTaskEMailNotificationService  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.cq.workflow.impl.email.TaskEMailNotificationService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCqWorkflowImplEmailTaskEMailNotificationService  
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService NotifyOnupdate where
  applyOptionalParam req (NotifyOnupdate xs) =
    req `setQuery` toQuery ("notify.onupdate", Just xs)
instance HasOptionalParam ComDayCqWorkflowImplEmailTaskEMailNotificationService NotifyOncomplete where
  applyOptionalParam req (NotifyOncomplete xs) =
    req `setQuery` toQuery ("notify.oncomplete", Just xs)

-- | @application/json@
instance Produces ComDayCqWorkflowImplEmailTaskEMailNotificationService MimeJSON
-- | @text/plain@
instance Produces ComDayCqWorkflowImplEmailTaskEMailNotificationService MimePlainText


-- *** comDayCrxSecurityTokenImplImplTokenAuthenticationHandler

-- | @POST \/system\/console\/configMgr\/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCrxSecurityTokenImplImplTokenAuthenticationHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler MimeNoContent ComDayCrxSecurityTokenImplImplTokenAuthenticationHandlerInfo accept
comDayCrxSecurityTokenImplImplTokenAuthenticationHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.crx.security.token.impl.impl.TokenAuthenticationHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler  
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler TokenRequiredAttr where
  applyOptionalParam req (TokenRequiredAttr xs) =
    req `setQuery` toQuery ("token.required.attr", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler TokenAlternateUrl where
  applyOptionalParam req (TokenAlternateUrl xs) =
    req `setQuery` toQuery ("token.alternate.url", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler TokenEncapsulated where
  applyOptionalParam req (TokenEncapsulated xs) =
    req `setQuery` toQuery ("token.encapsulated", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler SkipTokenRefresh where
  applyOptionalParam req (SkipTokenRefresh xs) =
    req `setQuery` toQueryColl MultiParamArray ("skip.token.refresh", Just xs)

-- | @application/json@
instance Produces ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler MimeJSON
-- | @text/plain@
instance Produces ComDayCrxSecurityTokenImplImplTokenAuthenticationHandler MimePlainText


-- *** comDayCrxSecurityTokenImplTokenCleanupTask

-- | @POST \/system\/console\/configMgr\/com.day.crx.security.token.impl.TokenCleanupTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
comDayCrxSecurityTokenImplTokenCleanupTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request ComDayCrxSecurityTokenImplTokenCleanupTask MimeNoContent ComDayCrxSecurityTokenImplTokenCleanupTaskInfo accept
comDayCrxSecurityTokenImplTokenCleanupTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/com.day.crx.security.token.impl.TokenCleanupTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data ComDayCrxSecurityTokenImplTokenCleanupTask  
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask EnableTokenCleanupTask where
  applyOptionalParam req (EnableTokenCleanupTask xs) =
    req `setQuery` toQuery ("enable.token.cleanup.task", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam ComDayCrxSecurityTokenImplTokenCleanupTask BatchSize where
  applyOptionalParam req (BatchSize xs) =
    req `setQuery` toQuery ("batch.size", Just xs)

-- | @application/json@
instance Produces ComDayCrxSecurityTokenImplTokenCleanupTask MimeJSON
-- | @text/plain@
instance Produces ComDayCrxSecurityTokenImplTokenCleanupTask MimePlainText


-- *** guideLocalizationService

-- | @POST \/system\/console\/configMgr\/Guide Localization Service@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
guideLocalizationService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request GuideLocalizationService MimeNoContent GuideLocalizationServiceInfo accept
guideLocalizationService  _ =
  _mkRequest "POST" ["/system/console/configMgr/Guide Localization Service"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data GuideLocalizationService  
instance HasOptionalParam GuideLocalizationService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam GuideLocalizationService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam GuideLocalizationService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam GuideLocalizationService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam GuideLocalizationService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam GuideLocalizationService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam GuideLocalizationService SupportedLocales where
  applyOptionalParam req (SupportedLocales xs) =
    req `setQuery` toQueryColl MultiParamArray ("supportedLocales", Just xs)
instance HasOptionalParam GuideLocalizationService LocalizableProperties where
  applyOptionalParam req (LocalizableProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("Localizable Properties", Just xs)

-- | @application/json@
instance Produces GuideLocalizationService MimeJSON
-- | @text/plain@
instance Produces GuideLocalizationService MimePlainText


-- *** messagingUserComponentFactory

-- | @POST \/system\/console\/configMgr\/MessagingUserComponentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
messagingUserComponentFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request MessagingUserComponentFactory MimeNoContent MessagingUserComponentFactoryInfo accept
messagingUserComponentFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/MessagingUserComponentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data MessagingUserComponentFactory  
instance HasOptionalParam MessagingUserComponentFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam MessagingUserComponentFactory Priority where
  applyOptionalParam req (Priority xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces MessagingUserComponentFactory MimeJSON
-- | @text/plain@
instance Produces MessagingUserComponentFactory MimePlainText


-- *** orgApacheAriesJmxFrameworkStateConfig

-- | @POST \/system\/console\/configMgr\/org.apache.aries.jmx.framework.StateConfig@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheAriesJmxFrameworkStateConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheAriesJmxFrameworkStateConfig MimeNoContent OrgApacheAriesJmxFrameworkStateConfigInfo accept
orgApacheAriesJmxFrameworkStateConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.aries.jmx.framework.StateConfig"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheAriesJmxFrameworkStateConfig  
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheAriesJmxFrameworkStateConfig AttributeChangeNotificationEnabled where
  applyOptionalParam req (AttributeChangeNotificationEnabled xs) =
    req `setQuery` toQuery ("attributeChangeNotificationEnabled", Just xs)

-- | @application/json@
instance Produces OrgApacheAriesJmxFrameworkStateConfig MimeJSON
-- | @text/plain@
instance Produces OrgApacheAriesJmxFrameworkStateConfig MimePlainText


-- *** orgApacheFelixEventadminImplEventAdmin

-- | @POST \/system\/console\/configMgr\/org.apache.felix.eventadmin.impl.EventAdmin@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixEventadminImplEventAdmin 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixEventadminImplEventAdmin MimeNoContent OrgApacheFelixEventadminImplEventAdminInfo accept
orgApacheFelixEventadminImplEventAdmin  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.eventadmin.impl.EventAdmin"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixEventadminImplEventAdmin  
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminThreadPoolSize where
  applyOptionalParam req (OrgApacheFelixEventadminThreadPoolSize xs) =
    req `setQuery` toQuery ("org.apache.felix.eventadmin.ThreadPoolSize", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminAsyncToSyncThreadRatio where
  applyOptionalParam req (OrgApacheFelixEventadminAsyncToSyncThreadRatio xs) =
    req `setQuery` toQuery ("org.apache.felix.eventadmin.AsyncToSyncThreadRatio", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminTimeout where
  applyOptionalParam req (OrgApacheFelixEventadminTimeout xs) =
    req `setQuery` toQuery ("org.apache.felix.eventadmin.Timeout", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminRequireTopic where
  applyOptionalParam req (OrgApacheFelixEventadminRequireTopic xs) =
    req `setQuery` toQuery ("org.apache.felix.eventadmin.RequireTopic", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminIgnoreTimeout where
  applyOptionalParam req (OrgApacheFelixEventadminIgnoreTimeout xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.eventadmin.IgnoreTimeout", Just xs)
instance HasOptionalParam OrgApacheFelixEventadminImplEventAdmin OrgApacheFelixEventadminIgnoreTopic where
  applyOptionalParam req (OrgApacheFelixEventadminIgnoreTopic xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.eventadmin.IgnoreTopic", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixEventadminImplEventAdmin MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixEventadminImplEventAdmin MimePlainText


-- *** orgApacheFelixHttp

-- | @POST \/system\/console\/configMgr\/org.apache.felix.http@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixHttp 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixHttp MimeNoContent OrgApacheFelixHttpInfo accept
orgApacheFelixHttp  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.http"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixHttp  
instance HasOptionalParam OrgApacheFelixHttp Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixHttp Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixHttp Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixHttp Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixHttp Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixHttp Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpHost where
  applyOptionalParam req (OrgApacheFelixHttpHost xs) =
    req `setQuery` toQuery ("org.apache.felix.http.host", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpEnable where
  applyOptionalParam req (OrgApacheFelixHttpEnable xs) =
    req `setQuery` toQuery ("org.apache.felix.http.enable", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgOsgiServiceHttpPort where
  applyOptionalParam req (OrgOsgiServiceHttpPort xs) =
    req `setQuery` toQuery ("org.osgi.service.http.port", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpTimeout where
  applyOptionalParam req (OrgApacheFelixHttpTimeout xs) =
    req `setQuery` toQuery ("org.apache.felix.http.timeout", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsEnable where
  applyOptionalParam req (OrgApacheFelixHttpsEnable xs) =
    req `setQuery` toQuery ("org.apache.felix.https.enable", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgOsgiServiceHttpPortSecure where
  applyOptionalParam req (OrgOsgiServiceHttpPortSecure xs) =
    req `setQuery` toQuery ("org.osgi.service.http.port.secure", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsKeystore where
  applyOptionalParam req (OrgApacheFelixHttpsKeystore xs) =
    req `setQuery` toQuery ("org.apache.felix.https.keystore", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsKeystorePassword where
  applyOptionalParam req (OrgApacheFelixHttpsKeystorePassword xs) =
    req `setQuery` toQuery ("org.apache.felix.https.keystore.password", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsKeystoreKeyPassword where
  applyOptionalParam req (OrgApacheFelixHttpsKeystoreKeyPassword xs) =
    req `setQuery` toQuery ("org.apache.felix.https.keystore.key.password", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsTruststore where
  applyOptionalParam req (OrgApacheFelixHttpsTruststore xs) =
    req `setQuery` toQuery ("org.apache.felix.https.truststore", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsTruststorePassword where
  applyOptionalParam req (OrgApacheFelixHttpsTruststorePassword xs) =
    req `setQuery` toQuery ("org.apache.felix.https.truststore.password", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsClientcertificate where
  applyOptionalParam req (OrgApacheFelixHttpsClientcertificate xs) =
    req `setQuery` toQuery ("org.apache.felix.https.clientcertificate", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpContextPath where
  applyOptionalParam req (OrgApacheFelixHttpContextPath xs) =
    req `setQuery` toQuery ("org.apache.felix.http.context_path", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpMbeans where
  applyOptionalParam req (OrgApacheFelixHttpMbeans xs) =
    req `setQuery` toQuery ("org.apache.felix.http.mbeans", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpSessionTimeout where
  applyOptionalParam req (OrgApacheFelixHttpSessionTimeout xs) =
    req `setQuery` toQuery ("org.apache.felix.http.session.timeout", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyThreadpoolMax where
  applyOptionalParam req (OrgApacheFelixHttpJettyThreadpoolMax xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.threadpool.max", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyAcceptors where
  applyOptionalParam req (OrgApacheFelixHttpJettyAcceptors xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.acceptors", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettySelectors where
  applyOptionalParam req (OrgApacheFelixHttpJettySelectors xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.selectors", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyHeaderBufferSize where
  applyOptionalParam req (OrgApacheFelixHttpJettyHeaderBufferSize xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.headerBufferSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyRequestBufferSize where
  applyOptionalParam req (OrgApacheFelixHttpJettyRequestBufferSize xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.requestBufferSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyResponseBufferSize where
  applyOptionalParam req (OrgApacheFelixHttpJettyResponseBufferSize xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.responseBufferSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettyMaxFormSize where
  applyOptionalParam req (OrgApacheFelixHttpJettyMaxFormSize xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.maxFormSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpPathExclusions where
  applyOptionalParam req (OrgApacheFelixHttpPathExclusions xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.http.path_exclusions", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettyCiphersuitesExcluded where
  applyOptionalParam req (OrgApacheFelixHttpsJettyCiphersuitesExcluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.https.jetty.ciphersuites.excluded", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettyCiphersuitesIncluded where
  applyOptionalParam req (OrgApacheFelixHttpsJettyCiphersuitesIncluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.https.jetty.ciphersuites.included", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpJettySendServerHeader where
  applyOptionalParam req (OrgApacheFelixHttpJettySendServerHeader xs) =
    req `setQuery` toQuery ("org.apache.felix.http.jetty.sendServerHeader", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettyProtocolsIncluded where
  applyOptionalParam req (OrgApacheFelixHttpsJettyProtocolsIncluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.https.jetty.protocols.included", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettyProtocolsExcluded where
  applyOptionalParam req (OrgApacheFelixHttpsJettyProtocolsExcluded xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.https.jetty.protocols.excluded", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixProxyLoadBalancerConnectionEnable where
  applyOptionalParam req (OrgApacheFelixProxyLoadBalancerConnectionEnable xs) =
    req `setQuery` toQuery ("org.apache.felix.proxy.load.balancer.connection.enable", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettyRenegotiateAllowed where
  applyOptionalParam req (OrgApacheFelixHttpsJettyRenegotiateAllowed xs) =
    req `setQuery` toQuery ("org.apache.felix.https.jetty.renegotiateAllowed", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettySessionCookieHttpOnly where
  applyOptionalParam req (OrgApacheFelixHttpsJettySessionCookieHttpOnly xs) =
    req `setQuery` toQuery ("org.apache.felix.https.jetty.session.cookie.httpOnly", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpsJettySessionCookieSecure where
  applyOptionalParam req (OrgApacheFelixHttpsJettySessionCookieSecure xs) =
    req `setQuery` toQuery ("org.apache.felix.https.jetty.session.cookie.secure", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletSessionIdPathParameterName where
  applyOptionalParam req (OrgEclipseJettyServletSessionIdPathParameterName xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.SessionIdPathParameterName", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletCheckingRemoteSessionIdEncoding where
  applyOptionalParam req (OrgEclipseJettyServletCheckingRemoteSessionIdEncoding xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.CheckingRemoteSessionIdEncoding", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletSessionCookie where
  applyOptionalParam req (OrgEclipseJettyServletSessionCookie xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.SessionCookie", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletSessionDomain where
  applyOptionalParam req (OrgEclipseJettyServletSessionDomain xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.SessionDomain", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletSessionPath where
  applyOptionalParam req (OrgEclipseJettyServletSessionPath xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.SessionPath", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgEclipseJettyServletMaxAge where
  applyOptionalParam req (OrgEclipseJettyServletMaxAge xs) =
    req `setQuery` toQuery ("org.eclipse.jetty.servlet.MaxAge", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpName where
  applyOptionalParam req (OrgApacheFelixHttpName xs) =
    req `setQuery` toQuery ("org.apache.felix.http.name", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGziphandlerEnable where
  applyOptionalParam req (OrgApacheFelixJettyGziphandlerEnable xs) =
    req `setQuery` toQuery ("org.apache.felix.jetty.gziphandler.enable", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipMinGzipSize where
  applyOptionalParam req (OrgApacheFelixJettyGzipMinGzipSize xs) =
    req `setQuery` toQuery ("org.apache.felix.jetty.gzip.minGzipSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipCompressionLevel where
  applyOptionalParam req (OrgApacheFelixJettyGzipCompressionLevel xs) =
    req `setQuery` toQuery ("org.apache.felix.jetty.gzip.compressionLevel", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipInflateBufferSize where
  applyOptionalParam req (OrgApacheFelixJettyGzipInflateBufferSize xs) =
    req `setQuery` toQuery ("org.apache.felix.jetty.gzip.inflateBufferSize", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipSyncFlush where
  applyOptionalParam req (OrgApacheFelixJettyGzipSyncFlush xs) =
    req `setQuery` toQuery ("org.apache.felix.jetty.gzip.syncFlush", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipExcludedUserAgents where
  applyOptionalParam req (OrgApacheFelixJettyGzipExcludedUserAgents xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.excludedUserAgents", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipIncludedMethods where
  applyOptionalParam req (OrgApacheFelixJettyGzipIncludedMethods xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.includedMethods", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipExcludedMethods where
  applyOptionalParam req (OrgApacheFelixJettyGzipExcludedMethods xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.excludedMethods", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipIncludedPaths where
  applyOptionalParam req (OrgApacheFelixJettyGzipIncludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.includedPaths", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipExcludedPaths where
  applyOptionalParam req (OrgApacheFelixJettyGzipExcludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.excludedPaths", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipIncludedMimeTypes where
  applyOptionalParam req (OrgApacheFelixJettyGzipIncludedMimeTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.includedMimeTypes", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixJettyGzipExcludedMimeTypes where
  applyOptionalParam req (OrgApacheFelixJettyGzipExcludedMimeTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.felix.jetty.gzip.excludedMimeTypes", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpSessionInvalidate where
  applyOptionalParam req (OrgApacheFelixHttpSessionInvalidate xs) =
    req `setQuery` toQuery ("org.apache.felix.http.session.invalidate", Just xs)
instance HasOptionalParam OrgApacheFelixHttp OrgApacheFelixHttpSessionUniqueid where
  applyOptionalParam req (OrgApacheFelixHttpSessionUniqueid xs) =
    req `setQuery` toQuery ("org.apache.felix.http.session.uniqueid", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixHttp MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixHttp MimePlainText


-- *** orgApacheFelixHttpSslfilterSslFilter

-- | @POST \/system\/console\/configMgr\/org.apache.felix.http.sslfilter.SslFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixHttpSslfilterSslFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixHttpSslfilterSslFilter MimeNoContent OrgApacheFelixHttpSslfilterSslFilterInfo accept
orgApacheFelixHttpSslfilterSslFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.http.sslfilter.SslFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixHttpSslfilterSslFilter  
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter SslForwardHeader where
  applyOptionalParam req (SslForwardHeader xs) =
    req `setQuery` toQuery ("ssl-forward.header", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter SslForwardValue where
  applyOptionalParam req (SslForwardValue xs) =
    req `setQuery` toQuery ("ssl-forward.value", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter SslForwardCertHeader where
  applyOptionalParam req (SslForwardCertHeader xs) =
    req `setQuery` toQuery ("ssl-forward-cert.header", Just xs)
instance HasOptionalParam OrgApacheFelixHttpSslfilterSslFilter RewriteAbsoluteUrls where
  applyOptionalParam req (RewriteAbsoluteUrls xs) =
    req `setQuery` toQuery ("rewrite.absolute.urls", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixHttpSslfilterSslFilter MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixHttpSslfilterSslFilter MimePlainText


-- *** orgApacheFelixJaasConfigurationFactory

-- | @POST \/system\/console\/configMgr\/org.apache.felix.jaas.Configuration.factory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixJaasConfigurationFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixJaasConfigurationFactory MimeNoContent OrgApacheFelixJaasConfigurationFactoryInfo accept
orgApacheFelixJaasConfigurationFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.jaas.Configuration.factory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixJaasConfigurationFactory  
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory JaasControlFlag where
  applyOptionalParam req (JaasControlFlag xs) =
    req `setQuery` toQuery ("jaas.controlFlag", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory JaasRanking where
  applyOptionalParam req (JaasRanking xs) =
    req `setQuery` toQuery ("jaas.ranking", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory JaasRealmName where
  applyOptionalParam req (JaasRealmName xs) =
    req `setQuery` toQuery ("jaas.realmName", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory JaasClassname where
  applyOptionalParam req (JaasClassname xs) =
    req `setQuery` toQuery ("jaas.classname", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationFactory JaasOptions where
  applyOptionalParam req (JaasOptions xs) =
    req `setQuery` toQueryColl MultiParamArray ("jaas.options", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixJaasConfigurationFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixJaasConfigurationFactory MimePlainText


-- *** orgApacheFelixJaasConfigurationSpi

-- | @POST \/system\/console\/configMgr\/org.apache.felix.jaas.ConfigurationSpi@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixJaasConfigurationSpi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixJaasConfigurationSpi MimeNoContent OrgApacheFelixJaasConfigurationSpiInfo accept
orgApacheFelixJaasConfigurationSpi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.jaas.ConfigurationSpi"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixJaasConfigurationSpi  
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi JaasDefaultRealmName where
  applyOptionalParam req (JaasDefaultRealmName xs) =
    req `setQuery` toQuery ("jaas.defaultRealmName", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi JaasConfigProviderName where
  applyOptionalParam req (JaasConfigProviderName xs) =
    req `setQuery` toQuery ("jaas.configProviderName", Just xs)
instance HasOptionalParam OrgApacheFelixJaasConfigurationSpi JaasGlobalConfigPolicy where
  applyOptionalParam req (JaasGlobalConfigPolicy xs) =
    req `setQuery` toQuery ("jaas.globalConfigPolicy", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixJaasConfigurationSpi MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixJaasConfigurationSpi MimePlainText


-- *** orgApacheFelixScrScrService

-- | @POST \/system\/console\/configMgr\/org.apache.felix.scr.ScrService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixScrScrService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixScrScrService MimeNoContent OrgApacheFelixScrScrServiceInfo accept
orgApacheFelixScrScrService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.scr.ScrService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixScrScrService  
instance HasOptionalParam OrgApacheFelixScrScrService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsLoglevel where
  applyOptionalParam req (DsLoglevel xs) =
    req `setQuery` toQuery ("ds.loglevel", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsFactoryEnabled where
  applyOptionalParam req (DsFactoryEnabled xs) =
    req `setQuery` toQuery ("ds.factory.enabled", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsDelayedKeepInstances where
  applyOptionalParam req (DsDelayedKeepInstances xs) =
    req `setQuery` toQuery ("ds.delayed.keepInstances", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsLockTimeoutMilliseconds where
  applyOptionalParam req (DsLockTimeoutMilliseconds xs) =
    req `setQuery` toQuery ("ds.lock.timeout.milliseconds", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsStopTimeoutMilliseconds where
  applyOptionalParam req (DsStopTimeoutMilliseconds xs) =
    req `setQuery` toQuery ("ds.stop.timeout.milliseconds", Just xs)
instance HasOptionalParam OrgApacheFelixScrScrService DsGlobalExtender where
  applyOptionalParam req (DsGlobalExtender xs) =
    req `setQuery` toQuery ("ds.global.extender", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixScrScrService MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixScrScrService MimePlainText


-- *** orgApacheFelixSystemreadyImplComponentsCheck

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.impl.ComponentsCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadyImplComponentsCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadyImplComponentsCheck MimeNoContent OrgApacheFelixSystemreadyImplComponentsCheckInfo accept
orgApacheFelixSystemreadyImplComponentsCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.impl.ComponentsCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadyImplComponentsCheck  
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck ComponentsList where
  applyOptionalParam req (ComponentsList xs) =
    req `setQuery` toQueryColl MultiParamArray ("components.list", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplComponentsCheck ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadyImplComponentsCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadyImplComponentsCheck MimePlainText


-- *** orgApacheFelixSystemreadyImplFrameworkStartCheck

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.impl.FrameworkStartCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadyImplFrameworkStartCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadyImplFrameworkStartCheck MimeNoContent OrgApacheFelixSystemreadyImplFrameworkStartCheckInfo accept
orgApacheFelixSystemreadyImplFrameworkStartCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.impl.FrameworkStartCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadyImplFrameworkStartCheck  
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck Timeout where
  applyOptionalParam req (Timeout xs) =
    req `setQuery` toQuery ("timeout", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck TargetStartLevel where
  applyOptionalParam req (TargetStartLevel xs) =
    req `setQuery` toQuery ("target.start.level", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck TargetStartLevelPropName where
  applyOptionalParam req (TargetStartLevelPropName xs) =
    req `setQuery` toQuery ("target.start.level.prop.name", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplFrameworkStartCheck ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadyImplFrameworkStartCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadyImplFrameworkStartCheck MimePlainText


-- *** orgApacheFelixSystemreadyImplServicesCheck

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.impl.ServicesCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadyImplServicesCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadyImplServicesCheck MimeNoContent OrgApacheFelixSystemreadyImplServicesCheckInfo accept
orgApacheFelixSystemreadyImplServicesCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.impl.ServicesCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadyImplServicesCheck  
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck ServicesList where
  applyOptionalParam req (ServicesList xs) =
    req `setQuery` toQueryColl MultiParamArray ("services.list", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServicesCheck ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadyImplServicesCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadyImplServicesCheck MimePlainText


-- *** orgApacheFelixSystemreadyImplServletSystemAliveServlet

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.impl.servlet.SystemAliveServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadyImplServletSystemAliveServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadyImplServletSystemAliveServlet MimeNoContent OrgApacheFelixSystemreadyImplServletSystemAliveServletInfo accept
orgApacheFelixSystemreadyImplServletSystemAliveServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemAliveServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadyImplServletSystemAliveServlet  
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet OsgiHttpWhiteboardServletPattern where
  applyOptionalParam req (OsgiHttpWhiteboardServletPattern xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.servlet.pattern", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemAliveServlet OsgiHttpWhiteboardContextSelect where
  applyOptionalParam req (OsgiHttpWhiteboardContextSelect xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.context.select", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadyImplServletSystemAliveServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadyImplServletSystemAliveServlet MimePlainText


-- *** orgApacheFelixSystemreadyImplServletSystemReadyServlet

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.impl.servlet.SystemReadyServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadyImplServletSystemReadyServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadyImplServletSystemReadyServlet MimeNoContent OrgApacheFelixSystemreadyImplServletSystemReadyServletInfo accept
orgApacheFelixSystemreadyImplServletSystemReadyServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.impl.servlet.SystemReadyServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadyImplServletSystemReadyServlet  
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet OsgiHttpWhiteboardServletPattern where
  applyOptionalParam req (OsgiHttpWhiteboardServletPattern xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.servlet.pattern", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadyImplServletSystemReadyServlet OsgiHttpWhiteboardContextSelect where
  applyOptionalParam req (OsgiHttpWhiteboardContextSelect xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.context.select", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadyImplServletSystemReadyServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadyImplServletSystemReadyServlet MimePlainText


-- *** orgApacheFelixSystemreadySystemReadyMonitor

-- | @POST \/system\/console\/configMgr\/org.apache.felix.systemready.SystemReadyMonitor@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixSystemreadySystemReadyMonitor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixSystemreadySystemReadyMonitor MimeNoContent OrgApacheFelixSystemreadySystemReadyMonitorInfo accept
orgApacheFelixSystemreadySystemReadyMonitor  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.systemready.SystemReadyMonitor"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixSystemreadySystemReadyMonitor  
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixSystemreadySystemReadyMonitor PollInterval where
  applyOptionalParam req (PollInterval xs) =
    req `setQuery` toQuery ("poll.interval", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixSystemreadySystemReadyMonitor MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixSystemreadySystemReadyMonitor MimePlainText


-- *** orgApacheFelixWebconsoleInternalServletOsgiManager

-- | @POST \/system\/console\/configMgr\/org.apache.felix.webconsole.internal.servlet.OsgiManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixWebconsoleInternalServletOsgiManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixWebconsoleInternalServletOsgiManager MimeNoContent OrgApacheFelixWebconsoleInternalServletOsgiManagerInfo accept
orgApacheFelixWebconsoleInternalServletOsgiManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.webconsole.internal.servlet.OsgiManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixWebconsoleInternalServletOsgiManager  
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager ManagerRoot where
  applyOptionalParam req (ManagerRoot xs) =
    req `setQuery` toQuery ("manager.root", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager HttpServiceFilter where
  applyOptionalParam req (HttpServiceFilter xs) =
    req `setQuery` toQuery ("http.service.filter", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager DefaultRender where
  applyOptionalParam req (DefaultRender xs) =
    req `setQuery` toQuery ("default.render", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Realm where
  applyOptionalParam req (Realm xs) =
    req `setQuery` toQuery ("realm", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Username where
  applyOptionalParam req (Username xs) =
    req `setQuery` toQuery ("username", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Password where
  applyOptionalParam req (Password xs) =
    req `setQuery` toQuery ("password", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Category where
  applyOptionalParam req (Category xs) =
    req `setQuery` toQuery ("category", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Locale where
  applyOptionalParam req (Locale xs) =
    req `setQuery` toQuery ("locale", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Loglevel where
  applyOptionalParam req (Loglevel xs) =
    req `setQuery` toQuery ("loglevel", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsoleInternalServletOsgiManager Plugins where
  applyOptionalParam req (Plugins xs) =
    req `setQuery` toQuery ("plugins", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixWebconsoleInternalServletOsgiManager MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixWebconsoleInternalServletOsgiManager MimePlainText


-- *** orgApacheFelixWebconsolePluginsEventInternalPluginServlet

-- | @POST \/system\/console\/configMgr\/org.apache.felix.webconsole.plugins.event.internal.PluginServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixWebconsolePluginsEventInternalPluginServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixWebconsolePluginsEventInternalPluginServlet MimeNoContent OrgApacheFelixWebconsolePluginsEventInternalPluginServletInfo accept
orgApacheFelixWebconsolePluginsEventInternalPluginServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.webconsole.plugins.event.internal.PluginServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixWebconsolePluginsEventInternalPluginServlet  
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsEventInternalPluginServlet MaxSize where
  applyOptionalParam req (MaxSize xs) =
    req `setQuery` toQuery ("max.size", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixWebconsolePluginsEventInternalPluginServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixWebconsolePluginsEventInternalPluginServlet MimePlainText


-- *** orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo

-- | @POST \/system\/console\/configMgr\/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo MimeNoContent OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCoInfo accept
orgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.felix.webconsole.plugins.memoryusage.internal.MemoryUsageConfigurator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo  
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo FelixMemoryusageDumpThreshold where
  applyOptionalParam req (FelixMemoryusageDumpThreshold xs) =
    req `setQuery` toQuery ("felix.memoryusage.dump.threshold", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo FelixMemoryusageDumpInterval where
  applyOptionalParam req (FelixMemoryusageDumpInterval xs) =
    req `setQuery` toQuery ("felix.memoryusage.dump.interval", Just xs)
instance HasOptionalParam OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo FelixMemoryusageDumpLocation where
  applyOptionalParam req (FelixMemoryusageDumpLocation xs) =
    req `setQuery` toQuery ("felix.memoryusage.dump.location", Just xs)

-- | @application/json@
instance Produces OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo MimeJSON
-- | @text/plain@
instance Produces OrgApacheFelixWebconsolePluginsMemoryusageInternalMemoryUsageCo MimePlainText


-- *** orgApacheHttpProxyconfigurator

-- | @POST \/system\/console\/configMgr\/org.apache.http.proxyconfigurator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheHttpProxyconfigurator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheHttpProxyconfigurator MimeNoContent OrgApacheHttpProxyconfiguratorInfo accept
orgApacheHttpProxyconfigurator  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.http.proxyconfigurator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheHttpProxyconfigurator  
instance HasOptionalParam OrgApacheHttpProxyconfigurator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyEnabled where
  applyOptionalParam req (ProxyEnabled xs) =
    req `setQuery` toQuery ("proxy.enabled", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyHost where
  applyOptionalParam req (ProxyHost xs) =
    req `setQuery` toQuery ("proxy.host", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyPort where
  applyOptionalParam req (ProxyPort xs) =
    req `setQuery` toQuery ("proxy.port", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyUser where
  applyOptionalParam req (ProxyUser xs) =
    req `setQuery` toQuery ("proxy.user", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyPassword where
  applyOptionalParam req (ProxyPassword xs) =
    req `setQuery` toQuery ("proxy.password", Just xs)
instance HasOptionalParam OrgApacheHttpProxyconfigurator ProxyExceptions where
  applyOptionalParam req (ProxyExceptions xs) =
    req `setQuery` toQueryColl MultiParamArray ("proxy.exceptions", Just xs)

-- | @application/json@
instance Produces OrgApacheHttpProxyconfigurator MimeJSON
-- | @text/plain@
instance Produces OrgApacheHttpProxyconfigurator MimePlainText


-- *** orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider MimeNoContent OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProviderInfo accept
orgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreTextProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider Dir where
  applyOptionalParam req (Dir xs) =
    req `setQuery` toQuery ("dir", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsBlobDatastoreDataStoreTextProvider MimePlainText


-- *** orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore MimeNoContent OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStoreInfo accept
orgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.blob.datastore.FileDataStore"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsBlobDatastoreFileDataStore MimePlainText


-- *** orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService MimeNoContent OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServiceInfo accept
orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Mongouri where
  applyOptionalParam req (Mongouri xs) =
    req `setQuery` toQuery ("mongouri", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Db where
  applyOptionalParam req (Db xs) =
    req `setQuery` toQuery ("db", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService SocketKeepAlive where
  applyOptionalParam req (SocketKeepAlive xs) =
    req `setQuery` toQuery ("socketKeepAlive", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Cache where
  applyOptionalParam req (Cache xs) =
    req `setQuery` toQuery ("cache", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService NodeCachePercentage where
  applyOptionalParam req (NodeCachePercentage xs) =
    req `setQuery` toQuery ("nodeCachePercentage", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService PrevDocCachePercentage where
  applyOptionalParam req (PrevDocCachePercentage xs) =
    req `setQuery` toQuery ("prevDocCachePercentage", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService ChildrenCachePercentage where
  applyOptionalParam req (ChildrenCachePercentage xs) =
    req `setQuery` toQuery ("childrenCachePercentage", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService DiffCachePercentage where
  applyOptionalParam req (DiffCachePercentage xs) =
    req `setQuery` toQuery ("diffCachePercentage", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService CacheSegmentCount where
  applyOptionalParam req (CacheSegmentCount xs) =
    req `setQuery` toQuery ("cacheSegmentCount", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService CacheStackMoveDistance where
  applyOptionalParam req (CacheStackMoveDistance xs) =
    req `setQuery` toQuery ("cacheStackMoveDistance", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService BlobCacheSize where
  applyOptionalParam req (BlobCacheSize xs) =
    req `setQuery` toQuery ("blobCacheSize", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService PersistentCache where
  applyOptionalParam req (PersistentCache xs) =
    req `setQuery` toQuery ("persistentCache", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService JournalCache where
  applyOptionalParam req (JournalCache xs) =
    req `setQuery` toQuery ("journalCache", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService CustomBlobStore where
  applyOptionalParam req (CustomBlobStore xs) =
    req `setQuery` toQuery ("customBlobStore", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService JournalGcInterval where
  applyOptionalParam req (JournalGcInterval xs) =
    req `setQuery` toQuery ("journalGCInterval", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService JournalGcMaxAge where
  applyOptionalParam req (JournalGcMaxAge xs) =
    req `setQuery` toQuery ("journalGCMaxAge", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService PrefetchExternalChanges where
  applyOptionalParam req (PrefetchExternalChanges xs) =
    req `setQuery` toQuery ("prefetchExternalChanges", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService Role where
  applyOptionalParam req (Role xs) =
    req `setQuery` toQuery ("role", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService VersionGcMaxAgeInSecs where
  applyOptionalParam req (VersionGcMaxAgeInSecs xs) =
    req `setQuery` toQuery ("versionGcMaxAgeInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService VersionGcExpression where
  applyOptionalParam req (VersionGcExpression xs) =
    req `setQuery` toQuery ("versionGCExpression", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService VersionGcTimeLimitInSecs where
  applyOptionalParam req (VersionGcTimeLimitInSecs xs) =
    req `setQuery` toQuery ("versionGCTimeLimitInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService BlobGcMaxAgeInSecs where
  applyOptionalParam req (BlobGcMaxAgeInSecs xs) =
    req `setQuery` toQuery ("blobGcMaxAgeInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService BlobTrackSnapshotIntervalInSecs where
  applyOptionalParam req (BlobTrackSnapshotIntervalInSecs xs) =
    req `setQuery` toQuery ("blobTrackSnapshotIntervalInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService RepositoryHome where
  applyOptionalParam req (RepositoryHome xs) =
    req `setQuery` toQuery ("repository.home", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService MaxReplicationLagInSecs where
  applyOptionalParam req (MaxReplicationLagInSecs xs) =
    req `setQuery` toQuery ("maxReplicationLagInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService DocumentStoreType where
  applyOptionalParam req (DocumentStoreType xs) =
    req `setQuery` toQuery ("documentStoreType", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService BundlingDisabled where
  applyOptionalParam req (BundlingDisabled xs) =
    req `setQuery` toQuery ("bundlingDisabled", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService UpdateLimit where
  applyOptionalParam req (UpdateLimit xs) =
    req `setQuery` toQuery ("updateLimit", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService PersistentCacheIncludes where
  applyOptionalParam req (PersistentCacheIncludes xs) =
    req `setQuery` toQueryColl MultiParamArray ("persistentCacheIncludes", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService LeaseCheckMode where
  applyOptionalParam req (LeaseCheckMode xs) =
    req `setQuery` toQuery ("leaseCheckMode", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreService MimePlainText


-- *** orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre MimeNoContent OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePreInfo accept
orgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreServicePreset"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre PersistentCacheIncludes where
  applyOptionalParam req (PersistentCacheIncludes xs) =
    req `setQuery` toQueryColl MultiParamArray ("persistentCacheIncludes", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsDocumentDocumentNodeStoreServicePre MimePlainText


-- *** orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac MimeNoContent OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCacInfo accept
orgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.document.secondary.SecondaryStoreCacheService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac IncludedPaths where
  applyOptionalParam req (IncludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("includedPaths", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac EnableAsyncObserver where
  applyOptionalParam req (EnableAsyncObserver xs) =
    req `setQuery` toQuery ("enableAsyncObserver", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac ObserverQueueSize where
  applyOptionalParam req (ObserverQueueSize xs) =
    req `setQuery` toQuery ("observerQueueSize", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsDocumentSecondarySecondaryStoreCac MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexAsyncIndexerService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexAsyncIndexerService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService MimeNoContent OrgApacheJackrabbitOakPluginsIndexAsyncIndexerServiceInfo accept
orgApacheJackrabbitOakPluginsIndexAsyncIndexerService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.AsyncIndexerService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService AsyncConfigs where
  applyOptionalParam req (AsyncConfigs xs) =
    req `setQuery` toQueryColl MultiParamArray ("asyncConfigs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService LeaseTimeOutMinutes where
  applyOptionalParam req (LeaseTimeOutMinutes xs) =
    req `setQuery` toQuery ("leaseTimeOutMinutes", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService FailingIndexTimeoutSeconds where
  applyOptionalParam req (FailingIndexTimeoutSeconds xs) =
    req `setQuery` toQuery ("failingIndexTimeoutSeconds", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService ErrorWarnIntervalSeconds where
  applyOptionalParam req (ErrorWarnIntervalSeconds xs) =
    req `setQuery` toQuery ("errorWarnIntervalSeconds", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexAsyncIndexerService MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ MimeNoContent OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServInfo accept
orgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.lucene.LuceneIndexProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Disabled where
  applyOptionalParam req (Disabled xs) =
    req `setQuery` toQuery ("disabled", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ Debug where
  applyOptionalParam req (Debug xs) =
    req `setQuery` toQuery ("debug", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ LocalIndexDir where
  applyOptionalParam req (LocalIndexDir xs) =
    req `setQuery` toQuery ("localIndexDir", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ EnableOpenIndexAsync where
  applyOptionalParam req (EnableOpenIndexAsync xs) =
    req `setQuery` toQuery ("enableOpenIndexAsync", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ ThreadPoolSize where
  applyOptionalParam req (ThreadPoolSize xs) =
    req `setQuery` toQuery ("threadPoolSize", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ PrefetchIndexFiles where
  applyOptionalParam req (PrefetchIndexFiles xs) =
    req `setQuery` toQuery ("prefetchIndexFiles", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ ExtractedTextCacheSizeInMb where
  applyOptionalParam req (ExtractedTextCacheSizeInMb xs) =
    req `setQuery` toQuery ("extractedTextCacheSizeInMB", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ ExtractedTextCacheExpiryInSecs where
  applyOptionalParam req (ExtractedTextCacheExpiryInSecs xs) =
    req `setQuery` toQuery ("extractedTextCacheExpiryInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ AlwaysUsePreExtractedCache where
  applyOptionalParam req (AlwaysUsePreExtractedCache xs) =
    req `setQuery` toQuery ("alwaysUsePreExtractedCache", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ BooleanClauseLimit where
  applyOptionalParam req (BooleanClauseLimit xs) =
    req `setQuery` toQuery ("booleanClauseLimit", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ EnableHybridIndexing where
  applyOptionalParam req (EnableHybridIndexing xs) =
    req `setQuery` toQuery ("enableHybridIndexing", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ HybridQueueSize where
  applyOptionalParam req (HybridQueueSize xs) =
    req `setQuery` toQuery ("hybridQueueSize", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ DisableStoredIndexDefinition where
  applyOptionalParam req (DisableStoredIndexDefinition xs) =
    req `setQuery` toQuery ("disableStoredIndexDefinition", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ DeletedBlobsCollectionEnabled where
  applyOptionalParam req (DeletedBlobsCollectionEnabled xs) =
    req `setQuery` toQuery ("deletedBlobsCollectionEnabled", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ PropIndexCleanerIntervalInSecs where
  applyOptionalParam req (PropIndexCleanerIntervalInSecs xs) =
    req `setQuery` toQuery ("propIndexCleanerIntervalInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ EnableSingleBlobIndexFiles where
  applyOptionalParam req (EnableSingleBlobIndexFiles xs) =
    req `setQuery` toQuery ("enableSingleBlobIndexFiles", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexLuceneLuceneIndexProviderServ MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCoInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.EmbeddedSolrServerConfigurationProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo SolrHomePath where
  applyOptionalParam req (SolrHomePath xs) =
    req `setQuery` toQuery ("solr.home.path", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo SolrCoreName where
  applyOptionalParam req (SolrCoreName xs) =
    req `setQuery` toQuery ("solr.core.name", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiEmbeddedSolrServerCo MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServersInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.NodeStateSolrServersObserverService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiNodeStateSolrServers MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfigurationInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.OakSolrConfigurationProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathDescField where
  applyOptionalParam req (PathDescField xs) =
    req `setQuery` toQuery ("path.desc.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathChildField where
  applyOptionalParam req (PathChildField xs) =
    req `setQuery` toQuery ("path.child.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathParentField where
  applyOptionalParam req (PathParentField xs) =
    req `setQuery` toQuery ("path.parent.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathExactField where
  applyOptionalParam req (PathExactField xs) =
    req `setQuery` toQuery ("path.exact.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration CatchAllField where
  applyOptionalParam req (CatchAllField xs) =
    req `setQuery` toQuery ("catch.all.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration CollapsedPathField where
  applyOptionalParam req (CollapsedPathField xs) =
    req `setQuery` toQuery ("collapsed.path.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathDepthField where
  applyOptionalParam req (PathDepthField xs) =
    req `setQuery` toQuery ("path.depth.field", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration CommitPolicy where
  applyOptionalParam req (CommitPolicy xs) =
    req `setQuery` toQuery ("commit.policy", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration Rows where
  applyOptionalParam req (Rows xs) =
    req `setQuery` toQuery ("rows", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PathRestrictions where
  applyOptionalParam req (PathRestrictions xs) =
    req `setQuery` toQuery ("path.restrictions", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PropertyRestrictions where
  applyOptionalParam req (PropertyRestrictions xs) =
    req `setQuery` toQuery ("property.restrictions", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PrimarytypesRestrictions where
  applyOptionalParam req (PrimarytypesRestrictions xs) =
    req `setQuery` toQuery ("primarytypes.restrictions", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration IgnoredProperties where
  applyOptionalParam req (IgnoredProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignored.properties", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration UsedProperties where
  applyOptionalParam req (UsedProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("used.properties", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration TypeMappings where
  applyOptionalParam req (TypeMappings xs) =
    req `setQuery` toQueryColl MultiParamArray ("type.mappings", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration PropertyMappings where
  applyOptionalParam req (PropertyMappings xs) =
    req `setQuery` toQueryColl MultiParamArray ("property.mappings", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration CollapseJcrcontentNodes where
  applyOptionalParam req (CollapseJcrcontentNodes xs) =
    req `setQuery` toQuery ("collapse.jcrcontent.nodes", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiOakSolrConfiguration MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConfInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.RemoteSolrServerConfigurationProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrHttpUrl where
  applyOptionalParam req (SolrHttpUrl xs) =
    req `setQuery` toQuery ("solr.http.url", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrZkHost where
  applyOptionalParam req (SolrZkHost xs) =
    req `setQuery` toQuery ("solr.zk.host", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrCollection where
  applyOptionalParam req (SolrCollection xs) =
    req `setQuery` toQuery ("solr.collection", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrSocketTimeout where
  applyOptionalParam req (SolrSocketTimeout xs) =
    req `setQuery` toQuery ("solr.socket.timeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrConnectionTimeout where
  applyOptionalParam req (SolrConnectionTimeout xs) =
    req `setQuery` toQuery ("solr.connection.timeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrShardsNo where
  applyOptionalParam req (SolrShardsNo xs) =
    req `setQuery` toQuery ("solr.shards.no", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrReplicationFactor where
  applyOptionalParam req (SolrReplicationFactor xs) =
    req `setQuery` toQuery ("solr.replication.factor", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf SolrConfDir where
  applyOptionalParam req (SolrConfDir xs) =
    req `setQuery` toQuery ("solr.conf.dir", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiRemoteSolrServerConf MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvidInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrQueryIndexProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid QueryAggregation where
  applyOptionalParam req (QueryAggregation xs) =
    req `setQuery` toQuery ("query.aggregation", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrQueryIndexProvid MimePlainText


-- *** orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe MimeNoContent OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSeInfo accept
orgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.index.solr.osgi.SolrServerProviderService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe ServerType where
  applyOptionalParam req (ServerType xs) =
    req `setQuery` toQuery ("server.type", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsIndexSolrOsgiSolrServerProviderSe MimePlainText


-- *** orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory MimeNoContent OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactoryInfo accept
orgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.metric.StatisticsProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory ProviderType where
  applyOptionalParam req (ProviderType xs) =
    req `setQuery` toQuery ("providerType", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsMetricStatisticsProviderFactory MimePlainText


-- *** orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider MimeNoContent OrgApacheJackrabbitOakPluginsObservationChangeCollectorProviderInfo accept
orgApacheJackrabbitOakPluginsObservationChangeCollectorProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.plugins.observation.ChangeCollectorProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider  
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider MaxItems where
  applyOptionalParam req (MaxItems xs) =
    req `setQuery` toQuery ("maxItems", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider MaxPathDepth where
  applyOptionalParam req (MaxPathDepth xs) =
    req `setQuery` toQuery ("maxPathDepth", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakPluginsObservationChangeCollectorProvider MimePlainText


-- *** orgApacheJackrabbitOakQueryQueryEngineSettingsService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.query.QueryEngineSettingsService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakQueryQueryEngineSettingsService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakQueryQueryEngineSettingsService MimeNoContent OrgApacheJackrabbitOakQueryQueryEngineSettingsServiceInfo accept
orgApacheJackrabbitOakQueryQueryEngineSettingsService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.query.QueryEngineSettingsService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakQueryQueryEngineSettingsService  
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService QueryLimitInMemory where
  applyOptionalParam req (QueryLimitInMemory xs) =
    req `setQuery` toQuery ("queryLimitInMemory", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService QueryLimitReads where
  applyOptionalParam req (QueryLimitReads xs) =
    req `setQuery` toQuery ("queryLimitReads", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService QueryFailTraversal where
  applyOptionalParam req (QueryFailTraversal xs) =
    req `setQuery` toQuery ("queryFailTraversal", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakQueryQueryEngineSettingsService FastQuerySize where
  applyOptionalParam req (FastQuerySize xs) =
    req `setQuery` toQuery ("fastQuerySize", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakQueryQueryEngineSettingsService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakQueryQueryEngineSettingsService MimePlainText


-- *** orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig MimeNoContent OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfigInfo accept
orgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.AuthenticationConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig OrgApacheJackrabbitOakAuthenticationAppName where
  applyOptionalParam req (OrgApacheJackrabbitOakAuthenticationAppName xs) =
    req `setQuery` toQuery ("org.apache.jackrabbit.oak.authentication.appName", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig OrgApacheJackrabbitOakAuthenticationConfigSpiName where
  applyOptionalParam req (OrgApacheJackrabbitOakAuthenticationConfigSpiName xs) =
    req `setQuery` toQuery ("org.apache.jackrabbit.oak.authentication.configSpiName", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationAuthenticationConfig MimePlainText


-- *** orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti MimeNoContent OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdentiInfo accept
orgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.ldap.impl.LdapIdentityProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti ProviderName where
  applyOptionalParam req (ProviderName xs) =
    req `setQuery` toQuery ("provider.name", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti HostName where
  applyOptionalParam req (HostName xs) =
    req `setQuery` toQuery ("host.name", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti HostPort where
  applyOptionalParam req (HostPort xs) =
    req `setQuery` toQuery ("host.port", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti HostSsl where
  applyOptionalParam req (HostSsl xs) =
    req `setQuery` toQuery ("host.ssl", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti HostTls where
  applyOptionalParam req (HostTls xs) =
    req `setQuery` toQuery ("host.tls", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti HostNoCertCheck where
  applyOptionalParam req (HostNoCertCheck xs) =
    req `setQuery` toQuery ("host.noCertCheck", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti BindDn where
  applyOptionalParam req (BindDn xs) =
    req `setQuery` toQuery ("bind.dn", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti BindPassword where
  applyOptionalParam req (BindPassword xs) =
    req `setQuery` toQuery ("bind.password", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti SearchTimeout where
  applyOptionalParam req (SearchTimeout xs) =
    req `setQuery` toQuery ("searchTimeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti AdminPoolMaxActive where
  applyOptionalParam req (AdminPoolMaxActive xs) =
    req `setQuery` toQuery ("adminPool.maxActive", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti AdminPoolLookupOnValidate where
  applyOptionalParam req (AdminPoolLookupOnValidate xs) =
    req `setQuery` toQuery ("adminPool.lookupOnValidate", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserPoolMaxActive where
  applyOptionalParam req (UserPoolMaxActive xs) =
    req `setQuery` toQuery ("userPool.maxActive", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserPoolLookupOnValidate where
  applyOptionalParam req (UserPoolLookupOnValidate xs) =
    req `setQuery` toQuery ("userPool.lookupOnValidate", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserBaseDn where
  applyOptionalParam req (UserBaseDn xs) =
    req `setQuery` toQuery ("user.baseDN", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserObjectclass where
  applyOptionalParam req (UserObjectclass xs) =
    req `setQuery` toQueryColl MultiParamArray ("user.objectclass", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserIdAttribute where
  applyOptionalParam req (UserIdAttribute xs) =
    req `setQuery` toQuery ("user.idAttribute", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserExtraFilter where
  applyOptionalParam req (UserExtraFilter xs) =
    req `setQuery` toQuery ("user.extraFilter", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UserMakeDnPath where
  applyOptionalParam req (UserMakeDnPath xs) =
    req `setQuery` toQuery ("user.makeDnPath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupBaseDn where
  applyOptionalParam req (GroupBaseDn xs) =
    req `setQuery` toQuery ("group.baseDN", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupObjectclass where
  applyOptionalParam req (GroupObjectclass xs) =
    req `setQuery` toQueryColl MultiParamArray ("group.objectclass", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupNameAttribute where
  applyOptionalParam req (GroupNameAttribute xs) =
    req `setQuery` toQuery ("group.nameAttribute", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupExtraFilter where
  applyOptionalParam req (GroupExtraFilter xs) =
    req `setQuery` toQuery ("group.extraFilter", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupMakeDnPath where
  applyOptionalParam req (GroupMakeDnPath xs) =
    req `setQuery` toQuery ("group.makeDnPath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti GroupMemberAttribute where
  applyOptionalParam req (GroupMemberAttribute xs) =
    req `setQuery` toQuery ("group.memberAttribute", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti UseUidForExtId where
  applyOptionalParam req (UseUidForExtId xs) =
    req `setQuery` toQuery ("useUidForExtId", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti Customattributes where
  applyOptionalParam req (Customattributes xs) =
    req `setQuery` toQueryColl MultiParamArray ("customattributes", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationLdapImplLdapIdenti MimePlainText


-- *** orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura MimeNoContent OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfiguraInfo accept
orgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authentication.token.TokenConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura TokenExpiration where
  applyOptionalParam req (TokenExpiration xs) =
    req `setQuery` toQuery ("tokenExpiration", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura TokenLength where
  applyOptionalParam req (TokenLength xs) =
    req `setQuery` toQuery ("tokenLength", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura TokenRefresh where
  applyOptionalParam req (TokenRefresh xs) =
    req `setQuery` toQuery ("tokenRefresh", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura TokenCleanupThreshold where
  applyOptionalParam req (TokenCleanupThreshold xs) =
    req `setQuery` toQuery ("tokenCleanupThreshold", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura PasswordHashAlgorithm where
  applyOptionalParam req (PasswordHashAlgorithm xs) =
    req `setQuery` toQuery ("passwordHashAlgorithm", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura PasswordHashIterations where
  applyOptionalParam req (PasswordHashIterations xs) =
    req `setQuery` toQuery ("passwordHashIterations", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura PasswordSaltSize where
  applyOptionalParam req (PasswordSaltSize xs) =
    req `setQuery` toQuery ("passwordSaltSize", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityAuthenticationTokenTokenConfigura MimePlainText


-- *** orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur MimeNoContent OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigurInfo accept
orgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.authorization.AuthorizationConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur PermissionsJr2 where
  applyOptionalParam req (PermissionsJr2 xs) =
    req `setQuery` toQuery ("permissionsJr2", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur ImportBehavior where
  applyOptionalParam req (ImportBehavior xs) =
    req `setQuery` toQuery ("importBehavior", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur ReadPaths where
  applyOptionalParam req (ReadPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("readPaths", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur AdministrativePrincipals where
  applyOptionalParam req (AdministrativePrincipals xs) =
    req `setQuery` toQueryColl MultiParamArray ("administrativePrincipals", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur ConfigurationRanking where
  applyOptionalParam req (ConfigurationRanking xs) =
    req `setQuery` toQuery ("configurationRanking", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityAuthorizationAuthorizationConfigur MimePlainText


-- *** orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati MimeNoContent OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistratiInfo accept
orgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.internal.SecurityProviderRegistration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati RequiredServicePids where
  applyOptionalParam req (RequiredServicePids xs) =
    req `setQuery` toQueryColl MultiParamArray ("requiredServicePids", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati AuthorizationCompositionType where
  applyOptionalParam req (AuthorizationCompositionType xs) =
    req `setQuery` toQuery ("authorizationCompositionType", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityInternalSecurityProviderRegistrati MimePlainText


-- *** orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName MimeNoContent OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeNameInfo accept
orgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.RandomAuthorizableNodeName"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName Length where
  applyOptionalParam req (Length xs) =
    req `setQuery` toQuery ("length", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityUserRandomAuthorizableNodeName MimePlainText


-- *** orgApacheJackrabbitOakSecurityUserUserConfigurationImpl

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSecurityUserUserConfigurationImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl MimeNoContent OrgApacheJackrabbitOakSecurityUserUserConfigurationImplInfo accept
orgApacheJackrabbitOakSecurityUserUserConfigurationImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.security.user.UserConfigurationImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl  
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl UsersPath where
  applyOptionalParam req (UsersPath xs) =
    req `setQuery` toQuery ("usersPath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl GroupsPath where
  applyOptionalParam req (GroupsPath xs) =
    req `setQuery` toQuery ("groupsPath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl SystemRelativePath where
  applyOptionalParam req (SystemRelativePath xs) =
    req `setQuery` toQuery ("systemRelativePath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl DefaultDepth where
  applyOptionalParam req (DefaultDepth xs) =
    req `setQuery` toQuery ("defaultDepth", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl ImportBehavior where
  applyOptionalParam req (ImportBehavior xs) =
    req `setQuery` toQuery ("importBehavior", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordHashAlgorithm where
  applyOptionalParam req (PasswordHashAlgorithm xs) =
    req `setQuery` toQuery ("passwordHashAlgorithm", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordHashIterations where
  applyOptionalParam req (PasswordHashIterations xs) =
    req `setQuery` toQuery ("passwordHashIterations", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordSaltSize where
  applyOptionalParam req (PasswordSaltSize xs) =
    req `setQuery` toQuery ("passwordSaltSize", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl OmitAdminPw where
  applyOptionalParam req (OmitAdminPw xs) =
    req `setQuery` toQuery ("omitAdminPw", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl SupportAutoSave where
  applyOptionalParam req (SupportAutoSave xs) =
    req `setQuery` toQuery ("supportAutoSave", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordMaxAge where
  applyOptionalParam req (PasswordMaxAge xs) =
    req `setQuery` toQuery ("passwordMaxAge", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl InitialPasswordChange where
  applyOptionalParam req (InitialPasswordChange xs) =
    req `setQuery` toQuery ("initialPasswordChange", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordHistorySize where
  applyOptionalParam req (PasswordHistorySize xs) =
    req `setQuery` toQuery ("passwordHistorySize", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl PasswordExpiryForAdmin where
  applyOptionalParam req (PasswordExpiryForAdmin xs) =
    req `setQuery` toQuery ("passwordExpiryForAdmin", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl CacheExpiration where
  applyOptionalParam req (CacheExpiration xs) =
    req `setQuery` toQuery ("cacheExpiration", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl EnableRfc7613UsercaseMappedProfile where
  applyOptionalParam req (EnableRfc7613UsercaseMappedProfile xs) =
    req `setQuery` toQuery ("enableRFC7613UsercaseMappedProfile", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSecurityUserUserConfigurationImpl MimePlainText


-- *** orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService MimeNoContent OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreServiceInfo accept
orgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.azure.AzureSegmentStoreService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService  
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService AccountName where
  applyOptionalParam req (AccountName xs) =
    req `setQuery` toQuery ("accountName", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService ContainerName where
  applyOptionalParam req (ContainerName xs) =
    req `setQuery` toQuery ("containerName", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService AccessKey where
  applyOptionalParam req (AccessKey xs) =
    req `setQuery` toQuery ("accessKey", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService RootPath where
  applyOptionalParam req (RootPath xs) =
    req `setQuery` toQuery ("rootPath", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService ConnectionUrl where
  applyOptionalParam req (ConnectionUrl xs) =
    req `setQuery` toQuery ("connectionURL", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSegmentAzureAzureSegmentStoreService MimePlainText


-- *** orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory MimeNoContent OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactoryInfo accept
orgApacheJackrabbitOakSegmentSegmentNodeStoreFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory  
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory RepositoryHome where
  applyOptionalParam req (RepositoryHome xs) =
    req `setQuery` toQuery ("repository.home", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory TarmkMode where
  applyOptionalParam req (TarmkMode xs) =
    req `setQuery` toQuery ("tarmk.mode", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory TarmkSize where
  applyOptionalParam req (TarmkSize xs) =
    req `setQuery` toQuery ("tarmk.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory SegmentCacheSize where
  applyOptionalParam req (SegmentCacheSize xs) =
    req `setQuery` toQuery ("segmentCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory StringCacheSize where
  applyOptionalParam req (StringCacheSize xs) =
    req `setQuery` toQuery ("stringCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory TemplateCacheSize where
  applyOptionalParam req (TemplateCacheSize xs) =
    req `setQuery` toQuery ("templateCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory StringDeduplicationCacheSize where
  applyOptionalParam req (StringDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("stringDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory TemplateDeduplicationCacheSize where
  applyOptionalParam req (TemplateDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("templateDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory NodeDeduplicationCacheSize where
  applyOptionalParam req (NodeDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("nodeDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory PauseCompaction where
  applyOptionalParam req (PauseCompaction xs) =
    req `setQuery` toQuery ("pauseCompaction", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionRetryCount where
  applyOptionalParam req (CompactionRetryCount xs) =
    req `setQuery` toQuery ("compaction.retryCount", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionForceTimeout where
  applyOptionalParam req (CompactionForceTimeout xs) =
    req `setQuery` toQuery ("compaction.force.timeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionSizeDeltaEstimation where
  applyOptionalParam req (CompactionSizeDeltaEstimation xs) =
    req `setQuery` toQuery ("compaction.sizeDeltaEstimation", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionDisableEstimation where
  applyOptionalParam req (CompactionDisableEstimation xs) =
    req `setQuery` toQuery ("compaction.disableEstimation", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionRetainedGenerations where
  applyOptionalParam req (CompactionRetainedGenerations xs) =
    req `setQuery` toQuery ("compaction.retainedGenerations", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionMemoryThreshold where
  applyOptionalParam req (CompactionMemoryThreshold xs) =
    req `setQuery` toQuery ("compaction.memoryThreshold", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CompactionProgressLog where
  applyOptionalParam req (CompactionProgressLog xs) =
    req `setQuery` toQuery ("compaction.progressLog", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Standby where
  applyOptionalParam req (Standby xs) =
    req `setQuery` toQuery ("standby", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CustomBlobStore where
  applyOptionalParam req (CustomBlobStore xs) =
    req `setQuery` toQuery ("customBlobStore", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory CustomSegmentStore where
  applyOptionalParam req (CustomSegmentStore xs) =
    req `setQuery` toQuery ("customSegmentStore", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory SplitPersistence where
  applyOptionalParam req (SplitPersistence xs) =
    req `setQuery` toQuery ("splitPersistence", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory RepositoryBackupDir where
  applyOptionalParam req (RepositoryBackupDir xs) =
    req `setQuery` toQuery ("repository.backup.dir", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory BlobGcMaxAgeInSecs where
  applyOptionalParam req (BlobGcMaxAgeInSecs xs) =
    req `setQuery` toQuery ("blobGcMaxAgeInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory BlobTrackSnapshotIntervalInSecs where
  applyOptionalParam req (BlobTrackSnapshotIntervalInSecs xs) =
    req `setQuery` toQuery ("blobTrackSnapshotIntervalInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory Role where
  applyOptionalParam req (Role xs) =
    req `setQuery` toQuery ("role", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory RegisterDescriptors where
  applyOptionalParam req (RegisterDescriptors xs) =
    req `setQuery` toQuery ("registerDescriptors", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory DispatchChanges where
  applyOptionalParam req (DispatchChanges xs) =
    req `setQuery` toQuery ("dispatchChanges", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreFactory MimePlainText


-- *** orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService MimeNoContent OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorServiceInfo accept
orgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreMonitorService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService  
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService CommitsTrackerWriterGroups where
  applyOptionalParam req (CommitsTrackerWriterGroups xs) =
    req `setQuery` toQueryColl MultiParamArray ("commitsTrackerWriterGroups", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreMonitorService MimePlainText


-- *** orgApacheJackrabbitOakSegmentSegmentNodeStoreService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSegmentSegmentNodeStoreService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSegmentSegmentNodeStoreService MimeNoContent OrgApacheJackrabbitOakSegmentSegmentNodeStoreServiceInfo accept
orgApacheJackrabbitOakSegmentSegmentNodeStoreService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.SegmentNodeStoreService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSegmentSegmentNodeStoreService  
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService RepositoryHome where
  applyOptionalParam req (RepositoryHome xs) =
    req `setQuery` toQuery ("repository.home", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService TarmkMode where
  applyOptionalParam req (TarmkMode xs) =
    req `setQuery` toQuery ("tarmk.mode", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService TarmkSize where
  applyOptionalParam req (TarmkSize xs) =
    req `setQuery` toQuery ("tarmk.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService SegmentCacheSize where
  applyOptionalParam req (SegmentCacheSize xs) =
    req `setQuery` toQuery ("segmentCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService StringCacheSize where
  applyOptionalParam req (StringCacheSize xs) =
    req `setQuery` toQuery ("stringCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService TemplateCacheSize where
  applyOptionalParam req (TemplateCacheSize xs) =
    req `setQuery` toQuery ("templateCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService StringDeduplicationCacheSize where
  applyOptionalParam req (StringDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("stringDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService TemplateDeduplicationCacheSize where
  applyOptionalParam req (TemplateDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("templateDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService NodeDeduplicationCacheSize where
  applyOptionalParam req (NodeDeduplicationCacheSize xs) =
    req `setQuery` toQuery ("nodeDeduplicationCache.size", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService PauseCompaction where
  applyOptionalParam req (PauseCompaction xs) =
    req `setQuery` toQuery ("pauseCompaction", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionRetryCount where
  applyOptionalParam req (CompactionRetryCount xs) =
    req `setQuery` toQuery ("compaction.retryCount", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionForceTimeout where
  applyOptionalParam req (CompactionForceTimeout xs) =
    req `setQuery` toQuery ("compaction.force.timeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionSizeDeltaEstimation where
  applyOptionalParam req (CompactionSizeDeltaEstimation xs) =
    req `setQuery` toQuery ("compaction.sizeDeltaEstimation", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionDisableEstimation where
  applyOptionalParam req (CompactionDisableEstimation xs) =
    req `setQuery` toQuery ("compaction.disableEstimation", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionRetainedGenerations where
  applyOptionalParam req (CompactionRetainedGenerations xs) =
    req `setQuery` toQuery ("compaction.retainedGenerations", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionMemoryThreshold where
  applyOptionalParam req (CompactionMemoryThreshold xs) =
    req `setQuery` toQuery ("compaction.memoryThreshold", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CompactionProgressLog where
  applyOptionalParam req (CompactionProgressLog xs) =
    req `setQuery` toQuery ("compaction.progressLog", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService Standby where
  applyOptionalParam req (Standby xs) =
    req `setQuery` toQuery ("standby", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CustomBlobStore where
  applyOptionalParam req (CustomBlobStore xs) =
    req `setQuery` toQuery ("customBlobStore", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService CustomSegmentStore where
  applyOptionalParam req (CustomSegmentStore xs) =
    req `setQuery` toQuery ("customSegmentStore", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService SplitPersistence where
  applyOptionalParam req (SplitPersistence xs) =
    req `setQuery` toQuery ("splitPersistence", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService RepositoryBackupDir where
  applyOptionalParam req (RepositoryBackupDir xs) =
    req `setQuery` toQuery ("repository.backup.dir", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService BlobGcMaxAgeInSecs where
  applyOptionalParam req (BlobGcMaxAgeInSecs xs) =
    req `setQuery` toQuery ("blobGcMaxAgeInSecs", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentSegmentNodeStoreService BlobTrackSnapshotIntervalInSecs where
  applyOptionalParam req (BlobTrackSnapshotIntervalInSecs xs) =
    req `setQuery` toQuery ("blobTrackSnapshotIntervalInSecs", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSegmentSegmentNodeStoreService MimePlainText


-- *** orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService MimeNoContent OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreServiceInfo accept
orgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.segment.standby.store.StandbyStoreService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService  
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService OrgApacheSlingInstallerConfigurationPersist where
  applyOptionalParam req (OrgApacheSlingInstallerConfigurationPersist xs) =
    req `setQuery` toQuery ("org.apache.sling.installer.configuration.persist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Mode where
  applyOptionalParam req (Mode xs) =
    req `setQuery` toQuery ("mode", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Port where
  applyOptionalParam req (Port xs) =
    req `setQuery` toQuery ("port", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService PrimaryHost where
  applyOptionalParam req (PrimaryHost xs) =
    req `setQuery` toQuery ("primary.host", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Interval where
  applyOptionalParam req (Interval xs) =
    req `setQuery` toQuery ("interval", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService PrimaryAllowedClientIpRanges where
  applyOptionalParam req (PrimaryAllowedClientIpRanges xs) =
    req `setQuery` toQueryColl MultiParamArray ("primary.allowed-client-ip-ranges", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService Secure where
  applyOptionalParam req (Secure xs) =
    req `setQuery` toQuery ("secure", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService StandbyReadtimeout where
  applyOptionalParam req (StandbyReadtimeout xs) =
    req `setQuery` toQuery ("standby.readtimeout", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService StandbyAutoclean where
  applyOptionalParam req (StandbyAutoclean xs) =
    req `setQuery` toQuery ("standby.autoclean", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSegmentStandbyStoreStandbyStoreService MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe MimeNoContent OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDeInfo accept
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.DefaultSyncHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe HandlerName where
  applyOptionalParam req (HandlerName xs) =
    req `setQuery` toQuery ("handler.name", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserExpirationTime where
  applyOptionalParam req (UserExpirationTime xs) =
    req `setQuery` toQuery ("user.expirationTime", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserAutoMembership where
  applyOptionalParam req (UserAutoMembership xs) =
    req `setQuery` toQueryColl MultiParamArray ("user.autoMembership", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserPropertyMapping where
  applyOptionalParam req (UserPropertyMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("user.propertyMapping", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserPathPrefix where
  applyOptionalParam req (UserPathPrefix xs) =
    req `setQuery` toQuery ("user.pathPrefix", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserMembershipExpTime where
  applyOptionalParam req (UserMembershipExpTime xs) =
    req `setQuery` toQuery ("user.membershipExpTime", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserMembershipNestingDepth where
  applyOptionalParam req (UserMembershipNestingDepth xs) =
    req `setQuery` toQuery ("user.membershipNestingDepth", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserDynamicMembership where
  applyOptionalParam req (UserDynamicMembership xs) =
    req `setQuery` toQuery ("user.dynamicMembership", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe UserDisableMissing where
  applyOptionalParam req (UserDisableMissing xs) =
    req `setQuery` toQuery ("user.disableMissing", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe GroupExpirationTime where
  applyOptionalParam req (GroupExpirationTime xs) =
    req `setQuery` toQuery ("group.expirationTime", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe GroupAutoMembership where
  applyOptionalParam req (GroupAutoMembership xs) =
    req `setQuery` toQueryColl MultiParamArray ("group.autoMembership", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe GroupPropertyMapping where
  applyOptionalParam req (GroupPropertyMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("group.propertyMapping", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe GroupPathPrefix where
  applyOptionalParam req (GroupPathPrefix xs) =
    req `setQuery` toQuery ("group.pathPrefix", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe EnableRfc7613UsercaseMappedProfile where
  applyOptionalParam req (EnableRfc7613UsercaseMappedProfile xs) =
    req `setQuery` toQuery ("enableRFC7613UsercaseMappedProfile", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplDe MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx MimeNoContent OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplExInfo accept
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModuleFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx JaasRanking where
  applyOptionalParam req (JaasRanking xs) =
    req `setQuery` toQuery ("jaas.ranking", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx JaasControlFlag where
  applyOptionalParam req (JaasControlFlag xs) =
    req `setQuery` toQuery ("jaas.controlFlag", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx JaasRealmName where
  applyOptionalParam req (JaasRealmName xs) =
    req `setQuery` toQuery ("jaas.realmName", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx IdpName where
  applyOptionalParam req (IdpName xs) =
    req `setQuery` toQuery ("idp.name", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx SyncHandlerName where
  applyOptionalParam req (SyncHandlerName xs) =
    req `setQuery` toQuery ("sync.handlerName", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplEx MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr MimeNoContent OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPrInfo accept
orgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authentication.external.impl.principal.ExternalPrincipalConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr ProtectExternalId where
  applyOptionalParam req (ProtectExternalId xs) =
    req `setQuery` toQuery ("protectExternalId", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthenticationExternalImplPr MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi MimeNoContent OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfiInfo accept
orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi CugSupportedPaths where
  applyOptionalParam req (CugSupportedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("cugSupportedPaths", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi CugEnabled where
  applyOptionalParam req (CugEnabled xs) =
    req `setQuery` toQuery ("cugEnabled", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi ConfigurationRanking where
  applyOptionalParam req (ConfigurationRanking xs) =
    req `setQuery` toQuery ("configurationRanking", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugConfi MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu MimeNoContent OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExcluInfo accept
orgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.authorization.cug.impl.CugExcludeImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu PrincipalNames where
  applyOptionalParam req (PrincipalNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("principalNames", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityAuthorizationCugImplCugExclu MimePlainText


-- *** orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable MimeNoContent OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizableInfo accept
orgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.oak.spi.security.user.action.DefaultAuthorizableActionProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable  
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable EnabledActions where
  applyOptionalParam req (EnabledActions xs) =
    req `setQuery` toQuery ("enabledActions", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable UserPrivilegeNames where
  applyOptionalParam req (UserPrivilegeNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("userPrivilegeNames", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable GroupPrivilegeNames where
  applyOptionalParam req (GroupPrivilegeNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("groupPrivilegeNames", Just xs)
instance HasOptionalParam OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable Constraint where
  applyOptionalParam req (Constraint xs) =
    req `setQuery` toQuery ("constraint", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitOakSpiSecurityUserActionDefaultAuthorizable MimePlainText


-- *** orgApacheJackrabbitVaultPackagingImplPackagingImpl

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitVaultPackagingImplPackagingImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitVaultPackagingImplPackagingImpl MimeNoContent OrgApacheJackrabbitVaultPackagingImplPackagingImplInfo accept
orgApacheJackrabbitVaultPackagingImplPackagingImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.impl.PackagingImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitVaultPackagingImplPackagingImpl  
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingImplPackagingImpl PackageRoots where
  applyOptionalParam req (PackageRoots xs) =
    req `setQuery` toQueryColl MultiParamArray ("packageRoots", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitVaultPackagingImplPackagingImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitVaultPackagingImplPackagingImpl MimePlainText


-- *** orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry

-- | @POST \/system\/console\/configMgr\/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry MimeNoContent OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistryInfo accept
orgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.jackrabbit.vault.packaging.registry.impl.FSPackageRegistry"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry  
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry HomePath where
  applyOptionalParam req (HomePath xs) =
    req `setQuery` toQuery ("homePath", Just xs)

-- | @application/json@
instance Produces OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry MimeJSON
-- | @text/plain@
instance Produces OrgApacheJackrabbitVaultPackagingRegistryImplFSPackageRegistry MimePlainText


-- *** orgApacheSlingAuthCoreImplLogoutServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.auth.core.impl.LogoutServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingAuthCoreImplLogoutServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingAuthCoreImplLogoutServlet MimeNoContent OrgApacheSlingAuthCoreImplLogoutServletInfo accept
orgApacheSlingAuthCoreImplLogoutServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.auth.core.impl.LogoutServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingAuthCoreImplLogoutServlet  
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet SlingServletMethods[Text] where
  applyOptionalParam req (SlingServletMethods[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.methods", Just xs)
instance HasOptionalParam OrgApacheSlingAuthCoreImplLogoutServlet SlingServletPaths where
  applyOptionalParam req (SlingServletPaths xs) =
    req `setQuery` toQuery ("sling.servlet.paths", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingAuthCoreImplLogoutServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingAuthCoreImplLogoutServlet MimePlainText


-- *** orgApacheSlingCaconfigImplConfigurationBindingsValueProvider

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplConfigurationBindingsValueProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider MimeNoContent OrgApacheSlingCaconfigImplConfigurationBindingsValueProviderInfo accept
orgApacheSlingCaconfigImplConfigurationBindingsValueProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationBindingsValueProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider  
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplConfigurationBindingsValueProvider MimePlainText


-- *** orgApacheSlingCaconfigImplConfigurationResolverImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.ConfigurationResolverImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplConfigurationResolverImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplConfigurationResolverImpl MimeNoContent OrgApacheSlingCaconfigImplConfigurationResolverImplInfo accept
orgApacheSlingCaconfigImplConfigurationResolverImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.ConfigurationResolverImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplConfigurationResolverImpl  
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplConfigurationResolverImpl ConfigBucketNames where
  applyOptionalParam req (ConfigBucketNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configBucketNames", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplConfigurationResolverImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplConfigurationResolverImpl MimePlainText


-- *** orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra MimeNoContent OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStraInfo accept
orgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationInheritanceStrategy"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra  
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra ConfigPropertyInheritancePropertyNames where
  applyOptionalParam req (ConfigPropertyInheritancePropertyNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configPropertyInheritancePropertyNames", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplDefDefaultConfigurationInheritanceStra MimePlainText


-- *** orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra MimeNoContent OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStraInfo accept
orgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.def.DefaultConfigurationPersistenceStrategy"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra  
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplDefDefaultConfigurationPersistenceStra MimePlainText


-- *** orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi MimeNoContent OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProviInfo accept
orgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.override.OsgiConfigurationOverrideProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi  
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Description where
  applyOptionalParam req (Description xs) =
    req `setQuery` toQuery ("description", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Overrides where
  applyOptionalParam req (Overrides xs) =
    req `setQuery` toQueryColl MultiParamArray ("overrides", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplOverrideOsgiConfigurationOverrideProvi MimePlainText


-- *** orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve MimeNoContent OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOveInfo accept
orgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.impl.override.SystemPropertyConfigurationOverrideProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve  
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigImplOverrideSystemPropertyConfigurationOve MimePlainText


-- *** orgApacheSlingCaconfigManagementImplConfigurationManagementSetti

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigManagementImplConfigurationManagementSetti 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti MimeNoContent OrgApacheSlingCaconfigManagementImplConfigurationManagementSettiInfo accept
orgApacheSlingCaconfigManagementImplConfigurationManagementSetti  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.management.impl.ConfigurationManagementSettingsImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti  
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti IgnorePropertyNameRegex where
  applyOptionalParam req (IgnorePropertyNameRegex xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignorePropertyNameRegex", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti ConfigCollectionPropertiesResourceNames where
  applyOptionalParam req (ConfigCollectionPropertiesResourceNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configCollectionPropertiesResourceNames", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigManagementImplConfigurationManagementSetti MimePlainText


-- *** orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour MimeNoContent OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResourInfo accept
orgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultConfigurationResourceResolvingStrategy"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour  
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour ConfigPath where
  applyOptionalParam req (ConfigPath xs) =
    req `setQuery` toQuery ("configPath", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour FallbackPaths where
  applyOptionalParam req (FallbackPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("fallbackPaths", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour ConfigCollectionInheritancePropertyNames where
  applyOptionalParam req (ConfigCollectionInheritancePropertyNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configCollectionInheritancePropertyNames", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigResourceImplDefDefaultConfigurationResour MimePlainText


-- *** orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy

-- | @POST \/system\/console\/configMgr\/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy MimeNoContent OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategyInfo accept
orgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.caconfig.resource.impl.def.DefaultContextPathStrategy"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy  
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy ConfigRefResourceNames where
  applyOptionalParam req (ConfigRefResourceNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configRefResourceNames", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy ConfigRefPropertyNames where
  applyOptionalParam req (ConfigRefPropertyNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("configRefPropertyNames", Just xs)
instance HasOptionalParam OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCaconfigResourceImplDefDefaultContextPathStrategy MimePlainText


-- *** orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.html.internal.TagsoupHtmlParser@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser MimeNoContent OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParserInfo accept
orgApacheSlingCommonsHtmlInternalTagsoupHtmlParser  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.html.internal.TagsoupHtmlParser"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser  
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser ParserFeatures where
  applyOptionalParam req (ParserFeatures xs) =
    req `setQuery` toQueryColl MultiParamArray ("parser.features", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsHtmlInternalTagsoupHtmlParser MimePlainText


-- *** orgApacheSlingCommonsLogLogManager

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.log.LogManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsLogLogManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsLogLogManager MimeNoContent OrgApacheSlingCommonsLogLogManagerInfo accept
orgApacheSlingCommonsLogLogManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.log.LogManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsLogLogManager  
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogLevel where
  applyOptionalParam req (OrgApacheSlingCommonsLogLevel xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.level", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogFile where
  applyOptionalParam req (OrgApacheSlingCommonsLogFile xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogFileNumber where
  applyOptionalParam req (OrgApacheSlingCommonsLogFileNumber xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file.number", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogFileSize where
  applyOptionalParam req (OrgApacheSlingCommonsLogFileSize xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file.size", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogPattern where
  applyOptionalParam req (OrgApacheSlingCommonsLogPattern xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.pattern", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogConfigurationFile where
  applyOptionalParam req (OrgApacheSlingCommonsLogConfigurationFile xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.configurationFile", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogPackagingDataEnabled where
  applyOptionalParam req (OrgApacheSlingCommonsLogPackagingDataEnabled xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.packagingDataEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogMaxCallerDataDepth where
  applyOptionalParam req (OrgApacheSlingCommonsLogMaxCallerDataDepth xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.maxCallerDataDepth", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogMaxOldFileCountInDump where
  applyOptionalParam req (OrgApacheSlingCommonsLogMaxOldFileCountInDump xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.maxOldFileCountInDump", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManager OrgApacheSlingCommonsLogNumOfLines where
  applyOptionalParam req (OrgApacheSlingCommonsLogNumOfLines xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.numOfLines", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsLogLogManager MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsLogLogManager MimePlainText


-- *** orgApacheSlingCommonsLogLogManagerFactoryConfig

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.log.LogManager.factory.config@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsLogLogManagerFactoryConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsLogLogManagerFactoryConfig MimeNoContent OrgApacheSlingCommonsLogLogManagerFactoryConfigInfo accept
orgApacheSlingCommonsLogLogManagerFactoryConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsLogLogManagerFactoryConfig  
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig OrgApacheSlingCommonsLogLevel where
  applyOptionalParam req (OrgApacheSlingCommonsLogLevel xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.level", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig OrgApacheSlingCommonsLogFile where
  applyOptionalParam req (OrgApacheSlingCommonsLogFile xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig OrgApacheSlingCommonsLogPattern where
  applyOptionalParam req (OrgApacheSlingCommonsLogPattern xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.pattern", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig OrgApacheSlingCommonsLogNames where
  applyOptionalParam req (OrgApacheSlingCommonsLogNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.sling.commons.log.names", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryConfig OrgApacheSlingCommonsLogAdditiv where
  applyOptionalParam req (OrgApacheSlingCommonsLogAdditiv xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.additiv", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsLogLogManagerFactoryConfig MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsLogLogManagerFactoryConfig MimePlainText


-- *** orgApacheSlingCommonsLogLogManagerFactoryWriter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.log.LogManager.factory.writer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsLogLogManagerFactoryWriter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsLogLogManagerFactoryWriter MimeNoContent OrgApacheSlingCommonsLogLogManagerFactoryWriterInfo accept
orgApacheSlingCommonsLogLogManagerFactoryWriter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.log.LogManager.factory.writer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsLogLogManagerFactoryWriter  
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter OrgApacheSlingCommonsLogFile where
  applyOptionalParam req (OrgApacheSlingCommonsLogFile xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter OrgApacheSlingCommonsLogFileNumber where
  applyOptionalParam req (OrgApacheSlingCommonsLogFileNumber xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file.number", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter OrgApacheSlingCommonsLogFileSize where
  applyOptionalParam req (OrgApacheSlingCommonsLogFileSize xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file.size", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsLogLogManagerFactoryWriter OrgApacheSlingCommonsLogFileBuffered where
  applyOptionalParam req (OrgApacheSlingCommonsLogFileBuffered xs) =
    req `setQuery` toQuery ("org.apache.sling.commons.log.file.buffered", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsLogLogManagerFactoryWriter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsLogLogManagerFactoryWriter MimePlainText


-- *** orgApacheSlingCommonsMetricsInternalLogReporter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.metrics.internal.LogReporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsMetricsInternalLogReporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsMetricsInternalLogReporter MimeNoContent OrgApacheSlingCommonsMetricsInternalLogReporterInfo accept
orgApacheSlingCommonsMetricsInternalLogReporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.metrics.internal.LogReporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsMetricsInternalLogReporter  
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Period where
  applyOptionalParam req (Period xs) =
    req `setQuery` toQuery ("period", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter TimeUnit where
  applyOptionalParam req (TimeUnit xs) =
    req `setQuery` toQuery ("timeUnit", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Level where
  applyOptionalParam req (Level xs) =
    req `setQuery` toQuery ("level", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter LoggerName where
  applyOptionalParam req (LoggerName xs) =
    req `setQuery` toQuery ("loggerName", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Prefix where
  applyOptionalParam req (Prefix xs) =
    req `setQuery` toQuery ("prefix", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter Pattern where
  applyOptionalParam req (Pattern xs) =
    req `setQuery` toQuery ("pattern", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsInternalLogReporter RegistryName where
  applyOptionalParam req (RegistryName xs) =
    req `setQuery` toQuery ("registryName", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsMetricsInternalLogReporter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsMetricsInternalLogReporter MimePlainText


-- *** orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter MimeNoContent OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporterInfo accept
orgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.metrics.rrd4j.impl.CodahaleMetricsReporter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter  
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Datasources where
  applyOptionalParam req (Datasources xs) =
    req `setQuery` toQueryColl MultiParamArray ("datasources", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Step where
  applyOptionalParam req (Step xs) =
    req `setQuery` toQuery ("step", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter Archives where
  applyOptionalParam req (Archives xs) =
    req `setQuery` toQueryColl MultiParamArray ("archives", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsMetricsRrd4jImplCodahaleMetricsReporter MimePlainText


-- *** orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl MimeNoContent OrgApacheSlingCommonsMimeInternalMimeTypeServiceImplInfo accept
orgApacheSlingCommonsMimeInternalMimeTypeServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.mime.internal.MimeTypeServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl  
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl MimeTypes where
  applyOptionalParam req (MimeTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("mime.types", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsMimeInternalMimeTypeServiceImpl MimePlainText


-- *** orgApacheSlingCommonsSchedulerImplQuartzScheduler

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.scheduler.impl.QuartzScheduler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsSchedulerImplQuartzScheduler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsSchedulerImplQuartzScheduler MimeNoContent OrgApacheSlingCommonsSchedulerImplQuartzSchedulerInfo accept
orgApacheSlingCommonsSchedulerImplQuartzScheduler  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.QuartzScheduler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsSchedulerImplQuartzScheduler  
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler PoolName where
  applyOptionalParam req (PoolName xs) =
    req `setQuery` toQuery ("poolName", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler AllowedPoolNames where
  applyOptionalParam req (AllowedPoolNames xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowedPoolNames", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler SchedulerUseleaderforsingle where
  applyOptionalParam req (SchedulerUseleaderforsingle xs) =
    req `setQuery` toQuery ("scheduler.useleaderforsingle", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler MetricsFilters where
  applyOptionalParam req (MetricsFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("metrics.filters", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplQuartzScheduler SlowThresholdMillis where
  applyOptionalParam req (SlowThresholdMillis xs) =
    req `setQuery` toQuery ("slowThresholdMillis", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsSchedulerImplQuartzScheduler MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsSchedulerImplQuartzScheduler MimePlainText


-- *** orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck MimeNoContent OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheckInfo accept
orgApacheSlingCommonsSchedulerImplSchedulerHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.scheduler.impl.SchedulerHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck  
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck MaxQuartzJobDurationAcceptable where
  applyOptionalParam req (MaxQuartzJobDurationAcceptable xs) =
    req `setQuery` toQuery ("max.quartzJob.duration.acceptable", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsSchedulerImplSchedulerHealthCheck MimePlainText


-- *** orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MimeNoContent OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactoryInfo accept
orgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.commons.threads.impl.DefaultThreadPool.factory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory  
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MinPoolSize where
  applyOptionalParam req (MinPoolSize xs) =
    req `setQuery` toQuery ("minPoolSize", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MaxPoolSize where
  applyOptionalParam req (MaxPoolSize xs) =
    req `setQuery` toQuery ("maxPoolSize", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory QueueSize where
  applyOptionalParam req (QueueSize xs) =
    req `setQuery` toQuery ("queueSize", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MaxThreadAge where
  applyOptionalParam req (MaxThreadAge xs) =
    req `setQuery` toQuery ("maxThreadAge", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory KeepAliveTime where
  applyOptionalParam req (KeepAliveTime xs) =
    req `setQuery` toQuery ("keepAliveTime", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory BlockPolicy where
  applyOptionalParam req (BlockPolicy xs) =
    req `setQuery` toQuery ("blockPolicy", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory ShutdownGraceful where
  applyOptionalParam req (ShutdownGraceful xs) =
    req `setQuery` toQuery ("shutdownGraceful", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory Daemon where
  applyOptionalParam req (Daemon xs) =
    req `setQuery` toQuery ("daemon", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory ShutdownWaitTime where
  applyOptionalParam req (ShutdownWaitTime xs) =
    req `setQuery` toQuery ("shutdownWaitTime", Just xs)
instance HasOptionalParam OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory PriorityText where
  applyOptionalParam req (PriorityText xs) =
    req `setQuery` toQuery ("priority", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingCommonsThreadsImplDefaultThreadPoolFactory MimePlainText


-- *** orgApacheSlingDatasourceDataSourceFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.datasource.DataSourceFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDatasourceDataSourceFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDatasourceDataSourceFactory MimeNoContent OrgApacheSlingDatasourceDataSourceFactoryInfo accept
orgApacheSlingDatasourceDataSourceFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.datasource.DataSourceFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDatasourceDataSourceFactory  
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DatasourceName where
  applyOptionalParam req (DatasourceName xs) =
    req `setQuery` toQuery ("datasource.name", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DatasourceSvcPropName where
  applyOptionalParam req (DatasourceSvcPropName xs) =
    req `setQuery` toQuery ("datasource.svc.prop.name", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DriverClassName where
  applyOptionalParam req (DriverClassName xs) =
    req `setQuery` toQuery ("driverClassName", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Url where
  applyOptionalParam req (Url xs) =
    req `setQuery` toQuery ("url", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Username where
  applyOptionalParam req (Username xs) =
    req `setQuery` toQuery ("username", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory Password where
  applyOptionalParam req (Password xs) =
    req `setQuery` toQuery ("password", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DefaultAutoCommit where
  applyOptionalParam req (DefaultAutoCommit xs) =
    req `setQuery` toQuery ("defaultAutoCommit", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DefaultReadOnly where
  applyOptionalParam req (DefaultReadOnly xs) =
    req `setQuery` toQuery ("defaultReadOnly", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DefaultTransactionIsolation where
  applyOptionalParam req (DefaultTransactionIsolation xs) =
    req `setQuery` toQuery ("defaultTransactionIsolation", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DefaultCatalog where
  applyOptionalParam req (DefaultCatalog xs) =
    req `setQuery` toQuery ("defaultCatalog", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MaxActive where
  applyOptionalParam req (MaxActive xs) =
    req `setQuery` toQuery ("maxActive", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MaxIdle where
  applyOptionalParam req (MaxIdle xs) =
    req `setQuery` toQuery ("maxIdle", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MinIdle where
  applyOptionalParam req (MinIdle xs) =
    req `setQuery` toQuery ("minIdle", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory InitialSize where
  applyOptionalParam req (InitialSize xs) =
    req `setQuery` toQuery ("initialSize", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MaxWait where
  applyOptionalParam req (MaxWait xs) =
    req `setQuery` toQuery ("maxWait", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MaxAge where
  applyOptionalParam req (MaxAge xs) =
    req `setQuery` toQuery ("maxAge", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory TestOnBorrow where
  applyOptionalParam req (TestOnBorrow xs) =
    req `setQuery` toQuery ("testOnBorrow", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory TestOnReturn where
  applyOptionalParam req (TestOnReturn xs) =
    req `setQuery` toQuery ("testOnReturn", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory TestWhileIdle where
  applyOptionalParam req (TestWhileIdle xs) =
    req `setQuery` toQuery ("testWhileIdle", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory ValidationQuery where
  applyOptionalParam req (ValidationQuery xs) =
    req `setQuery` toQuery ("validationQuery", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory ValidationQueryTimeout where
  applyOptionalParam req (ValidationQueryTimeout xs) =
    req `setQuery` toQuery ("validationQueryTimeout", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory TimeBetweenEvictionRunsMillis where
  applyOptionalParam req (TimeBetweenEvictionRunsMillis xs) =
    req `setQuery` toQuery ("timeBetweenEvictionRunsMillis", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory MinEvictableIdleTimeMillis where
  applyOptionalParam req (MinEvictableIdleTimeMillis xs) =
    req `setQuery` toQuery ("minEvictableIdleTimeMillis", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory ConnectionProperties where
  applyOptionalParam req (ConnectionProperties xs) =
    req `setQuery` toQuery ("connectionProperties", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory InitSql where
  applyOptionalParam req (InitSql xs) =
    req `setQuery` toQuery ("initSQL", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory JdbcInterceptors where
  applyOptionalParam req (JdbcInterceptors xs) =
    req `setQuery` toQuery ("jdbcInterceptors", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory ValidationInterval where
  applyOptionalParam req (ValidationInterval xs) =
    req `setQuery` toQuery ("validationInterval", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory LogValidationErrors where
  applyOptionalParam req (LogValidationErrors xs) =
    req `setQuery` toQuery ("logValidationErrors", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceDataSourceFactory DatasourceSvcProperties where
  applyOptionalParam req (DatasourceSvcProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("datasource.svc.properties", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDatasourceDataSourceFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDatasourceDataSourceFactory MimePlainText


-- *** orgApacheSlingDatasourceJNDIDataSourceFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.datasource.JNDIDataSourceFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDatasourceJNDIDataSourceFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDatasourceJNDIDataSourceFactory MimeNoContent OrgApacheSlingDatasourceJNDIDataSourceFactoryInfo accept
orgApacheSlingDatasourceJNDIDataSourceFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.datasource.JNDIDataSourceFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDatasourceJNDIDataSourceFactory  
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory DatasourceName where
  applyOptionalParam req (DatasourceName xs) =
    req `setQuery` toQuery ("datasource.name", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory DatasourceSvcPropName where
  applyOptionalParam req (DatasourceSvcPropName xs) =
    req `setQuery` toQuery ("datasource.svc.prop.name", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory DatasourceJndiName where
  applyOptionalParam req (DatasourceJndiName xs) =
    req `setQuery` toQuery ("datasource.jndi.name", Just xs)
instance HasOptionalParam OrgApacheSlingDatasourceJNDIDataSourceFactory JndiProperties where
  applyOptionalParam req (JndiProperties xs) =
    req `setQuery` toQueryColl MultiParamArray ("jndi.properties", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDatasourceJNDIDataSourceFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDatasourceJNDIDataSourceFactory MimePlainText


-- *** orgApacheSlingDiscoveryOakConfig

-- | @POST \/system\/console\/configMgr\/org.apache.sling.discovery.oak.Config@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDiscoveryOakConfig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDiscoveryOakConfig MimeNoContent OrgApacheSlingDiscoveryOakConfigInfo accept
orgApacheSlingDiscoveryOakConfig  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.discovery.oak.Config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDiscoveryOakConfig  
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig ConnectorPingTimeout where
  applyOptionalParam req (ConnectorPingTimeout xs) =
    req `setQuery` toQuery ("connectorPingTimeout", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig ConnectorPingInterval where
  applyOptionalParam req (ConnectorPingInterval xs) =
    req `setQuery` toQuery ("connectorPingInterval", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig DiscoveryLiteCheckInterval where
  applyOptionalParam req (DiscoveryLiteCheckInterval xs) =
    req `setQuery` toQuery ("discoveryLiteCheckInterval", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig ClusterSyncServiceTimeout where
  applyOptionalParam req (ClusterSyncServiceTimeout xs) =
    req `setQuery` toQuery ("clusterSyncServiceTimeout", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig ClusterSyncServiceInterval where
  applyOptionalParam req (ClusterSyncServiceInterval xs) =
    req `setQuery` toQuery ("clusterSyncServiceInterval", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig EnableSyncToken where
  applyOptionalParam req (EnableSyncToken xs) =
    req `setQuery` toQuery ("enableSyncToken", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig MinEventDelay where
  applyOptionalParam req (MinEventDelay xs) =
    req `setQuery` toQuery ("minEventDelay", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig SocketConnectTimeout where
  applyOptionalParam req (SocketConnectTimeout xs) =
    req `setQuery` toQuery ("socketConnectTimeout", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig SoTimeout where
  applyOptionalParam req (SoTimeout xs) =
    req `setQuery` toQuery ("soTimeout", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig TopologyConnectorUrls where
  applyOptionalParam req (TopologyConnectorUrls xs) =
    req `setQuery` toQueryColl MultiParamArray ("topologyConnectorUrls", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig TopologyConnectorWhitelist where
  applyOptionalParam req (TopologyConnectorWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("topologyConnectorWhitelist", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig AutoStopLocalLoopEnabled where
  applyOptionalParam req (AutoStopLocalLoopEnabled xs) =
    req `setQuery` toQuery ("autoStopLocalLoopEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig GzipConnectorRequestsEnabled where
  applyOptionalParam req (GzipConnectorRequestsEnabled xs) =
    req `setQuery` toQuery ("gzipConnectorRequestsEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig HmacEnabled where
  applyOptionalParam req (HmacEnabled xs) =
    req `setQuery` toQuery ("hmacEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig EnableEncryption where
  applyOptionalParam req (EnableEncryption xs) =
    req `setQuery` toQuery ("enableEncryption", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig SharedKey where
  applyOptionalParam req (SharedKey xs) =
    req `setQuery` toQuery ("sharedKey", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig HmacSharedKeyTtl where
  applyOptionalParam req (HmacSharedKeyTtl xs) =
    req `setQuery` toQuery ("hmacSharedKeyTTL", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig BackoffStandbyFactor where
  applyOptionalParam req (BackoffStandbyFactor xs) =
    req `setQuery` toQuery ("backoffStandbyFactor", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakConfig BackoffStableFactor where
  applyOptionalParam req (BackoffStableFactor xs) =
    req `setQuery` toQuery ("backoffStableFactor", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDiscoveryOakConfig MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDiscoveryOakConfig MimePlainText


-- *** orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck MimeNoContent OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheckInfo accept
orgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.discovery.oak.SynchronizedClocksHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck  
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDiscoveryOakSynchronizedClocksHealthCheck MimePlainText


-- *** orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto MimeNoContent OrgApacheSlingDistributionAgentImplForwardDistributionAgentFactoInfo accept
orgApacheSlingDistributionAgentImplForwardDistributionAgentFacto  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ForwardDistributionAgentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Title where
  applyOptionalParam req (Title xs) =
    req `setQuery` toQuery ("title", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Details where
  applyOptionalParam req (Details xs) =
    req `setQuery` toQuery ("details", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto LogLevel where
  applyOptionalParam req (LogLevel xs) =
    req `setQuery` toQuery ("log.level", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto AllowedRoots where
  applyOptionalParam req (AllowedRoots xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowed.roots", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto QueueProcessingEnabled where
  applyOptionalParam req (QueueProcessingEnabled xs) =
    req `setQuery` toQuery ("queue.processing.enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto PackageImporterEndpoints where
  applyOptionalParam req (PackageImporterEndpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("packageImporter.endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto PassiveQueues where
  applyOptionalParam req (PassiveQueues xs) =
    req `setQuery` toQueryColl MultiParamArray ("passiveQueues", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto PriorityQueues where
  applyOptionalParam req (PriorityQueues xs) =
    req `setQuery` toQueryColl MultiParamArray ("priorityQueues", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto RetryStrategy where
  applyOptionalParam req (RetryStrategy xs) =
    req `setQuery` toQuery ("retry.strategy", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto RetryAttempts where
  applyOptionalParam req (RetryAttempts xs) =
    req `setQuery` toQuery ("retry.attempts", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto RequestAuthorizationStrategyTarget where
  applyOptionalParam req (RequestAuthorizationStrategyTarget xs) =
    req `setQuery` toQuery ("requestAuthorizationStrategy.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto TriggersTarget where
  applyOptionalParam req (TriggersTarget xs) =
    req `setQuery` toQuery ("triggers.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto QueueProvider where
  applyOptionalParam req (QueueProvider xs) =
    req `setQuery` toQuery ("queue.provider", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto AsyncDelivery where
  applyOptionalParam req (AsyncDelivery xs) =
    req `setQuery` toQuery ("async.delivery", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto HttpConnTimeout where
  applyOptionalParam req (HttpConnTimeout xs) =
    req `setQuery` toQuery ("http.conn.timeout", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplForwardDistributionAgentFacto MimePlainText


-- *** orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA MimeNoContent OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestAInfo accept
orgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.PrivilegeDistributionRequestAuthorizationStrategyFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA JcrPrivilege where
  applyOptionalParam req (JcrPrivilege xs) =
    req `setQuery` toQuery ("jcrPrivilege", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplPrivilegeDistributionRequestA MimePlainText


-- *** orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory MimeNoContent OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactoryInfo accept
orgApacheSlingDistributionAgentImplQueueDistributionAgentFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.QueueDistributionAgentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Title where
  applyOptionalParam req (Title xs) =
    req `setQuery` toQuery ("title", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Details where
  applyOptionalParam req (Details xs) =
    req `setQuery` toQuery ("details", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory LogLevel where
  applyOptionalParam req (LogLevel xs) =
    req `setQuery` toQuery ("log.level", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory AllowedRoots where
  applyOptionalParam req (AllowedRoots xs) =
    req `setQuery` toQueryColl MultiParamArray ("allowed.roots", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory RequestAuthorizationStrategyTarget where
  applyOptionalParam req (RequestAuthorizationStrategyTarget xs) =
    req `setQuery` toQuery ("requestAuthorizationStrategy.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory QueueProviderFactoryTarget where
  applyOptionalParam req (QueueProviderFactoryTarget xs) =
    req `setQuery` toQuery ("queueProviderFactory.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory TriggersTarget where
  applyOptionalParam req (TriggersTarget xs) =
    req `setQuery` toQuery ("triggers.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory PriorityQueues where
  applyOptionalParam req (PriorityQueues xs) =
    req `setQuery` toQueryColl MultiParamArray ("priorityQueues", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplQueueDistributionAgentFactory MimePlainText


-- *** orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto MimeNoContent OrgApacheSlingDistributionAgentImplReverseDistributionAgentFactoInfo accept
orgApacheSlingDistributionAgentImplReverseDistributionAgentFacto  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.ReverseDistributionAgentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Title where
  applyOptionalParam req (Title xs) =
    req `setQuery` toQuery ("title", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Details where
  applyOptionalParam req (Details xs) =
    req `setQuery` toQuery ("details", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto LogLevel where
  applyOptionalParam req (LogLevel xs) =
    req `setQuery` toQuery ("log.level", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto QueueProcessingEnabled where
  applyOptionalParam req (QueueProcessingEnabled xs) =
    req `setQuery` toQuery ("queue.processing.enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto PackageExporterEndpoints where
  applyOptionalParam req (PackageExporterEndpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("packageExporter.endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto PullItems where
  applyOptionalParam req (PullItems xs) =
    req `setQuery` toQuery ("pull.items", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto HttpConnTimeout where
  applyOptionalParam req (HttpConnTimeout xs) =
    req `setQuery` toQuery ("http.conn.timeout", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto RequestAuthorizationStrategyTarget where
  applyOptionalParam req (RequestAuthorizationStrategyTarget xs) =
    req `setQuery` toQuery ("requestAuthorizationStrategy.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto TriggersTarget where
  applyOptionalParam req (TriggersTarget xs) =
    req `setQuery` toQuery ("triggers.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplReverseDistributionAgentFacto MimePlainText


-- *** orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor MimeNoContent OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactorInfo accept
orgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SimpleDistributionAgentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Title where
  applyOptionalParam req (Title xs) =
    req `setQuery` toQuery ("title", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Details where
  applyOptionalParam req (Details xs) =
    req `setQuery` toQuery ("details", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor LogLevel where
  applyOptionalParam req (LogLevel xs) =
    req `setQuery` toQuery ("log.level", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor QueueProcessingEnabled where
  applyOptionalParam req (QueueProcessingEnabled xs) =
    req `setQuery` toQuery ("queue.processing.enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor PackageExporterTarget where
  applyOptionalParam req (PackageExporterTarget xs) =
    req `setQuery` toQuery ("packageExporter.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor PackageImporterTarget where
  applyOptionalParam req (PackageImporterTarget xs) =
    req `setQuery` toQuery ("packageImporter.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor RequestAuthorizationStrategyTarget where
  applyOptionalParam req (RequestAuthorizationStrategyTarget xs) =
    req `setQuery` toQuery ("requestAuthorizationStrategy.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor TriggersTarget where
  applyOptionalParam req (TriggersTarget xs) =
    req `setQuery` toQuery ("triggers.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplSimpleDistributionAgentFactor MimePlainText


-- *** orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory MimeNoContent OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactoryInfo accept
orgApacheSlingDistributionAgentImplSyncDistributionAgentFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.agent.impl.SyncDistributionAgentFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory  
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Title where
  applyOptionalParam req (Title xs) =
    req `setQuery` toQuery ("title", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Details where
  applyOptionalParam req (Details xs) =
    req `setQuery` toQuery ("details", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory LogLevel where
  applyOptionalParam req (LogLevel xs) =
    req `setQuery` toQuery ("log.level", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory QueueProcessingEnabled where
  applyOptionalParam req (QueueProcessingEnabled xs) =
    req `setQuery` toQuery ("queue.processing.enabled", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory PassiveQueues where
  applyOptionalParam req (PassiveQueues xs) =
    req `setQuery` toQueryColl MultiParamArray ("passiveQueues", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory PackageExporterEndpoints where
  applyOptionalParam req (PackageExporterEndpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("packageExporter.endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory PackageImporterEndpoints where
  applyOptionalParam req (PackageImporterEndpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("packageImporter.endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory RetryStrategy where
  applyOptionalParam req (RetryStrategy xs) =
    req `setQuery` toQuery ("retry.strategy", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory RetryAttempts where
  applyOptionalParam req (RetryAttempts xs) =
    req `setQuery` toQuery ("retry.attempts", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory PullItems where
  applyOptionalParam req (PullItems xs) =
    req `setQuery` toQuery ("pull.items", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory HttpConnTimeout where
  applyOptionalParam req (HttpConnTimeout xs) =
    req `setQuery` toQuery ("http.conn.timeout", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory RequestAuthorizationStrategyTarget where
  applyOptionalParam req (RequestAuthorizationStrategyTarget xs) =
    req `setQuery` toQuery ("requestAuthorizationStrategy.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory TriggersTarget where
  applyOptionalParam req (TriggersTarget xs) =
    req `setQuery` toQuery ("triggers.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionAgentImplSyncDistributionAgentFactory MimePlainText


-- *** orgApacheSlingDistributionMonitorDistributionQueueHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionMonitorDistributionQueueHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck MimeNoContent OrgApacheSlingDistributionMonitorDistributionQueueHealthCheckInfo accept
orgApacheSlingDistributionMonitorDistributionQueueHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.monitor.DistributionQueueHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck  
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck NumberOfRetriesAllowed where
  applyOptionalParam req (NumberOfRetriesAllowed xs) =
    req `setQuery` toQuery ("numberOfRetriesAllowed", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionMonitorDistributionQueueHealthCheck MimePlainText


-- *** orgApacheSlingDistributionPackagingImplExporterAgentDistributio

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplExporterAgentDistributio 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplExporterAgentDistributio MimeNoContent OrgApacheSlingDistributionPackagingImplExporterAgentDistributioInfo accept
orgApacheSlingDistributionPackagingImplExporterAgentDistributio  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.AgentDistributionPackageExporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplExporterAgentDistributio  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio Queue where
  applyOptionalParam req (Queue xs) =
    req `setQuery` toQuery ("queue", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio DropInvalidItems where
  applyOptionalParam req (DropInvalidItems xs) =
    req `setQuery` toQuery ("drop.invalid.items", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterAgentDistributio AgentTarget where
  applyOptionalParam req (AgentTarget xs) =
    req `setQuery` toQuery ("agent.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplExporterAgentDistributio MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplExporterAgentDistributio MimePlainText


-- *** orgApacheSlingDistributionPackagingImplExporterLocalDistributio

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplExporterLocalDistributio 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplExporterLocalDistributio MimeNoContent OrgApacheSlingDistributionPackagingImplExporterLocalDistributioInfo accept
orgApacheSlingDistributionPackagingImplExporterLocalDistributio  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.LocalDistributionPackageExporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplExporterLocalDistributio  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterLocalDistributio PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplExporterLocalDistributio MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplExporterLocalDistributio MimePlainText


-- *** orgApacheSlingDistributionPackagingImplExporterRemoteDistributi

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplExporterRemoteDistributi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi MimeNoContent OrgApacheSlingDistributionPackagingImplExporterRemoteDistributiInfo accept
orgApacheSlingDistributionPackagingImplExporterRemoteDistributi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.exporter.RemoteDistributionPackageExporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi Endpoints where
  applyOptionalParam req (Endpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi PullItems where
  applyOptionalParam req (PullItems xs) =
    req `setQuery` toQuery ("pull.items", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplExporterRemoteDistributi MimePlainText


-- *** orgApacheSlingDistributionPackagingImplImporterLocalDistributio

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplImporterLocalDistributio 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplImporterLocalDistributio MimeNoContent OrgApacheSlingDistributionPackagingImplImporterLocalDistributioInfo accept
orgApacheSlingDistributionPackagingImplImporterLocalDistributio  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.LocalDistributionPackageImporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplImporterLocalDistributio  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterLocalDistributio PackageBuilderTarget where
  applyOptionalParam req (PackageBuilderTarget xs) =
    req `setQuery` toQuery ("packageBuilder.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplImporterLocalDistributio MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplImporterLocalDistributio MimePlainText


-- *** orgApacheSlingDistributionPackagingImplImporterRemoteDistributi

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplImporterRemoteDistributi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi MimeNoContent OrgApacheSlingDistributionPackagingImplImporterRemoteDistributiInfo accept
orgApacheSlingDistributionPackagingImplImporterRemoteDistributi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RemoteDistributionPackageImporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi Endpoints where
  applyOptionalParam req (Endpoints xs) =
    req `setQuery` toQueryColl MultiParamArray ("endpoints", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplImporterRemoteDistributi MimePlainText


-- *** orgApacheSlingDistributionPackagingImplImporterRepositoryDistri

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionPackagingImplImporterRepositoryDistri 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri MimeNoContent OrgApacheSlingDistributionPackagingImplImporterRepositoryDistriInfo accept
orgApacheSlingDistributionPackagingImplImporterRepositoryDistri  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.packaging.impl.importer.RepositoryDistributionPackageImporterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri  
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("service.name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri PrivilegeName where
  applyOptionalParam req (PrivilegeName xs) =
    req `setQuery` toQuery ("privilege.name", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionPackagingImplImporterRepositoryDistri MimePlainText


-- *** orgApacheSlingDistributionResourcesImplDistributionConfiguration

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionResourcesImplDistributionConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionResourcesImplDistributionConfiguration MimeNoContent OrgApacheSlingDistributionResourcesImplDistributionConfigurationInfo accept
orgApacheSlingDistributionResourcesImplDistributionConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionConfigurationResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionResourcesImplDistributionConfiguration  
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration ProviderRoots where
  applyOptionalParam req (ProviderRoots xs) =
    req `setQuery` toQuery ("provider.roots", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionConfiguration Kind where
  applyOptionalParam req (Kind xs) =
    req `setQuery` toQuery ("kind", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionResourcesImplDistributionConfiguration MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionResourcesImplDistributionConfiguration MimePlainText


-- *** orgApacheSlingDistributionResourcesImplDistributionServiceResour

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionResourcesImplDistributionServiceResour 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionResourcesImplDistributionServiceResour MimeNoContent OrgApacheSlingDistributionResourcesImplDistributionServiceResourInfo accept
orgApacheSlingDistributionResourcesImplDistributionServiceResour  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.resources.impl.DistributionServiceResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionResourcesImplDistributionServiceResour  
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour ProviderRoots where
  applyOptionalParam req (ProviderRoots xs) =
    req `setQuery` toQuery ("provider.roots", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionResourcesImplDistributionServiceResour Kind where
  applyOptionalParam req (Kind xs) =
    req `setQuery` toQuery ("kind", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionResourcesImplDistributionServiceResour MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionResourcesImplDistributionServiceResour MimePlainText


-- *** orgApacheSlingDistributionSerializationImplDistributionPackageBu

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionSerializationImplDistributionPackageBu 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionSerializationImplDistributionPackageBu MimeNoContent OrgApacheSlingDistributionSerializationImplDistributionPackageBuInfo accept
orgApacheSlingDistributionSerializationImplDistributionPackageBu  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.DistributionPackageBuilderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionSerializationImplDistributionPackageBu  
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu FormatTarget where
  applyOptionalParam req (FormatTarget xs) =
    req `setQuery` toQuery ("format.target", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu TempFsFolder where
  applyOptionalParam req (TempFsFolder xs) =
    req `setQuery` toQuery ("tempFsFolder", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu FileThreshold where
  applyOptionalParam req (FileThreshold xs) =
    req `setQuery` toQuery ("fileThreshold", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu MemoryUnit where
  applyOptionalParam req (MemoryUnit xs) =
    req `setQuery` toQuery ("memoryUnit", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu UseOffHeapMemory where
  applyOptionalParam req (UseOffHeapMemory xs) =
    req `setQuery` toQuery ("useOffHeapMemory", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu DigestAlgorithm where
  applyOptionalParam req (DigestAlgorithm xs) =
    req `setQuery` toQuery ("digestAlgorithm", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu MonitoringQueueSize where
  applyOptionalParam req (MonitoringQueueSize xs) =
    req `setQuery` toQuery ("monitoringQueueSize", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu CleanupDelay where
  applyOptionalParam req (CleanupDelay xs) =
    req `setQuery` toQuery ("cleanupDelay", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu PackageFilters where
  applyOptionalParam req (PackageFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("package.filters", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplDistributionPackageBu PropertyFilters where
  applyOptionalParam req (PropertyFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("property.filters", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionSerializationImplDistributionPackageBu MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionSerializationImplDistributionPackageBu MimePlainText


-- *** orgApacheSlingDistributionSerializationImplVltVaultDistribution

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionSerializationImplVltVaultDistribution 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionSerializationImplVltVaultDistribution MimeNoContent OrgApacheSlingDistributionSerializationImplVltVaultDistributionInfo accept
orgApacheSlingDistributionSerializationImplVltVaultDistribution  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.serialization.impl.vlt.VaultDistributionPackageBuilderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionSerializationImplVltVaultDistribution  
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution ParamType where
  applyOptionalParam req (ParamType xs) =
    req `setQuery` toQuery ("type", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution ImportMode where
  applyOptionalParam req (ImportMode xs) =
    req `setQuery` toQuery ("importMode", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution AclHandling where
  applyOptionalParam req (AclHandling xs) =
    req `setQuery` toQuery ("aclHandling", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution PackageRootsText where
  applyOptionalParam req (PackageRootsText xs) =
    req `setQuery` toQuery ("package.roots", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution PackageFilters where
  applyOptionalParam req (PackageFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("package.filters", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution PropertyFilters where
  applyOptionalParam req (PropertyFilters xs) =
    req `setQuery` toQueryColl MultiParamArray ("property.filters", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution TempFsFolder where
  applyOptionalParam req (TempFsFolder xs) =
    req `setQuery` toQuery ("tempFsFolder", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution UseBinaryReferences where
  applyOptionalParam req (UseBinaryReferences xs) =
    req `setQuery` toQuery ("useBinaryReferences", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution AutoSaveThreshold where
  applyOptionalParam req (AutoSaveThreshold xs) =
    req `setQuery` toQuery ("autoSaveThreshold", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution CleanupDelay where
  applyOptionalParam req (CleanupDelay xs) =
    req `setQuery` toQuery ("cleanupDelay", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution FileThreshold where
  applyOptionalParam req (FileThreshold xs) =
    req `setQuery` toQuery ("fileThreshold", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution MegaBytes where
  applyOptionalParam req (MegaBytes xs) =
    req `setQuery` toQuery ("MEGA_BYTES", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution UseOffHeapMemory where
  applyOptionalParam req (UseOffHeapMemory xs) =
    req `setQuery` toQuery ("useOffHeapMemory", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution DigestAlgorithm where
  applyOptionalParam req (DigestAlgorithm xs) =
    req `setQuery` toQuery ("digestAlgorithm", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution MonitoringQueueSize where
  applyOptionalParam req (MonitoringQueueSize xs) =
    req `setQuery` toQuery ("monitoringQueueSize", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution PathsMapping where
  applyOptionalParam req (PathsMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("pathsMapping", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionSerializationImplVltVaultDistribution StrictImport where
  applyOptionalParam req (StrictImport xs) =
    req `setQuery` toQuery ("strictImport", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionSerializationImplVltVaultDistribution MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionSerializationImplVltVaultDistribution MimePlainText


-- *** orgApacheSlingDistributionTransportImplUserCredentialsDistributi

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTransportImplUserCredentialsDistributi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTransportImplUserCredentialsDistributi MimeNoContent OrgApacheSlingDistributionTransportImplUserCredentialsDistributiInfo accept
orgApacheSlingDistributionTransportImplUserCredentialsDistributi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.transport.impl.UserCredentialsDistributionTransportSecretProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTransportImplUserCredentialsDistributi  
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Username where
  applyOptionalParam req (Username xs) =
    req `setQuery` toQuery ("username", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTransportImplUserCredentialsDistributi Password where
  applyOptionalParam req (Password xs) =
    req `setQuery` toQuery ("password", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTransportImplUserCredentialsDistributi MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTransportImplUserCredentialsDistributi MimePlainText


-- *** orgApacheSlingDistributionTriggerImplDistributionEventDistribute

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplDistributionEventDistribute 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplDistributionEventDistribute MimeNoContent OrgApacheSlingDistributionTriggerImplDistributionEventDistributeInfo accept
orgApacheSlingDistributionTriggerImplDistributionEventDistribute  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.DistributionEventDistributeDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplDistributionEventDistribute  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplDistributionEventDistribute PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplDistributionEventDistribute MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplDistributionEventDistribute MimePlainText


-- *** orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger MimeNoContent OrgApacheSlingDistributionTriggerImplJcrEventDistributionTriggerInfo accept
orgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.JcrEventDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger IgnoredPathsPatterns where
  applyOptionalParam req (IgnoredPathsPatterns xs) =
    req `setQuery` toQueryColl MultiParamArray ("ignoredPathsPatterns", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger Deep where
  applyOptionalParam req (Deep xs) =
    req `setQuery` toQuery ("deep", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplJcrEventDistributionTrigger MimePlainText


-- *** orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi MimeNoContent OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributiInfo accept
orgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.PersistedJcrEventDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi NuggetsPath where
  applyOptionalParam req (NuggetsPath xs) =
    req `setQuery` toQuery ("nuggetsPath", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplPersistedJcrEventDistributi MimePlainText


-- *** orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig MimeNoContent OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrigInfo accept
orgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.RemoteEventDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig Endpoint where
  applyOptionalParam req (Endpoint xs) =
    req `setQuery` toQuery ("endpoint", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig TransportSecretProviderTarget where
  applyOptionalParam req (TransportSecretProviderTarget xs) =
    req `setQuery` toQuery ("transportSecretProvider.target", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplRemoteEventDistributionTrig MimePlainText


-- *** orgApacheSlingDistributionTriggerImplResourceEventDistributionTr

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplResourceEventDistributionTr 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr MimeNoContent OrgApacheSlingDistributionTriggerImplResourceEventDistributionTrInfo accept
orgApacheSlingDistributionTriggerImplResourceEventDistributionTr  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ResourceEventDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplResourceEventDistributionTr MimePlainText


-- *** orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge

-- | @POST \/system\/console\/configMgr\/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge MimeNoContent OrgApacheSlingDistributionTriggerImplScheduledDistributionTriggeInfo accept
orgApacheSlingDistributionTriggerImplScheduledDistributionTrigge  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.distribution.trigger.impl.ScheduledDistributionTriggerFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge  
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge Seconds where
  applyOptionalParam req (Seconds xs) =
    req `setQuery` toQuery ("seconds", Just xs)
instance HasOptionalParam OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge ServiceName where
  applyOptionalParam req (ServiceName xs) =
    req `setQuery` toQuery ("serviceName", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingDistributionTriggerImplScheduledDistributionTrigge MimePlainText


-- *** orgApacheSlingEngineImplAuthSlingAuthenticator

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.impl.auth.SlingAuthenticator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineImplAuthSlingAuthenticator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineImplAuthSlingAuthenticator MimeNoContent OrgApacheSlingEngineImplAuthSlingAuthenticatorInfo accept
orgApacheSlingEngineImplAuthSlingAuthenticator  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.impl.auth.SlingAuthenticator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineImplAuthSlingAuthenticator  
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator OsgiHttpWhiteboardContextSelect where
  applyOptionalParam req (OsgiHttpWhiteboardContextSelect xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.context.select", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator OsgiHttpWhiteboardListener where
  applyOptionalParam req (OsgiHttpWhiteboardListener xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.listener", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthSudoCookie where
  applyOptionalParam req (AuthSudoCookie xs) =
    req `setQuery` toQuery ("auth.sudo.cookie", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthSudoParameter where
  applyOptionalParam req (AuthSudoParameter xs) =
    req `setQuery` toQuery ("auth.sudo.parameter", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthAnnonymous where
  applyOptionalParam req (AuthAnnonymous xs) =
    req `setQuery` toQuery ("auth.annonymous", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator SlingAuthRequirements[Text] where
  applyOptionalParam req (SlingAuthRequirements[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.auth.requirements", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator SlingAuthAnonymousUser where
  applyOptionalParam req (SlingAuthAnonymousUser xs) =
    req `setQuery` toQuery ("sling.auth.anonymous.user", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator SlingAuthAnonymousPassword where
  applyOptionalParam req (SlingAuthAnonymousPassword xs) =
    req `setQuery` toQuery ("sling.auth.anonymous.password", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthHttp where
  applyOptionalParam req (AuthHttp xs) =
    req `setQuery` toQuery ("auth.http", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthHttpRealm where
  applyOptionalParam req (AuthHttpRealm xs) =
    req `setQuery` toQuery ("auth.http.realm", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplAuthSlingAuthenticator AuthUriSuffix where
  applyOptionalParam req (AuthUriSuffix xs) =
    req `setQuery` toQueryColl MultiParamArray ("auth.uri.suffix", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineImplAuthSlingAuthenticator MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineImplAuthSlingAuthenticator MimePlainText


-- *** orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter MimeNoContent OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilterInfo accept
orgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.impl.debug.RequestProgressTrackerLogFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter  
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter Extensions where
  applyOptionalParam req (Extensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("extensions", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter MinDurationMs where
  applyOptionalParam req (MinDurationMs xs) =
    req `setQuery` toQuery ("minDurationMs", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter MaxDurationMs where
  applyOptionalParam req (MaxDurationMs xs) =
    req `setQuery` toQuery ("maxDurationMs", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter CompactLogFormat where
  applyOptionalParam req (CompactLogFormat xs) =
    req `setQuery` toQuery ("compactLogFormat", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineImplDebugRequestProgressTrackerLogFilter MimePlainText


-- *** orgApacheSlingEngineImplLogRequestLogger

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.impl.log.RequestLogger@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineImplLogRequestLogger 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineImplLogRequestLogger MimeNoContent OrgApacheSlingEngineImplLogRequestLoggerInfo accept
orgApacheSlingEngineImplLogRequestLogger  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLogger"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineImplLogRequestLogger  
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger RequestLogOutput where
  applyOptionalParam req (RequestLogOutput xs) =
    req `setQuery` toQuery ("request.log.output", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger RequestLogOutputtype where
  applyOptionalParam req (RequestLogOutputtype xs) =
    req `setQuery` toQuery ("request.log.outputtype", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger RequestLogEnabled where
  applyOptionalParam req (RequestLogEnabled xs) =
    req `setQuery` toQuery ("request.log.enabled", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger AccessLogOutput where
  applyOptionalParam req (AccessLogOutput xs) =
    req `setQuery` toQuery ("access.log.output", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger AccessLogOutputtype where
  applyOptionalParam req (AccessLogOutputtype xs) =
    req `setQuery` toQuery ("access.log.outputtype", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLogger AccessLogEnabled where
  applyOptionalParam req (AccessLogEnabled xs) =
    req `setQuery` toQuery ("access.log.enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineImplLogRequestLogger MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineImplLogRequestLogger MimePlainText


-- *** orgApacheSlingEngineImplLogRequestLoggerService

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.impl.log.RequestLoggerService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineImplLogRequestLoggerService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineImplLogRequestLoggerService MimeNoContent OrgApacheSlingEngineImplLogRequestLoggerServiceInfo accept
orgApacheSlingEngineImplLogRequestLoggerService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.impl.log.RequestLoggerService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineImplLogRequestLoggerService  
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService RequestLogServiceFormat where
  applyOptionalParam req (RequestLogServiceFormat xs) =
    req `setQuery` toQuery ("request.log.service.format", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService RequestLogServiceOutput where
  applyOptionalParam req (RequestLogServiceOutput xs) =
    req `setQuery` toQuery ("request.log.service.output", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService RequestLogServiceOutputtype where
  applyOptionalParam req (RequestLogServiceOutputtype xs) =
    req `setQuery` toQuery ("request.log.service.outputtype", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplLogRequestLoggerService RequestLogServiceOnentry where
  applyOptionalParam req (RequestLogServiceOnentry xs) =
    req `setQuery` toQuery ("request.log.service.onentry", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineImplLogRequestLoggerService MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineImplLogRequestLoggerService MimePlainText


-- *** orgApacheSlingEngineImplSlingMainServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.impl.SlingMainServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineImplSlingMainServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineImplSlingMainServlet MimeNoContent OrgApacheSlingEngineImplSlingMainServletInfo accept
orgApacheSlingEngineImplSlingMainServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.impl.SlingMainServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineImplSlingMainServlet  
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingMaxCalls where
  applyOptionalParam req (SlingMaxCalls xs) =
    req `setQuery` toQuery ("sling.max.calls", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingMaxInclusions where
  applyOptionalParam req (SlingMaxInclusions xs) =
    req `setQuery` toQuery ("sling.max.inclusions", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingTraceAllow where
  applyOptionalParam req (SlingTraceAllow xs) =
    req `setQuery` toQuery ("sling.trace.allow", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingMaxRecordRequests where
  applyOptionalParam req (SlingMaxRecordRequests xs) =
    req `setQuery` toQuery ("sling.max.record.requests", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingStorePatternRequests where
  applyOptionalParam req (SlingStorePatternRequests xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.store.pattern.requests", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingServerinfo where
  applyOptionalParam req (SlingServerinfo xs) =
    req `setQuery` toQuery ("sling.serverinfo", Just xs)
instance HasOptionalParam OrgApacheSlingEngineImplSlingMainServlet SlingAdditionalResponseHeaders where
  applyOptionalParam req (SlingAdditionalResponseHeaders xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.additional.response.headers", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineImplSlingMainServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineImplSlingMainServlet MimePlainText


-- *** orgApacheSlingEngineParameters

-- | @POST \/system\/console\/configMgr\/org.apache.sling.engine.parameters@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEngineParameters 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEngineParameters MimeNoContent OrgApacheSlingEngineParametersInfo accept
orgApacheSlingEngineParameters  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.engine.parameters"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEngineParameters  
instance HasOptionalParam OrgApacheSlingEngineParameters Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters SlingDefaultParameterEncoding where
  applyOptionalParam req (SlingDefaultParameterEncoding xs) =
    req `setQuery` toQuery ("sling.default.parameter.encoding", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters SlingDefaultMaxParameters where
  applyOptionalParam req (SlingDefaultMaxParameters xs) =
    req `setQuery` toQuery ("sling.default.max.parameters", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters FileLocation where
  applyOptionalParam req (FileLocation xs) =
    req `setQuery` toQuery ("file.location", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters FileThreshold where
  applyOptionalParam req (FileThreshold xs) =
    req `setQuery` toQuery ("file.threshold", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters FileMax where
  applyOptionalParam req (FileMax xs) =
    req `setQuery` toQuery ("file.max", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters RequestMax where
  applyOptionalParam req (RequestMax xs) =
    req `setQuery` toQuery ("request.max", Just xs)
instance HasOptionalParam OrgApacheSlingEngineParameters SlingDefaultParameterCheckForAdditionalContainerParameters where
  applyOptionalParam req (SlingDefaultParameterCheckForAdditionalContainerParameters xs) =
    req `setQuery` toQuery ("sling.default.parameter.checkForAdditionalContainerParameters", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEngineParameters MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEngineParameters MimePlainText


-- *** orgApacheSlingEventImplEventingThreadPool

-- | @POST \/system\/console\/configMgr\/org.apache.sling.event.impl.EventingThreadPool@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEventImplEventingThreadPool 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEventImplEventingThreadPool MimeNoContent OrgApacheSlingEventImplEventingThreadPoolInfo accept
orgApacheSlingEventImplEventingThreadPool  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.event.impl.EventingThreadPool"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEventImplEventingThreadPool  
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplEventingThreadPool MinPoolSize where
  applyOptionalParam req (MinPoolSize xs) =
    req `setQuery` toQuery ("minPoolSize", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEventImplEventingThreadPool MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEventImplEventingThreadPool MimePlainText


-- *** orgApacheSlingEventImplJobsDefaultJobManager

-- | @POST \/system\/console\/configMgr\/org.apache.sling.event.impl.jobs.DefaultJobManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEventImplJobsDefaultJobManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEventImplJobsDefaultJobManager MimeNoContent OrgApacheSlingEventImplJobsDefaultJobManagerInfo accept
orgApacheSlingEventImplJobsDefaultJobManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.event.impl.jobs.DefaultJobManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEventImplJobsDefaultJobManager  
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager QueuePriority where
  applyOptionalParam req (QueuePriority xs) =
    req `setQuery` toQuery ("queue.priority", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager QueueRetries where
  applyOptionalParam req (QueueRetries xs) =
    req `setQuery` toQuery ("queue.retries", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager QueueRetrydelay where
  applyOptionalParam req (QueueRetrydelay xs) =
    req `setQuery` toQuery ("queue.retrydelay", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsDefaultJobManager QueueMaxparallel where
  applyOptionalParam req (QueueMaxparallel xs) =
    req `setQuery` toQuery ("queue.maxparallel", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEventImplJobsDefaultJobManager MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEventImplJobsDefaultJobManager MimePlainText


-- *** orgApacheSlingEventImplJobsJcrPersistenceHandler

-- | @POST \/system\/console\/configMgr\/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEventImplJobsJcrPersistenceHandler 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEventImplJobsJcrPersistenceHandler MimeNoContent OrgApacheSlingEventImplJobsJcrPersistenceHandlerInfo accept
orgApacheSlingEventImplJobsJcrPersistenceHandler  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.event.impl.jobs.jcr.PersistenceHandler"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEventImplJobsJcrPersistenceHandler  
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler JobConsumermanagerDisableDistribution where
  applyOptionalParam req (JobConsumermanagerDisableDistribution xs) =
    req `setQuery` toQuery ("job.consumermanager.disableDistribution", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler StartupDelay where
  applyOptionalParam req (StartupDelay xs) =
    req `setQuery` toQuery ("startup.delay", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJcrPersistenceHandler CleanupPeriod where
  applyOptionalParam req (CleanupPeriod xs) =
    req `setQuery` toQuery ("cleanup.period", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEventImplJobsJcrPersistenceHandler MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEventImplJobsJcrPersistenceHandler MimePlainText


-- *** orgApacheSlingEventImplJobsJobConsumerManager

-- | @POST \/system\/console\/configMgr\/org.apache.sling.event.impl.jobs.JobConsumerManager@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEventImplJobsJobConsumerManager 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEventImplJobsJobConsumerManager MimeNoContent OrgApacheSlingEventImplJobsJobConsumerManagerInfo accept
orgApacheSlingEventImplJobsJobConsumerManager  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.event.impl.jobs.JobConsumerManager"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEventImplJobsJobConsumerManager  
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager OrgApacheSlingInstallerConfigurationPersist where
  applyOptionalParam req (OrgApacheSlingInstallerConfigurationPersist xs) =
    req `setQuery` toQuery ("org.apache.sling.installer.configuration.persist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager JobConsumermanagerWhitelist where
  applyOptionalParam req (JobConsumermanagerWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("job.consumermanager.whitelist", Just xs)
instance HasOptionalParam OrgApacheSlingEventImplJobsJobConsumerManager JobConsumermanagerBlacklist where
  applyOptionalParam req (JobConsumermanagerBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("job.consumermanager.blacklist", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEventImplJobsJobConsumerManager MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEventImplJobsJobConsumerManager MimePlainText


-- *** orgApacheSlingEventJobsQueueConfiguration

-- | @POST \/system\/console\/configMgr\/org.apache.sling.event.jobs.QueueConfiguration@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingEventJobsQueueConfiguration 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingEventJobsQueueConfiguration MimeNoContent OrgApacheSlingEventJobsQueueConfigurationInfo accept
orgApacheSlingEventJobsQueueConfiguration  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.event.jobs.QueueConfiguration"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingEventJobsQueueConfiguration  
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueName where
  applyOptionalParam req (QueueName xs) =
    req `setQuery` toQuery ("queue.name", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueTopics where
  applyOptionalParam req (QueueTopics xs) =
    req `setQuery` toQueryColl MultiParamArray ("queue.topics", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueType where
  applyOptionalParam req (QueueType xs) =
    req `setQuery` toQuery ("queue.type", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueuePriority where
  applyOptionalParam req (QueuePriority xs) =
    req `setQuery` toQuery ("queue.priority", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueRetries where
  applyOptionalParam req (QueueRetries xs) =
    req `setQuery` toQuery ("queue.retries", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueRetrydelay where
  applyOptionalParam req (QueueRetrydelay xs) =
    req `setQuery` toQuery ("queue.retrydelay", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueMaxparallelDouble where
  applyOptionalParam req (QueueMaxparallelDouble xs) =
    req `setQuery` toQuery ("queue.maxparallel", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueKeepJobs where
  applyOptionalParam req (QueueKeepJobs xs) =
    req `setQuery` toQuery ("queue.keepJobs", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueuePreferRunOnCreationInstance where
  applyOptionalParam req (QueuePreferRunOnCreationInstance xs) =
    req `setQuery` toQuery ("queue.preferRunOnCreationInstance", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration QueueThreadPoolSize where
  applyOptionalParam req (QueueThreadPoolSize xs) =
    req `setQuery` toQuery ("queue.threadPoolSize", Just xs)
instance HasOptionalParam OrgApacheSlingEventJobsQueueConfiguration ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingEventJobsQueueConfiguration MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingEventJobsQueueConfiguration MimePlainText


-- *** orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW

-- | @POST \/system\/console\/configMgr\/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW MimeNoContent OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingWInfo accept
orgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.extensions.webconsolesecurityprovider.internal.SlingWebConsoleSecurityProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW  
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Users where
  applyOptionalParam req (Users xs) =
    req `setQuery` toQueryColl MultiParamArray ("users", Just xs)
instance HasOptionalParam OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW Groups where
  applyOptionalParam req (Groups xs) =
    req `setQuery` toQueryColl MultiParamArray ("groups", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingExtensionsWebconsolesecurityproviderInternalSlingW MimePlainText


-- *** orgApacheSlingFeatureflagsFeature

-- | @POST \/system\/console\/configMgr\/org.apache.sling.featureflags.Feature@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingFeatureflagsFeature 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingFeatureflagsFeature MimeNoContent OrgApacheSlingFeatureflagsFeatureInfo accept
orgApacheSlingFeatureflagsFeature  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.featureflags.Feature"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingFeatureflagsFeature  
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Description where
  applyOptionalParam req (Description xs) =
    req `setQuery` toQuery ("description", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsFeature Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingFeatureflagsFeature MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingFeatureflagsFeature MimePlainText


-- *** orgApacheSlingFeatureflagsImplConfiguredFeature

-- | @POST \/system\/console\/configMgr\/org.apache.sling.featureflags.impl.ConfiguredFeature@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingFeatureflagsImplConfiguredFeature 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingFeatureflagsImplConfiguredFeature MimeNoContent OrgApacheSlingFeatureflagsImplConfiguredFeatureInfo accept
orgApacheSlingFeatureflagsImplConfiguredFeature  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.featureflags.impl.ConfiguredFeature"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingFeatureflagsImplConfiguredFeature  
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Name where
  applyOptionalParam req (Name xs) =
    req `setQuery` toQuery ("name", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Description where
  applyOptionalParam req (Description xs) =
    req `setQuery` toQuery ("description", Just xs)
instance HasOptionalParam OrgApacheSlingFeatureflagsImplConfiguredFeature Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingFeatureflagsImplConfiguredFeature MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingFeatureflagsImplConfiguredFeature MimePlainText


-- *** orgApacheSlingHapiImplHApiUtilImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hapi.impl.HApiUtilImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHapiImplHApiUtilImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHapiImplHApiUtilImpl MimeNoContent OrgApacheSlingHapiImplHApiUtilImplInfo accept
orgApacheSlingHapiImplHApiUtilImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hapi.impl.HApiUtilImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHapiImplHApiUtilImpl  
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl OrgApacheSlingHapiToolsResourcetype where
  applyOptionalParam req (OrgApacheSlingHapiToolsResourcetype xs) =
    req `setQuery` toQuery ("org.apache.sling.hapi.tools.resourcetype", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl OrgApacheSlingHapiToolsCollectionresourcetype where
  applyOptionalParam req (OrgApacheSlingHapiToolsCollectionresourcetype xs) =
    req `setQuery` toQuery ("org.apache.sling.hapi.tools.collectionresourcetype", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl OrgApacheSlingHapiToolsSearchpaths where
  applyOptionalParam req (OrgApacheSlingHapiToolsSearchpaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.sling.hapi.tools.searchpaths", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl OrgApacheSlingHapiToolsExternalurl where
  applyOptionalParam req (OrgApacheSlingHapiToolsExternalurl xs) =
    req `setQuery` toQuery ("org.apache.sling.hapi.tools.externalurl", Just xs)
instance HasOptionalParam OrgApacheSlingHapiImplHApiUtilImpl OrgApacheSlingHapiToolsEnabled where
  applyOptionalParam req (OrgApacheSlingHapiToolsEnabled xs) =
    req `setQuery` toQuery ("org.apache.sling.hapi.tools.enabled", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHapiImplHApiUtilImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHapiImplHApiUtilImpl MimePlainText


-- *** orgApacheSlingHcCoreImplCompositeHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.CompositeHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplCompositeHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplCompositeHealthCheck MimeNoContent OrgApacheSlingHcCoreImplCompositeHealthCheckInfo accept
orgApacheSlingHcCoreImplCompositeHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.CompositeHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplCompositeHealthCheck  
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck FilterTags where
  applyOptionalParam req (FilterTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.tags", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplCompositeHealthCheck FilterCombineTagsWithOr where
  applyOptionalParam req (FilterCombineTagsWithOr xs) =
    req `setQuery` toQuery ("filter.combineTagsWithOr", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplCompositeHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplCompositeHealthCheck MimePlainText


-- *** orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl MimeNoContent OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImplInfo accept
orgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.executor.HealthCheckExecutorImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl  
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl TimeoutInMs where
  applyOptionalParam req (TimeoutInMs xs) =
    req `setQuery` toQuery ("timeoutInMs", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl LongRunningFutureThresholdForCriticalMs where
  applyOptionalParam req (LongRunningFutureThresholdForCriticalMs xs) =
    req `setQuery` toQuery ("longRunningFutureThresholdForCriticalMs", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl ResultCacheTtlInMs where
  applyOptionalParam req (ResultCacheTtlInMs xs) =
    req `setQuery` toQuery ("resultCacheTtlInMs", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplExecutorHealthCheckExecutorImpl MimePlainText


-- *** orgApacheSlingHcCoreImplJmxAttributeHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplJmxAttributeHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplJmxAttributeHealthCheck MimeNoContent OrgApacheSlingHcCoreImplJmxAttributeHealthCheckInfo accept
orgApacheSlingHcCoreImplJmxAttributeHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.JmxAttributeHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplJmxAttributeHealthCheck  
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck MbeanName where
  applyOptionalParam req (MbeanName xs) =
    req `setQuery` toQuery ("mbean.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck AttributeName where
  applyOptionalParam req (AttributeName xs) =
    req `setQuery` toQuery ("attribute.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplJmxAttributeHealthCheck AttributeValueConstraint where
  applyOptionalParam req (AttributeValueConstraint xs) =
    req `setQuery` toQuery ("attribute.value.constraint", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplJmxAttributeHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplJmxAttributeHealthCheck MimePlainText


-- *** orgApacheSlingHcCoreImplScriptableHealthCheck

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.ScriptableHealthCheck@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplScriptableHealthCheck 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplScriptableHealthCheck MimeNoContent OrgApacheSlingHcCoreImplScriptableHealthCheckInfo accept
orgApacheSlingHcCoreImplScriptableHealthCheck  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.ScriptableHealthCheck"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplScriptableHealthCheck  
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck HcName where
  applyOptionalParam req (HcName xs) =
    req `setQuery` toQuery ("hc.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck HcTags where
  applyOptionalParam req (HcTags xs) =
    req `setQuery` toQueryColl MultiParamArray ("hc.tags", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck HcMbeanName where
  applyOptionalParam req (HcMbeanName xs) =
    req `setQuery` toQuery ("hc.mbean.name", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck Expression where
  applyOptionalParam req (Expression xs) =
    req `setQuery` toQuery ("expression", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplScriptableHealthCheck LanguageExtension where
  applyOptionalParam req (LanguageExtension xs) =
    req `setQuery` toQuery ("language.extension", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplScriptableHealthCheck MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplScriptableHealthCheck MimePlainText


-- *** orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet MimeNoContent OrgApacheSlingHcCoreImplServletHealthCheckExecutorServletInfo accept
orgApacheSlingHcCoreImplServletHealthCheckExecutorServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.HealthCheckExecutorServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet  
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet ServletPath where
  applyOptionalParam req (ServletPath xs) =
    req `setQuery` toQuery ("servletPath", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet Disabled where
  applyOptionalParam req (Disabled xs) =
    req `setQuery` toQuery ("disabled", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet CorsAccessControlAllowOrigin where
  applyOptionalParam req (CorsAccessControlAllowOrigin xs) =
    req `setQuery` toQuery ("cors.accessControlAllowOrigin", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplServletHealthCheckExecutorServlet MimePlainText


-- *** orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer

-- | @POST \/system\/console\/configMgr\/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer MimeNoContent OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializerInfo accept
orgApacheSlingHcCoreImplServletResultTxtVerboseSerializer  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.hc.core.impl.servlet.ResultTxtVerboseSerializer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer  
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer TotalWidth where
  applyOptionalParam req (TotalWidth xs) =
    req `setQuery` toQuery ("totalWidth", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer ColWidthName where
  applyOptionalParam req (ColWidthName xs) =
    req `setQuery` toQuery ("colWidthName", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer ColWidthResult where
  applyOptionalParam req (ColWidthResult xs) =
    req `setQuery` toQuery ("colWidthResult", Just xs)
instance HasOptionalParam OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer ColWidthTiming where
  applyOptionalParam req (ColWidthTiming xs) =
    req `setQuery` toQuery ("colWidthTiming", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingHcCoreImplServletResultTxtVerboseSerializer MimePlainText


-- *** orgApacheSlingI18nImplI18NFilter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.i18n.impl.I18NFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingI18nImplI18NFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingI18nImplI18NFilter MimeNoContent OrgApacheSlingI18nImplI18NFilterInfo accept
orgApacheSlingI18nImplI18NFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.i18n.impl.I18NFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingI18nImplI18NFilter  
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplI18NFilter SlingFilterScope where
  applyOptionalParam req (SlingFilterScope xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.filter.scope", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingI18nImplI18NFilter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingI18nImplI18NFilter MimePlainText


-- *** orgApacheSlingI18nImplJcrResourceBundleProvider

-- | @POST \/system\/console\/configMgr\/org.apache.sling.i18n.impl.JcrResourceBundleProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingI18nImplJcrResourceBundleProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingI18nImplJcrResourceBundleProvider MimeNoContent OrgApacheSlingI18nImplJcrResourceBundleProviderInfo accept
orgApacheSlingI18nImplJcrResourceBundleProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.i18n.impl.JcrResourceBundleProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingI18nImplJcrResourceBundleProvider  
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider LocaleDefault where
  applyOptionalParam req (LocaleDefault xs) =
    req `setQuery` toQuery ("locale.default", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider PreloadBundles where
  applyOptionalParam req (PreloadBundles xs) =
    req `setQuery` toQuery ("preload.bundles", Just xs)
instance HasOptionalParam OrgApacheSlingI18nImplJcrResourceBundleProvider InvalidationDelay where
  applyOptionalParam req (InvalidationDelay xs) =
    req `setQuery` toQuery ("invalidation.delay", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingI18nImplJcrResourceBundleProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingI18nImplJcrResourceBundleProvider MimePlainText


-- *** orgApacheSlingInstallerProviderJcrImplJcrInstaller

-- | @POST \/system\/console\/configMgr\/org.apache.sling.installer.provider.jcr.impl.JcrInstaller@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingInstallerProviderJcrImplJcrInstaller 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingInstallerProviderJcrImplJcrInstaller MimeNoContent OrgApacheSlingInstallerProviderJcrImplJcrInstallerInfo accept
orgApacheSlingInstallerProviderJcrImplJcrInstaller  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.installer.provider.jcr.impl.JcrInstaller"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingInstallerProviderJcrImplJcrInstaller  
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller HandlerSchemes where
  applyOptionalParam req (HandlerSchemes xs) =
    req `setQuery` toQueryColl MultiParamArray ("handler.schemes", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallFolderNameRegexp where
  applyOptionalParam req (SlingJcrinstallFolderNameRegexp xs) =
    req `setQuery` toQuery ("sling.jcrinstall.folder.name.regexp", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallFolderMaxDepth where
  applyOptionalParam req (SlingJcrinstallFolderMaxDepth xs) =
    req `setQuery` toQuery ("sling.jcrinstall.folder.max.depth", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallSearchPath where
  applyOptionalParam req (SlingJcrinstallSearchPath xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.jcrinstall.search.path", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallNewConfigPath where
  applyOptionalParam req (SlingJcrinstallNewConfigPath xs) =
    req `setQuery` toQuery ("sling.jcrinstall.new.config.path", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallSignalPath where
  applyOptionalParam req (SlingJcrinstallSignalPath xs) =
    req `setQuery` toQuery ("sling.jcrinstall.signal.path", Just xs)
instance HasOptionalParam OrgApacheSlingInstallerProviderJcrImplJcrInstaller SlingJcrinstallEnableWriteback where
  applyOptionalParam req (SlingJcrinstallEnableWriteback xs) =
    req `setQuery` toQuery ("sling.jcrinstall.enable.writeback", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingInstallerProviderJcrImplJcrInstaller MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingInstallerProviderJcrImplJcrInstaller MimePlainText


-- *** orgApacheSlingJcrBaseInternalLoginAdminWhitelist

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.base.internal.LoginAdminWhitelist@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrBaseInternalLoginAdminWhitelist 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrBaseInternalLoginAdminWhitelist MimeNoContent OrgApacheSlingJcrBaseInternalLoginAdminWhitelistInfo accept
orgApacheSlingJcrBaseInternalLoginAdminWhitelist  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrBaseInternalLoginAdminWhitelist  
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist WhitelistBypass where
  applyOptionalParam req (WhitelistBypass xs) =
    req `setQuery` toQuery ("whitelist.bypass", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelist WhitelistBundlesRegexp where
  applyOptionalParam req (WhitelistBundlesRegexp xs) =
    req `setQuery` toQuery ("whitelist.bundles.regexp", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrBaseInternalLoginAdminWhitelist MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrBaseInternalLoginAdminWhitelist MimePlainText


-- *** orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment MimeNoContent OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragmentInfo accept
orgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.base.internal.LoginAdminWhitelist.fragment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment  
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment WhitelistName where
  applyOptionalParam req (WhitelistName xs) =
    req `setQuery` toQuery ("whitelist.name", Just xs)
instance HasOptionalParam OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment WhitelistBundles where
  applyOptionalParam req (WhitelistBundles xs) =
    req `setQuery` toQueryColl MultiParamArray ("whitelist.bundles", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrBaseInternalLoginAdminWhitelistFragment MimePlainText


-- *** orgApacheSlingJcrDavexImplServletsSlingDavExServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrDavexImplServletsSlingDavExServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrDavexImplServletsSlingDavExServlet MimeNoContent OrgApacheSlingJcrDavexImplServletsSlingDavExServletInfo accept
orgApacheSlingJcrDavexImplServletsSlingDavExServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrDavexImplServletsSlingDavExServlet  
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet Alias where
  applyOptionalParam req (Alias xs) =
    req `setQuery` toQuery ("alias", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet DavCreateAbsoluteUri where
  applyOptionalParam req (DavCreateAbsoluteUri xs) =
    req `setQuery` toQuery ("dav.create-absolute-uri", Just xs)
instance HasOptionalParam OrgApacheSlingJcrDavexImplServletsSlingDavExServlet DavProtectedhandlers where
  applyOptionalParam req (DavProtectedhandlers xs) =
    req `setQuery` toQuery ("dav.protectedhandlers", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrDavexImplServletsSlingDavExServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrDavexImplServletsSlingDavExServlet MimePlainText


-- *** orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport MimeNoContent OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupportInfo accept
orgApacheSlingJcrJackrabbitServerJndiRegistrationSupport  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.JndiRegistrationSupport"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport  
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport JavaNamingFactoryInitial where
  applyOptionalParam req (JavaNamingFactoryInitial xs) =
    req `setQuery` toQuery ("java.naming.factory.initial", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport JavaNamingProviderUrl where
  applyOptionalParam req (JavaNamingProviderUrl xs) =
    req `setQuery` toQuery ("java.naming.provider.url", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrJackrabbitServerJndiRegistrationSupport MimePlainText


-- *** orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport MimeNoContent OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupportInfo accept
orgApacheSlingJcrJackrabbitServerRmiRegistrationSupport  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.jackrabbit.server.RmiRegistrationSupport"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport  
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport Port where
  applyOptionalParam req (Port xs) =
    req `setQuery` toQuery ("port", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrJackrabbitServerRmiRegistrationSupport MimePlainText


-- *** orgApacheSlingJcrRepoinitImplRepositoryInitializer

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrRepoinitImplRepositoryInitializer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrRepoinitImplRepositoryInitializer MimeNoContent OrgApacheSlingJcrRepoinitImplRepositoryInitializerInfo accept
orgApacheSlingJcrRepoinitImplRepositoryInitializer  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.repoinit.impl.RepositoryInitializer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrRepoinitImplRepositoryInitializer  
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitImplRepositoryInitializer References where
  applyOptionalParam req (References xs) =
    req `setQuery` toQueryColl MultiParamArray ("references", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrRepoinitImplRepositoryInitializer MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrRepoinitImplRepositoryInitializer MimePlainText


-- *** orgApacheSlingJcrRepoinitRepositoryInitializer

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.repoinit.RepositoryInitializer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrRepoinitRepositoryInitializer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrRepoinitRepositoryInitializer MimeNoContent OrgApacheSlingJcrRepoinitRepositoryInitializerInfo accept
orgApacheSlingJcrRepoinitRepositoryInitializer  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.repoinit.RepositoryInitializer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrRepoinitRepositoryInitializer  
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer References where
  applyOptionalParam req (References xs) =
    req `setQuery` toQueryColl MultiParamArray ("references", Just xs)
instance HasOptionalParam OrgApacheSlingJcrRepoinitRepositoryInitializer Scripts where
  applyOptionalParam req (Scripts xs) =
    req `setQuery` toQueryColl MultiParamArray ("scripts", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrRepoinitRepositoryInitializer MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrRepoinitRepositoryInitializer MimePlainText


-- *** orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl MimeNoContent OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImplInfo accept
orgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrResourceResolverFactoryImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl  
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverSearchpath where
  applyOptionalParam req (ResourceResolverSearchpath xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.searchpath", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverManglenamespaces where
  applyOptionalParam req (ResourceResolverManglenamespaces xs) =
    req `setQuery` toQuery ("resource.resolver.manglenamespaces", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverAllowDirect where
  applyOptionalParam req (ResourceResolverAllowDirect xs) =
    req `setQuery` toQuery ("resource.resolver.allowDirect", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverRequiredProviders where
  applyOptionalParam req (ResourceResolverRequiredProviders xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.required.providers", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverRequiredProvidernames where
  applyOptionalParam req (ResourceResolverRequiredProvidernames xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.required.providernames", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVirtual where
  applyOptionalParam req (ResourceResolverVirtual xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.virtual", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverMapping where
  applyOptionalParam req (ResourceResolverMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.mapping", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverMapLocation where
  applyOptionalParam req (ResourceResolverMapLocation xs) =
    req `setQuery` toQuery ("resource.resolver.map.location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverMapObservation where
  applyOptionalParam req (ResourceResolverMapObservation xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.map.observation", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverDefaultVanityRedirectStatus where
  applyOptionalParam req (ResourceResolverDefaultVanityRedirectStatus xs) =
    req `setQuery` toQuery ("resource.resolver.default.vanity.redirect.status", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverEnableVanitypath where
  applyOptionalParam req (ResourceResolverEnableVanitypath xs) =
    req `setQuery` toQuery ("resource.resolver.enable.vanitypath", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanitypathMaxEntries where
  applyOptionalParam req (ResourceResolverVanitypathMaxEntries xs) =
    req `setQuery` toQuery ("resource.resolver.vanitypath.maxEntries", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanitypathMaxEntriesStartup where
  applyOptionalParam req (ResourceResolverVanitypathMaxEntriesStartup xs) =
    req `setQuery` toQuery ("resource.resolver.vanitypath.maxEntries.startup", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanitypathBloomfilterMaxBytes where
  applyOptionalParam req (ResourceResolverVanitypathBloomfilterMaxBytes xs) =
    req `setQuery` toQuery ("resource.resolver.vanitypath.bloomfilter.maxBytes", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverOptimizeAliasResolution where
  applyOptionalParam req (ResourceResolverOptimizeAliasResolution xs) =
    req `setQuery` toQuery ("resource.resolver.optimize.alias.resolution", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanitypathWhitelist where
  applyOptionalParam req (ResourceResolverVanitypathWhitelist xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.vanitypath.whitelist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanitypathBlacklist where
  applyOptionalParam req (ResourceResolverVanitypathBlacklist xs) =
    req `setQuery` toQueryColl MultiParamArray ("resource.resolver.vanitypath.blacklist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverVanityPrecedence where
  applyOptionalParam req (ResourceResolverVanityPrecedence xs) =
    req `setQuery` toQuery ("resource.resolver.vanity.precedence", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverProviderhandlingParanoid where
  applyOptionalParam req (ResourceResolverProviderhandlingParanoid xs) =
    req `setQuery` toQuery ("resource.resolver.providerhandling.paranoid", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverLogClosing where
  applyOptionalParam req (ResourceResolverLogClosing xs) =
    req `setQuery` toQuery ("resource.resolver.log.closing", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl ResourceResolverLogUnclosed where
  applyOptionalParam req (ResourceResolverLogUnclosed xs) =
    req `setQuery` toQuery ("resource.resolver.log.unclosed", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrResourceInternalJcrResourceResolverFactoryImpl MimePlainText


-- *** orgApacheSlingJcrResourceInternalJcrSystemUserValidator

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrResourceInternalJcrSystemUserValidator 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrResourceInternalJcrSystemUserValidator MimeNoContent OrgApacheSlingJcrResourceInternalJcrSystemUserValidatorInfo accept
orgApacheSlingJcrResourceInternalJcrSystemUserValidator  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.resource.internal.JcrSystemUserValidator"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrResourceInternalJcrSystemUserValidator  
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourceInternalJcrSystemUserValidator AllowOnlySystemUser where
  applyOptionalParam req (AllowOnlySystemUser xs) =
    req `setQuery` toQuery ("allow.only.system.user", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrResourceInternalJcrSystemUserValidator MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrResourceInternalJcrSystemUserValidator MimePlainText


-- *** orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory MimeNoContent OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactoryInfo accept
orgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.resourcesecurity.impl.ResourceAccessGateFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory  
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory CheckpathPrefix where
  applyOptionalParam req (CheckpathPrefix xs) =
    req `setQuery` toQuery ("checkpath.prefix", Just xs)
instance HasOptionalParam OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory JcrPath where
  applyOptionalParam req (JcrPath xs) =
    req `setQuery` toQuery ("jcrPath", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrResourcesecurityImplResourceAccessGateFactory MimePlainText


-- *** orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService MimeNoContent OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerServiceInfo accept
orgApacheSlingJcrWebdavImplHandlerDefaultHandlerService  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DefaultHandlerService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService  
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService TypeCollections where
  applyOptionalParam req (TypeCollections xs) =
    req `setQuery` toQuery ("type.collections", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService TypeNoncollections where
  applyOptionalParam req (TypeNoncollections xs) =
    req `setQuery` toQuery ("type.noncollections", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService TypeContent where
  applyOptionalParam req (TypeContent xs) =
    req `setQuery` toQuery ("type.content", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrWebdavImplHandlerDefaultHandlerService MimePlainText


-- *** orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic MimeNoContent OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServicInfo accept
orgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.handler.DirListingExportHandlerService"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic  
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrWebdavImplHandlerDirListingExportHandlerServic MimePlainText


-- *** orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet MimeNoContent OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServletInfo accept
orgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jcr.webdav.impl.servlets.SimpleWebDavServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet  
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet DavRoot where
  applyOptionalParam req (DavRoot xs) =
    req `setQuery` toQuery ("dav.root", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet DavCreateAbsoluteUri where
  applyOptionalParam req (DavCreateAbsoluteUri xs) =
    req `setQuery` toQuery ("dav.create-absolute-uri", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet DavRealm where
  applyOptionalParam req (DavRealm xs) =
    req `setQuery` toQuery ("dav.realm", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet CollectionTypes where
  applyOptionalParam req (CollectionTypes xs) =
    req `setQuery` toQueryColl MultiParamArray ("collection.types", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet FilterPrefixes where
  applyOptionalParam req (FilterPrefixes xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.prefixes", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet FilterTypes where
  applyOptionalParam req (FilterTypes xs) =
    req `setQuery` toQuery ("filter.types", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet FilterUris where
  applyOptionalParam req (FilterUris xs) =
    req `setQuery` toQuery ("filter.uris", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet TypeCollections where
  applyOptionalParam req (TypeCollections xs) =
    req `setQuery` toQuery ("type.collections", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet TypeNoncollections where
  applyOptionalParam req (TypeNoncollections xs) =
    req `setQuery` toQuery ("type.noncollections", Just xs)
instance HasOptionalParam OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet TypeContent where
  applyOptionalParam req (TypeContent xs) =
    req `setQuery` toQuery ("type.content", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJcrWebdavImplServletsSimpleWebDavServlet MimePlainText


-- *** orgApacheSlingJmxProviderImplJMXResourceProvider

-- | @POST \/system\/console\/configMgr\/org.apache.sling.jmx.provider.impl.JMXResourceProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingJmxProviderImplJMXResourceProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingJmxProviderImplJMXResourceProvider MimeNoContent OrgApacheSlingJmxProviderImplJMXResourceProviderInfo accept
orgApacheSlingJmxProviderImplJMXResourceProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.jmx.provider.impl.JMXResourceProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingJmxProviderImplJMXResourceProvider  
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingJmxProviderImplJMXResourceProvider ProviderRoots where
  applyOptionalParam req (ProviderRoots xs) =
    req `setQuery` toQuery ("provider.roots", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingJmxProviderImplJMXResourceProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingJmxProviderImplJMXResourceProvider MimePlainText


-- *** orgApacheSlingModelsImplModelAdapterFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.models.impl.ModelAdapterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingModelsImplModelAdapterFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingModelsImplModelAdapterFactory MimeNoContent OrgApacheSlingModelsImplModelAdapterFactoryInfo accept
orgApacheSlingModelsImplModelAdapterFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.models.impl.ModelAdapterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingModelsImplModelAdapterFactory  
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory OsgiHttpWhiteboardListener where
  applyOptionalParam req (OsgiHttpWhiteboardListener xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.listener", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory OsgiHttpWhiteboardContextSelect where
  applyOptionalParam req (OsgiHttpWhiteboardContextSelect xs) =
    req `setQuery` toQuery ("osgi.http.whiteboard.context.select", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory MaxRecursionDepth where
  applyOptionalParam req (MaxRecursionDepth xs) =
    req `setQuery` toQuery ("max.recursion.depth", Just xs)
instance HasOptionalParam OrgApacheSlingModelsImplModelAdapterFactory CleanupJobPeriod where
  applyOptionalParam req (CleanupJobPeriod xs) =
    req `setQuery` toQuery ("cleanup.job.period", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingModelsImplModelAdapterFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingModelsImplModelAdapterFactory MimePlainText


-- *** orgApacheSlingModelsJacksonexporterImplResourceModuleProvider

-- | @POST \/system\/console\/configMgr\/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingModelsJacksonexporterImplResourceModuleProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider MimeNoContent OrgApacheSlingModelsJacksonexporterImplResourceModuleProviderInfo accept
orgApacheSlingModelsJacksonexporterImplResourceModuleProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.models.jacksonexporter.impl.ResourceModuleProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider  
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider MaxRecursionLevels where
  applyOptionalParam req (MaxRecursionLevels xs) =
    req `setQuery` toQuery ("max.recursion.levels", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingModelsJacksonexporterImplResourceModuleProvider MimePlainText


-- *** orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto

-- | @POST \/system\/console\/configMgr\/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto MimeNoContent OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFactoInfo accept
orgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.resource.inventory.impl.ResourceInventoryPrinterFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto  
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto FelixInventoryPrinterName where
  applyOptionalParam req (FelixInventoryPrinterName xs) =
    req `setQuery` toQuery ("felix.inventory.printer.name", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto FelixInventoryPrinterTitle where
  applyOptionalParam req (FelixInventoryPrinterTitle xs) =
    req `setQuery` toQuery ("felix.inventory.printer.title", Just xs)
instance HasOptionalParam OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto PathText where
  applyOptionalParam req (PathText xs) =
    req `setQuery` toQuery ("path", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingResourceInventoryImplResourceInventoryPrinterFacto MimePlainText


-- *** orgApacheSlingResourcemergerImplMergedResourceProviderFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingResourcemergerImplMergedResourceProviderFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingResourcemergerImplMergedResourceProviderFactory MimeNoContent OrgApacheSlingResourcemergerImplMergedResourceProviderFactoryInfo accept
orgApacheSlingResourcemergerImplMergedResourceProviderFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.resourcemerger.impl.MergedResourceProviderFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingResourcemergerImplMergedResourceProviderFactory  
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory MergeRoot where
  applyOptionalParam req (MergeRoot xs) =
    req `setQuery` toQuery ("merge.root", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerImplMergedResourceProviderFactory MergeReadOnly where
  applyOptionalParam req (MergeReadOnly xs) =
    req `setQuery` toQuery ("merge.readOnly", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingResourcemergerImplMergedResourceProviderFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingResourcemergerImplMergedResourceProviderFactory MimePlainText


-- *** orgApacheSlingResourcemergerPickerOverriding

-- | @POST \/system\/console\/configMgr\/org.apache.sling.resourcemerger.picker.overriding@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingResourcemergerPickerOverriding 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingResourcemergerPickerOverriding MimeNoContent OrgApacheSlingResourcemergerPickerOverridingInfo accept
orgApacheSlingResourcemergerPickerOverriding  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.resourcemerger.picker.overriding"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingResourcemergerPickerOverriding  
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding MergeRoot where
  applyOptionalParam req (MergeRoot xs) =
    req `setQuery` toQuery ("merge.root", Just xs)
instance HasOptionalParam OrgApacheSlingResourcemergerPickerOverriding MergeReadOnly where
  applyOptionalParam req (MergeReadOnly xs) =
    req `setQuery` toQuery ("merge.readOnly", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingResourcemergerPickerOverriding MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingResourcemergerPickerOverriding MimePlainText


-- *** orgApacheSlingScriptingCoreImplScriptCacheImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.core.impl.ScriptCacheImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingCoreImplScriptCacheImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingCoreImplScriptCacheImpl MimeNoContent OrgApacheSlingScriptingCoreImplScriptCacheImplInfo accept
orgApacheSlingScriptingCoreImplScriptCacheImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptCacheImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingCoreImplScriptCacheImpl  
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl OrgApacheSlingScriptingCacheSize where
  applyOptionalParam req (OrgApacheSlingScriptingCacheSize xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.cache.size", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptCacheImpl OrgApacheSlingScriptingCacheAdditionalExtensions where
  applyOptionalParam req (OrgApacheSlingScriptingCacheAdditionalExtensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.sling.scripting.cache.additional_extensions", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingCoreImplScriptCacheImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingCoreImplScriptCacheImpl MimePlainText


-- *** orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider MimeNoContent OrgApacheSlingScriptingCoreImplScriptingResourceResolverProviderInfo accept
orgApacheSlingScriptingCoreImplScriptingResourceResolverProvider  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.core.impl.ScriptingResourceResolverProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider  
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider LogStacktraceOnclose where
  applyOptionalParam req (LogStacktraceOnclose xs) =
    req `setQuery` toQuery ("log.stacktrace.onclose", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingCoreImplScriptingResourceResolverProvider MimePlainText


-- *** orgApacheSlingScriptingJavaImplJavaScriptEngineFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingJavaImplJavaScriptEngineFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory MimeNoContent OrgApacheSlingScriptingJavaImplJavaScriptEngineFactoryInfo accept
orgApacheSlingScriptingJavaImplJavaScriptEngineFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.java.impl.JavaScriptEngineFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory  
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory JavaClassdebuginfo where
  applyOptionalParam req (JavaClassdebuginfo xs) =
    req `setQuery` toQuery ("java.classdebuginfo", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory JavaJavaEncoding where
  applyOptionalParam req (JavaJavaEncoding xs) =
    req `setQuery` toQuery ("java.javaEncoding", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory JavaCompilerSourceVm where
  applyOptionalParam req (JavaCompilerSourceVm xs) =
    req `setQuery` toQuery ("java.compilerSourceVM", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory JavaCompilerTargetVm where
  applyOptionalParam req (JavaCompilerTargetVm xs) =
    req `setQuery` toQuery ("java.compilerTargetVM", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingJavaImplJavaScriptEngineFactory MimePlainText


-- *** orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa MimeNoContent OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFaInfo accept
orgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.javascript.internal.RhinoJavaScriptEngineFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa  
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa OrgApacheSlingScriptingJavascriptRhinoOptLevel where
  applyOptionalParam req (OrgApacheSlingScriptingJavascriptRhinoOptLevel xs) =
    req `setQuery` toQuery ("org.apache.sling.scripting.javascript.rhino.optLevel", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingJavascriptInternalRhinoJavaScriptEngineFa MimePlainText


-- *** orgApacheSlingScriptingJspJspScriptEngineFactory

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.jsp.JspScriptEngineFactory@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingJspJspScriptEngineFactory 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingJspJspScriptEngineFactory MimeNoContent OrgApacheSlingScriptingJspJspScriptEngineFactoryInfo accept
orgApacheSlingScriptingJspJspScriptEngineFactory  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.jsp.JspScriptEngineFactory"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingJspJspScriptEngineFactory  
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperCompilerTargetVm where
  applyOptionalParam req (JasperCompilerTargetVm xs) =
    req `setQuery` toQuery ("jasper.compilerTargetVM", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperCompilerSourceVm where
  applyOptionalParam req (JasperCompilerSourceVm xs) =
    req `setQuery` toQuery ("jasper.compilerSourceVM", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperClassdebuginfo where
  applyOptionalParam req (JasperClassdebuginfo xs) =
    req `setQuery` toQuery ("jasper.classdebuginfo", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperEnablePooling where
  applyOptionalParam req (JasperEnablePooling xs) =
    req `setQuery` toQuery ("jasper.enablePooling", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperIeClassId where
  applyOptionalParam req (JasperIeClassId xs) =
    req `setQuery` toQuery ("jasper.ieClassId", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperGenStringAsCharArray where
  applyOptionalParam req (JasperGenStringAsCharArray xs) =
    req `setQuery` toQuery ("jasper.genStringAsCharArray", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperKeepgenerated where
  applyOptionalParam req (JasperKeepgenerated xs) =
    req `setQuery` toQuery ("jasper.keepgenerated", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperMappedfile where
  applyOptionalParam req (JasperMappedfile xs) =
    req `setQuery` toQuery ("jasper.mappedfile", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperTrimSpaces where
  applyOptionalParam req (JasperTrimSpaces xs) =
    req `setQuery` toQuery ("jasper.trimSpaces", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory JasperDisplaySourceFragments where
  applyOptionalParam req (JasperDisplaySourceFragments xs) =
    req `setQuery` toQuery ("jasper.displaySourceFragments", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingJspJspScriptEngineFactory DefaultIsSession where
  applyOptionalParam req (DefaultIsSession xs) =
    req `setQuery` toQuery ("default.is.session", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingJspJspScriptEngineFactory MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingJspJspScriptEngineFactory MimePlainText


-- *** orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv

-- | @POST \/system\/console\/configMgr\/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv MimeNoContent OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProvInfo accept
orgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.scripting.sightly.js.impl.jsapi.SlyBindingsValuesProvider"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv  
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv OrgApacheSlingScriptingSightlyJsBindings where
  applyOptionalParam req (OrgApacheSlingScriptingSightlyJsBindings xs) =
    req `setQuery` toQueryColl MultiParamArray ("org.apache.sling.scripting.sightly.js.bindings", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingScriptingSightlyJsImplJsapiSlyBindingsValuesProv MimePlainText


-- *** orgApacheSlingSecurityImplContentDispositionFilter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.security.impl.ContentDispositionFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingSecurityImplContentDispositionFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingSecurityImplContentDispositionFilter MimeNoContent OrgApacheSlingSecurityImplContentDispositionFilterInfo accept
orgApacheSlingSecurityImplContentDispositionFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.security.impl.ContentDispositionFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingSecurityImplContentDispositionFilter  
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter SlingContentDispositionPaths where
  applyOptionalParam req (SlingContentDispositionPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.content.disposition.paths", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter SlingContentDispositionExcludedPaths where
  applyOptionalParam req (SlingContentDispositionExcludedPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.content.disposition.excluded.paths", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplContentDispositionFilter SlingContentDispositionAllPaths where
  applyOptionalParam req (SlingContentDispositionAllPaths xs) =
    req `setQuery` toQuery ("sling.content.disposition.all.paths", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingSecurityImplContentDispositionFilter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingSecurityImplContentDispositionFilter MimePlainText


-- *** orgApacheSlingSecurityImplReferrerFilter

-- | @POST \/system\/console\/configMgr\/org.apache.sling.security.impl.ReferrerFilter@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingSecurityImplReferrerFilter 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingSecurityImplReferrerFilter MimeNoContent OrgApacheSlingSecurityImplReferrerFilterInfo accept
orgApacheSlingSecurityImplReferrerFilter  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.security.impl.ReferrerFilter"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingSecurityImplReferrerFilter  
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter AllowEmpty where
  applyOptionalParam req (AllowEmpty xs) =
    req `setQuery` toQuery ("allow.empty", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter AllowHosts where
  applyOptionalParam req (AllowHosts xs) =
    req `setQuery` toQueryColl MultiParamArray ("allow.hosts", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter AllowHostsRegexp where
  applyOptionalParam req (AllowHostsRegexp xs) =
    req `setQuery` toQueryColl MultiParamArray ("allow.hosts.regexp", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter FilterMethods where
  applyOptionalParam req (FilterMethods xs) =
    req `setQuery` toQueryColl MultiParamArray ("filter.methods", Just xs)
instance HasOptionalParam OrgApacheSlingSecurityImplReferrerFilter ExcludeAgentsRegexp where
  applyOptionalParam req (ExcludeAgentsRegexp xs) =
    req `setQuery` toQueryColl MultiParamArray ("exclude.agents.regexp", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingSecurityImplReferrerFilter MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingSecurityImplReferrerFilter MimePlainText


-- *** orgApacheSlingServiceusermappingImplServiceUserMapperImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServiceusermappingImplServiceUserMapperImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServiceusermappingImplServiceUserMapperImpl MimeNoContent OrgApacheSlingServiceusermappingImplServiceUserMapperImplInfo accept
orgApacheSlingServiceusermappingImplServiceUserMapperImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServiceusermappingImplServiceUserMapperImpl  
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl UserMapping where
  applyOptionalParam req (UserMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("user.mapping", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl UserDefault where
  applyOptionalParam req (UserDefault xs) =
    req `setQuery` toQuery ("user.default", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl UserEnableDefaultMapping where
  applyOptionalParam req (UserEnableDefaultMapping xs) =
    req `setQuery` toQuery ("user.enable.default.mapping", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImpl RequireValidation where
  applyOptionalParam req (RequireValidation xs) =
    req `setQuery` toQuery ("require.validation", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServiceusermappingImplServiceUserMapperImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServiceusermappingImplServiceUserMapperImpl MimePlainText


-- *** orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended

-- | @POST \/system\/console\/configMgr\/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended MimeNoContent OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmendedInfo accept
orgApacheSlingServiceusermappingImplServiceUserMapperImplAmended  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended  
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended ServiceRanking where
  applyOptionalParam req (ServiceRanking xs) =
    req `setQuery` toQuery ("service.ranking", Just xs)
instance HasOptionalParam OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended UserMapping where
  applyOptionalParam req (UserMapping xs) =
    req `setQuery` toQueryColl MultiParamArray ("user.mapping", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServiceusermappingImplServiceUserMapperImplAmended MimePlainText


-- *** orgApacheSlingServletsGetDefaultGetServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.servlets.get.DefaultGetServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServletsGetDefaultGetServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServletsGetDefaultGetServlet MimeNoContent OrgApacheSlingServletsGetDefaultGetServletInfo accept
orgApacheSlingServletsGetDefaultGetServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.servlets.get.DefaultGetServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServletsGetDefaultGetServlet  
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Aliases where
  applyOptionalParam req (Aliases xs) =
    req `setQuery` toQueryColl MultiParamArray ("aliases", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet Index where
  applyOptionalParam req (Index xs) =
    req `setQuery` toQuery ("index", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet IndexFiles where
  applyOptionalParam req (IndexFiles xs) =
    req `setQuery` toQueryColl MultiParamArray ("index.files", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet EnableHtml where
  applyOptionalParam req (EnableHtml xs) =
    req `setQuery` toQuery ("enable.html", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet EnableJson where
  applyOptionalParam req (EnableJson xs) =
    req `setQuery` toQuery ("enable.json", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet EnableTxt where
  applyOptionalParam req (EnableTxt xs) =
    req `setQuery` toQuery ("enable.txt", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet EnableXml where
  applyOptionalParam req (EnableXml xs) =
    req `setQuery` toQuery ("enable.xml", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet JsonMaximumresults where
  applyOptionalParam req (JsonMaximumresults xs) =
    req `setQuery` toQuery ("json.maximumresults", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetDefaultGetServlet EcmaSuport where
  applyOptionalParam req (EcmaSuport xs) =
    req `setQuery` toQuery ("ecmaSuport", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServletsGetDefaultGetServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServletsGetDefaultGetServlet MimePlainText


-- *** orgApacheSlingServletsGetImplVersionVersionInfoServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.servlets.get.impl.version.VersionInfoServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServletsGetImplVersionVersionInfoServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServletsGetImplVersionVersionInfoServlet MimeNoContent OrgApacheSlingServletsGetImplVersionVersionInfoServletInfo accept
orgApacheSlingServletsGetImplVersionVersionInfoServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.servlets.get.impl.version.VersionInfoServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServletsGetImplVersionVersionInfoServlet  
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet SlingServletSelectors[Text] where
  applyOptionalParam req (SlingServletSelectors[Text] xs) =
    req `setQuery` toQueryColl MultiParamArray ("sling.servlet.selectors", Just xs)
instance HasOptionalParam OrgApacheSlingServletsGetImplVersionVersionInfoServlet EcmaSuport where
  applyOptionalParam req (EcmaSuport xs) =
    req `setQuery` toQuery ("ecmaSuport", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServletsGetImplVersionVersionInfoServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServletsGetImplVersionVersionInfoServlet MimePlainText


-- *** orgApacheSlingServletsPostImplHelperChunkCleanUpTask

-- | @POST \/system\/console\/configMgr\/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServletsPostImplHelperChunkCleanUpTask 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServletsPostImplHelperChunkCleanUpTask MimeNoContent OrgApacheSlingServletsPostImplHelperChunkCleanUpTaskInfo accept
orgApacheSlingServletsPostImplHelperChunkCleanUpTask  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.servlets.post.impl.helper.ChunkCleanUpTask"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServletsPostImplHelperChunkCleanUpTask  
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask SchedulerExpression where
  applyOptionalParam req (SchedulerExpression xs) =
    req `setQuery` toQuery ("scheduler.expression", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask SchedulerConcurrent where
  applyOptionalParam req (SchedulerConcurrent xs) =
    req `setQuery` toQuery ("scheduler.concurrent", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplHelperChunkCleanUpTask ChunkCleanupAge where
  applyOptionalParam req (ChunkCleanupAge xs) =
    req `setQuery` toQuery ("chunk.cleanup.age", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServletsPostImplHelperChunkCleanUpTask MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServletsPostImplHelperChunkCleanUpTask MimePlainText


-- *** orgApacheSlingServletsPostImplSlingPostServlet

-- | @POST \/system\/console\/configMgr\/org.apache.sling.servlets.post.impl.SlingPostServlet@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServletsPostImplSlingPostServlet 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServletsPostImplSlingPostServlet MimeNoContent OrgApacheSlingServletsPostImplSlingPostServletInfo accept
orgApacheSlingServletsPostImplSlingPostServlet  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.servlets.post.impl.SlingPostServlet"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServletsPostImplSlingPostServlet  
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostDateFormats where
  applyOptionalParam req (ServletPostDateFormats xs) =
    req `setQuery` toQueryColl MultiParamArray ("servlet.post.dateFormats", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostNodeNameHints where
  applyOptionalParam req (ServletPostNodeNameHints xs) =
    req `setQuery` toQueryColl MultiParamArray ("servlet.post.nodeNameHints", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostNodeNameMaxLength where
  applyOptionalParam req (ServletPostNodeNameMaxLength xs) =
    req `setQuery` toQuery ("servlet.post.nodeNameMaxLength", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostCheckinNewVersionableNodes where
  applyOptionalParam req (ServletPostCheckinNewVersionableNodes xs) =
    req `setQuery` toQuery ("servlet.post.checkinNewVersionableNodes", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostAutoCheckout where
  applyOptionalParam req (ServletPostAutoCheckout xs) =
    req `setQuery` toQuery ("servlet.post.autoCheckout", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostAutoCheckin where
  applyOptionalParam req (ServletPostAutoCheckin xs) =
    req `setQuery` toQuery ("servlet.post.autoCheckin", Just xs)
instance HasOptionalParam OrgApacheSlingServletsPostImplSlingPostServlet ServletPostIgnorePattern where
  applyOptionalParam req (ServletPostIgnorePattern xs) =
    req `setQuery` toQuery ("servlet.post.ignorePattern", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServletsPostImplSlingPostServlet MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServletsPostImplSlingPostServlet MimePlainText


-- *** orgApacheSlingServletsResolverSlingServletResolver

-- | @POST \/system\/console\/configMgr\/org.apache.sling.servlets.resolver.SlingServletResolver@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingServletsResolverSlingServletResolver 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingServletsResolverSlingServletResolver MimeNoContent OrgApacheSlingServletsResolverSlingServletResolverInfo accept
orgApacheSlingServletsResolverSlingServletResolver  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.servlets.resolver.SlingServletResolver"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingServletsResolverSlingServletResolver  
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver ServletresolverServletRoot where
  applyOptionalParam req (ServletresolverServletRoot xs) =
    req `setQuery` toQuery ("servletresolver.servletRoot", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver ServletresolverCacheSize where
  applyOptionalParam req (ServletresolverCacheSize xs) =
    req `setQuery` toQuery ("servletresolver.cacheSize", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver ServletresolverPaths where
  applyOptionalParam req (ServletresolverPaths xs) =
    req `setQuery` toQueryColl MultiParamArray ("servletresolver.paths", Just xs)
instance HasOptionalParam OrgApacheSlingServletsResolverSlingServletResolver ServletresolverDefaultExtensions where
  applyOptionalParam req (ServletresolverDefaultExtensions xs) =
    req `setQuery` toQueryColl MultiParamArray ("servletresolver.defaultExtensions", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingServletsResolverSlingServletResolver MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingServletsResolverSlingServletResolver MimePlainText


-- *** orgApacheSlingSettingsImplSlingSettingsServiceImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.settings.impl.SlingSettingsServiceImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingSettingsImplSlingSettingsServiceImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingSettingsImplSlingSettingsServiceImpl MimeNoContent OrgApacheSlingSettingsImplSlingSettingsServiceImplInfo accept
orgApacheSlingSettingsImplSlingSettingsServiceImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.settings.impl.SlingSettingsServiceImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingSettingsImplSlingSettingsServiceImpl  
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl SlingName where
  applyOptionalParam req (SlingName xs) =
    req `setQuery` toQuery ("sling.name", Just xs)
instance HasOptionalParam OrgApacheSlingSettingsImplSlingSettingsServiceImpl SlingDescription where
  applyOptionalParam req (SlingDescription xs) =
    req `setQuery` toQuery ("sling.description", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingSettingsImplSlingSettingsServiceImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingSettingsImplSlingSettingsServiceImpl MimePlainText


-- *** orgApacheSlingStartupfilterImplStartupFilterImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.startupfilter.impl.StartupFilterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingStartupfilterImplStartupFilterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingStartupfilterImplStartupFilterImpl MimeNoContent OrgApacheSlingStartupfilterImplStartupFilterImplInfo accept
orgApacheSlingStartupfilterImplStartupFilterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.startupfilter.impl.StartupFilterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingStartupfilterImplStartupFilterImpl  
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl ActiveByDefault where
  applyOptionalParam req (ActiveByDefault xs) =
    req `setQuery` toQuery ("active.by.default", Just xs)
instance HasOptionalParam OrgApacheSlingStartupfilterImplStartupFilterImpl DefaultMessage where
  applyOptionalParam req (DefaultMessage xs) =
    req `setQuery` toQuery ("default.message", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingStartupfilterImplStartupFilterImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingStartupfilterImplStartupFilterImpl MimePlainText


-- *** orgApacheSlingTenantInternalTenantProviderImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.tenant.internal.TenantProviderImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingTenantInternalTenantProviderImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingTenantInternalTenantProviderImpl MimeNoContent OrgApacheSlingTenantInternalTenantProviderImplInfo accept
orgApacheSlingTenantInternalTenantProviderImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.tenant.internal.TenantProviderImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingTenantInternalTenantProviderImpl  
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl TenantRoot where
  applyOptionalParam req (TenantRoot xs) =
    req `setQuery` toQuery ("tenant.root", Just xs)
instance HasOptionalParam OrgApacheSlingTenantInternalTenantProviderImpl TenantPathMatcher where
  applyOptionalParam req (TenantPathMatcher xs) =
    req `setQuery` toQueryColl MultiParamArray ("tenant.path.matcher", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingTenantInternalTenantProviderImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingTenantInternalTenantProviderImpl MimePlainText


-- *** orgApacheSlingTracerInternalLogTracer

-- | @POST \/system\/console\/configMgr\/org.apache.sling.tracer.internal.LogTracer@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingTracerInternalLogTracer 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingTracerInternalLogTracer MimeNoContent OrgApacheSlingTracerInternalLogTracerInfo accept
orgApacheSlingTracerInternalLogTracer  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.tracer.internal.LogTracer"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingTracerInternalLogTracer  
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer TracerSets where
  applyOptionalParam req (TracerSets xs) =
    req `setQuery` toQueryColl MultiParamArray ("tracerSets", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer Enabled where
  applyOptionalParam req (Enabled xs) =
    req `setQuery` toQuery ("enabled", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer ServletEnabled where
  applyOptionalParam req (ServletEnabled xs) =
    req `setQuery` toQuery ("servletEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer RecordingCacheSizeInMb where
  applyOptionalParam req (RecordingCacheSizeInMb xs) =
    req `setQuery` toQuery ("recordingCacheSizeInMB", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer RecordingCacheDurationInSecs where
  applyOptionalParam req (RecordingCacheDurationInSecs xs) =
    req `setQuery` toQuery ("recordingCacheDurationInSecs", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer RecordingCompressionEnabled where
  applyOptionalParam req (RecordingCompressionEnabled xs) =
    req `setQuery` toQuery ("recordingCompressionEnabled", Just xs)
instance HasOptionalParam OrgApacheSlingTracerInternalLogTracer GzipResponse where
  applyOptionalParam req (GzipResponse xs) =
    req `setQuery` toQuery ("gzipResponse", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingTracerInternalLogTracer MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingTracerInternalLogTracer MimePlainText


-- *** orgApacheSlingXssImplXSSFilterImpl

-- | @POST \/system\/console\/configMgr\/org.apache.sling.xss.impl.XSSFilterImpl@
-- 
-- AuthMethod: 'AuthBasicAemAuth'
-- 
orgApacheSlingXssImplXSSFilterImpl 
  :: Accept accept -- ^ request accept ('MimeType')
  -> AdobeExperienceManagerOSGIConfig(AEM)Request OrgApacheSlingXssImplXSSFilterImpl MimeNoContent OrgApacheSlingXssImplXSSFilterImplInfo accept
orgApacheSlingXssImplXSSFilterImpl  _ =
  _mkRequest "POST" ["/system/console/configMgr/org.apache.sling.xss.impl.XSSFilterImpl"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicAemAuth)

data OrgApacheSlingXssImplXSSFilterImpl  
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Post where
  applyOptionalParam req (Post xs) =
    req `setQuery` toQuery ("post", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Apply where
  applyOptionalParam req (Apply xs) =
    req `setQuery` toQuery ("apply", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Delete where
  applyOptionalParam req (Delete xs) =
    req `setQuery` toQuery ("delete", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Action where
  applyOptionalParam req (Action xs) =
    req `setQuery` toQuery ("action", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Location where
  applyOptionalParam req (Location xs) =
    req `setQuery` toQuery ("$location", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl Propertylist where
  applyOptionalParam req (Propertylist xs) =
    req `setQuery` toQueryColl CommaSeparated ("propertylist", Just xs)
instance HasOptionalParam OrgApacheSlingXssImplXSSFilterImpl PolicyPath where
  applyOptionalParam req (PolicyPath xs) =
    req `setQuery` toQuery ("policyPath", Just xs)

-- | @application/json@
instance Produces OrgApacheSlingXssImplXSSFilterImpl MimeJSON
-- | @text/plain@
instance Produces OrgApacheSlingXssImplXSSFilterImpl MimePlainText

