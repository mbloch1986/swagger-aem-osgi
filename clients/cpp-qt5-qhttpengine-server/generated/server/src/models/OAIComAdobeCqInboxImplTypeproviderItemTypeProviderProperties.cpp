/**
 * Adobe Experience Manager OSGI config (AEM) API
 * Swagger AEM OSGI is an OpenAPI specification for Adobe Experience Manager (AEM) OSGI Configurations API
 *
 * OpenAPI spec version: 1.0.0-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties(QString json) {
    this->fromJson(json);
}

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties() {
    this->init();
}

OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::~OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties() {
    
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::init() {
    m_inbox_impl_typeprovider_registrypaths_isSet = false;
    m_inbox_impl_typeprovider_legacypaths_isSet = false;
    m_inbox_impl_typeprovider_defaulturl_failureitem_isSet = false;
    m_inbox_impl_typeprovider_defaulturl_workitem_isSet = false;
    m_inbox_impl_typeprovider_defaulturl_task_isSet = false;
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(inbox_impl_typeprovider_registrypaths, json[QString("inbox.impl.typeprovider.registrypaths")]);
    
    ::OpenAPI::fromJsonValue(inbox_impl_typeprovider_legacypaths, json[QString("inbox.impl.typeprovider.legacypaths")]);
    
    ::OpenAPI::fromJsonValue(inbox_impl_typeprovider_defaulturl_failureitem, json[QString("inbox.impl.typeprovider.defaulturl.failureitem")]);
    
    ::OpenAPI::fromJsonValue(inbox_impl_typeprovider_defaulturl_workitem, json[QString("inbox.impl.typeprovider.defaulturl.workitem")]);
    
    ::OpenAPI::fromJsonValue(inbox_impl_typeprovider_defaulturl_task, json[QString("inbox.impl.typeprovider.defaulturl.task")]);
    
}

QString
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::asJsonObject() const {
    QJsonObject obj;
	if(inbox_impl_typeprovider_registrypaths.isSet()){
        obj.insert(QString("inbox.impl.typeprovider.registrypaths"), ::OpenAPI::toJsonValue(inbox_impl_typeprovider_registrypaths));
    }
	if(inbox_impl_typeprovider_legacypaths.isSet()){
        obj.insert(QString("inbox.impl.typeprovider.legacypaths"), ::OpenAPI::toJsonValue(inbox_impl_typeprovider_legacypaths));
    }
	if(inbox_impl_typeprovider_defaulturl_failureitem.isSet()){
        obj.insert(QString("inbox.impl.typeprovider.defaulturl.failureitem"), ::OpenAPI::toJsonValue(inbox_impl_typeprovider_defaulturl_failureitem));
    }
	if(inbox_impl_typeprovider_defaulturl_workitem.isSet()){
        obj.insert(QString("inbox.impl.typeprovider.defaulturl.workitem"), ::OpenAPI::toJsonValue(inbox_impl_typeprovider_defaulturl_workitem));
    }
	if(inbox_impl_typeprovider_defaulturl_task.isSet()){
        obj.insert(QString("inbox.impl.typeprovider.defaulturl.task"), ::OpenAPI::toJsonValue(inbox_impl_typeprovider_defaulturl_task));
    }
    return obj;
}

OAIConfigNodePropertyArray
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderRegistrypaths() const {
    return inbox_impl_typeprovider_registrypaths;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderRegistrypaths(const OAIConfigNodePropertyArray &inbox_impl_typeprovider_registrypaths) {
    this->inbox_impl_typeprovider_registrypaths = inbox_impl_typeprovider_registrypaths;
    this->m_inbox_impl_typeprovider_registrypaths_isSet = true;
}

OAIConfigNodePropertyArray
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderLegacypaths() const {
    return inbox_impl_typeprovider_legacypaths;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderLegacypaths(const OAIConfigNodePropertyArray &inbox_impl_typeprovider_legacypaths) {
    this->inbox_impl_typeprovider_legacypaths = inbox_impl_typeprovider_legacypaths;
    this->m_inbox_impl_typeprovider_legacypaths_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlFailureitem() const {
    return inbox_impl_typeprovider_defaulturl_failureitem;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlFailureitem(const OAIConfigNodePropertyString &inbox_impl_typeprovider_defaulturl_failureitem) {
    this->inbox_impl_typeprovider_defaulturl_failureitem = inbox_impl_typeprovider_defaulturl_failureitem;
    this->m_inbox_impl_typeprovider_defaulturl_failureitem_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlWorkitem() const {
    return inbox_impl_typeprovider_defaulturl_workitem;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlWorkitem(const OAIConfigNodePropertyString &inbox_impl_typeprovider_defaulturl_workitem) {
    this->inbox_impl_typeprovider_defaulturl_workitem = inbox_impl_typeprovider_defaulturl_workitem;
    this->m_inbox_impl_typeprovider_defaulturl_workitem_isSet = true;
}

OAIConfigNodePropertyString
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::getInboxImplTypeproviderDefaulturlTask() const {
    return inbox_impl_typeprovider_defaulturl_task;
}
void
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::setInboxImplTypeproviderDefaulturlTask(const OAIConfigNodePropertyString &inbox_impl_typeprovider_defaulturl_task) {
    this->inbox_impl_typeprovider_defaulturl_task = inbox_impl_typeprovider_defaulturl_task;
    this->m_inbox_impl_typeprovider_defaulturl_task_isSet = true;
}


bool
OAIComAdobeCqInboxImplTypeproviderItemTypeProviderProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(inbox_impl_typeprovider_registrypaths.isSet()){ isObjectUpdated = true; break;}
    
        if(inbox_impl_typeprovider_legacypaths.isSet()){ isObjectUpdated = true; break;}
    
        if(inbox_impl_typeprovider_defaulturl_failureitem.isSet()){ isObjectUpdated = true; break;}
    
        if(inbox_impl_typeprovider_defaulturl_workitem.isSet()){ isObjectUpdated = true; break;}
    
        if(inbox_impl_typeprovider_defaulturl_task.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

